{"version":3,"file":"134.98978099905be0e8.js","mappings":"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","sources":["./src/app/shared/guards/before-unload-guard.ts","./node_modules/rxjs/dist/esm/internal/operators/pairwise.js","./src/app/modules/item/http-services/get-breadcrumb.service.ts","./src/app/modules/item/http-services/get-results.service.ts","./src/app/modules/item/services/item-datasource.service.ts","./src/app/shared/operators/build-up.ts","./src/app/modules/item/pages/item-by-id/item-by-id.component.html","./src/app/modules/item/pages/item-by-id/item-by-id.component.ts","./src/app/modules/item/pages/item-by-id/item-route-validation.ts","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./node_modules/rxjs/dist/esm/internal/scheduler/performanceTimestampProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js","./node_modules/rxjs/dist/esm/internal/observable/dom/animationFrames.js","./src/app/modules/item/task-communication/rxjschannel.ts","./src/app/modules/item/task-communication/types.ts","./src/app/modules/item/task-communication/task-proxy.ts","./src/app/modules/item/http-services/task-token.service.ts","./src/app/modules/item/services/item-task-init.service.ts","./node_modules/rxjs/dist/esm/internal/operators/retryWhen.js","./src/app/modules/item/http-services/current-answer.service.ts","./src/app/modules/item/http-services/answer.service.ts","./src/app/modules/item/http-services/answer-token.service.ts","./src/app/modules/item/http-services/grade.service.ts","./src/app/modules/item/services/item-task-answer.service.ts","./src/app/modules/item/services/item-task-views.service.ts","./src/app/modules/item/http-services/ask-hint.service.ts","./src/app/modules/item/services/item-task.service.ts","./src/app/modules/item/http-services/publish-result.service.ts","./src/app/shared/directives/full-height-content.directive.ts","./src/app/modules/item/components/task-loader/task-loader.component.html","./src/app/modules/item/components/task-loader/task-loader.component.ts","./src/app/modules/item/pages/item-display/item-display.component.html","./src/app/modules/item/pages/item-display/item-display.component.ts","./src/app/modules/item/components/item-children-edit/item-children-edit.component.html","./src/app/modules/item/components/item-children-edit/item-children-edit.component.ts","./src/app/modules/item/http-services/update-item.service.ts","./src/app/modules/item/components/item-children-edit-form/item-children-edit-form.component.html","./src/app/modules/item/components/item-children-edit-form/item-children-edit-form.component.ts","./src/app/modules/shared-components/components/message-info/message-info.component.ts","./src/app/modules/shared-components/components/message-info/message-info.component.html","./src/app/modules/shared-components/components/state-widget/state-widget.component.html","./src/app/modules/shared-components/components/state-widget/state-widget.component.ts","./src/app/modules/item/components/chapter-children/chapter-children.component.html","./src/app/modules/item/components/chapter-children/chapter-children.component.ts","./src/app/modules/item/components/sub-skills/sub-skills.component.html","./src/app/modules/item/components/sub-skills/sub-skills.component.ts","./src/app/modules/item/http-services/get-item-parents.service.ts","./src/app/modules/item/components/parent-skills/parent-skills.component.html","./src/app/modules/item/components/parent-skills/parent-skills.component.ts","./node_modules/rxjs/dist/esm/internal/observable/dom/WebSocketSubject.js","./src/app/modules/item/services/threads.service.ts","./node_modules/rxjs/dist/esm/internal/observable/dom/webSocket.js","./src/app/modules/item/components/thread/thread.component.html","./src/app/modules/item/components/thread/thread.component.ts","./src/app/modules/item/http-services/get-item-prerequisites.service.ts","./src/app/modules/item/components/item-unlock-access/item-unlock-access.component.html","./src/app/modules/item/components/item-unlock-access/item-unlock-access.component.ts","./src/app/modules/item/pages/item-content/item-content.component.html","./src/app/modules/item/pages/item-content/item-content.component.ts","./src/app/modules/item/http-services/update-item-string.service.ts","./src/app/modules/item/pages/item-edit-content/item-edit-content.component.html","./src/app/modules/item/pages/item-edit-content/item-edit-content.component.ts","./src/app/modules/item/pages/item-edit/item-edit.component.html","./src/app/modules/item/pages/item-edit/item-edit.component.ts","./src/app/modules/shared-components/components/dropdown/dropdown.component.html","./src/app/modules/shared-components/components/dropdown/dropdown.component.ts","./src/app/modules/item/http-services/remove-item.service.ts","./src/app/modules/item/components/item-remove-button/item-remove-button.component.html","./src/app/modules/item/components/item-remove-button/item-remove-button.component.ts","./src/app/modules/item/pages/item-edit-advanced-parameters/item-edit-advanced-parameters.component.html","./src/app/modules/item/pages/item-edit-advanced-parameters/item-edit-advanced-parameters.component.ts","./src/app/modules/item/components/item-edit-wrapper/item-edit-wrapper.component.html","./src/app/modules/item/components/item-edit-wrapper/item-edit-wrapper.component.ts","./src/app/modules/item/http-services/get-answer.service.ts","./src/app/modules/item/components/item-header/item-header.component.html","./src/app/modules/item/components/item-header/item-header.component.ts","./src/app/modules/item/pages/item-log-view/item-log-view.component.html","./src/app/modules/item/pages/item-log-view/item-log-view.component.ts","./src/app/shared/http-services/get-group-progress.service.ts","./src/app/shared/http-services/progress-csv.service.ts","./src/app/modules/item/components/composition-filter/composition-filter.component.ts","./src/app/modules/item/components/composition-filter/composition-filter.component.html","./src/app/modules/item/components/user-progress/user-progress.component.html","./src/app/modules/item/components/user-progress/user-progress.component.ts","./src/app/shared/http-services/group-permissions.service.ts","./src/app/modules/item/helpers/permissions-string.ts","./src/app/modules/item/helpers/item-permissions-constraints.ts","./src/app/modules/item/helpers/permissions-texts.ts","./src/app/modules/item/helpers/computed-permissions.ts","./src/app/modules/item/components/permissions-edit-dialog-form/permissions-edit-form.component.html","./src/app/modules/item/components/permissions-edit-dialog-form/permissions-edit-form.component.ts","./src/app/modules/item/helpers/permissions-constraints-validator.ts","./src/app/modules/item/components/permissions-edit-dialog/permissions-edit-dialog.component.html","./src/app/modules/item/components/permissions-edit-dialog/permissions-edit-dialog.component.ts","./src/app/modules/item/components/user-progress-details/user-progress-details.component.html","./src/app/modules/item/components/user-progress-details/user-progress-details.component.ts","./src/app/modules/item/pages/group-progress-grid/group-progress-grid.component.html","./src/app/modules/item/pages/group-progress-grid/group-progress-grid.component.ts","./src/app/shared/helpers/download-file.ts","./src/app/modules/item/pages/chapter-group-progress/chapter-group-progress.component.html","./src/app/modules/item/pages/chapter-group-progress/chapter-group-progress.component.ts","./src/app/modules/item/http-services/get-participant-progress.service.ts","./src/app/modules/item/pages/chapter-user-progress/chapter-user-progress.component.html","./src/app/modules/item/pages/chapter-user-progress/chapter-user-progress.component.ts","./src/app/modules/item/pages/item-progress/item-progress.component.html","./src/app/modules/item/pages/item-progress/item-progress.component.ts","./src/app/modules/item/components/answer-author-indicator/answer-author-indicator.component.html","./src/app/modules/item/components/answer-author-indicator/answer-author-indicator.component.ts","./src/app/modules/item/components/item-permissions/item-permissions.component.html","./src/app/modules/item/components/item-permissions/item-permissions.component.ts","./src/app/modules/item/http-services/add-item-prerequisite.service.ts","./src/app/modules/item/http-services/remove-item-prerequisite.service.ts","./src/app/modules/item/components/add-dependency/add-dependency.component.ts","./src/app/modules/item/components/add-dependency/add-dependency.component.html","./src/app/modules/item/components/item-dependencies/item-dependencies.component.html","./src/app/modules/item/components/item-dependencies/item-dependencies.component.ts","./src/app/modules/item/pages/item-details/item-details.component.html","./src/app/modules/item/pages/item-details/item-details.component.ts","./node_modules/rxjs/dist/esm/internal/operators/mergeWith.js","./node_modules/rxjs/dist/esm/internal/operators/merge.js","./src/app/modules/item/item-routing.module.ts","./src/app/modules/item/components/add-item/add-item.component.ts","./src/app/modules/item/components/add-item/add-item.component.html","./src/app/modules/item/components/propagation-edit-menu/propagation-edit-menu.component.html","./src/app/modules/item/components/propagation-edit-menu/propagation-edit-menu.component.ts","./src/app/modules/item/item.module.ts","./node_modules/jschannel/src/jschannel.js"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\nexport interface BeforeUnloadComponent {\r\n  /**\r\n   * Whether this component has pending changes\r\n   */\r\n  beforeUnload(): Observable<boolean>,\r\n}\r\n\r\n@Injectable()\r\nexport class BeforeUnloadGuard implements CanDeactivate<BeforeUnloadComponent> {\r\n\r\n  constructor() {}\r\n\r\n  canDeactivate(\r\n    component: BeforeUnloadComponent | null,\r\n    _currentRoute: ActivatedRouteSnapshot,\r\n    _currentState: RouterStateSnapshot,\r\n    _nextState: RouterStateSnapshot\r\n  ): Observable<boolean> {\r\n    return component ? component.beforeUnload() : of(true);\r\n  }\r\n\r\n}\r\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function pairwise() {\n    return operate((source, subscriber) => {\n        let prev;\n        let hasPrev = false;\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            const p = prev;\n            prev = value;\n            hasPrev && subscriber.next([p, value]);\n            hasPrev = true;\n        }));\n    });\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { isRouteWithSelfAttempt, FullItemRoute } from 'src/app/shared/routing/item-route';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { tagError } from 'src/app/shared/helpers/errors';\r\nimport { ensureDefined } from 'src/app/shared/helpers/assert';\r\nimport { typeCategoryOfItem } from '../../../shared/helpers/item-type';\r\nimport { pipe } from 'fp-ts/function';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\n\r\nexport const breadcrumbServiceTag = 'breadcrumbservice';\r\n\r\nconst breadcrumbItemDecoder = pipe(\r\n  D.struct({\r\n    itemId: D.string,\r\n    languageTag: D.string,\r\n    title: D.string,\r\n    type: D.literal('Chapter', 'Task', 'Course', 'Skill'),\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      attemptId: D.string, // set in all but the last one if parent_attempt_id param has been given\r\n      attemptNumber: D.string, // set in all but the last one if parent_attempt_id param has been given\r\n    })\r\n  )\r\n);\r\n\r\nexport interface BreadcrumbItem {\r\n  itemId: string,\r\n  title: string,\r\n  route: FullItemRoute,\r\n  attemptCnt?: number,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetBreadcrumbService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getBreadcrumb(itemRoute: FullItemRoute): Observable<BreadcrumbItem[]> {\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/items/${itemRoute.path.concat([ itemRoute.id ]).join('/')}/breadcrumbs`, {\r\n        params: isRouteWithSelfAttempt(itemRoute) ? { attempt_id: itemRoute.attemptId } : { parent_attempt_id: itemRoute.parentAttemptId }\r\n      })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(breadcrumbItemDecoder)),\r\n        map(items => {\r\n          const last = ensureDefined(items[items.length - 1]);\r\n\r\n          // all but last are ensured to have attempt_id, treat the last one separetely\r\n          return items.slice(0,-1).map((item, idx) => ({\r\n            itemId: item.itemId,\r\n            title: item.title,\r\n            route: {\r\n              id: item.itemId,\r\n              path: items.slice(0,idx).map(it => it.itemId),\r\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n              attemptId: item.attemptId!, // the service ensures the attempt for all but last is given\r\n              contentType: typeCategoryOfItem(item),\r\n            } as FullItemRoute,\r\n            attemptCnt: item.attemptNumber ? +item.attemptNumber : undefined,\r\n          })).concat([{\r\n            itemId: last.itemId,\r\n            title: last.title,\r\n            attemptCnt: last.attemptNumber ? +last.attemptNumber : undefined,\r\n            route: itemRoute\r\n          }]);\r\n        }),\r\n        catchError(err => {\r\n          throw tagError(err, breadcrumbServiceTag);\r\n        })\r\n      );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { isRouteWithSelfAttempt, FullItemRoute } from 'src/app/shared/routing/item-route';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\nimport { pipe } from 'fp-ts/function';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { dateDecoder } from '../../../shared/helpers/decoders';\r\n\r\nexport interface Result {\r\n  attemptId: string,\r\n  latestActivityAt: Date,\r\n  startedAt: Date|null,\r\n  score: number,\r\n  validated: boolean,\r\n}\r\n\r\nconst userDecoder = pipe(\r\n  D.struct({\r\n    groupId: D.string,\r\n    login: D.string,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      firstName: D.nullable(D.string),\r\n      lastName: D.nullable(D.string),\r\n    })\r\n  ),\r\n);\r\n\r\nconst resultDecoder = pipe(\r\n  D.struct({\r\n    id: D.string,\r\n    allowsSubmissionsUntil: dateDecoder,\r\n    createdAt: dateDecoder,\r\n    endedAt: D.nullable(dateDecoder),\r\n    latestActivityAt: dateDecoder,\r\n    scoreComputed: D.number,\r\n    startedAt: D.nullable(dateDecoder),\r\n    validated: D.boolean,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      userCreator: userDecoder,\r\n    }),\r\n  ),\r\n);\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetResultsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getResults(item: FullItemRoute): Observable<Result[]> {\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/items/${item.id}/attempts`, {\r\n        params: isRouteWithSelfAttempt(item) ? { attempt_id: item.attemptId } : { parent_attempt_id: item.parentAttemptId },\r\n      })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(resultDecoder)),\r\n        map(results => results.map(r => ({\r\n          attemptId: r.id,\r\n          latestActivityAt: r.latestActivityAt,\r\n          startedAt: r.startedAt,\r\n          score: r.scoreComputed,\r\n          validated: r.validated,\r\n        }))),\r\n      );\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { EMPTY, forkJoin, Observable, of, ReplaySubject, Subject, combineLatest } from 'rxjs';\r\nimport { delayWhen, distinctUntilChanged, filter, map, scan, shareReplay, startWith, switchMap, } from 'rxjs/operators';\r\nimport { bestAttemptFromResults, implicitResultStart } from 'src/app/shared/helpers/attempts';\r\nimport { isRouteWithSelfAttempt, FullItemRoute } from 'src/app/shared/routing/item-route';\r\nimport { ResultActionsService } from 'src/app/shared/http-services/result-actions.service';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { BreadcrumbItem, GetBreadcrumbService } from '../http-services/get-breadcrumb.service';\r\nimport { GetItemByIdService, Item } from '../http-services/get-item-by-id.service';\r\nimport { GetResultsService, Result } from '../http-services/get-results.service';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\nimport { buildUp } from 'src/app/shared/operators/build-up';\r\nimport { FetchState } from 'src/app/shared/helpers/state';\r\nimport { LocaleService } from 'src/app/core/services/localeService';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\nimport { canCurrentUserViewContent } from 'src/app/shared/models/domain/item-view-permission';\r\n\r\nexport interface ItemData {\r\n  route: FullItemRoute,\r\n  item: Item,\r\n  breadcrumbs: BreadcrumbItem[],\r\n  results?: Result[],\r\n  currentResult?: Result,\r\n}\r\n\r\n/**\r\n * A datasource which allows fetching a item using a proper state and sharing it among several components.\r\n * The only interactions with this class are:\r\n * - trigger actions by calling public functions\r\n * - listen state change by listening the state\r\n */\r\n@Injectable()\r\nexport class ItemDataSource implements OnDestroy {\r\n\r\n  private readonly fetchOperation$ = new ReplaySubject<FullItemRoute>(1); // trigger item fetching\r\n  private readonly refresh$ = new Subject<void>();\r\n  private readonly scorePatch$ = new Subject<number | undefined>();\r\n  private readonly maxScorePatch$ = this.scorePatch$.pipe(\r\n    // Keep max score of all emitted scores. NB: adding operators to a subject makes it COLD.\r\n    // Since it is cold, max score is ONLY computed for values emitted during the lifetime of the subscription\r\n    scan<number | undefined, number | undefined>((max, score) => (score !== undefined ? Math.max(score, max ?? 0) : undefined), undefined),\r\n    startWith(undefined),\r\n    distinctUntilChanged(),\r\n  );\r\n\r\n  private readonly profileLanguageMatchesAppLanguage$ = this.userSessionService.userProfile$.pipe(\r\n    filter(profile => profile.defaultLanguage === this.localeService.currentLang?.tag),\r\n  );\r\n\r\n  /* state to put outputted */\r\n  readonly state$ = combineLatest([\r\n    this.fetchOperation$,\r\n    this.groupWatchingService.watchedGroup$,\r\n  ]).pipe(\r\n    delayWhen(() => this.profileLanguageMatchesAppLanguage$),\r\n    switchMap(([ item, watchedGroup ]) =>\r\n      this.fetchItemData(item, watchedGroup?.route.id).pipe(mapToFetchState({ resetter: this.refresh$ }))\r\n    ),\r\n    // maxScorePatch is a cold observable, and switchMap operator acts a subscriber here\r\n    // so the max score patch is only valid for current item\r\n    switchMap(state => this.maxScorePatch$.pipe(map(score => this.patchScore(state, score)))),\r\n    shareReplay(1),\r\n  );\r\n\r\n  private subscription = this.userSessionService.userChanged$.subscribe(_s => this.refreshItem());\r\n\r\n  constructor(\r\n    private getBreadcrumbService: GetBreadcrumbService,\r\n    private getItemByIdService: GetItemByIdService,\r\n    private resultActionsService: ResultActionsService,\r\n    private getResultsService: GetResultsService,\r\n    private userSessionService: UserSessionService,\r\n    private groupWatchingService: GroupWatchingService,\r\n    private localeService: LocaleService,\r\n  ) {}\r\n\r\n  fetchItem(item: FullItemRoute): void {\r\n    this.fetchOperation$.next(item);\r\n  }\r\n\r\n  refreshItem(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  patchItemScore(score: number): void {\r\n    this.scorePatch$.next(score);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n    this.fetchOperation$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Observable of the item data fetching.\r\n   * In parallel: breadcrumb and (in serial: get info and start result)\r\n   */\r\n  private fetchItemData(itemRoute: FullItemRoute, watchedGroupId?: string): Observable<ItemData> {\r\n    return forkJoin({\r\n      route: of(itemRoute),\r\n      item: this.getItemByIdService.get(itemRoute.id, watchedGroupId),\r\n      breadcrumbs: this.getBreadcrumbService.getBreadcrumb(itemRoute),\r\n    }).pipe(\r\n      buildUp(data => (canCurrentUserViewContent(data.item) ? this.fetchResults(data.route, data.item) : EMPTY)),\r\n    );\r\n  }\r\n\r\n  private fetchResults(itemRoute: FullItemRoute, item: Item): Observable<{ results: Result[], currentResult?: Result }> {\r\n    return this.getResultsService.getResults(itemRoute).pipe(\r\n      switchMap(results => {\r\n        // 1) if attempt_id was given as arg, try to select the matching result\r\n        if (isRouteWithSelfAttempt(itemRoute)) {\r\n          const currentResult = results.find(r => r.attemptId === itemRoute.attemptId);\r\n          if (currentResult) return of({ results: results, currentResult: currentResult });\r\n        }\r\n        // 2) if there are already results on this item, select the best one\r\n        const currentResult = bestAttemptFromResults(results);\r\n        if (currentResult !== null) return of({ results: results, currentResult: currentResult });\r\n        // 3) if no suitable one and this item does not allow implicit result start or perms are not sufficent, continue without result\r\n        if (!implicitResultStart(item)) return of({ results: results });\r\n        // 4) otherwise, start a result\r\n        const attemptId = isRouteWithSelfAttempt(itemRoute) ? itemRoute.attemptId : itemRoute.parentAttemptId;\r\n        if (!attemptId) return EMPTY; // unexpected\r\n        return this.resultActionsService.start(itemRoute.path.concat([ itemRoute.id ]), attemptId).pipe(\r\n          // once a result has been created, fetch it\r\n          switchMap(() => this.getResultsService.getResults(itemRoute).pipe(\r\n            map(results => {\r\n              // this time we are sure to have a started result as we just started it\r\n              const currentResult = bestAttemptFromResults(results);\r\n              if (currentResult === null) throw new Error('Unexpected: result just created not found');\r\n              return { results: results, currentResult: currentResult };\r\n            }),\r\n          )),\r\n        );\r\n      }),\r\n    );\r\n  }\r\n\r\n  private patchScore(state: FetchState<ItemData>, newScore?: number): FetchState<ItemData> {\r\n    if (!state.data || newScore === undefined) return state;\r\n    const score = Math.max(newScore ?? 0, state.data.currentResult?.score ?? 0);\r\n    const bestScore = Math.max(state.data.item.bestScore, score);\r\n    const validated = newScore >= 100 || !!state.data.currentResult?.validated;\r\n    return {\r\n      ...state,\r\n      data: {\r\n        ...state.data,\r\n        item: { ...state.data.item, bestScore },\r\n        currentResult: state.data.currentResult ? { ...state.data.currentResult, score, validated } : undefined,\r\n      },\r\n    };\r\n  }\r\n\r\n}\r\n","\r\nimport { OperatorFunction, pipe, concat, of, Observable } from 'rxjs';\r\nimport { switchMap, map } from 'rxjs/operators';\r\n\r\ninterface ObjectT { [k: string]: any }\r\n\r\n/**\r\n * RxOperator which, for each input, first emits the raw input and then emits the raw input extended with the emission of an another\r\n * observable based on this input.\r\n * It is intended to be used to build up data from several async services. So it emits first the input (typically the output from another\r\n * service) and then uses this input for another call (e.g. request more now we know this initial info) and finally emits the merge of\r\n * the initial input with the output of the other call.\r\n * For instance, it emits `{ name: 'foo', childId: 4 }` and then `{ name: 'foo', childId: 4, childName: 'bar' }` when the child name has\r\n * been fetched.\r\n * Note that this operator uses `switchMap`, so if the source re-emits, the subrequest is cancelled.\r\n */\r\nexport function buildUp<T extends ObjectT, U extends ObjectT>(project: (value: T) => Observable<U>): OperatorFunction<T, T | (T & U)> {\r\n  return pipe(\r\n    switchMap(initialValue => concat(\r\n      of(initialValue),\r\n      project(initialValue).pipe(\r\n        map(additionalValue => ({ ...initialValue, ...additionalValue }))\r\n      ),\r\n    ))\r\n  );\r\n}\r\n","\r\n<router-outlet *ngIf=\"state.isReady\"></router-outlet>\r\n\r\n<alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n<ng-container *ngIf=\"state.isError\">\r\n  <p class=\"alg-error-message\" *ngIf=\"$any(state).error && ($any(state).error.status === 403 || $any(state).error.status === 404); else unknownError\" i18n>\r\n    This content does not exist or you are not allowed to view it.\r\n  </p>\r\n  <ng-template #unknownError><p class=\"alg-error-message\" i18n>Error while loading the item.</p></ng-template>\r\n  <p class=\"alg-error-message\" [style.visibility]=\"(backToHome.isActive)?'hidden':'visible'\">\r\n    <span i18n>Go back to the </span>\r\n    <a\r\n      class=\"alg-link base-color\"\r\n      routerLink=\"/\"\r\n      [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n      routerLinkActive #backToHome=\"routerLinkActive\"\r\n      i18n\r\n    >\r\n      home page\r\n    </a>\r\n  </p>\r\n</ng-container>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap, UrlTree } from '@angular/router';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { combineLatestWith, distinctUntilChanged, filter, map, pairwise, startWith, switchMap, take } from 'rxjs/operators';\r\nimport { defaultAttemptId } from 'src/app/shared/helpers/attempts';\r\nimport { errorState, fetchingState, FetchState } from 'src/app/shared/helpers/state';\r\nimport { ResultActionsService } from 'src/app/shared/http-services/result-actions.service';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\nimport { breadcrumbServiceTag } from '../../http-services/get-breadcrumb.service';\r\nimport { GetItemPathService } from '../../http-services/get-item-path.service';\r\nimport { ItemDataSource, ItemData } from '../../services/item-datasource.service';\r\nimport { errorHasTag, errorIsHTTPForbidden, errorIsHTTPNotFound } from 'src/app/shared/helpers/errors';\r\nimport { ItemRouter } from 'src/app/shared/routing/item-router';\r\nimport { isTask, ItemTypeCategory } from 'src/app/shared/helpers/item-type';\r\nimport { ModeAction, ModeService } from 'src/app/shared/services/mode.service';\r\nimport { isItemInfo, itemInfo } from 'src/app/shared/models/content/item-info';\r\nimport { repeatLatestWhen } from 'src/app/shared/helpers/repeatLatestWhen';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { isItemRouteError, itemRouteFromParams } from './item-route-validation';\r\nimport { LayoutService } from 'src/app/shared/services/layout.service';\r\nimport { readyData } from 'src/app/shared/operators/state';\r\nimport { ensureDefined } from 'src/app/shared/helpers/assert';\r\nimport { routeWithSelfAttempt } from 'src/app/shared/routing/item-route';\r\n\r\nconst itemBreadcrumbCat = $localize`Items`;\r\n\r\n/**\r\n * ItemByIdComponent is just a container for detail or edit page but manages the fetching on id change and (un)setting the current content.\r\n */\r\n@Component({\r\n  selector: 'alg-item-by-id',\r\n  templateUrl: './item-by-id.component.html',\r\n  styleUrls: [ './item-by-id.component.scss' ],\r\n  providers: [ ItemDataSource ]\r\n})\r\nexport class ItemByIdComponent implements OnDestroy {\r\n\r\n  // datasource state re-used with fetching/error states of route resolution\r\n  state: FetchState<ItemData> = fetchingState();\r\n  // to prevent looping indefinitely in case of bug in services (wrong path > item without path > fetch path > item with path > wrong path)\r\n  hasRedirected = false;\r\n\r\n  private subscriptions: Subscription[] = []; // subscriptions to be freed up on destroy\r\n\r\n  constructor(\r\n    private itemRouter: ItemRouter,\r\n    private activatedRoute: ActivatedRoute,\r\n    private currentContent: CurrentContentService,\r\n    private modeService: ModeService,\r\n    private itemDataSource: ItemDataSource,\r\n    private userSessionService: UserSessionService,\r\n    private resultActionsService: ResultActionsService,\r\n    private getItemPathService: GetItemPathService,\r\n    private layoutService: LayoutService,\r\n  ) {\r\n\r\n    // on route change or user change: refetch item if needed\r\n    this.activatedRoute.paramMap.pipe(\r\n      repeatLatestWhen(this.userSessionService.userChanged$),\r\n      // When loading a task with a former answerId, we need to remove the answerId from the url to avoid reloading\r\n      // a former answer if the user refreshes the page\r\n      // However, replacing the url should not retrigger an item fetch either, thus the use of history.state.preventRefetch\r\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/strict-boolean-expressions\r\n      filter(() => !(typeof history.state === 'object' && history.state?.preventRefetch)),\r\n    ).subscribe(params => this.fetchItemAtRoute(params)),\r\n\r\n    this.subscriptions.push(\r\n      // on datasource state change, update current state and current content page info\r\n      this.itemDataSource.state$.subscribe(state => {\r\n        this.state = state;\r\n\r\n        if (state.isReady) {\r\n          this.hasRedirected = false;\r\n          this.currentContent.replace(itemInfo({\r\n            breadcrumbs: {\r\n              category: itemBreadcrumbCat,\r\n              path: state.data.breadcrumbs.map(el => ({\r\n                title: el.title,\r\n                hintNumber: el.attemptCnt,\r\n                navigateTo: ():UrlTree => itemRouter.url(el.route),\r\n              })),\r\n              currentPageIdx: state.data.breadcrumbs.length - 1,\r\n            },\r\n            title: state.data.item.string.title === null ? undefined : state.data.item.string.title,\r\n            route: routeWithSelfAttempt(state.data.route, state.data.currentResult?.attemptId),\r\n            details: {\r\n              title: state.data.item.string.title,\r\n              type: state.data.item.type,\r\n              attemptId: state.data.currentResult?.attemptId,\r\n              bestScore: state.data.item.bestScore,\r\n              currentScore: state.data.currentResult?.score,\r\n              validated: state.data.currentResult?.validated,\r\n            },\r\n            score: state.data.currentResult !== undefined ? {\r\n              bestScore: state.data.item.bestScore,\r\n              currentScore: state.data.currentResult.score,\r\n              isValidated: state.data.currentResult.validated,\r\n            } : undefined,\r\n          }));\r\n\r\n          if (state.data.route.answerId) {\r\n            this.itemRouter.navigateTo(\r\n              { ...state.data.route, answerId: undefined },\r\n              { navExtras: { replaceUrl: true, state: { preventRefetch: true } } },\r\n            );\r\n          }\r\n\r\n        } else if (state.isError) {\r\n          // If path is incorrect, redirect to same page without path to trigger the solve missing path at next navigation\r\n          if (errorHasTag(state.error, breadcrumbServiceTag) && (errorIsHTTPForbidden(state.error) || errorIsHTTPNotFound(state.error))) {\r\n            if (this.hasRedirected) throw new Error('Too many redirections (unexpected)');\r\n            this.hasRedirected = true;\r\n            const { contentType, id, answerId } = this.getItemRoute();\r\n            if (!id) throw new Error('Unexpected: item id should exist');\r\n            this.itemRouter.navigateTo({ contentType, id, answerId }, { navExtras: { replaceUrl: true } });\r\n          }\r\n          this.currentContent.clear();\r\n        }\r\n      }),\r\n\r\n      this.modeService.modeActions$.pipe(\r\n        filter(action => [ ModeAction.StartEditing, ModeAction.StopEditing ].includes(action)),\r\n        combineLatestWith(this.currentContent.content$.pipe(filter(isItemInfo))),\r\n      ).subscribe(([ action, content ]) => {\r\n        this.itemRouter.navigateTo(content.route, { page: action === ModeAction.StartEditing ? 'edit' : 'details' });\r\n      }),\r\n\r\n      this.itemDataSource.state$.pipe(\r\n        readyData(),\r\n        distinctUntilChanged((a, b) => a.item.id === b.item.id),\r\n        startWith(undefined),\r\n        pairwise(),\r\n        filter(([ previous, current ]) => (!!current && (!previous || isTask(previous.item) || isTask(current.item)))),\r\n        map(([ , current ]) => ensureDefined(current).item),\r\n      ).subscribe(item => {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/strict-boolean-expressions\r\n        const activateFullFrame = isTask(item) && !(typeof history.state === 'object' && history.state?.preventFullFrame);\r\n        this.layoutService.configure({ fullFrameActive: activateFullFrame });\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.currentContent.clear();\r\n    this.subscriptions.forEach(s => s.unsubscribe());\r\n    this.layoutService.fullFrame$\r\n      .pipe(take(1), filter(fullFrame => fullFrame.active)) // if layout is in full frame and we quit an item page => disable full frame\r\n      .subscribe(() => this.layoutService.configure({ fullFrameActive: false }));\r\n  }\r\n\r\n  private getItemRoute(params?: ParamMap): ReturnType<typeof itemRouteFromParams> {\r\n    const snapshot = this.activatedRoute.snapshot;\r\n    if (!snapshot.parent) throw new Error('Unexpected: activated route snapshot has no parent');\r\n    if (!snapshot.parent.url[0]) throw new Error('Unexpected: activated route snapshot parent has no url');\r\n    return itemRouteFromParams(snapshot.parent.url[0].path, params ?? snapshot.paramMap);\r\n  }\r\n\r\n  private fetchItemAtRoute(params: ParamMap): void {\r\n    const item = this.getItemRoute(params);\r\n    if (isItemRouteError(item)) {\r\n      if (item.id) {\r\n        this.state = fetchingState();\r\n        this.solveMissingPathAttempt(item.contentType, item.id, item.path, item.answerId);\r\n      } else this.state = errorState(new Error('No id in url'));\r\n      return;\r\n    }\r\n    // just publish to current content the new route we are navigating to (without knowing any info)\r\n    this.currentContent.replace(itemInfo({ route: item, breadcrumbs: { category: itemBreadcrumbCat, path: [], currentPageIdx: -1 } }));\r\n    // trigger the fetch of the item (which will itself re-update the current content)\r\n    this.itemDataSource.fetchItem(item);\r\n  }\r\n\r\n  /**\r\n   * Called when either path or attempt is missing. Will fetch the path if missing, then will be fetch the attempt.\r\n   * Will redirect when relevant data has been fetched.\r\n   */\r\n  private solveMissingPathAttempt(contentType: ItemTypeCategory, id: string, path?: string[], answerId?: string): void {\r\n\r\n    const pathObservable = path ? of(path) : this.getItemPathService.getItemPath(id);\r\n    pathObservable.pipe(\r\n      switchMap(path => {\r\n        // for empty path (root items), consider the item has a (fake) parent attempt id 0\r\n        if (path.length === 0) return of({ contentType, id, path, parentAttemptId: defaultAttemptId, answerId });\r\n        // else, will start all path but the current item\r\n        return this.resultActionsService.startWithoutAttempt(path).pipe(\r\n          map(attemptId => ({ contentType, id, path, parentAttemptId: attemptId, answerId }))\r\n        );\r\n      })\r\n    ).subscribe({\r\n      next: itemRoute => this.itemRouter.navigateTo(itemRoute, { navExtras: { replaceUrl: true } }),\r\n      error: err => {\r\n        this.state = errorState(err instanceof Error ? err : new Error('unknown error'));\r\n        this.layoutService.configure({ fullFrameActive: false });\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { ParamMap } from '@angular/router';\r\nimport { ItemTypeCategory } from 'src/app/shared/helpers/item-type';\r\nimport { decodeItemRouterParameters, FullItemRoute, itemCategoryFromPrefix } from 'src/app/shared/routing/item-route';\r\n\r\n// alias for better readibility\r\ntype ItemId = string;\r\n\r\ninterface ItemRouteError {\r\n  tag: 'error',\r\n  contentType: ItemTypeCategory,\r\n  id?: ItemId,\r\n  path?: ItemId[],\r\n  answerId?: string,\r\n}\r\n\r\nexport function itemRouteFromParams(prefix: string, params: ParamMap): FullItemRoute|ItemRouteError {\r\n  const cat = itemCategoryFromPrefix(prefix);\r\n  if (cat === null) throw new Error('Unexpected item path prefix');\r\n  const { id, path, attemptId, parentAttemptId, answerId: answerIdOrNull } = decodeItemRouterParameters(params);\r\n  const answerId = answerIdOrNull ?? undefined;\r\n\r\n  if (!id) return { contentType: cat, tag: 'error', id: undefined, answerId }; // null or empty\r\n  if (path === null) return { contentType: cat, tag: 'error', id, answerId };\r\n  const pathList = path === '' ? [] : path.split(',');\r\n  if (attemptId) return { contentType: cat, id: id, path: pathList, attemptId, answerId }; // not null nor empty\r\n  if (parentAttemptId) return { contentType: cat, id: id, path: pathList, parentAttemptId, answerId }; // not null nor empty\r\n  return { contentType: cat, tag: 'error', id: id, path: pathList, answerId };\r\n}\r\n\r\nexport function isItemRouteError(route: FullItemRoute|ItemRouteError): route is ItemRouteError {\r\n  return 'tag' in route && route.tag === 'error';\r\n}\r\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","export const performanceTimestampProvider = {\n    now() {\n        return (performanceTimestampProvider.delegate || performance).now();\n    },\n    delegate: undefined,\n};\n","import { Subscription } from '../Subscription';\nexport const animationFrameProvider = {\n    schedule(callback) {\n        let request = requestAnimationFrame;\n        let cancel = cancelAnimationFrame;\n        const { delegate } = animationFrameProvider;\n        if (delegate) {\n            request = delegate.requestAnimationFrame;\n            cancel = delegate.cancelAnimationFrame;\n        }\n        const handle = request((timestamp) => {\n            cancel = undefined;\n            callback(timestamp);\n        });\n        return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));\n    },\n    requestAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);\n    },\n    cancelAnimationFrame(...args) {\n        const { delegate } = animationFrameProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);\n    },\n    delegate: undefined,\n};\n","import { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\nexport function animationFrames(timestampProvider) {\n    return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\nfunction animationFramesFactory(timestampProvider) {\n    const { schedule } = animationFrameProvider;\n    return new Observable((subscriber) => {\n        const subscription = new Subscription();\n        const provider = timestampProvider || performanceTimestampProvider;\n        const start = provider.now();\n        const run = (timestamp) => {\n            const now = provider.now();\n            subscriber.next({\n                timestamp: timestampProvider ? now : timestamp,\n                elapsed: now - start,\n            });\n            if (!subscriber.closed) {\n                subscription.add(schedule(run));\n            }\n        };\n        subscription.add(schedule(run));\n        return subscription;\n    });\n}\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\n","import { build, ChannelConfiguration, MessageTransaction, MessagingChannel } from 'jschannel';\r\nimport { isObservable, Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\n\r\nexport interface RxMessage {\r\n  method: string,\r\n  params?: unknown,\r\n  timeout?: number,\r\n  error?: (error: unknown, message: string) => void,\r\n}\r\n\r\n/** Build a RxMessagingChannel, which is a jschannel with rxjs calls */\r\nexport function rxBuild(config: Omit<ChannelConfiguration, 'onReady'>): Observable<RxMessagingChannel> {\r\n  return new Observable<RxMessagingChannel>(subscriber => {\r\n    const channel = new RxMessagingChannel(build({\r\n      ...config,\r\n      onReady: (): void => {\r\n        subscriber.next(channel);\r\n        subscriber.complete();\r\n      },\r\n    }));\r\n  });\r\n}\r\n\r\nexport class RxMessagingChannel {\r\n  private destroyed = false;\r\n\r\n  constructor(private channel: MessagingChannel) {}\r\n\r\n  unbind(method: string, doNotPublish?: boolean): boolean {\r\n    if (this.destroyed) return true;\r\n    return this.channel.unbind(method, doNotPublish);\r\n  }\r\n\r\n  /** Bind a local method, allowing the remote task to call it */\r\n  bind<T extends Observable<any> | any>(method: string, mapper?: (params: unknown) => T, doNotPublish?: boolean): MessagingChannel {\r\n    // Create a callback wrapping the observable bound\r\n    const callback = (transaction: MessageTransaction, params: unknown): void => {\r\n      if (!mapper || this.destroyed) return;\r\n\r\n      const forwardError = (error: unknown): void => {\r\n        if (!this.destroyed) transaction.error(error, error instanceof Error ? error.toString() : '');\r\n      };\r\n      try {\r\n        const result = mapper(params);\r\n        if (!isObservable(result)) return transaction.complete(result);\r\n\r\n        transaction.delayReturn(true);\r\n\r\n        // This class is intended to be used with functions returning finite observables, either resolving or failing.\r\n        result\r\n          .pipe(take(1))\r\n          .subscribe({\r\n            next: data => {\r\n              // If the channel is destroyed before an observable completes, let it the observable finish since it might be\r\n              // an xhr request saving data, and avoid notifying the channel since it's been destroyed\r\n              if (!this.destroyed) transaction.complete(data);\r\n            },\r\n            error: forwardError,\r\n          });\r\n      } catch (error) {\r\n        forwardError(error);\r\n      }\r\n    };\r\n    return this.channel.bind(method, callback, doNotPublish);\r\n  }\r\n\r\n  /** Call a remote method through jschannel, return the result through an Observable */\r\n  call(message: RxMessage): Observable<unknown[]> {\r\n    // Create an Observable wrapping the inner jschannel call\r\n    return new Observable<unknown[]>(subscriber => {\r\n      if (this.destroyed) return;\r\n      const innerMessage = {\r\n        ...message,\r\n        success: (...results: unknown[]): void => {\r\n          subscriber.next(results);\r\n          subscriber.complete();\r\n        },\r\n        error: (error: any, _message: string): void => subscriber.error(error)\r\n      };\r\n      this.channel.call(innerMessage);\r\n    });\r\n  }\r\n\r\n  notify(message: RxMessage): void {\r\n    if (this.destroyed) return;\r\n    this.channel.notify(message);\r\n  }\r\n\r\n  destroy(): void {\r\n    this.destroyed = true;\r\n    this.channel.destroy();\r\n  }\r\n}\r\n","/** Types and decoders for types used in platform-task communication */\r\n\r\nimport { pipe } from 'fp-ts/function';\r\nimport * as D from 'io-ts/Decoder';\r\n\r\n\r\n// Parameters passed to the task\r\n// Those need a decoder as a default value to them can be passed by the task\r\nexport const taskParamsDecoder = D.struct({\r\n  minScore: D.number,\r\n  maxScore: D.number,\r\n  noScore: D.number,\r\n  randomSeed: D.number,\r\n  readOnly: D.boolean,\r\n  options: D.UnknownRecord,\r\n});\r\nexport type TaskParams = D.TypeOf<typeof taskParamsDecoder>;\r\n\r\n// Type returned by getTaskParams\r\nexport const taskParamsValueDecoder = D.union(taskParamsDecoder, D.UnknownRecord, D.string, D.number, D.boolean);\r\nexport type TaskParamsValue = D.TypeOf<typeof taskParamsValueDecoder> | undefined;\r\n\r\n// Key default arguments sent to platform.getTaskParams\r\nexport const taskParamsKeyDefaultDecoder = D.partial({\r\n  key: D.string,\r\n  defaultValue: taskParamsValueDecoder\r\n});\r\nexport type TaskParamsKeyDefault = D.TypeOf<typeof taskParamsKeyDefaultDecoder>;\r\n\r\n\r\n// Views offered by the task\r\n// For instance, taskViews = { task: { includes: [\"editor\"] }, solution : {}}\r\nexport const taskViewDecoder = D.partial({\r\n  requires: D.string,\r\n  includes: D.array(D.string)\r\n});\r\nexport type TaskView = D.TypeOf<typeof taskViewDecoder>;\r\n\r\nexport const taskViewsDecoder = D.record(taskViewDecoder);\r\nexport type TaskViews = D.TypeOf<typeof taskViewsDecoder>;\r\n\r\n\r\n// Task grading results\r\nexport interface RawTaskGrade {\r\n  score?: unknown,\r\n  message?: unknown,\r\n  scoreToken?: unknown,\r\n}\r\nexport const taskGradeDecoder = D.partial({\r\n  score: D.number,\r\n  message: D.string,\r\n  scoreToken: D.nullable(D.string),\r\n});\r\nexport type TaskGrade = D.TypeOf<typeof taskGradeDecoder>;\r\nexport type TaskScore = NonNullable<TaskGrade['score']>;\r\nexport type TaskScoreToken = NonNullable<TaskGrade['scoreToken']>;\r\n\r\n// Parameters sent by the task to platform.updateDisplay\r\nexport const updateDisplayParamsDecoder = D.partial({\r\n  height: D.number,\r\n  views: taskViewsDecoder,\r\n  scrollTop: D.number\r\n});\r\nexport type UpdateDisplayParams = D.TypeOf<typeof updateDisplayParamsDecoder>;\r\n\r\n// Log data sent by the task\r\nexport const taskLogDecoder = D.UnknownArray;\r\nexport type TaskLog = D.TypeOf<typeof taskLogDecoder>;\r\n\r\n// Currently unused\r\nexport const metadataDecoder = D.partial({\r\n  autoHeight: D.boolean,\r\n  disablePlatformProgress: D.boolean,\r\n});\r\nexport type TaskMetaData = D.TypeOf<typeof metadataDecoder>;\r\nexport type TaskResources = unknown;\r\n\r\nexport const openUrlParamsDecoder = D.union(\r\n  D.string,\r\n  pipe(\r\n    D.struct({ path: D.string }),\r\n    D.intersect(D.partial({ newTab: D.boolean }))\r\n  ),\r\n  pipe(\r\n    D.struct({ url: D.string }),\r\n    D.intersect(D.partial({ newTab: D.boolean }))\r\n  ),\r\n);\r\n\r\nexport type OpenUrlParams = D.TypeOf<typeof openUrlParamsDecoder>;\r\n","/**\r\n * Cross-domain task proxy implementation for Bebras task API in TypeScript\r\n * Adapted from task-xd-pr.js from https://github.com/France-ioi/pem-platform/\r\n *\r\n * It depends on jschannel.\r\n */\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, delay, map, retryWhen, switchMap, take } from 'rxjs/operators';\r\nimport { rxBuild, RxMessagingChannel } from './rxjschannel';\r\nimport * as D from 'io-ts/Decoder';\r\nimport {\r\n  metadataDecoder,\r\n  OpenUrlParams,\r\n  openUrlParamsDecoder,\r\n  TaskGrade,\r\n  taskGradeDecoder,\r\n  TaskLog,\r\n  taskLogDecoder,\r\n  TaskMetaData,\r\n  TaskParamsKeyDefault,\r\n  taskParamsKeyDefaultDecoder,\r\n  TaskParamsValue,\r\n  TaskResources,\r\n  TaskViews,\r\n  taskViewsDecoder,\r\n  UpdateDisplayParams,\r\n  updateDisplayParamsDecoder,\r\n} from './types';\r\nimport { decode } from 'src/app/shared/helpers/decoders';\r\n\r\nfunction getRandomID(): string {\r\n  const low = Math.floor(Math.random() * 922337203).toString();\r\n  const high = Math.floor(Math.random() * 2000000000).toString();\r\n  return high + low;\r\n}\r\n\r\n/** Get URL for a task with specific parameters */\r\nexport function taskUrlWithParameters(taskUrl: string, token: string, platform: string, prefix = '', locale?: string): string {\r\n  const channelId = prefix + getRandomID();\r\n  const url = new URL(taskUrl);\r\n\r\n  url.searchParams.set('sToken', token);\r\n  url.searchParams.set('sPlatform', platform);\r\n  url.searchParams.set('channelId', channelId);\r\n  if (locale) url.searchParams.set('sLocale', locale);\r\n\r\n  return url.href;\r\n}\r\n\r\n/** Get Task object from an iframe */\r\nexport function taskProxyFromIframe(iframe : HTMLIFrameElement): Observable<Task> {\r\n  return new Observable<Window>(observer => {\r\n    if (iframe.contentWindow) {\r\n    // Get contentWindow when it exists\r\n      observer.next(iframe.contentWindow);\r\n      observer.complete();\r\n    } else observer.error(new Error('contentWindow not set for iframe'));\r\n  }).pipe(\r\n    // Check every 100ms whether the iframe loaded, for 5 minutes\r\n    retryWhen(err => err.pipe(delay(100), take(3000))),\r\n\r\n    // Get the RxMessagingChannel from the contentWindow\r\n    switchMap(window => rxBuild({\r\n      window,\r\n      origin: '*',\r\n      scope: new URL(iframe.src).searchParams.get('channelId') || '',\r\n    })),\r\n\r\n    // Get the Task from the channel\r\n    map((chan: RxMessagingChannel) => new Task(chan))\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * Task object, created from a RxMessagingChannel\r\n */\r\nexport class Task {\r\n  private platformSet = false;\r\n\r\n  constructor(private chan: RxMessagingChannel) {}\r\n\r\n  destroy(): void {\r\n    this.chan.destroy();\r\n  }\r\n\r\n  bindPlatform(platform: TaskPlatform): void {\r\n    if (this.platformSet) throw new Error('Task already has a platform set');\r\n\r\n    this.chan.bind(\r\n      'platform.validate',\r\n      mode => platform.validate(decode(D.string)(mode)),\r\n    );\r\n\r\n    this.chan.bind(\r\n      'platform.getTaskParams',\r\n      params => {\r\n        const [ key, defaultValue ] = (Array.isArray(params) ? params : []) as unknown[];\r\n        return platform.getTaskParams(decode(taskParamsKeyDefaultDecoder)({\r\n          key: key ?? undefined,\r\n          defaultValue: defaultValue ?? undefined,\r\n        }));\r\n      }\r\n    );\r\n    this.chan.bind(\r\n      'platform.showView',\r\n      view => platform.showView(decode(D.string)(view)),\r\n    );\r\n    this.chan.bind(\r\n      'platform.askHint',\r\n      hintToken => platform.askHint(decode(D.string)(hintToken)),\r\n    );\r\n    this.chan.bind(\r\n      'platform.updateDisplay',\r\n      data => platform.updateDisplay(decode(updateDisplayParamsDecoder)(data)),\r\n    );\r\n    this.chan.bind(\r\n      'platform.openUrl',\r\n      url => platform.openUrl(decode(openUrlParamsDecoder)(url)),\r\n    );\r\n    this.chan.bind(\r\n      'platform.log',\r\n      data => platform.log(decode(taskLogDecoder)(data)),\r\n    );\r\n\r\n    // Legacy calls\r\n    this.chan.bind(\r\n      'platform.updateHeight',\r\n      height => platform.updateDisplay({ height: decode(D.number)(height) }),\r\n    );\r\n    this.platformSet = true;\r\n  }\r\n\r\n  /**\r\n   * Task API functions\r\n   */\r\n  load(views: Object): Observable<unknown> {\r\n    return this.chan.call({\r\n      method: 'task.load',\r\n      params: views,\r\n    });\r\n  }\r\n\r\n  unload(): Observable<unknown> {\r\n    return this.chan.call({\r\n      method: 'task.unload',\r\n      timeout: 2000,\r\n    });\r\n  }\r\n\r\n  getHeight(): Observable<number> {\r\n    return this.chan.call({\r\n      method: 'task.getHeight',\r\n      timeout: 500,\r\n    }).pipe(map(([ height ]) => decode(D.number)(height)));\r\n  }\r\n\r\n  updateToken(token: string): Observable<unknown> {\r\n    return this.chan.call({\r\n      method: 'task.updateToken',\r\n      params: token,\r\n      timeout: 10000,\r\n    });\r\n  }\r\n\r\n  getMetaData(): Observable<TaskMetaData> {\r\n    return this.chan.call({\r\n      method: 'task.getMetaData',\r\n      timeout: 2000,\r\n    }).pipe(map(([ metadata ]) => decode(metadataDecoder)(metadata)));\r\n  }\r\n\r\n  getAnswer(): Observable<string> {\r\n    return this.chan.call({\r\n      method: 'task.getAnswer',\r\n      timeout: 2000\r\n    }).pipe(\r\n      map(([ answer ]) => decode(D.string)(answer)),\r\n      catchError(() => of('')),\r\n    );\r\n  }\r\n\r\n  reloadAnswer(answer: string): Observable<unknown> {\r\n    return this.chan.call({\r\n      method: 'task.reloadAnswer',\r\n      params: answer,\r\n      timeout: 2000\r\n    });\r\n  }\r\n\r\n  getState(): Observable<string> {\r\n    return this.chan.call({\r\n      method: 'task.getState',\r\n      timeout: 2000\r\n    }).pipe(\r\n      map(([ state ]) => decode(D.string)(state)),\r\n      catchError(() => of('')),\r\n    );\r\n  }\r\n\r\n  reloadState(state: string): Observable<unknown> {\r\n    return this.chan.call({\r\n      method: 'task.reloadState',\r\n      params: state,\r\n      timeout: 2000\r\n    });\r\n  }\r\n\r\n  getViews(): Observable<TaskViews> {\r\n    return this.chan.call({\r\n      method: 'task.getViews',\r\n      timeout: 2000\r\n    }).pipe(map(([ taskViews ]) => decode(taskViewsDecoder)(taskViews)));\r\n  }\r\n\r\n  showViews(views: Record<string, boolean>): Observable<unknown> {\r\n    return this.chan.call({\r\n      method: 'task.showViews',\r\n      params: views,\r\n      timeout: 2000\r\n    });\r\n  }\r\n\r\n  gradeAnswer(answer: string, answerToken: string): Observable<TaskGrade> {\r\n    return this.chan.call({\r\n      method: 'task.gradeAnswer',\r\n      params: [ answer, answerToken ],\r\n      timeout: 40000\r\n    }).pipe(\r\n      map(result => {\r\n        if (result.length === 0) throw new Error('task.gradeAnswer returned no arguments');\r\n        const [ score, message, scoreToken ] = (Array.isArray(result[0]) ? result[0] : result) as unknown[];\r\n        return { score, message, scoreToken };\r\n      }),\r\n      map(decode(taskGradeDecoder)),\r\n    );\r\n  }\r\n\r\n  getResources() : Observable<TaskResources> {\r\n    // TODO: validator (currently unused)\r\n    return this.chan.call({\r\n      method: 'task.getResources',\r\n      params: [],\r\n      timeout: 2000\r\n    });\r\n  }\r\n}\r\n\r\nexport interface TaskPlatform {\r\n  /*\r\n   * Simple prototypes for Bebras platform API functions, to be overriden by your\r\n   * \"platform\"'s specific functions (for each platform object).\r\n   */\r\n  validate(mode: string): Observable<void>,\r\n  showView(views: string): void,\r\n  askHint(hintToken: string): Observable<void>,\r\n  updateHeight(height: number): void,\r\n  updateDisplay(data: UpdateDisplayParams): void,\r\n  openUrl(url: OpenUrlParams): void,\r\n  log(data: TaskLog): void,\r\n  getTaskParams(keyAndDefaultValue: TaskParamsKeyDefault): TaskParamsValue,\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\n\r\nconst taskTokenDataDecoder = D.struct({\r\n  taskToken: D.string,\r\n});\r\n\r\ntype TaskTokenData = D.TypeOf<typeof taskTokenDataDecoder>;\r\nexport type TaskToken = TaskTokenData['taskToken'];\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TaskTokenService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  generate(itemId: string, attemptId: string, asTeamId?: string): Observable<TaskToken> {\r\n    const params = asTeamId ? new HttpParams({ fromObject: { as_team_id: asTeamId } }) : undefined;\r\n    return this.http.post<ActionResponse<unknown>>(\r\n      `${appConfig.apiUrl}/items/${itemId}/attempts/${attemptId}/generate-task-token`,\r\n      undefined,\r\n      { params },\r\n    ).pipe(\r\n      map(successData),\r\n      decodeSnakeCase(taskTokenDataDecoder),\r\n      map(data => data.taskToken),\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { EMPTY, fromEvent, Observable, of, ReplaySubject, TimeoutError } from 'rxjs';\r\nimport { catchError, delayWhen, filter, map, mapTo, shareReplay, switchMap, timeout, withLatestFrom } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { SECONDS } from 'src/app/shared/helpers/duration';\r\nimport { FullItemRoute } from 'src/app/shared/routing/item-route';\r\nimport { Answer } from '../http-services/get-answer.service';\r\nimport { TaskTokenService, TaskToken } from '../http-services/task-token.service';\r\nimport { Task, taskProxyFromIframe, taskUrlWithParameters } from '../task-communication/task-proxy';\r\n\r\nconst taskChannelIdPrefix = 'task-';\r\nconst loadTaskTimeout = 15 * SECONDS;\r\n\r\nexport interface ItemTaskConfig {\r\n  route: FullItemRoute,\r\n  url: string,\r\n  attemptId: string,\r\n  formerAnswer: Answer | null,\r\n  readOnly: boolean,\r\n  locale?: string,\r\n}\r\n\r\n@Injectable()\r\nexport class ItemTaskInitService implements OnDestroy {\r\n  private configFromItem$ = new ReplaySubject<ItemTaskConfig>(1);\r\n  private configFromIframe$ = new ReplaySubject<{ iframe: HTMLIFrameElement, bindPlatform(task: Task): void }>(1);\r\n\r\n  readonly config$ = this.configFromItem$.asObservable();\r\n  readonly iframe$ = this.configFromIframe$.pipe(map(config => config.iframe));\r\n  readonly taskToken$: Observable<TaskToken> = this.config$.pipe(\r\n    switchMap(({ attemptId, route }) => this.taskTokenService.generate(route.id, attemptId)),\r\n    shareReplay(1),\r\n  );\r\n\r\n  readonly iframeSrc$ = this.taskToken$.pipe(\r\n    withLatestFrom(this.config$),\r\n    map(([ taskToken, { url, locale }]) =>\r\n      taskUrlWithParameters(this.checkUrl(url), taskToken, appConfig.itemPlatformId, taskChannelIdPrefix, locale)\r\n    ),\r\n    shareReplay(1), // avoid duplicate xhr calls\r\n  );\r\n\r\n  readonly task$ = this.configFromIframe$.pipe(\r\n    delayWhen(({ iframe }) => fromEvent(iframe, 'load')), // triggered for good & bad url, not for not responding servers\r\n    switchMap(({ iframe, bindPlatform }) => taskProxyFromIframe(iframe).pipe(\r\n      switchMap(task => {\r\n        bindPlatform(task);\r\n        const initialViews = { task: true, solution: true, editor: true, hints: true, grader: true, metadata: true };\r\n        return task.load(initialViews).pipe(mapTo(task));\r\n      }),\r\n    )),\r\n    shareReplay(1),\r\n  );\r\n\r\n  readonly initError$ = this.configFromIframe$.pipe(switchMap(({ iframe }) => fromEvent(iframe, 'load'))).pipe(\r\n    switchMap(() => this.task$),\r\n    timeout({ first: loadTaskTimeout }), // after the iframe has loaded, if no connection to jschannel is made, consider the task broken\r\n    catchError(timeoutError => of(timeoutError)),\r\n    filter(error => error instanceof TimeoutError),\r\n  ) as Observable<TimeoutError>;\r\n  readonly urlError$ = this.iframeSrc$.pipe(\r\n    catchError((urlError: Error) => of(urlError)),\r\n    filter(error => error instanceof Error),\r\n  ) as Observable<Error>;\r\n\r\n  initialized = false;\r\n  configured = false;\r\n\r\n  constructor(\r\n    private taskTokenService: TaskTokenService,\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    // task is a one replayed value observable. If a task has been emitted, destroy it ; else nothing to do.\r\n    this.task$.pipe(timeout(0), catchError(() => EMPTY)).subscribe(task => task.destroy());\r\n    if (!this.configFromItem$.closed) this.configFromItem$.complete();\r\n    if (!this.configFromIframe$.closed) this.configFromIframe$.complete();\r\n  }\r\n\r\n  configure(route: FullItemRoute, url: string, attemptId: string, formerAnswer: Answer | null, locale?: string, readOnly = false): void {\r\n    if (this.configured) throw new Error('task init service can be configured once only');\r\n    this.configured = true;\r\n\r\n    this.configFromItem$.next({ route, url, attemptId, formerAnswer, locale, readOnly });\r\n    this.configFromItem$.complete();\r\n  }\r\n\r\n  initTask(iframe: HTMLIFrameElement, bindPlatform: (task: Task) => void): void {\r\n    if (this.initialized) throw new Error('task init service can be initialized once only');\r\n    this.initialized = true;\r\n    this.configFromIframe$.next({ iframe, bindPlatform });\r\n    this.configFromIframe$.complete();\r\n  }\r\n\r\n  private checkUrl(url: string): string {\r\n    try {\r\n      new URL(url);\r\n    } catch (error) {\r\n      throw new Error($localize`Maformed url: \"${url}\"`);\r\n    }\r\n\r\n    if (!url.startsWith('http')) throw new Error($localize`Invalid url \"${url}\": please provide an http(s) link`);\r\n\r\n    // Avoid mixed-content error: https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content/How_to_fix_website_with_mixed_content\r\n    // mixed-content is when an https website tries to load an http content, ie: iframe.src, script.src, etc.\r\n    const isMixedContent = globalThis.location.protocol === 'https:' && url.startsWith('http:');\r\n    if (isMixedContent) throw new Error($localize`Invalid url, please provide a secure task url (https)`);\r\n    return url;\r\n  }\r\n}\r\n","import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function retryWhen(notifier) {\n    return operate((source, subscriber) => {\n        let innerSub;\n        let syncResub = false;\n        let errors$;\n        const subscribeForRetryWhen = () => {\n            innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, undefined, (err) => {\n                if (!errors$) {\n                    errors$ = new Subject();\n                    notifier(errors$).subscribe(createOperatorSubscriber(subscriber, () => innerSub ? subscribeForRetryWhen() : (syncResub = true)));\n                }\n                if (errors$) {\n                    errors$.next(err);\n                }\n            }));\n            if (syncResub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                syncResub = false;\n                subscribeForRetryWhen();\n            }\n        };\n        subscribeForRetryWhen();\n    });\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { ActionResponse, assertSuccess } from 'src/app/shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport const answerDecoder = D.struct({\r\n  answer: D.nullable(D.string),\r\n  attemptId: D.nullable(D.string),\r\n  authorId: D.string,\r\n  id: D.string,\r\n  itemId: D.string,\r\n  score: D.nullable(D.number),\r\n  state: D.nullable(D.string),\r\n  type: D.literal('Submission', 'Saved', 'Current'),\r\n});\r\n\r\nexport type Answer = D.TypeOf<typeof answerDecoder>;\r\n\r\ninterface UpdateCurrentAnswerBody {\r\n  answer: string,\r\n  state: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CurrentAnswerService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get(itemId: string, attemptId: string, asTeamId?: string): Observable<Answer | null> {\r\n    const params = new HttpParams({\r\n      fromObject: asTeamId ? { attempt_id: attemptId, as_team_id: asTeamId } : { attempt_id: attemptId },\r\n    });\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/items/${itemId}/current-answer`, { params })\r\n      .pipe(decodeSnakeCase(answerDecoder));\r\n  }\r\n\r\n  update(itemId: string, attemptId: string, body: UpdateCurrentAnswerBody, asTeamId?: string): Observable<void> {\r\n    const params = new HttpParams({\r\n      fromObject: asTeamId ? { attempt_id: attemptId, as_team_id: asTeamId } : { attempt_id: attemptId },\r\n    });\r\n    return this.http\r\n      .put<ActionResponse<unknown>>(`${appConfig.apiUrl}/items/${itemId}/attempts/${attemptId}/answers/current`, body, { params })\r\n      .pipe(map(assertSuccess), map(() => undefined));\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { assertSuccess, SimpleActionResponse } from 'src/app/shared/http-services/action-response';\r\n\r\nexport interface SaveAnswerPayload {\r\n  answer: string,\r\n  state: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AnswerService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  save(itemId: string, attemptId: string, payload: SaveAnswerPayload): Observable<void> {\r\n    return this.http\r\n      .post<SimpleActionResponse>(`${appConfig.apiUrl}/items/${itemId}/attempts/${attemptId}/answers`, payload)\r\n      .pipe(map(assertSuccess));\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { map } from 'rxjs/operators';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\n\r\nconst answerTokenDataDecoder = D.struct({\r\n  answerToken: D.string,\r\n});\r\n\r\ntype AnswerTokenData = D.TypeOf<typeof answerTokenDataDecoder>;\r\nexport type AnswerToken = AnswerTokenData['answerToken'];\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AnswerTokenService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  generate(answer: string, taskToken: string): Observable<AnswerToken> {\r\n    return this.http.post<ActionResponse<unknown>>(`${appConfig.apiUrl}/answers`, {\r\n      answer,\r\n      task_token: taskToken,\r\n    }).pipe(\r\n      map(successData),\r\n      decodeSnakeCase(answerTokenDataDecoder),\r\n      map(data => data.answerToken),\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { TaskToken } from './task-token.service';\r\nimport { TaskScore, TaskScoreToken } from '../task-communication/types';\r\nimport { AnswerToken } from './answer-token.service';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\nimport { map, mapTo } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GradeService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  save(\r\n    taskToken: TaskToken,\r\n    answerToken?: AnswerToken,\r\n    score?: TaskScore,\r\n    scoreToken?: TaskScoreToken,\r\n  ): Observable<void> {\r\n    return this.http.post<ActionResponse<unknown>>(`${appConfig.apiUrl}/items/save-grade`, {\r\n      task_token: taskToken,\r\n      answer_token: answerToken,\r\n      score,\r\n      score_token: scoreToken,\r\n    }).pipe(\r\n      map(successData),\r\n      mapTo(undefined),\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { combineLatest, EMPTY, forkJoin, interval, merge, Observable, of, ReplaySubject, Subject } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  delayWhen,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  mapTo,\r\n  retry,\r\n  shareReplay,\r\n  startWith,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n  timeout,\r\n  withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { SECONDS } from 'src/app/shared/helpers/duration';\r\nimport { errorIsHTTPForbidden, implementsError } from 'src/app/shared/helpers/errors';\r\nimport { isNotNull } from 'src/app/shared/helpers/null-undefined-predicates';\r\nimport { repeatLatestWhen } from 'src/app/shared/helpers/repeatLatestWhen';\r\nimport { AnswerTokenService } from '../http-services/answer-token.service';\r\nimport { AnswerService } from '../http-services/answer.service';\r\nimport { Answer, CurrentAnswerService } from '../http-services/current-answer.service';\r\nimport { GradeService } from '../http-services/grade.service';\r\nimport { ItemTaskInitService } from './item-task-init.service';\r\n\r\nconst answerAndStateSaveInterval = 5*SECONDS;\r\n\r\n@Injectable()\r\nexport class ItemTaskAnswerService implements OnDestroy {\r\n  private destroyed$ = new Subject<void>();\r\n\r\n  private errorSubject = new Subject<Error>();\r\n  readonly error$ = this.errorSubject.asObservable();\r\n\r\n  private scoreChange = new Subject<number>();\r\n  readonly scoreChange$ = this.scoreChange.asObservable();\r\n\r\n  private saved$ = new ReplaySubject<{ answer: string, state: string }>();\r\n  private saveError$ = new Subject<Error>();\r\n\r\n  private task$ = this.taskInitService.task$.pipe(takeUntil(this.error$));\r\n  private config$ = this.taskInitService.config$.pipe(takeUntil(this.error$));\r\n  private taskToken$ = this.taskInitService.taskToken$.pipe(takeUntil(this.error$));\r\n\r\n  private initialAnswer$: Observable<Answer | null> = this.config$.pipe(\r\n    switchMap(({ route, attemptId, formerAnswer, readOnly }) => {\r\n      if (route.answerId) {\r\n        return readOnly ? of(formerAnswer) : this.loadFormerAsNewCurrentAnswer(route.id, attemptId, formerAnswer);\r\n      }\r\n\r\n      return readOnly ? of(formerAnswer) : this.getCurrentAnswer(route.id, attemptId);\r\n    }),\r\n    retry(3),\r\n    shareReplay(1), // avoid duplicate xhr calls on multiple subscriptions.\r\n  );\r\n\r\n  private initializedTaskState$ = combineLatest([\r\n    this.initialAnswer$.pipe(catchError(() => EMPTY)), // error is handled elsewhere\r\n    this.task$,\r\n  ]).pipe(\r\n    switchMap(([ initialAnswer, task ]) =>\r\n      (initialAnswer?.state ? task.reloadState(initialAnswer.state).pipe(mapTo(undefined)) : of(undefined))\r\n    ),\r\n    shareReplay(1),\r\n  );\r\n  private initializedTaskAnswer$ = combineLatest([\r\n    this.initialAnswer$.pipe(catchError(() => EMPTY)), // error is handled elsewhere\r\n    this.task$,\r\n  ]).pipe(\r\n    delayWhen(() => this.initializedTaskState$),\r\n    switchMap(([ initialAnswer, task ]) =>\r\n      (initialAnswer?.answer ? task.reloadAnswer(initialAnswer.answer).pipe(mapTo(undefined)) : of(undefined))\r\n    ),\r\n    shareReplay(1),\r\n  );\r\n\r\n  private canStartSaveInterval$: Observable<void> = this.config$.pipe(\r\n    take(1),\r\n    filter(({ readOnly }) => !readOnly),\r\n    map(() => undefined),\r\n    delayWhen(() => combineLatest([ this.saved$, this.initializedTaskState$, this.initializedTaskAnswer$ ])),\r\n  );\r\n\r\n  private refreshAnswerAndStatePeriod = Math.max(answerAndStateSaveInterval, (window.taskSaveIntervalInSec ?? 0)*SECONDS);\r\n  private answerOrStateChange$ = interval(this.refreshAnswerAndStatePeriod).pipe(\r\n    takeUntil(this.destroyed$),\r\n    switchMap(() => this.task$),\r\n    switchMap(task => forkJoin({ answer: task.getAnswer(), state: task.getState() })),\r\n    distinctUntilChanged((a, b) => a.answer === b.answer && a.state === b.state),\r\n  );\r\n\r\n  private autoSaveInterval$: Observable<{ answer: string, state: string } | Error> = this.canStartSaveInterval$.pipe(\r\n    switchMap(() => this.saved$),\r\n    repeatLatestWhen(this.saveError$),\r\n    switchMap(saved => this.answerOrStateChange$.pipe(\r\n      filter(current => current.answer !== saved.answer || current.state !== saved.state),\r\n      take(1),\r\n    )),\r\n    withLatestFrom(this.config$),\r\n    switchMap(([ current, { route, attemptId }]) => this.currentAnswerService.update(route.id, attemptId, current).pipe(\r\n      map(() => current),\r\n      catchError(() => of(new Error('auto save failed'))),\r\n    )),\r\n  );\r\n\r\n  readonly saveAnswerAndStateInterval$ = merge(\r\n    this.saved$.pipe(map(() => ({ success: true }))),\r\n    this.saveError$.pipe(map(() => ({ success: false }))),\r\n  );\r\n\r\n  private subscriptions = [\r\n    this.initializedTaskAnswer$.subscribe({\r\n      error: err => this.errorSubject.next(err instanceof Error ? err : new Error('unknown error')),\r\n    }),\r\n    this.initializedTaskState$.subscribe({\r\n      error: err => this.errorSubject.next(err instanceof Error ? err : new Error('unknown error')),\r\n    }),\r\n    this.initialAnswer$\r\n      .subscribe({\r\n        next: initial => this.saved$.next({ answer: initial?.answer ?? '', state: initial?.state ?? '' }),\r\n        error: err => this.errorSubject.next(implementsError(err) ? err : new Error('unknown error')),\r\n      }),\r\n    this.autoSaveInterval$.subscribe(savedOrError => {\r\n      if (savedOrError instanceof Error) this.saveError$.next(savedOrError);\r\n      else this.saved$.next(savedOrError);\r\n    }),\r\n  ];\r\n\r\n  constructor(\r\n    private taskInitService: ItemTaskInitService,\r\n    private currentAnswerService: CurrentAnswerService,\r\n    private answerService: AnswerService,\r\n    private answerTokenService: AnswerTokenService,\r\n    private gradeService: GradeService,\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.errorSubject.complete();\r\n    this.destroyed$.next();\r\n    this.destroyed$.complete();\r\n  }\r\n\r\n  submitAnswer(): Observable<unknown> {\r\n    // Step 1: get answer from task\r\n    const answer$ = this.task$.pipe(take(1), switchMap(task => task.getAnswer()), shareReplay(1));\r\n\r\n    // Step 2: generate answer token with backend\r\n    const answerToken$ = combineLatest([ this.taskToken$, answer$ ]).pipe(\r\n      take(1),\r\n      switchMap(([ taskToken, answer ]) => this.answerTokenService.generate(answer, taskToken)),\r\n      shareReplay(1),\r\n    );\r\n\r\n    // Step 3: get answer grade with answer token from task\r\n    const grade$ = combineLatest([ this.task$, answer$, answerToken$ ]).pipe(\r\n      take(1),\r\n      switchMap(([ task, answer, answerToken ]) => task.gradeAnswer(answer, answerToken)),\r\n      shareReplay(1),\r\n    );\r\n\r\n    // Step 4: Save grade in backend\r\n    const saveGrade$ = combineLatest([ this.taskToken$, answerToken$, grade$ ]).pipe(\r\n      take(1),\r\n      switchMap(([ taskToken, answerToken, grade ]) => this.gradeService.save(\r\n        taskToken,\r\n        answerToken,\r\n        grade.score,\r\n        grade.scoreToken ?? undefined,\r\n      )),\r\n      shareReplay(1),\r\n    );\r\n    combineLatest([ grade$, saveGrade$ ])\r\n      .pipe(catchError(() => EMPTY)) // error is handled elsewhere by returning saveGrade$\r\n      .subscribe(([ grade ]) => {\r\n        if (grade.score !== undefined) this.scoreChange.next(grade.score);\r\n      });\r\n    return saveGrade$;\r\n  }\r\n\r\n  clearAnswer(): Observable<unknown> {\r\n    return this.task$.pipe(take(1), switchMap(task => task.reloadAnswer('')));\r\n  }\r\n\r\n  saveAnswerAndState(): Observable<{ saving: boolean }> {\r\n    return combineLatest([ this.saved$, this.task$, this.config$ ]).pipe(\r\n      take(1),\r\n      // save action must applied straight away ONLY if there is an available config & task & saved-value couple\r\n      // if such couple is not available straight away, it means the user has navigated so quickly that the task could not be initialized\r\n      // therefore, no user action on the task could have been made, so there's no treatment to apply (catchError -> Empty)\r\n      timeout(1),\r\n      catchError(() => EMPTY),\r\n\r\n      switchMap(([ saved, task, config ]) => forkJoin({\r\n        config: of(config),\r\n        saved: of(saved),\r\n        current: forkJoin({ answer: task.getAnswer(), state: task.getState() }),\r\n      })),\r\n\r\n      switchMap(({ saved, current, config: { route, attemptId, readOnly } }) => {\r\n        if (readOnly) return of({ saving: false });\r\n        const currentIsSaved = saved.answer === current.answer && saved.state === current.state;\r\n        if (currentIsSaved) return of({ saving: false });\r\n\r\n        return this.currentAnswerService.update(route.id, attemptId, current).pipe(\r\n          map(() => ({ saving: false })),\r\n          startWith({ saving: true }),\r\n        );\r\n      }),\r\n      defaultIfEmpty({ saving: false }), // when a timeout is caught, the observable is empty\r\n      shareReplay(1),\r\n    );\r\n  }\r\n\r\n  private loadFormerAsNewCurrentAnswer(itemId: string, attemptId: string, formerAnswer: Answer | null): Observable<Answer | null> {\r\n    const savedCurrentAnswer$ = this.getCurrentAnswer(itemId, attemptId).pipe(\r\n      filter(isNotNull),\r\n      switchMap(current => this.answerService.save(itemId, attemptId, { answer: current.answer ?? '', state: current.state ?? '' })),\r\n      defaultIfEmpty(undefined),\r\n    );\r\n\r\n    return savedCurrentAnswer$.pipe(\r\n      switchMap(() => {\r\n        if (!formerAnswer) return of(null);\r\n        const body = { answer: formerAnswer.answer ?? '', state: formerAnswer.state ?? '' };\r\n        return this.currentAnswerService.update(itemId, attemptId, body).pipe(map(() => formerAnswer));\r\n      }),\r\n    );\r\n  }\r\n\r\n  private getCurrentAnswer(itemId: string, attemptId: string): Observable<Answer | null> {\r\n    return this.currentAnswerService.get(itemId, attemptId).pipe(\r\n      catchError(error => {\r\n        // currently, the backend returns a 403 status when no current answer exist for user+item+attempt\r\n        if (errorIsHTTPForbidden(error)) return of(null);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    taskSaveIntervalInSec?: number,\r\n  }\r\n}\r\n\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { combineLatest, merge, ReplaySubject, Subject } from 'rxjs';\r\nimport { combineLatestWith, delayWhen, distinctUntilChanged, filter, map, switchMap, takeUntil } from 'rxjs/operators';\r\nimport { isNotUndefined } from 'src/app/shared/helpers/null-undefined-predicates';\r\nimport { TaskViews, UpdateDisplayParams } from '../task-communication/types';\r\nimport { ItemTaskInitService } from './item-task-init.service';\r\n\r\n@Injectable()\r\nexport class ItemTaskViewsService implements OnDestroy {\r\n  private errorSubject = new Subject<Error>();\r\n  readonly error$ = this.errorSubject.asObservable();\r\n\r\n  private displaySubject = new ReplaySubject<UpdateDisplayParams>(1);\r\n  readonly display$ = this.displaySubject.asObservable().pipe(takeUntil(this.error$));\r\n  private task$ = this.initService.task$.pipe(takeUntil(this.error$));\r\n\r\n  readonly views$ = merge(\r\n    this.task$.pipe(switchMap(task => task.getViews())),\r\n    this.display$.pipe(map(({ views }) => views), filter(isNotUndefined)),\r\n  ).pipe(\r\n    combineLatestWith(this.task$.pipe(switchMap(task => task.getMetaData()))),\r\n    map(([ views, { disablePlatformProgress }]) => {\r\n      const availableViews = this.getAvailableViews(views);\r\n      return disablePlatformProgress ? availableViews : [ ...availableViews, 'progress' ];\r\n    }),\r\n  );\r\n\r\n  private activeViewSubject = new ReplaySubject<string>(1);\r\n  readonly activeView$ = this.activeViewSubject.pipe(\r\n    distinctUntilChanged(),\r\n    delayWhen(() => this.task$), // start emitting only when task is loaded since it makes no sense to emit before\r\n  );\r\n\r\n  // By default, load 'task' view when the task is initialized\r\n  private showViews$ = combineLatest([ this.initService.task$, this.activeView$ ]).pipe(\r\n    switchMap(([ task, view ]) => task.showViews({ [view]: true })),\r\n  );\r\n\r\n  private subscriptions = [\r\n    this.showViews$.subscribe({\r\n      error: err => this.errorSubject.next(err instanceof Error ? err : new Error('unknown error')),\r\n    }),\r\n    combineLatest([\r\n      this.initService.iframe$,\r\n      this.display$.pipe(map(display => display.scrollTop), filter(isNotUndefined)),\r\n    ]).subscribe(([ iframe, scrollTopInPx ]) => {\r\n      const iframeTopInPx = iframe.getBoundingClientRect().top + globalThis.scrollY;\r\n      globalThis.scrollTo({ behavior: 'smooth', top: iframeTopInPx + scrollTopInPx });\r\n    }),\r\n  ];\r\n\r\n  constructor(\r\n    private initService: ItemTaskInitService,\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.displaySubject.complete();\r\n    this.activeViewSubject.complete();\r\n    this.errorSubject.complete();\r\n  }\r\n\r\n  updateDisplay(display: UpdateDisplayParams): void {\r\n    this.displaySubject.next(display);\r\n  }\r\n\r\n  showView(view: string): void {\r\n    this.activeViewSubject.next(view);\r\n  }\r\n\r\n  private getAvailableViews(views: TaskViews): string[] {\r\n    return Object.entries(views)\r\n      .filter(([ name, view ], _index, entries) => {\r\n        const requiresOtherView = !!view.requires;\r\n        const isIncludedInOtherView = entries.some(([ , otherView ]) => !!otherView.includes?.includes(name));\r\n        return !requiresOtherView && !isIncludedInOtherView;\r\n      })\r\n      .map(([ name ]) => name)\r\n      .sort((a, b) => this.sortView(a, b));\r\n  }\r\n\r\n  private sortView(a: string, b: string): number {\r\n    const weights: Record<string, number> = {\r\n      task: 0, // Statement\r\n      editor: 1, // Solve\r\n      submission: 2, // Submission\r\n      hints: 3, // Hints\r\n      forum: 4, // Forum\r\n      solution: 5,// Solution\r\n    };\r\n    const unknownViewWeight = Math.max(...Object.values(weights)) + 1;\r\n    return (weights[a] ?? unknownViewWeight) - (weights[b] ?? unknownViewWeight);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\nconst askHintDataDecoder = D.struct({\r\n  taskToken: D.string,\r\n});\r\nexport type AskHintData = D.TypeOf<typeof askHintDataDecoder>;\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AskHintService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) {}\r\n\r\n  ask(taskToken: string, hintRequested: string): Observable<AskHintData> {\r\n\r\n    return this.http\r\n      .post<ActionResponse<unknown>>(`${appConfig.apiUrl}/items/ask-hint`, {\r\n        task_token: taskToken,\r\n        hint_requested: hintRequested,\r\n      }).pipe(\r\n        map(successData),\r\n        decodeSnakeCase(askHintDataDecoder)\r\n      );\r\n  }\r\n\r\n}\r\n","import { Location } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { animationFrames, combineLatest, EMPTY, merge, Observable, Subject, throwError } from 'rxjs';\r\nimport { catchError, map, mapTo, shareReplay, switchMap, take, tap } from 'rxjs/operators';\r\nimport { ActivityNavTreeService } from 'src/app/core/services/navigation/item-nav-tree.service';\r\nimport { openNewTab, replaceWindowUrl } from 'src/app/shared/helpers/url';\r\nimport { FullItemRoute, itemRoute } from 'src/app/shared/routing/item-route';\r\nimport { ItemRouter } from 'src/app/shared/routing/item-router';\r\nimport { AskHintService } from '../http-services/ask-hint.service';\r\nimport { Answer } from '../http-services/get-answer.service';\r\nimport { Task, TaskPlatform } from '../task-communication/task-proxy';\r\nimport { ItemTaskAnswerService } from './item-task-answer.service';\r\nimport { ItemTaskInitService } from './item-task-init.service';\r\nimport { ItemTaskViewsService } from './item-task-views.service';\r\n\r\nexport interface TaskConfig {\r\n  readOnly: boolean,\r\n  formerAnswer: Answer | null,\r\n  locale?: string,\r\n}\r\n\r\n@Injectable()\r\nexport class ItemTaskService {\r\n  readonly unknownError$ = merge(this.answerService.error$, this.viewsService.error$).pipe(shareReplay(1));\r\n  readonly initError$ = this.initService.initError$.pipe(shareReplay(1));\r\n  readonly urlError$ = this.initService.urlError$.pipe(shareReplay(1));\r\n  readonly hintError$ = new Subject<void>();\r\n\r\n  readonly error$ = merge(\r\n    this.initError$,\r\n    this.urlError$,\r\n    this.unknownError$,\r\n  ).pipe(switchMap(error => throwError(() => error)));\r\n\r\n  readonly task$ = this.initService.task$;\r\n  readonly iframeSrc$ = this.initService.iframeSrc$;\r\n  get initialized(): boolean {\r\n    return this.initService.initialized;\r\n  }\r\n\r\n  readonly views$ = this.viewsService.views$;\r\n  readonly display$ = this.viewsService.display$;\r\n  readonly activeView$ = this.viewsService.activeView$;\r\n\r\n  readonly scoreChange$ = this.answerService.scoreChange$;\r\n  readonly saveAnswerAndStateInterval$ = this.answerService.saveAnswerAndStateInterval$;\r\n\r\n  private navigateToNext$ = this.activityNavTreeService.navigationNeighbors$.pipe(\r\n    map(neighborsState => (neighborsState.isReady ? (neighborsState.data?.next ?? neighborsState.data?.parent)?.navigateTo : undefined)),\r\n    shareReplay(1),\r\n  );\r\n\r\n  private readOnly = false;\r\n  private attemptId?: string;\r\n\r\n  constructor(\r\n    private initService: ItemTaskInitService,\r\n    private answerService: ItemTaskAnswerService,\r\n    private viewsService: ItemTaskViewsService,\r\n    private itemRouter: ItemRouter,\r\n    private activityNavTreeService: ActivityNavTreeService,\r\n    private router: Router,\r\n    private location: Location,\r\n    private askHintService: AskHintService,\r\n  ) {}\r\n\r\n  configure(route: FullItemRoute, url: string, attemptId: string, options: TaskConfig): void {\r\n    this.readOnly = options.readOnly;\r\n    this.attemptId = attemptId;\r\n    this.initService.configure(route, url, attemptId, options.formerAnswer, options.locale, options.readOnly);\r\n  }\r\n\r\n  initTask(iframe: HTMLIFrameElement): void {\r\n    this.initService.initTask(iframe, task => this.bindPlatform(task));\r\n  }\r\n\r\n  showView(view: string): void {\r\n    this.viewsService.showView(view);\r\n  }\r\n\r\n  saveAnswerAndState(): Observable<{ saving: boolean }> {\r\n    return this.answerService.saveAnswerAndState();\r\n  }\r\n\r\n  private bindPlatform(task: Task): void {\r\n    if (!this.attemptId) throw new Error('attemptId must be defined. The \"configure\" method has probably not been called as expected');\r\n    // attempt id can be used as a seed as these are currently assigned incrementally by participant id\r\n    // If this changes, this needs to be adapted.\r\n    const randomSeed = Number(this.attemptId);\r\n    if (Number.isNaN(randomSeed)) throw new Error('random seed must be a number');\r\n\r\n    const platform: TaskPlatform = {\r\n      validate: mode => (this.readOnly ? this.validateReadOnly(mode) : this.validate(mode)).pipe(mapTo(undefined)),\r\n      getTaskParams: () => ({\r\n        minScore: 0,\r\n        maxScore: 100,\r\n        randomSeed,\r\n        noScore: 0,\r\n        readOnly: this.readOnly,\r\n        options: {},\r\n      }),\r\n      updateHeight: height => platform.updateDisplay({ height }),\r\n      updateDisplay: display => this.viewsService.updateDisplay(display),\r\n      showView: view => this.viewsService.showView(view),\r\n      openUrl: params => {\r\n        if (typeof params === 'string') return this.navigateToItem(params);\r\n        if ('path' in params) return this.navigateToItem(params.path, params.newTab);\r\n        return this.navigate(params.url, params.newTab);\r\n      },\r\n      askHint: (hintToken: string) => combineLatest([ this.askHint(hintToken), this.task$ ]).pipe(\r\n        take(1),\r\n        switchMap(([ taskToken, task ]) => task.updateToken(taskToken)),\r\n        map(() => undefined),\r\n        shareReplay(1),\r\n      ),\r\n      log: (messages: string[]) => {\r\n        // eslint-disable-next-line no-console\r\n        console.log(...messages);\r\n      },\r\n    };\r\n    task.bindPlatform(platform);\r\n  }\r\n\r\n  private validate(mode: string): Observable<unknown> {\r\n    switch (mode) {\r\n      case 'cancel': return this.answerService.clearAnswer();\r\n      case 'nextImmediate': return this.navigateToNextItem();\r\n      case 'next': return this.answerService.submitAnswer().pipe(switchMap(() => this.navigateToNextItem()));\r\n      case 'top': return this.answerService.submitAnswer().pipe(switchMap(() => this.scrollTop()));\r\n      default: return this.answerService.submitAnswer();\r\n    }\r\n  }\r\n\r\n  private validateReadOnly(mode: string): Observable<unknown> {\r\n    switch (mode) {\r\n      case 'cancel': return EMPTY;\r\n      case 'nextImmediate': return this.navigateToNextItem();\r\n      case 'next': return this.navigateToNextItem();\r\n      case 'top': return this.scrollTop();\r\n      default: return EMPTY;\r\n    }\r\n  }\r\n\r\n  private navigateToNextItem(): Observable<void> {\r\n    return this.navigateToNext$.pipe(\r\n      take(1),\r\n      tap(nav => {\r\n        if (nav) nav();\r\n      }),\r\n      map(() => undefined),\r\n    );\r\n  }\r\n\r\n  private scrollTop(): Observable<void> {\r\n    return animationFrames().pipe(take(1), tap(() => window.scrollTo({ behavior: 'smooth', top: 0 })), map(() => undefined));\r\n  }\r\n\r\n  private navigateToItem(path: string, newTab = false): void {\r\n    const [ , ...parentIds ] = path.split('/');\r\n    const id = parentIds.pop();\r\n    if (!id) throw new Error('id must be defined');\r\n\r\n    const route = itemRoute('activity', id, parentIds);\r\n    if (newTab) this.navigate(this.router.serializeUrl(this.itemRouter.url(route)), true);\r\n    else this.itemRouter.navigateTo(route);\r\n  }\r\n\r\n  private navigate(href: string, newTab = false): void {\r\n    if (newTab) openNewTab(href, this.location);\r\n    else replaceWindowUrl(href, this.location);\r\n  }\r\n\r\n  private askHint(hintToken: string): Observable<string> {\r\n    return this.initService.taskToken$.pipe(\r\n      switchMap(taskToken => this.askHintService.ask(taskToken, hintToken)),\r\n      map(data => data.taskToken),\r\n      catchError(err => {\r\n        this.hintError$.next();\r\n        throw err;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { assertSuccess, SimpleActionResponse } from 'src/app/shared/http-services/action-response';\r\nimport { requestTimeout } from 'src/app/shared/interceptors/interceptor_common';\r\n\r\nconst publishServiceTimeout = 5000; // it the backend service depends on other services, it is useful to allow more time\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PublishResultsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  publish(itemId: string, attemptId: string): Observable<void> {\r\n    return this.http\r\n      .post<SimpleActionResponse>(`${appConfig.apiUrl}/items/${itemId}/attempts/${attemptId}/publish`, null, {\r\n        context: new HttpContext().set(requestTimeout, publishServiceTimeout),\r\n      }).pipe(map(assertSuccess));\r\n  }\r\n\r\n}\r\n","import { AfterViewChecked, Directive, ElementRef, HostListener, Input, OnChanges, Renderer2, SimpleChanges } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[algFullHeightContent]',\r\n})\r\nexport class FullHeightContentDirective implements AfterViewChecked, OnChanges {\r\n  @Input() algFullHeightContent = true;\r\n\r\n  @HostListener('window:resize')\r\n  resize(): void {\r\n    this.setHeight();\r\n  }\r\n\r\n  constructor(private el: ElementRef<HTMLElement>, private renderer: Renderer2) {\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    this.renderer.setStyle(this.el.nativeElement, 'display', 'block');\r\n    if (this.algFullHeightContent) this.setHeight();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.algFullHeightContent && !changes.algFullHeightContent.firstChange) {\r\n      this.algFullHeightContent ? this.setHeight() : this.unsetHeight();\r\n    }\r\n  }\r\n\r\n  unsetHeight(): void {\r\n    this.renderer.removeStyle(this.el.nativeElement, 'min-height');\r\n    this.renderer.removeStyle(this.el.nativeElement, 'height');\r\n  }\r\n\r\n  setHeight(): void {\r\n    const top = this.el.nativeElement.getBoundingClientRect().top + globalThis.scrollY;\r\n    this.renderer.removeStyle(this.el.nativeElement, 'height');\r\n    this.renderer.setStyle(this.el.nativeElement, 'min-height', `calc(100vh - ${top}px)`);\r\n  }\r\n}\r\n","<div class=\"loading text-center\">\r\n  <div *ngIf=\"label\" class=\"label\">{{ label }}</div>\r\n  <alg-loading></alg-loading>\r\n  <div *ngIf=\"delayedLabel\" class=\"sub-label\" [style.visibility]=\"showDelayedLabel ? undefined : 'hidden'\">\r\n    {{ delayedLabel }}\r\n  </div>\r\n</div>\r\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { Subscription, timer } from 'rxjs';\r\nimport { SECONDS } from 'src/app/shared/helpers/duration';\r\n\r\n@Component({\r\n  selector: 'alg-task-loader',\r\n  templateUrl: './task-loader.component.html',\r\n  styleUrls: [ './task-loader.component.scss' ]\r\n})\r\nexport class TaskLoaderComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() label = '';\r\n  /** label displayed after a delay (by default 5s) */\r\n  @Input() delayedLabel?: string;\r\n  /** delay in seconds after which the delayedLabel is displayed */\r\n  @Input() delay = 5;\r\n\r\n  showDelayedLabel = false;\r\n  subscription?: Subscription;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.delayedLabel) {\r\n      this.subscription = timer(this.delay*SECONDS).subscribe(() => this.showDelayedLabel = true);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription?.unsubscribe();\r\n  }\r\n\r\n}\r\n","<div class=\"item-display\" *ngIf=\"state$ | async as state\">\r\n  <div *ngIf=\"state.isError && !showTaskAnyway\" class=\"errors\">\r\n    <ng-template #defaultErrorMessage>\r\n      <alg-error\r\n        i18n-message message=\"Unable to load the task\"\r\n      ></alg-error>\r\n    </ng-template>\r\n\r\n    <ng-container *ngIf=\"editingPermission | allowsEditingAll; else defaultErrorMessage\">\r\n      <alg-error\r\n        *ngIf=\"initError$ | async; else urlError\"\r\n        i18n-message message=\"It usually occurs when task url is invalid. If the task url is valid and the problem persists, please contact us.\"\r\n      ></alg-error>\r\n\r\n      <ng-template #urlError>\r\n        <alg-error\r\n          *ngIf=\"urlError$ | async as error; else unknownError\"\r\n          message=\"{{ error.message }}\"\r\n        ></alg-error>\r\n      </ng-template>\r\n\r\n      <ng-template #unknownError>\r\n        <alg-error\r\n          *ngIf=\"unknownError$ | async as error\"\r\n          [message]=\"errorMessage\"\r\n        ></alg-error>\r\n      </ng-template>\r\n    </ng-container>\r\n\r\n    <div class=\"error-buttons\">\r\n      <p-button\r\n        class=\"error-button\"\r\n        styleClass=\"alg-button\"\r\n        i18n-label label=\"Show task anyway (for debugging)\"\r\n        (click)=\"showTaskAnyway = true\"\r\n      ></p-button>\r\n      <p-button\r\n        class=\"error-button\"\r\n        styleClass=\"alg-button\"\r\n        i18n-label label=\"Retry\"\r\n        (click)=\"refresh.emit()\"\r\n      ></p-button>\r\n    </div>\r\n  </div>\r\n  <div\r\n    class=\"iframe-container\"\r\n    [style.display]=\"state.isError && !showTaskAnyway ? 'none' : 'block'\"\r\n    [algFullHeightContent]=\"true\"\r\n  >\r\n    <div class=\"saving-answer\" *ngIf=\"savingAnswer\">\r\n      <p class=\"saving-answer-message\">\r\n        <span i18n>Saving answer...</span>\r\n        <alg-loading size=\"medium\"></alg-loading>\r\n        <p-button type=\"button\" (click)=\"skipSave.emit()\" i18n-label label=\"Skip\"></p-button>\r\n      </p>\r\n    </div>\r\n    <iframe\r\n      *ngIf=\"iframeSrc$ | async as iframeSrc\"\r\n      [style.height]=\"(state.isReady || showTaskAnyway) ? (iframeHeight$ | async) : undefined\"\r\n      [src]=\"iframeSrc\"\r\n      #iframe\r\n      [algFullHeightContent]=\"!!(metadata$ | async)?.autoHeight && (state.isReady || showTaskAnyway)\"\r\n      allowfullscreen\r\n    ></iframe>\r\n\r\n    <alg-task-loader\r\n      *ngIf=\"state.isFetching\"\r\n      i18n-label label=\"Loading the task\"\r\n      i18n-delayedLabel delayedLabel=\"The task is taking an unexpected long time to load... please wait...\"\r\n    ></alg-task-loader>\r\n  </div>\r\n</div>\r\n","import {\r\n  AfterViewChecked,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { EMPTY, interval, Observable, merge, of } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, filter, map, pairwise, shareReplay, startWith, switchMap } from 'rxjs/operators';\r\nimport { HOURS, SECONDS } from 'src/app/shared/helpers/duration';\r\nimport { TaskConfig, ItemTaskService } from '../../services/item-task.service';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\nimport { capitalize } from 'src/app/shared/helpers/case_conversion';\r\nimport { ItemTaskInitService } from '../../services/item-task-init.service';\r\nimport { ItemTaskAnswerService } from '../../services/item-task-answer.service';\r\nimport { ItemTaskViewsService } from '../../services/item-task-views.service';\r\nimport { FullItemRoute } from 'src/app/shared/routing/item-route';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { LTIDataSource } from 'src/app/modules/lti/services/lti-datasource.service';\r\nimport { PublishResultsService } from '../../http-services/publish-result.service';\r\nimport { errorIsHTTPForbidden } from 'src/app/shared/helpers/errors';\r\nimport { isNotUndefined } from '../../../../shared/helpers/null-undefined-predicates';\r\nimport { ItemPermWithEdit, ItemEditPerm } from 'src/app/shared/models/domain/item-edit-permission';\r\n\r\nexport interface TaskTab {\r\n  name: string,\r\n  view: string,\r\n}\r\n\r\nconst heightSyncInterval = 0.2*SECONDS;\r\n\r\n@Component({\r\n  selector: 'alg-item-display[url][attemptId][route]',\r\n  templateUrl: './item-display.component.html',\r\n  styleUrls: [ './item-display.component.scss' ],\r\n  providers: [ ItemTaskService, ItemTaskInitService, ItemTaskAnswerService, ItemTaskViewsService ],\r\n})\r\nexport class ItemDisplayComponent implements OnInit, AfterViewChecked, OnChanges, OnDestroy {\r\n  @Input() route!: FullItemRoute;\r\n  @Input() url!: string;\r\n  @Input() editingPermission: ItemPermWithEdit = { canEdit: ItemEditPerm.None };\r\n  @Input() attemptId!: string;\r\n  @Input() view?: TaskTab['view'];\r\n  @Input() taskConfig: TaskConfig = { readOnly: false, formerAnswer: null };\r\n  @Input() savingAnswer = false;\r\n\r\n  @Output() scoreChange = this.taskService.scoreChange$;\r\n  @Output() skipSave = new EventEmitter<void>();\r\n  @Output() refresh = new EventEmitter<void>();\r\n\r\n  @ViewChild('iframe') iframe?: ElementRef<HTMLIFrameElement>;\r\n\r\n  state$ = merge(this.taskService.task$, this.taskService.error$).pipe(mapToFetchState());\r\n  initError$ = this.taskService.initError$;\r\n  urlError$ = this.taskService.urlError$;\r\n  unknownError$ = this.taskService.unknownError$;\r\n  iframeSrc$ = this.taskService.iframeSrc$.pipe(\r\n    map(url => this.sanitizer.bypassSecurityTrustResourceUrl(url)),\r\n    catchError(() => EMPTY),\r\n  );\r\n\r\n  metadata$ =this.taskService.task$.pipe(switchMap(task => task.getMetaData()), shareReplay(1));\r\n  iframeHeight$ = this.metadata$.pipe(\r\n    switchMap(({ autoHeight }) => {\r\n      if (autoHeight) return of(undefined);\r\n      return merge(\r\n        this.taskService.task$.pipe(switchMap(task => interval(heightSyncInterval).pipe(switchMap(() => task.getHeight())))),\r\n        this.taskService.display$.pipe(map(({ height }) => height), filter(isNotUndefined)),\r\n      ).pipe(map(height => `${height}px`));\r\n    }),\r\n    distinctUntilChanged(),\r\n  );\r\n\r\n  showTaskAnyway = false;\r\n\r\n  @Output() viewChange = this.taskService.activeView$;\r\n  @Output() tabsChange: Observable<TaskTab[]> = this.taskService.views$.pipe(\r\n    map(views => views.map(view => ({ view, name: this.getTabNameByView(view) }))),\r\n  );\r\n\r\n  private subscriptions = [\r\n    this.taskService.saveAnswerAndStateInterval$\r\n      .pipe(startWith({ success: true }), pairwise())\r\n      .subscribe(([ previous, next ]) => {\r\n        const shouldDisplayError = !next.success && !this.actionFeedbackService.hasFeedback;\r\n        const shouldDisplaySuccess = !previous.success && next.success;\r\n        if (shouldDisplayError) {\r\n          const message = $localize`Your current progress could not have been saved. Are you connected to the internet?`;\r\n          this.actionFeedbackService.error(message, { life: 24*HOURS });\r\n        }\r\n        if (shouldDisplaySuccess) {\r\n          this.actionFeedbackService.clear();\r\n          this.actionFeedbackService.success($localize`Progress saved!`);\r\n        }\r\n      }),\r\n\r\n    this.scoreChange.pipe(\r\n      switchMap(() => {\r\n        if (!this.ltiDataSource.data) return EMPTY;\r\n        return this.publishResultService.publish(this.ltiDataSource.data.contentId, this.ltiDataSource.data.attemptId);\r\n      }),\r\n    ).subscribe({\r\n      error: err => {\r\n        const message = errorIsHTTPForbidden(err)\r\n          ? $localize`You might be unauthenticated anymore, please try relaunching the exercise. If the problem persits contact us.`\r\n          : $localize`An unknown error occurred while publishing your result`;\r\n        this.actionFeedbackService.error(message, { life: 10*SECONDS });\r\n      }\r\n    }),\r\n\r\n    this.taskService.hintError$.subscribe(() => this.actionFeedbackService.error($localize`Hint request failed`)),\r\n  ];\r\n\r\n  errorMessage = $localize`:@@unknownError:An unknown error occurred. ` +\r\n    $localize`:@@contactUs:If the problem persists, please contact us.`;\r\n\r\n  constructor(\r\n    private taskService: ItemTaskService,\r\n    private sanitizer: DomSanitizer,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private publishResultService: PublishResultsService,\r\n    private ltiDataSource: LTIDataSource,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.taskService.configure(this.route, this.url, this.attemptId, this.taskConfig);\r\n    this.taskService.showView(this.view ?? 'task');\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (!this.iframe || this.taskService.initialized) return;\r\n    this.taskService.initTask(this.iframe.nativeElement);\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.view && this.view) this.taskService.showView(this.view);\r\n    if (\r\n      changes.route &&\r\n      !changes.route.firstChange &&\r\n      (changes.route.previousValue as FullItemRoute | undefined)?.id !== (changes.route.currentValue as FullItemRoute | undefined)?.id\r\n    ) {\r\n      throw new Error('this component does not support changing its route input');\r\n    }\r\n    if (changes.url && !changes.url.firstChange) throw new Error('this component does not support changing its url input');\r\n    if (changes.attemptId && !changes.attemptId.firstChange) {\r\n      throw new Error('this component does not support changing its attemptId input');\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.actionFeedbackService.hasFeedback) this.actionFeedbackService.clear();\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n  }\r\n\r\n  saveAnswerAndState(): Observable<{ saving: boolean }> {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    return this.taskService.saveAnswerAndState();\r\n  }\r\n\r\n  private getTabNameByView(view: string): string {\r\n    switch (view) {\r\n      case 'editor': return $localize`Solve`;\r\n      case 'forum': return $localize`Forum`;\r\n      case 'hints': return $localize`Hints`;\r\n      case 'solution': return $localize`Solution`;\r\n      case 'submission': return $localize`Submission`;\r\n      case 'task': return $localize`Statement`;\r\n      default: return capitalize(view);\r\n    }\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <ng-container *ngIf=\"itemData\">\r\n\r\n    <ng-container *ngIf=\"state.isReady\">\r\n      <div class=\"section-chapter-wrapper\">\r\n\r\n        <div class=\"score-weight-container\">\r\n          <div class=\"score-weight\">\r\n            <span class=\"score-weight-label alg-base-text-color\" i18n>Enable score weight</span>\r\n            <alg-switch\r\n                mode=\"white\"\r\n                [(ngModel)]=\"scoreWeightEnabled\"\r\n                (ngModelChange)=\"onEnableScoreWeightChange($event)\"\r\n            ></alg-switch>\r\n          </div>\r\n        </div>\r\n\r\n        <p-table\r\n            class=\"alg-editable-table\"\r\n            *ngIf=\"data.length\"\r\n            [value]=\"data\"\r\n            [reorderableColumns]=\"true\"\r\n            [(selection)]=\"selectedRows\"\r\n            (onRowReorder)=\"orderChanged()\">\r\n          <ng-template pTemplate=\"body\" let-rowData let-index=\"rowIndex\">\r\n            <tr [pSelectableRow]=\"rowData\" [pReorderableRow]=\"index\">\r\n              <td class=\"reorder-handle\" [pReorderableRowHandle]=\"index\">\r\n                <i class=\"fa fa-sort\" [pReorderableRowHandle]=\"index\"></i>\r\n              </td>\r\n              <td><p-tableCheckbox [value]=\"rowData\"></p-tableCheckbox></td>\r\n              <ng-container *ngIf=\"scoreWeightEnabled\">\r\n                <td pEditableColumn>\r\n                  <p-cellEditor>\r\n                    <ng-template pTemplate=\"input\">\r\n                      <p-inputNumber\r\n                          [size]=\"3\"\r\n                          [(ngModel)]=\"rowData.scoreWeight\"\r\n                          (ngModelChange)=\"onScoreWeightChange()\"\r\n                          [min]=\"0\"\r\n                          [max]=\"100\"\r\n                          [ariaRequired]=\"true\"\r\n                      ></p-inputNumber>\r\n                    </ng-template>\r\n                    <ng-template pTemplate=\"output\">\r\n                      x{{ rowData.scoreWeight }}\r\n                    </ng-template>\r\n                  </p-cellEditor>\r\n                </td>\r\n              </ng-container>\r\n              <ng-container *ngIf=\"rowData.isVisible; else invisibleChildCells\">\r\n                <td><span class=\"type\">{{ rowData.type }}</span></td>\r\n                <td class=\"flex-1\">\r\n                  <a\r\n                    class=\"main alg-link\"\r\n                    [ngClass]=\"{'disabled': !rowData.id}\"\r\n                    (click)=\"onClick(rowData)\"\r\n                  >\r\n                    {{ rowData.title }}\r\n                  </a>\r\n                </td>\r\n              </ng-container>\r\n              <ng-template #invisibleChildCells>\r\n                <td class=\"flex-1\"><ng-container i18n>Non-visible content</ng-container> ({{ rowData.id }})</td>\r\n              </ng-template>\r\n\r\n              <td>\r\n                <div class=\"propagation-state-wrapper\" #propagationStateWrapperTarget>\r\n                  <button\r\n                      class=\"alg-button-icon base-color\"\r\n                      type=\"button\"\r\n                      (click)=\"openPropagationEditMenu($event, propagationStateWrapperTarget, index)\"\r\n                  >\r\n                    <i class=\"fa\" [ngClass]=\"{\r\n                    'fa-eye': rowData.contentViewPropagation === 'as_content',\r\n                    'fa-lock': rowData.contentViewPropagation === 'as_info',\r\n                    'fa-eye-slash': rowData.contentViewPropagation === 'none'\r\n                  }\"></i>\r\n                  </button>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </ng-template>\r\n          <ng-template pTemplate=\"summary\">\r\n            <div class=\"summary\">\r\n              <span class=\"spacer\"></span>\r\n              <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\r\n              <span class=\"select-all\" (click)=\"onSelectAll()\" i18n>Select all</span>\r\n              <span class=\"filler\"></span>\r\n              <div class=\"summary-actions\">\r\n                <span (click)=\"onRemove()\" [ngClass]=\"{disabled: selectedRows.length === 0}\">\r\n                  <span i18n>Remove selected</span>\r\n                  <i class=\"fa fa-trash-alt\"></i>\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </ng-template>\r\n        </p-table>\r\n\r\n        <p *ngIf=\"!data.length\" i18n>No children for this chapter.</p>\r\n\r\n      </div>\r\n\r\n      <div class=\"add-item-container\">\r\n        <alg-add-item\r\n            [allowSkills]=\"itemData.item.type === 'Skill'\"\r\n            [addedItemIds]=\"addedItemIds\"\r\n            (contentAdded)=\"addChild($event)\"\r\n        ></alg-add-item>\r\n      </div>\r\n\r\n    </ng-container>\r\n\r\n    <alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n    <alg-error\r\n      *ngIf=\"state.isError\"\r\n      class=\"dark\"\r\n      i18n-message message=\"Error while loading the children items\"\r\n      [showRefreshButton]=\"true\"\r\n      (refresh)=\"reloadData()\"\r\n    ></alg-error>\r\n\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<p-overlayPanel [style]=\"{minWidth: '112px', maxWidth: '280px'}\" styleClass=\"alg-propagation-edit-menu\" #op appendTo=\"body\">\r\n  <ng-template pTemplate>\r\n    <alg-propagation-edit-menu\r\n      *ngIf=\"propagationEditItemIdx !== undefined\"\r\n      [childData]=\"data[propagationEditItemIdx]\"\r\n      (clickEvent)=\"onContentViewPropagationChanged($event)\"\r\n    ></alg-propagation-edit-menu>\r\n  </ng-template>\r\n</p-overlayPanel>\r\n\r\n","import { Component, Input, OnChanges, Output, EventEmitter, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { GetItemChildrenService, isVisibleItemChild } from '../../http-services/get-item-children.service';\r\nimport { Observable, ReplaySubject, Subject, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map, share, switchMap } from 'rxjs/operators';\r\nimport { ItemType, typeCategoryOfItem } from '../../../../shared/helpers/item-type';\r\nimport { AddedContent } from '../../../shared-components/components/add-content/add-content.component';\r\nimport { ItemRouter } from '../../../../shared/routing/item-router';\r\nimport { bestAttemptFromResults } from '../../../../shared/helpers/attempts';\r\nimport { isNotUndefined } from '../../../../shared/helpers/null-undefined-predicates';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { mapToFetchState, readyData } from '../../../../shared/operators/state';\r\nimport { FetchState } from '../../../../shared/helpers/state';\r\nimport { itemViewPermMax } from 'src/app/shared/models/domain/item-view-permission';\r\nimport { allowsGrantingView, itemGrantViewPermMax } from 'src/app/shared/models/domain/item-grant-view-permission';\r\nimport { itemWatchPermMax } from 'src/app/shared/models/domain/item-watch-permission';\r\nimport { ItemCorePerm } from 'src/app/shared/models/domain/item-permissions';\r\nimport { itemEditPermMax } from 'src/app/shared/models/domain/item-edit-permission';\r\n\r\ninterface BaseChildData {\r\n  contentViewPropagation?: 'none' | 'as_info' | 'as_content',\r\n  editPropagation?: boolean,\r\n  grantViewPropagation?: boolean,\r\n  upperViewLevelsPropagation?: 'use_content_view_propagation' | 'as_content_with_descendants' | 'as_is',\r\n  scoreWeight: number,\r\n  watchPropagation?: boolean,\r\n  permissions?: ItemCorePerm,\r\n}\r\ninterface InvisibleChildData extends BaseChildData {\r\n  id: string,\r\n  isVisible: false,\r\n}\r\ninterface ChildData extends BaseChildData {\r\n  id?: string,\r\n  isVisible: true,\r\n  title: string | null,\r\n  type: ItemType,\r\n  result?: {\r\n    attemptId: string,\r\n    validated: boolean,\r\n    score: number,\r\n  },\r\n}\r\n\r\nexport type PossiblyInvisibleChildData = ChildData | InvisibleChildData;\r\n\r\nexport type ChildDataWithId = InvisibleChildData | (ChildData & { id: string });\r\n\r\nexport function hasId(child: PossiblyInvisibleChildData): child is ChildDataWithId {\r\n  return !!child.id;\r\n}\r\n\r\nexport const DEFAULT_SCORE_WEIGHT = 1;\r\n\r\n@Component({\r\n  selector: 'alg-item-children-edit',\r\n  templateUrl: './item-children-edit.component.html',\r\n  styleUrls: [ './item-children-edit.component.scss' ]\r\n})\r\nexport class ItemChildrenEditComponent implements OnInit, OnDestroy, OnChanges {\r\n  @Input() itemData?: ItemData;\r\n\r\n  @ViewChild('op') op?: OverlayPanel;\r\n\r\n  data: PossiblyInvisibleChildData[] = [];\r\n  selectedRows: PossiblyInvisibleChildData[] = [];\r\n  scoreWeightEnabled = false;\r\n  addedItemIds: string[] = [];\r\n  propagationEditItemIdx?: number;\r\n\r\n  private subscription?: Subscription;\r\n  @Output() childrenChanges = new EventEmitter<PossiblyInvisibleChildData[]>();\r\n\r\n  private readonly params$ = new ReplaySubject<{ id: string, attemptId: string }>(1);\r\n  private readonly refresh$ = new Subject<void>();\r\n  readonly state$: Observable<FetchState<PossiblyInvisibleChildData[]>> = this.params$.pipe(\r\n    distinctUntilChanged((a, b) => a.id === b.id && a.attemptId === b.attemptId),\r\n    switchMap(({ id, attemptId }) => this.getItemChildrenService.getWithInvisibleItems(id, attemptId)),\r\n    map(children => children\r\n      .sort((a, b) => a.order - b.order)\r\n      .map((child): PossiblyInvisibleChildData => {\r\n        const baseChildData: BaseChildData = {\r\n          scoreWeight: child.scoreWeight,\r\n          contentViewPropagation: child.contentViewPropagation,\r\n          editPropagation: child.editPropagation,\r\n          grantViewPropagation: child.grantViewPropagation,\r\n          upperViewLevelsPropagation: child.upperViewLevelsPropagation,\r\n          watchPropagation: child.watchPropagation,\r\n          permissions: child.permissions,\r\n        };\r\n\r\n        if (isVisibleItemChild(child)) {\r\n          const res = bestAttemptFromResults(child.results);\r\n          return {\r\n            ...baseChildData,\r\n            id: child.id,\r\n            title: child.string.title,\r\n            type: child.type,\r\n            isVisible: true,\r\n            result: res === null ? undefined : {\r\n              attemptId: res.attemptId,\r\n              validated: res.validated,\r\n              score: res.scoreComputed,\r\n            },\r\n          };\r\n        }\r\n\r\n        return {\r\n          ...baseChildData,\r\n          id: child.id,\r\n          isVisible: false,\r\n        };\r\n      })\r\n    ),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n    share(),\r\n  );\r\n\r\n  constructor(\r\n    private getItemChildrenService: GetItemChildrenService,\r\n    private itemRouter: ItemRouter,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = this.state$.pipe(readyData()).subscribe(data => {\r\n      this.data = data;\r\n      this.scoreWeightEnabled = this.data.some(c => c.scoreWeight !== 1);\r\n      this.onChildrenListUpdate();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n    this.params$.complete();\r\n    this.subscription?.unsubscribe();\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.itemData?.currentResult) {\r\n      this.params$.next({\r\n        id: this.itemData.item.id,\r\n        attemptId: this.itemData.currentResult.attemptId,\r\n      });\r\n    }\r\n  }\r\n\r\n  reloadData(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  addChild(child: AddedContent<ItemType>): void {\r\n    const permissionsForCreatedItem: ItemCorePerm = {\r\n      canView: itemViewPermMax,\r\n      canWatch: itemWatchPermMax,\r\n      canEdit: itemEditPermMax,\r\n      canGrantView: itemGrantViewPermMax,\r\n      isOwner: true,\r\n    };\r\n\r\n    this.data.push({\r\n      ...child,\r\n      scoreWeight: DEFAULT_SCORE_WEIGHT,\r\n      isVisible: true,\r\n      contentViewPropagation: !allowsGrantingView(child.permissions ?? permissionsForCreatedItem) ? 'none' : 'as_info',\r\n      permissions: child.permissions ?? permissionsForCreatedItem,\r\n    });\r\n    this.onChildrenListUpdate();\r\n    this.childrenChanges.emit(this.data);\r\n  }\r\n\r\n  onSelectAll(): void {\r\n    this.selectedRows = this.selectedRows.length === this.data.length ? [] : this.data;\r\n  }\r\n\r\n  onRemove(): void {\r\n    this.data = this.data.filter(elm => !this.selectedRows.includes(elm));\r\n    this.onChildrenListUpdate();\r\n    this.childrenChanges.emit(this.data);\r\n    this.selectedRows = [];\r\n  }\r\n\r\n  orderChanged(): void {\r\n    this.childrenChanges.emit(this.data);\r\n  }\r\n\r\n  reset(): void {\r\n    this.reloadData();\r\n  }\r\n\r\n  onEnableScoreWeightChange(event: boolean): void {\r\n    if (!event) {\r\n      this.resetScoreWeight();\r\n    }\r\n  }\r\n\r\n  resetScoreWeight(): void {\r\n    this.data = this.data.map(c => ({ ...c, scoreWeight: DEFAULT_SCORE_WEIGHT }));\r\n    this.onChildrenListUpdate();\r\n    this.onScoreWeightChange();\r\n  }\r\n\r\n  onScoreWeightChange(): void {\r\n    this.childrenChanges.emit(this.data);\r\n  }\r\n\r\n  openPropagationEditMenu(event: MouseEvent, actualTarget: HTMLDivElement, itemIdx: number): void {\r\n    this.propagationEditItemIdx = itemIdx;\r\n    this.op?.toggle(event, actualTarget);\r\n  }\r\n\r\n  onContentViewPropagationChanged(contentViewPropagation: 'none' | 'as_info' | 'as_content'): void {\r\n    this.op?.hide();\r\n    this.data = this.data.map((c, index) => {\r\n      if (index === this.propagationEditItemIdx) {\r\n        return {\r\n          ...c,\r\n          contentViewPropagation,\r\n        };\r\n      }\r\n      return c;\r\n    });\r\n    this.propagationEditItemIdx = undefined;\r\n    this.childrenChanges.emit(this.data);\r\n  }\r\n\r\n  private onChildrenListUpdate(): void {\r\n    this.recomputeAddedItemIds();\r\n  }\r\n\r\n  private recomputeAddedItemIds(): void {\r\n    this.addedItemIds = this.data.map(item => item.id).filter(isNotUndefined);\r\n  }\r\n\r\n  onClick(child: PossiblyInvisibleChildData): void {\r\n    if (!this.itemData || !child.id || !child.isVisible) {\r\n      return;\r\n    }\r\n\r\n    const attemptId = child.result?.attemptId;\r\n    const parentAttemptId = this.itemData.currentResult?.attemptId;\r\n\r\n    // unexpected: children have been loaded, so we are sure this item has an attempt\r\n    if (!parentAttemptId) {\r\n      return;\r\n    }\r\n\r\n    this.itemRouter.navigateTo({\r\n      contentType: typeCategoryOfItem(child),\r\n      id: child.id,\r\n      path: this.itemData.route.path.concat([ this.itemData.item.id ]),\r\n      ...attemptId ? { attemptId: attemptId } : { parentAttemptId: parentAttemptId }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { assertSuccess, SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { map } from 'rxjs/operators';\r\nimport { requestTimeout } from 'src/app/shared/interceptors/interceptor_common';\r\nimport { SECONDS } from 'src/app/shared/helpers/duration';\r\n\r\nexport interface ItemChanges {\r\n  children?: {\r\n    item_id: string,\r\n    order: number,\r\n    content_view_propagation?: 'none' | 'as_info' | 'as_content',\r\n    edit_propagation?: boolean,\r\n    grant_view_propagation?: boolean,\r\n    upper_view_levels_propagation?: 'use_content_view_propagation' | 'as_content_with_descendants' | 'as_is',\r\n    watch_propagation?: boolean,\r\n  }[],\r\n  url?: string | null,\r\n  text_id?: string | null,\r\n  uses_api?: boolean,\r\n  validation_type?: 'None' | 'All' | 'AllButOne' | 'Categories' | 'One' | 'Manual',\r\n  no_score?: boolean,\r\n  title_bar_visible?: boolean,\r\n  full_screen?: 'forceYes' | 'forceNo' | 'default',\r\n  prompt_to_join_group_by_code?: boolean,\r\n  allows_multiple_attempts?: boolean,\r\n  requires_explicit_entry?: boolean,\r\n  duration?: string | null,\r\n  entering_time_min?: Date,\r\n  entering_time_max?: Date,\r\n  entry_participant_type?: 'Team' | 'User',\r\n  entry_frozen_teams?: boolean,\r\n  entry_max_team_size?: number,\r\n  entry_min_admitted_members_ratio?: 'All' | 'Half' | 'One' | 'None',\r\n}\r\n\r\nconst serviceTimeout = 5*SECONDS;\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UpdateItemService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  updateItem(\r\n    itemId: string,\r\n    changes: ItemChanges,\r\n  ): Observable<void> {\r\n    return this.http.put<SimpleActionResponse>(`${appConfig.apiUrl}/items/${itemId}`, changes, {\r\n      context: new HttpContext().set(requestTimeout, serviceTimeout),\r\n    }).pipe(\r\n      map(assertSuccess),\r\n    );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"itemData\">\r\n  <ng-container *ngIf=\"itemData.item.permissions | allowsEditingChildren; else notAuthorized\">\r\n    <alg-item-children-edit\r\n      #childrenEdit\r\n      (childrenChanges)=\"updateItemChanges($event)\"\r\n      [itemData]=\"itemData\"\r\n      [ngClass]=\"{disabled: disabled}\"\r\n    ></alg-item-children-edit>\r\n\r\n    <alg-floating-save *ngIf=\"dirty\" [saving]=\"disabled\" (save)=\"save()\" (cancel)=\"onCancel()\"></alg-floating-save>\r\n  </ng-container>\r\n  <ng-template #notAuthorized>\r\n    <p class=\"validation-text\" i18n>\r\n      You do not have the permissions to edit this content.\r\n    </p>\r\n  </ng-template>\r\n</ng-container>\r\n","import { Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { ItemData, ItemDataSource } from '../../services/item-datasource.service';\r\nimport {\r\n  ChildDataWithId,\r\n  hasId,\r\n  ItemChildrenEditComponent,\r\n  PossiblyInvisibleChildData\r\n} from '../item-children-edit/item-children-edit.component';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { CreateItemService, NewItem } from '../../http-services/create-item.service';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ItemChanges, UpdateItemService } from '../../http-services/update-item.service';\r\nimport { PendingChangesComponent } from '../../../../shared/guards/pending-changes-guard';\r\nimport { PendingChangesService } from '../../../../shared/services/pending-changes-service';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\n\r\n@Component({\r\n  selector: 'alg-item-children-edit-form',\r\n  templateUrl: './item-children-edit-form.component.html',\r\n  styleUrls: [ './item-children-edit-form.component.scss' ],\r\n})\r\nexport class ItemChildrenEditFormComponent implements OnInit, PendingChangesComponent, OnDestroy {\r\n  @Input() itemData?: ItemData;\r\n\r\n  @ViewChild('childrenEdit') private childrenEdit?: ItemChildrenEditComponent;\r\n\r\n  disabled = false;\r\n  dirty = false;\r\n  itemChanges: { children?: PossiblyInvisibleChildData[] } = {};\r\n\r\n  isDirty(): boolean {\r\n    return this.dirty;\r\n  }\r\n\r\n  constructor(\r\n    private createItemService: CreateItemService,\r\n    private updateItemService: UpdateItemService,\r\n    private itemDataSource: ItemDataSource,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private pendingChangesService: PendingChangesService,\r\n    private currentContentService: CurrentContentService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.pendingChangesService.set(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.pendingChangesService.clear();\r\n  }\r\n\r\n  updateItemChanges(children: PossiblyInvisibleChildData[]): void {\r\n    this.dirty = true;\r\n    this.itemChanges.children = children;\r\n  }\r\n\r\n  private createChildren(): Observable<ChildDataWithId[] | undefined> {\r\n    if (!this.itemChanges.children) return of(undefined);\r\n\r\n    if (this.itemChanges.children.length === 0) {\r\n      return of([]);\r\n    }\r\n\r\n    return forkJoin(\r\n      this.itemChanges.children.map(child => {\r\n        if (!this.itemData) return throwError(new Error('Missed item data'));\r\n        if (hasId(child) || !child.isVisible) return of(child);\r\n        // the child doesn't have an id, so we create it\r\n        if (!child.title) return throwError(new Error('Something went wrong, the new child is missing his title'));\r\n        const newChild: NewItem = {\r\n          title: child.title,\r\n          type: child.type,\r\n          languageTag: 'en',\r\n          parent: this.itemData.item.id,\r\n        };\r\n        return this.createItemService\r\n          .create(newChild)\r\n          .pipe(map(res => ({ id: res, ...child })));\r\n      })\r\n    );\r\n  }\r\n\r\n  private updateItem(): Observable<void> {\r\n    return this.createChildren().pipe(\r\n      switchMap(children => {\r\n        if (!this.itemData) return throwError(new Error('Invalid initial data'));\r\n        if (!children) return throwError(new Error('Unexpected: Children list are empty'));\r\n        const changes: ItemChanges = { children: [] };\r\n        // @TODO: Avoid affecting component vars in Observable Operator\r\n        // save the new children (their ids) to prevent recreating them in case of error\r\n        this.itemChanges.children = children;\r\n        changes.children = children.map((child, idx) => ({\r\n          item_id: child.id,\r\n          order: idx,\r\n          score_weight: child.scoreWeight,\r\n          content_view_propagation: child.contentViewPropagation,\r\n          edit_propagation: child.editPropagation,\r\n          grant_view_propagation: child.grantViewPropagation,\r\n          upper_view_levels_propagation: child.upperViewLevelsPropagation,\r\n          watch_propagation: child.watchPropagation,\r\n        }));\r\n        return this.updateItemService.updateItem(this.itemData.item.id, changes);\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(): void {\r\n    this.disabled = true;\r\n    this.updateItem().subscribe({\r\n      next: _status => {\r\n        this.actionFeedbackService.success($localize`Changes successfully saved.`);\r\n        this.itemDataSource.refreshItem(); // which will re-enable the form\r\n        this.currentContentService.forceNavMenuReload();\r\n      },\r\n      error: err => {\r\n        this.disabled = false;\r\n        this.actionFeedbackService.unexpectedError();\r\n        this.currentContentService.forceNavMenuReload();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      },\r\n    });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.itemChanges = {};\r\n    this.disabled = false;\r\n    this.dirty = false;\r\n    this.childrenEdit?.reset();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-message-info',\r\n  templateUrl: './message-info.component.html',\r\n  styleUrls: [ 'message-info.component.scss' ],\r\n})\r\nexport class MessageInfoComponent {\r\n  @Input() icon = 'pi pi-exclamation-circle';\r\n\r\n  constructor() {\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <i class=\"message-icon\" [ngClass]=\"icon\"></i>\r\n  <div class=\"message-text\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n","<div class=\"state-container\" [ngClass]=\"class\" *ngIf=\"type !== 'Undefined'\">\r\n  <span class=\"state-icon\" [ngClass]=\"{disabled: disabled}\">\r\n    <i class=\"{{icon}}\"></i>\r\n  </span>\r\n  <span class=\"state-label\" [ngClass]=\"{disabled: disabled}\">\r\n    {{type}}\r\n  </span>\r\n</div>\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-state-widget',\r\n  templateUrl: './state-widget.component.html',\r\n  styleUrls: [ './state-widget.component.scss' ],\r\n})\r\nexport class StateWidgetComponent implements OnChanges {\r\n\r\n  @Input() type: 'Undefined'|'Discovery'|'Application'|'Validation'|'Challenge' = 'Undefined';\r\n  @Input() disabled = false;\r\n\r\n  icon = '';\r\n  class = '';\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    switch (this.type) {\r\n      case 'Discovery':\r\n        this.icon = 'fa fa-book-open';\r\n        break;\r\n      case 'Application':\r\n        this.icon = 'fa fa-code';\r\n        break;\r\n      case 'Validation':\r\n        this.icon = 'fa fa-video';\r\n        break;\r\n      case 'Challenge':\r\n        this.icon = 'fa fa-laptop-code';\r\n        break;\r\n      case 'Undefined':\r\n      default:\r\n        this.type = 'Undefined';\r\n        this.icon = 'fa fa-book-open';\r\n        break;\r\n    }\r\n\r\n    this.class = this.type.toLowerCase();\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    i18n-message message=\"Error while loading this chapter's children\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n\r\n  <ng-container *ngIf=\"state.isReady && state.data as data\">\r\n    <p class=\"validation-text\" *ngIf=\"data.missingValidation\" i18n>\r\n      To validate this chapter, solve at least all tasks with Validation type\r\n    </p>\r\n    <p class=\"validation-text\" *ngIf=\"data.children.length === 0\" i18n>\r\n      This chapter has no content visible to you, so you can't validate it for now.\r\n    </p>\r\n\r\n    <ul class=\"data-list-container activity\" *ngIf=\"data.children.length > 0\">\r\n      <li *ngFor=\"let item of data.children; index as ln\">\r\n      <span class=\"activity-progress\">\r\n        <alg-score-ring\r\n          *ngIf=\"!item.isLocked && item.result\"\r\n          [diameter]=\"30\"\r\n          [currentScore]=\"item.result.score\"\r\n          [isValidated]=\"item.result.validated\"\r\n          [bestScore]=\"item.bestScore\"\r\n        ></alg-score-ring>\r\n      </span>\r\n      <span\r\n        class=\"activity-content\"\r\n        (click)=\"click(item)\"\r\n        [ngClass]=\"{ locked: item.isLocked }\"\r\n      >\r\n        <a class=\"activity-title alg-link\">\r\n          {{ ln + 1 }}. {{ item.string.title }}\r\n        </a>\r\n        <span *ngIf=\"item.isLocked\" class=\"activity-status\">\r\n          <i *ngIf=\"item.isLocked\" class=\"fa fa-lock\"></i>\r\n        </span>\r\n        <alg-state-widget\r\n          [type]=\"item.category\"\r\n        ></alg-state-widget>\r\n      </span>\r\n      </li>\r\n    </ul>\r\n\r\n  </ng-container>\r\n</ng-container>\r\n","import { ReplaySubject, Subject } from 'rxjs';\r\nimport { Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { GetItemChildrenService, ItemChild } from '../../http-services/get-item-children.service';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { bestAttemptFromResults } from 'src/app/shared/helpers/attempts';\r\nimport { ItemRouter } from 'src/app/shared/routing/item-router';\r\nimport { typeCategoryOfItem } from 'src/app/shared/helpers/item-type';\r\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { canCurrentUserViewContent } from 'src/app/shared/models/domain/item-view-permission';\r\n\r\ninterface ItemChildAdditions {\r\n  isLocked: boolean,\r\n  result?: {\r\n    attemptId: string,\r\n    validated: boolean,\r\n    score: number,\r\n  },\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-chapter-children',\r\n  templateUrl: './chapter-children.component.html',\r\n  styleUrls: [ './chapter-children.component.scss' ],\r\n})\r\nexport class ChapterChildrenComponent implements OnChanges, OnDestroy {\r\n  @Input() itemData?: ItemData;\r\n\r\n  private readonly params$ = new ReplaySubject<{ id: string, attemptId: string }>(1);\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.params$.pipe(\r\n    distinctUntilChanged((a, b) => a.id === b.id && a.attemptId === b.attemptId),\r\n    switchMap(({ id, attemptId }) => this.getItemChildrenService.get(id, attemptId)),\r\n    map((itemChildren: ItemChild[]) => {\r\n      const children = itemChildren.map(child => {\r\n        const res = bestAttemptFromResults(child.results);\r\n        return {\r\n          ...child,\r\n          isLocked: !canCurrentUserViewContent(child),\r\n          result: res === null ? undefined : {\r\n            attemptId: res.attemptId,\r\n            validated: res.validated,\r\n            score: res.scoreComputed,\r\n          },\r\n        };\r\n      });\r\n\r\n      return {\r\n        children,\r\n        missingValidation: !(this.itemData?.currentResult?.validated || children.filter(item => item.category === 'Validation')\r\n          .every(item => item.result && item.result.validated)),\r\n      };\r\n    }),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private getItemChildrenService: GetItemChildrenService,\r\n    private itemRouter: ItemRouter,\r\n  ) {}\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (this.itemData?.currentResult) {\r\n      this.params$.next({\r\n        id: this.itemData.item.id,\r\n        attemptId: this.itemData.currentResult.attemptId,\r\n      });\r\n    }\r\n  }\r\n\r\n  click(child: ItemChild&ItemChildAdditions): void {\r\n    if (!this.itemData) return;\r\n    const attemptId = child.result?.attemptId;\r\n    const parentAttemptId = this.itemData.currentResult?.attemptId;\r\n    if (!parentAttemptId) return; // unexpected: children have been loaded, so we are sure this item has an attempt\r\n    this.itemRouter.navigateTo({\r\n      contentType: typeCategoryOfItem(child),\r\n      id: child.id,\r\n      path: this.itemData.route.path.concat([ this.itemData.item.id ]),\r\n      ...attemptId ? { attemptId: attemptId } : { parentAttemptId: parentAttemptId }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.params$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-section i18n-label label=\"Sub-skills\" icon=\"fa fa-graduation-cap\">\r\n\r\n    <alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n    <alg-error\r\n      *ngIf=\"state.isError\"\r\n      class=\"dark\"\r\n      i18n-message message=\"Error while loading content\"\r\n      [showRefreshButton]=\"true\"\r\n      (refresh)=\"refresh()\"\r\n    ></alg-error>\r\n\r\n    <ng-container *ngIf=\"state.isReady && state.data as children\">\r\n\r\n      <p *ngIf=\"children.length === 0\" i18n>This skill does not have subskills.</p>\r\n\r\n      <ul *ngIf=\"children.length > 0\" class=\"data-list-container sub-skill\">\r\n        <li *ngFor=\"let item of children\">\r\n          <div\r\n            class=\"skill-content\"\r\n            (click)=\"click(item)\"\r\n            [ngClass]=\"{ locked: item.isLocked }\"\r\n          >\r\n            <a class=\"skill-title alg-link\">\r\n              {{ item.string.title }}\r\n            </a>\r\n            <span *ngIf=\"item.isLocked\" class=\"skill-status\">\r\n              <i *ngIf=\"item.isLocked\" class=\"fa fa-lock\"></i>\r\n            </span>\r\n            <alg-skill-progress\r\n              *ngIf=\"item.result\"\r\n              style=\"width: 25%;\"\r\n              type=\"thick-horizontal\"\r\n              [bestScore]=\"item.bestScore\"\r\n              [currentScore]=\"item.result.score\"\r\n            ></alg-skill-progress>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n\r\n    </ng-container>\r\n\r\n  </alg-section>\r\n</ng-container>\r\n","import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport { bestAttemptFromResults } from 'src/app/shared/helpers/attempts';\r\nimport { isASkill, typeCategoryOfItem } from 'src/app/shared/helpers/item-type';\r\nimport { ItemRouter } from 'src/app/shared/routing/item-router';\r\nimport { GetItemChildrenService, ItemChild } from '../../http-services/get-item-children.service';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { canCurrentUserViewContent } from 'src/app/shared/models/domain/item-view-permission';\r\n\r\ninterface SubSkillAdditions {\r\n  isLocked: boolean,\r\n  result?: {\r\n    attemptId: string,\r\n    score: number,\r\n  },\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-sub-skills',\r\n  templateUrl: './sub-skills.component.html',\r\n  styleUrls: [ './sub-skills.component.scss' ]\r\n})\r\nexport class SubSkillsComponent implements OnChanges, OnDestroy {\r\n  @Input() itemData?: ItemData;\r\n\r\n  private readonly params$ = new ReplaySubject<{ id: string, attemptId: string }>(1);\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.params$.pipe(\r\n    distinctUntilChanged((a, b) => a.id === b.id && a.attemptId === b.attemptId),\r\n    switchMap(({ id, attemptId }) => this.getItemChildrenService.get(id, attemptId)),\r\n    map(children =>\r\n      children\r\n        .filter(child => isASkill(child))\r\n        .map(child => {\r\n          const res = bestAttemptFromResults(child.results);\r\n          return {\r\n            ...child,\r\n            isLocked: !canCurrentUserViewContent(child),\r\n            result: res === null ? undefined : {\r\n              attemptId: res.attemptId,\r\n              score: res.scoreComputed,\r\n            },\r\n          };\r\n        })\r\n    ),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private getItemChildrenService: GetItemChildrenService,\r\n    private itemRouter: ItemRouter,\r\n  ) {}\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (this.itemData?.currentResult) {\r\n      this.params$.next({\r\n        id: this.itemData.item.id,\r\n        attemptId: this.itemData.currentResult.attemptId,\r\n      });\r\n    }\r\n  }\r\n\r\n  click(child: ItemChild&SubSkillAdditions): void {\r\n    if (!this.itemData) return;\r\n    const attemptId = child.result?.attemptId;\r\n    const parentAttemptId = this.itemData.currentResult?.attemptId;\r\n    if (!parentAttemptId) return; // unexpected: children have been loaded, so we are sure this item has an attempt\r\n    this.itemRouter.navigateTo({\r\n      contentType: typeCategoryOfItem(child),\r\n      id: child.id,\r\n      path: this.itemData.route.path.concat([ this.itemData.item.id ]),\r\n      ...attemptId ? { attemptId: attemptId } : { parentAttemptId: parentAttemptId }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.params$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { dateDecoder } from 'src/app/shared/helpers/decoders';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { itemCorePermDecoder } from 'src/app/shared/models/domain/item-permissions';\r\n\r\nconst itemParentDecoder = D.struct({\r\n  id: D.string,\r\n  bestScore: D.number,\r\n  string: D.struct({\r\n    title: D.nullable(D.string),\r\n  }),\r\n  category: D.literal('Undefined', 'Discovery', 'Application', 'Validation', 'Challenge'),\r\n  type: D.literal('Chapter','Task','Course','Skill'),\r\n  permissions: itemCorePermDecoder,\r\n  result: D.struct({\r\n    attemptId: D.string,\r\n    latestActivityAt: dateDecoder,\r\n    startedAt: D.nullable(dateDecoder),\r\n    scoreComputed: D.number,\r\n    validated: D.boolean,\r\n  })\r\n});\r\n\r\nexport type ItemParent = D.TypeOf<typeof itemParentDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetItemParentsService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  get(id: string, attemptId: string): Observable<ItemParent[]> {\r\n    let params = new HttpParams();\r\n    params = params.set('attempt_id', attemptId);\r\n    return this.http\r\n      .get<unknown[]>(`${appConfig.apiUrl}/items/${id}/parents`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(itemParentDecoder))\r\n      );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-section i18n-label label=\"Parent skills\" icon=\"fa fa-link\">\r\n\r\n    <alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n    <alg-error\r\n      *ngIf=\"state.isError\"\r\n      class=\"dark\"\r\n      i18n-message message=\"Error while loading the skill parents\"\r\n      [showRefreshButton]=\"true\"\r\n      (refresh)=\"refresh()\"\r\n    ></alg-error>\r\n\r\n    <ng-container *ngIf=\"state.isReady && state.data as parents\">\r\n\r\n      <p *ngIf=\"parents.length === 0\" i18n>This skill does not have parent skills.</p>\r\n\r\n      <ul *ngIf=\"parents.length > 0\" class=\"data-list-container sub-skill\">\r\n        <li *ngFor=\"let item of parents\">\r\n          <div class=\"skill-content\" (click)=\"click(item)\" [ngClass]=\"{ locked: item.isLocked }\">\r\n            <a class=\"skill-title alg-link\">\r\n              {{ item.string.title }}\r\n            </a>\r\n            <span *ngIf=\"item.isLocked\" class=\"skill-status\">\r\n              <i *ngIf=\"item.isLocked\" class=\"fa fa-lock\"></i>\r\n            </span>\r\n            <alg-skill-progress\r\n              style=\"width: 25%;\"\r\n              type=\"thick-horizontal\"\r\n              [bestScore]=\"item.bestScore\"\r\n              [currentScore]=\"item.result.scoreComputed\"\r\n            ></alg-skill-progress>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n\r\n    </ng-container>\r\n  </alg-section>\r\n</ng-container>\r\n","import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport { typeCategoryOfItem } from 'src/app/shared/helpers/item-type';\r\nimport { ItemRouter } from 'src/app/shared/routing/item-router';\r\nimport { GetItemParentsService, ItemParent } from '../../http-services/get-item-parents.service';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { canCurrentUserViewContent } from 'src/app/shared/models/domain/item-view-permission';\r\n\r\ninterface ParentSkillAdditions {\r\n  isLocked: boolean,\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-parent-skills',\r\n  templateUrl: './parent-skills.component.html',\r\n  styleUrls: [ './parent-skills.component.scss' ]\r\n})\r\nexport class ParentSkillsComponent implements OnChanges, OnDestroy {\r\n  @Input() itemData?: ItemData;\r\n\r\n  private readonly params$ = new ReplaySubject<{ id: string, attemptId: string }>(1);\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.params$.pipe(\r\n    distinctUntilChanged((a, b) => a.id === b.id && a.attemptId === b.attemptId),\r\n    switchMap(({ id, attemptId }) => this.getItemParentsService.get(id, attemptId)),\r\n    map(parents => parents.map(parent => ({ ...parent, isLocked: !canCurrentUserViewContent(parent) }))),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private getItemParentsService: GetItemParentsService,\r\n    private itemRouter: ItemRouter,\r\n  ) {}\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (this.itemData?.currentResult) {\r\n      this.params$.next({\r\n        id: this.itemData.item.id,\r\n        attemptId: this.itemData.currentResult.attemptId,\r\n      });\r\n    }\r\n  }\r\n\r\n  click(parent: ItemParent&ParentSkillAdditions): void {\r\n    if (!this.itemData) return;\r\n\r\n    this.itemRouter.navigateTo({\r\n      contentType: typeCategoryOfItem(parent),\r\n      id: parent.id,\r\n      path: this.itemData.route.path.slice(0, -1),\r\n      attemptId: parent.result.attemptId,\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.params$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n}\r\n","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { ReplaySubject } from '../../ReplaySubject';\nconst DEFAULT_WEBSOCKET_CONFIG = {\n    url: '',\n    deserializer: (e) => JSON.parse(e.data),\n    serializer: (value) => JSON.stringify(value),\n};\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT = 'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\nexport class WebSocketSubject extends AnonymousSubject {\n    constructor(urlConfigOrSource, destination) {\n        super();\n        this._socket = null;\n        if (urlConfigOrSource instanceof Observable) {\n            this.destination = destination;\n            this.source = urlConfigOrSource;\n        }\n        else {\n            const config = (this._config = Object.assign({}, DEFAULT_WEBSOCKET_CONFIG));\n            this._output = new Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                config.url = urlConfigOrSource;\n            }\n            else {\n                for (const key in urlConfigOrSource) {\n                    if (urlConfigOrSource.hasOwnProperty(key)) {\n                        config[key] = urlConfigOrSource[key];\n                    }\n                }\n            }\n            if (!config.WebSocketCtor && WebSocket) {\n                config.WebSocketCtor = WebSocket;\n            }\n            else if (!config.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject();\n        }\n    }\n    lift(operator) {\n        const sock = new WebSocketSubject(this._config, this.destination);\n        sock.operator = operator;\n        sock.source = this;\n        return sock;\n    }\n    _resetState() {\n        this._socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject();\n        }\n        this._output = new Subject();\n    }\n    multiplex(subMsg, unsubMsg, messageFilter) {\n        const self = this;\n        return new Observable((observer) => {\n            try {\n                self.next(subMsg());\n            }\n            catch (err) {\n                observer.error(err);\n            }\n            const subscription = self.subscribe({\n                next: (x) => {\n                    try {\n                        if (messageFilter(x)) {\n                            observer.next(x);\n                        }\n                    }\n                    catch (err) {\n                        observer.error(err);\n                    }\n                },\n                error: (err) => observer.error(err),\n                complete: () => observer.complete(),\n            });\n            return () => {\n                try {\n                    self.next(unsubMsg());\n                }\n                catch (err) {\n                    observer.error(err);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    }\n    _connectSocket() {\n        const { WebSocketCtor, protocol, url, binaryType } = this._config;\n        const observer = this._output;\n        let socket = null;\n        try {\n            socket = protocol ? new WebSocketCtor(url, protocol) : new WebSocketCtor(url);\n            this._socket = socket;\n            if (binaryType) {\n                this._socket.binaryType = binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        const subscription = new Subscription(() => {\n            this._socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = (evt) => {\n            const { _socket } = this;\n            if (!_socket) {\n                socket.close();\n                this._resetState();\n                return;\n            }\n            const { openObserver } = this._config;\n            if (openObserver) {\n                openObserver.next(evt);\n            }\n            const queue = this.destination;\n            this.destination = Subscriber.create((x) => {\n                if (socket.readyState === 1) {\n                    try {\n                        const { serializer } = this._config;\n                        socket.send(serializer(x));\n                    }\n                    catch (e) {\n                        this.destination.error(e);\n                    }\n                }\n            }, (err) => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (err && err.code) {\n                    socket.close(err.code, err.reason);\n                }\n                else {\n                    observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n                }\n                this._resetState();\n            }, () => {\n                const { closingObserver } = this._config;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject) {\n                subscription.add(queue.subscribe(this.destination));\n            }\n        };\n        socket.onerror = (e) => {\n            this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = (e) => {\n            if (socket === this._socket) {\n                this._resetState();\n            }\n            const { closeObserver } = this._config;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = (e) => {\n            try {\n                const { deserializer } = this._config;\n                observer.next(deserializer(e));\n            }\n            catch (err) {\n                observer.error(err);\n            }\n        };\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this._socket) {\n            this._connectSocket();\n        }\n        this._output.subscribe(subscriber);\n        subscriber.add(() => {\n            const { _socket } = this;\n            if (this._output.observers.length === 0) {\n                if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n                    _socket.close();\n                }\n                this._resetState();\n            }\n        });\n        return subscriber;\n    }\n    unsubscribe() {\n        const { _socket } = this;\n        if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n            _socket.close();\n        }\n        this._resetState();\n        super.unsubscribe();\n    }\n}\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { dateDecoder } from 'src/app/shared/helpers/decoders';\r\nimport {\r\n  catchError,\r\n  distinctUntilChanged,\r\n  EMPTY,\r\n  filter,\r\n  map,\r\n  merge,\r\n  Observable,\r\n  ReplaySubject,\r\n  scan,\r\n  shareReplay,\r\n  startWith,\r\n  switchMap,\r\n} from 'rxjs';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { ActivityLog, ActivityLogService } from 'src/app/shared/http-services/activity-log.service';\r\nimport { isNotUndefined } from 'src/app/shared/helpers/null-undefined-predicates';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\n\r\nconst threadOpenedEventDecoder = D.struct({\r\n  eventType: D.literal('thread_opened'),\r\n  byUserId: D.string,\r\n});\r\n\r\nconst threadClosedEventDecoder = D.struct({\r\n  eventType: D.literal('thread_closed'),\r\n  byUserId: D.string,\r\n});\r\n\r\nconst followEventDecoder = D.struct({\r\n  eventType: D.literal('follow'),\r\n  userId: D.string,\r\n});\r\n\r\nconst unfollowEventDecoder = D.struct({\r\n  eventType: D.literal('unfollow'),\r\n  userId: D.string,\r\n});\r\n\r\nconst attemptStartedEventDecoder = D.struct({\r\n  eventType: D.literal('attempt_started'),\r\n  attemptId: D.string,\r\n});\r\n\r\nconst submissionEventDecoder = pipe(\r\n  D.struct({\r\n    eventType: D.literal('submission'),\r\n    attemptId: D.string,\r\n    answerId: D.string,\r\n  }),\r\n  D.intersect(D.partial({\r\n    score: D.number,\r\n    validated: D.boolean,\r\n  }))\r\n);\r\n\r\nconst messageEventDecoder = D.struct({\r\n  eventType: D.literal('message'),\r\n  userId: D.string,\r\n  content: D.string,\r\n});\r\n\r\nconst threadEventDecoder = pipe(\r\n  D.struct({ time: dateDecoder }),\r\n  D.intersect(D.union(\r\n    threadOpenedEventDecoder,\r\n    threadClosedEventDecoder,\r\n    followEventDecoder,\r\n    attemptStartedEventDecoder,\r\n    submissionEventDecoder,\r\n    unfollowEventDecoder,\r\n    messageEventDecoder,\r\n  )),\r\n);\r\ntype ThreadEvent = D.TypeOf<typeof threadEventDecoder>;\r\n\r\nconst threadStatusDecoder = D.struct({\r\n  status: D.literal('none', 'closed', 'opened'),\r\n});\r\ntype ThreadStatus = D.TypeOf<typeof threadStatusDecoder>;\r\n\r\ninterface TokenData {\r\n  participantId: string,\r\n  itemId: string,\r\n  userId: string,\r\n  isMine: boolean,\r\n  canWatchParticipant: boolean,\r\n}\r\n\r\ntype ThreadAction =\r\n  | { action: 'open-thread', history: ActivityLog[] }\r\n  | { action: 'close-thread' }\r\n  | { action: 'follow' }\r\n  | { action: 'unfollow' }\r\n  | { action: 'thread-status' }\r\n  | { action: 'send-message', message: string };\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ThreadService implements OnDestroy {\r\n\r\n  events$: Observable<ThreadEvent[]>;\r\n  status$: Observable<ThreadStatus['status']>;\r\n\r\n  private newEvents$: Observable<ThreadEvent[]>;\r\n  private clearEvents$ = new ReplaySubject<void>(1);\r\n  private tokenData?: TokenData;\r\n  private socket: WebSocketSubject<unknown>;\r\n\r\n  constructor(\r\n    private activityLogService: ActivityLogService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private http: HttpClient,\r\n  ) {\r\n    if (!appConfig.forumServerUrl) throw new Error('cannot instantiate threads service when no forum server url');\r\n    this.socket = webSocket(appConfig.forumServerUrl);\r\n\r\n    this.newEvents$ = this.socket.pipe(\r\n      decodeSnakeCase(D.array(threadEventDecoder)),\r\n      catchError(() => EMPTY), // ignore undecoded messages\r\n    );\r\n\r\n    this.events$ = this.clearEvents$.pipe(\r\n      switchMap(() => this.newEvents$.pipe(\r\n        startWith([]),\r\n        scan((oldEvents, newEvents) => [ ...oldEvents, ...newEvents ]),\r\n      )),\r\n      map(events => events.sort((a, b) => a.time.valueOf() - b.time.valueOf())), // sort by date ascending\r\n    );\r\n\r\n    this.status$ = merge(\r\n      // When re-initializing a thread, fetch the status since the last 20 events might not contain any thread-status related event.\r\n      this.clearEvents$.pipe(switchMap(() => this.getStatus())),\r\n      this.newEvents$.pipe(\r\n        // when receiving a thread-status related event, we consider the first one since the list is ordered by event time DESCendings\r\n        map(events => events.find(event => event.eventType === 'thread_opened' || event.eventType === 'thread_closed')),\r\n        // Then we map the new status\r\n        map((event): ThreadStatus['status'] | undefined => {\r\n          switch (event?.eventType) {\r\n            case 'thread_closed': return 'closed';\r\n            case 'thread_opened': return 'opened';\r\n            default: return undefined;\r\n          }\r\n        }),\r\n        filter(isNotUndefined),\r\n      ),\r\n    ).pipe(\r\n      distinctUntilChanged(),\r\n      shareReplay(1),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.socket.complete();\r\n  }\r\n\r\n  init(tokenData: TokenData): void {\r\n    this.tokenData = tokenData;\r\n    this.clearEvents$.next();\r\n  }\r\n\r\n  private send(action: ThreadAction): void {\r\n    if (!this.tokenData) throw new Error('service must be initialized');\r\n    this.socket.next({\r\n      token: this.tokenData,\r\n      ...action,\r\n    });\r\n  }\r\n\r\n  open(onDoneOrError: () => void): void {\r\n    if (!this.tokenData) throw new Error('cannot open thread without token data');\r\n\r\n    const { participantId, userId, itemId } = this.tokenData;\r\n    const watchedGroupId = participantId === userId ? undefined : participantId;\r\n\r\n    this.clearEvents$.next();\r\n    this.activityLogService.getActivityLog(itemId, watchedGroupId).subscribe({\r\n      next: history => {\r\n        this.send({ action: 'open-thread', history });\r\n        onDoneOrError();\r\n      },\r\n      error: err => {\r\n        onDoneOrError();\r\n        this.actionFeedbackService.error($localize`We could not open a thread, please retry. If the problem persists, contact us`);\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      },\r\n    });\r\n  }\r\n\r\n  close(): void {\r\n    this.send({ action: 'close-thread' });\r\n  }\r\n\r\n  follow(): void {\r\n    this.send({ action: 'follow' });\r\n  }\r\n\r\n  unfollow(): void {\r\n    this.send({ action: 'unfollow' });\r\n  }\r\n\r\n  sendMessage(message: string): void {\r\n    if (!message) throw new Error('Cannot send an empty message');\r\n    this.send({ action: 'send-message', message });\r\n  }\r\n\r\n  private getStatus(): Observable<ThreadStatus['status']> {\r\n    if (!appConfig.forumApiUrl) throw new Error('cannot call forum api');\r\n\r\n    return this.http.post(`${appConfig.forumApiUrl}/thread-status`, { token: this.tokenData }).pipe(\r\n      decodeSnakeCase(threadStatusDecoder),\r\n      catchError(() => EMPTY),\r\n      map(result => result.status),\r\n    );\r\n  }\r\n\r\n}\r\n","import { WebSocketSubject } from './WebSocketSubject';\nexport function webSocket(urlConfigOrSource) {\n    return new WebSocketSubject(urlConfigOrSource);\n}\n","<div class=\"widget\">\r\n  <ng-container *ngIf=\"events$ | async as events\">\r\n    <div *ngIf=\"widgetOpened && events.length > 0\" class=\"widget-body\">\r\n      <div *ngFor=\"let event of events\">\r\n        <div>{{ event | json }}</div>\r\n      </div>\r\n      <div *ngIf=\"(threadStatus$ | async) === 'opened'\">\r\n        <textarea\r\n          [(ngModel)]=\"messageToSend\"\r\n          placeholder=\"Send a message...\"\r\n        ></textarea>\r\n        <p-button\r\n          label=\"Submit\"\r\n          (click)=\"sendMessage()\"\r\n          [disabled]=\"!messageToSend.trim()\"\r\n          ></p-button>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <div class=\"widget-footer\">\r\n    <p-button\r\n      *ngIf=\"canOpenThread$ | async\"\r\n      label=\"Open thread\"\r\n      (click)=\"openThread()\"\r\n      [disabled]=\"openingThread\"\r\n    ></p-button>\r\n\r\n    <p-button\r\n      *ngIf=\"canCloseThread$ | async\"\r\n      label=\"Close thread\"\r\n      (click)=\"closeThread()\"\r\n    ></p-button>\r\n\r\n    <p-button\r\n      *ngIf=\"widgetOpened\"\r\n      label=\"Hide thread\"\r\n      (click)=\"toggleWidget(false)\"\r\n    ></p-button>\r\n\r\n    <p-button\r\n      *ngIf=\"!widgetOpened\"\r\n      [disabled]=\"!(threadStatus$ | async) || (threadStatus$ | async) === 'none'\"\r\n      label=\"Show thread\"\r\n      (click)=\"toggleWidget(true)\"\r\n    ></p-button>\r\n  </div>\r\n</div>\r\n","import { Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { catchError, combineLatest, EMPTY, fromEvent, map, ReplaySubject, skip, switchMap, take } from 'rxjs';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { ThreadService } from '../../services/threads.service';\r\n\r\n@Component({\r\n  selector: 'alg-thread',\r\n  templateUrl: './thread.component.html',\r\n  styleUrls: [ './thread.component.scss' ],\r\n})\r\nexport class ThreadComponent implements OnChanges, OnDestroy {\r\n  @Input() itemId?: string;\r\n\r\n  messageToSend = '';\r\n  openingThread = false;\r\n  widgetOpened = false;\r\n\r\n  events$ = this.threadService.events$;\r\n  threadStatus$ = this.threadService.status$;\r\n  canOpenThread$ = combineLatest([ this.groupWatchingService.isWatching$, this.threadStatus$ ]).pipe(\r\n    map(([ isWatching, status ]) => !isWatching && status !== 'opened'),\r\n  );\r\n  canCloseThread$ = combineLatest([ this.groupWatchingService.isWatching$, this.threadStatus$ ]).pipe(\r\n    map(([ isWatching, status ]) => !isWatching && status === 'opened'),\r\n  );\r\n\r\n  private itemId$ = new ReplaySubject<string>(1);\r\n\r\n  private subscriptions = [\r\n    combineLatest([ this.itemId$, this.userSession.userProfile$, this.groupWatchingService.watchedGroup$ ])\r\n      .pipe(catchError(() => EMPTY)) // error is handled elsewhere\r\n      .subscribe(([ itemId, profile, watchedGroup ]) => {\r\n        this.threadService.init({\r\n          participantId: watchedGroup?.route.id || profile.groupId,\r\n          itemId,\r\n          userId: profile.groupId,\r\n          isMine: !watchedGroup,\r\n          canWatchParticipant: !!watchedGroup,\r\n        });\r\n      }),\r\n    this.itemId$\r\n      .pipe(switchMap(() => this.threadStatus$), take(1))\r\n      .subscribe(status => {\r\n        this.threadService.follow();\r\n        this.widgetOpened = status === 'opened';\r\n      }),\r\n\r\n    this.itemId$.pipe(skip(1)).subscribe(() => this.threadService.unfollow()),\r\n\r\n    fromEvent(window, 'beforeunload').subscribe(() => this.threadService.unfollow()),\r\n  ];\r\n\r\n  constructor(\r\n    private threadService: ThreadService,\r\n    private userSession: UserSessionService,\r\n    private groupWatchingService: GroupWatchingService,\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.itemId && changes.itemId) {\r\n      const previousItemId = changes.itemId?.previousValue as string | undefined;\r\n      if (this.itemId !== previousItemId) this.itemId$.next(this.itemId);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.threadService.unfollow();\r\n  }\r\n\r\n  openThread(): void {\r\n    this.openingThread = true;\r\n    this.widgetOpened = true;\r\n    this.threadService.open(() => this.openingThread = false);\r\n  }\r\n\r\n  closeThread(): void {\r\n    this.widgetOpened = false;\r\n    this.threadService.close();\r\n  }\r\n\r\n  toggleWidget(opened: boolean): void {\r\n    this.widgetOpened = opened;\r\n  }\r\n\r\n  sendMessage(): void {\r\n    const messageToSend = this.messageToSend.trim();\r\n    if (!messageToSend) return;\r\n    this.threadService.sendMessage(messageToSend);\r\n    this.messageToSend = '';\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\nimport { itemCorePermDecoder } from 'src/app/shared/models/domain/item-permissions';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { durationDecoder } from '../../../shared/helpers/decoders';\r\n\r\nconst itemPrerequisitesDecoder = pipe(\r\n  D.struct({\r\n    allowsMultipleAttempts: D.boolean,\r\n    bestScore: D.number,\r\n    defaultLanguageTag: D.string,\r\n    dependencyGrantContentView: D.boolean,\r\n    dependencyRequiredScore: D.number,\r\n    displayDetailsInParent: D.boolean,\r\n    duration: D.nullable(durationDecoder),\r\n    entryParticipantType: D.literal('User', 'Team'),\r\n    id: D.string,\r\n    noScore: D.boolean,\r\n    permissions: itemCorePermDecoder,\r\n    requiresExplicitEntry: D.boolean,\r\n    string: pipe(\r\n      D.struct({\r\n        languageTag: D.string,\r\n        title: D.nullable(D.string),\r\n      }),\r\n      D.intersect(\r\n        D.partial({\r\n          subtitle: D.nullable(D.string),\r\n        }),\r\n      ),\r\n    ),\r\n    type: D.literal('Chapter', 'Task', 'Course', 'Skill'),\r\n    validationType: D.literal('None','All','AllButOne','Categories','One','Manual'),\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      watchedGroup: pipe(\r\n        D.struct({\r\n          canView: D.literal('none','info','content','content_with_descendants','solution'),\r\n        }),\r\n        D.intersect(\r\n          D.partial({\r\n            allValidated: D.boolean,\r\n            avgScore: D.number,\r\n          }),\r\n        ),\r\n      ),\r\n    }),\r\n  ),\r\n);\r\n\r\nexport type ItemPrerequisite = D.TypeOf<typeof itemPrerequisitesDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GetItemPrerequisitesService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get(itemId: string): Observable<ItemPrerequisite[]> {\r\n    return this.http\r\n      .get<unknown[]>(`${appConfig.apiUrl}/items/${ itemId }/prerequisites`)\r\n      .pipe(\r\n        decodeSnakeCase(D.array(itemPrerequisitesDecoder))\r\n      );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-loading size=\"medium\" *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    i18n-message message=\"Unable to load the dependencies\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n\r\n  <ng-container *ngIf=\"!state.isFetching && (state.data || []).length > 0\">\r\n    <alg-section icon=\"fa fa-list\" i18n-label label=\"Prerequisites\">\r\n      <p i18n>You can unlock access by validating one of the following content.</p>\r\n\r\n      <ul class=\"list\">\r\n        <li\r\n          class=\"list-item\"\r\n          *ngFor=\"let item of state.data; let i = index\"\r\n          (mouseleave)=\"onMouseLeave($event)\"\r\n        >\r\n          <div class=\"list-item-left\">\r\n            <span class=\"activity-progress\">\r\n              <alg-score-ring\r\n                [diameter]=\"30\"\r\n                [bestScore]=\"item.bestScore\"\r\n                [currentScore]=\"item.bestScore\"\r\n              ></alg-score-ring>\r\n            </span>\r\n            <a\r\n              class=\"alg-link\"\r\n              [routerLink]=\"item | rawItemLink\"\r\n              (mouseenter)=\"onMouseEnter($event, item.id, i)\"\r\n              #contentRef\r\n            >\r\n              {{ item.string.title }}\r\n            </a>\r\n          </div>\r\n          <i class=\"lock-icon fa fa-lock\" *ngIf=\"item.isLocked\"></i>\r\n        </li>\r\n      </ul>\r\n    </alg-section>\r\n\r\n    <p-overlayPanel\r\n      styleClass=\"alg-path-suggestion-overlay\"\r\n      #op\r\n    >\r\n      <ng-container *ngIf=\"op.overlayVisible\">\r\n        <alg-path-suggestion [itemId]=\"(showOverlay$ | async)?.itemId\" (mouseleave)=\"closeOverlay()\"></alg-path-suggestion>\r\n      </ng-container>\r\n    </p-overlayPanel>\r\n  </ng-container>\r\n</ng-container>\r\n","import { Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { BehaviorSubject, debounceTime, merge, ReplaySubject, Subject, switchMap } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, share, shareReplay } from 'rxjs/operators';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { GetItemPrerequisitesService } from '../../http-services/get-item-prerequisites.service';\r\nimport { canCloseOverlay } from '../../../../shared/helpers/overlay';\r\nimport { canCurrentUserViewContent } from '../../../../shared/models/domain/item-view-permission';\r\n\r\n@Component({\r\n  selector: 'alg-item-unlock-access',\r\n  templateUrl: './item-unlock-access.component.html',\r\n  styleUrls: [ './item-unlock-access.component.scss' ],\r\n})\r\nexport class ItemUnlockAccessComponent implements OnChanges, OnDestroy {\r\n  @Input() itemData?: ItemData;\r\n\r\n  @ViewChild('op') op?: OverlayPanel;\r\n  @ViewChildren('contentRef') contentRef?: QueryList<ElementRef<HTMLElement>>;\r\n\r\n  private readonly itemId$ = new ReplaySubject<string>(1);\r\n  private readonly refresh$ = new Subject<void>();\r\n\r\n  state$ = this.itemId$.pipe(\r\n    switchMap(itemId => this.getItemPrerequisitesService.get(itemId)),\r\n    map(data => data.map(item => ({\r\n      ...item,\r\n      isLocked: !canCurrentUserViewContent(item),\r\n    }))),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n    share(),\r\n  );\r\n  private readonly showOverlaySubject$ = new BehaviorSubject<{ event: Event, itemId: string, target: HTMLElement }|undefined>(undefined);\r\n  showOverlay$ = merge(\r\n    this.showOverlaySubject$.pipe(debounceTime(750)),\r\n    this.showOverlaySubject$.pipe(filter(value => !value)), // this allows to close the overlay immediately and not after debounce delay\r\n  ).pipe(distinctUntilChanged(), shareReplay(1));\r\n\r\n  private readonly showOverlaySubscription = this.showOverlay$.subscribe(data => {\r\n    data ? this.op?.toggle(data.event, data.target) : this.op?.hide();\r\n  });\r\n\r\n  constructor(\r\n    private getItemPrerequisitesService: GetItemPrerequisitesService,\r\n  ) {\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.itemData) {\r\n      this.itemId$.next(this.itemData.item.id);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.itemId$.complete();\r\n    this.showOverlaySubject$.complete();\r\n    this.refresh$.complete();\r\n    this.showOverlaySubscription.unsubscribe();\r\n  }\r\n\r\n  onMouseEnter(event: Event, itemId: string, index: number): void {\r\n    const targetRef = this.contentRef?.get(index);\r\n    if (!targetRef) {\r\n      throw new Error('Unexpected: Target is not found');\r\n    }\r\n    this.showOverlaySubject$.next({ event, itemId, target: targetRef.nativeElement });\r\n  }\r\n\r\n  onMouseLeave(event: MouseEvent): void {\r\n    if (canCloseOverlay(event)) {\r\n      this.closeOverlay();\r\n    }\r\n  }\r\n\r\n  closeOverlay(): void {\r\n    this.showOverlaySubject$.next(undefined);\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n}\r\n","<ng-container *ngIf=\"itemData\">\r\n  <ng-container *ngIf=\"itemData.item.permissions | allowsViewingContent; else notAllowToWatch\">\r\n    <ng-container *ngIf=\"itemData.currentResult; else noCurrentResult\">\r\n\r\n      <alg-section icon=\"fa fa-book\" i18n-label label=\"Description\" *ngIf=\"itemData.item.string.description\">\r\n        <p>{{ itemData.item.string.description }} </p>\r\n      </alg-section>\r\n\r\n      <ng-container *ngIf=\"['Chapter', 'Skill'].includes(itemData.item.type)\">\r\n        <div class=\"edit\" *ngIf=\"['all','all_with_grant', 'children'].includes(itemData.item.permissions.canEdit) || editModeEnabled\">\r\n          <label class=\"edit-label\">\r\n            <span class=\"alg-base-text-color\" i18n>Edit content</span>\r\n            <alg-switch\r\n              class=\"edit-switch\"\r\n              mode=\"white\"\r\n              [checked]=\"editModeEnabled\"\r\n              (change)=\"onEditModeEnableChange($event)\"\r\n            ></alg-switch>\r\n          </label>\r\n        </div>\r\n\r\n        <alg-item-children-edit-form\r\n          [itemData]=\"itemData\"\r\n          *ngIf=\"editModeEnabled\"\r\n        ></alg-item-children-edit-form>\r\n\r\n        <alg-chapter-children\r\n          [itemData]=\"itemData\"\r\n          [algFullHeightContent]=\"true\"\r\n          *ngIf=\"itemData.item.type === 'Chapter' && !editModeEnabled\"\r\n        ></alg-chapter-children>\r\n\r\n        <alg-sub-skills [itemData]=\"itemData\" *ngIf=\"itemData.item.type === 'Skill' && !editModeEnabled\"></alg-sub-skills>\r\n        <alg-parent-skills [itemData]=\"itemData\" *ngIf=\"itemData.item.type === 'Skill'\"></alg-parent-skills>\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"(itemData.item.type === 'Task' || itemData.item.type === 'Course')\">\r\n        <ng-container *ngIf=\"itemData.item.url; else noUrl\">\r\n          <alg-item-display\r\n            *ngIf=\"attemptId; else noCurrentResult\"\r\n            [route]=\"itemData.route\"\r\n            [editingPermission]=\"itemData.item.permissions\"\r\n            [url]=\"itemData.item.url\"\r\n            [attemptId]=\"attemptId\"\r\n            [view]=\"taskView\"\r\n            [taskConfig]=\"taskConfig\"\r\n            [savingAnswer]=\"savingAnswer\"\r\n            (viewChange)=\"taskViewChange.emit($event)\"\r\n            (tabsChange)=\"taskTabsChange.emit($event)\"\r\n            (scoreChange)=\"scoreChange.emit($event)\"\r\n            (skipSave)=\"skipSave.emit()\"\r\n            (refresh)=\"refresh.emit()\"\r\n          ></alg-item-display>\r\n          <alg-thread\r\n            *ngIf=\"showItemThreadWidget\"\r\n            [itemId]=\"itemData.route.id\"\r\n          ></alg-thread>\r\n        </ng-container>\r\n\r\n        <ng-template #noUrl>\r\n          <p class=\"validation-text\" i18n>\r\n            This activity has not been correctly configured.\r\n          </p>\r\n          <p class=\"validation-text\" *ngIf=\"itemData.item.permissions | allowsEditingChildren\" i18n>\r\n            You need to set a url in editing mode.\r\n          </p>\r\n        </ng-template>\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n\r\n  <ng-template #notAllowToWatch>\r\n    <div class=\"message-info\">\r\n      <alg-message-info>\r\n        <span *ngIf=\"itemData.item.type === 'Chapter'\" i18n>\r\n          Your current access rights do not allow you to list the content of this chapter.\r\n        </span>\r\n\r\n        <span *ngIf=\"itemData.item.type === 'Skill'\" i18n>\r\n          Your current access rights do not allow you to list the content of this skill.\r\n        </span>\r\n\r\n        <span *ngIf=\"['Task', 'Course'].includes(itemData.item.type)\" i18n>\r\n          Your current access rights do not allow you to start the activity.\r\n        </span>\r\n      </alg-message-info>\r\n    </div>\r\n\r\n    <alg-item-unlock-access\r\n      [itemData]=\"itemData\"\r\n      *ngIf=\"(itemData.item.permissions | allowsViewingInfo) && !(itemData.item.permissions | allowsViewingContent)\"\r\n    ></alg-item-unlock-access>\r\n  </ng-template>\r\n\r\n  <ng-template #noCurrentResult>\r\n    <p class=\"validation-text\" *ngIf=\"itemData.item.requiresExplicitEntry; else noRequiresExplicitEntry\">\r\n      <span>\r\n        <ng-container i18n>This activity requires explicit entry</ng-container>&nbsp;\r\n        <ng-container i18n=\"@@notImplemented\">(not implemented)</ng-container>.\r\n      </span>\r\n    </p>\r\n    <ng-template #noRequiresExplicitEntry>\r\n      <alg-task-loader\r\n        i18n-label label=\"Starting the activity\"\r\n        [algFullHeightContent]=\"true\"\r\n      ></alg-task-loader>\r\n    </ng-template>\r\n  </ng-template>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { TaskConfig } from '../../services/item-task.service';\r\nimport { ItemDisplayComponent, TaskTab } from '../item-display/item-display.component';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n  ItemChildrenEditFormComponent\r\n} from '../../components/item-children-edit-form/item-children-edit-form.component';\r\nimport { PendingChangesComponent } from '../../../../shared/guards/pending-changes-guard';\r\nimport { SwitchComponent } from '../../../shared-components/components/switch/switch.component';\r\n\r\n@Component({\r\n  selector: 'alg-item-content',\r\n  templateUrl: './item-content.component.html',\r\n  styleUrls: [ './item-content.component.scss' ]\r\n})\r\nexport class ItemContentComponent implements OnChanges, PendingChangesComponent {\r\n  @ViewChild(ItemDisplayComponent) itemDisplayComponent?: ItemDisplayComponent;\r\n  @ViewChild(ItemChildrenEditFormComponent) itemChildrenEditFormComponent?: ItemChildrenEditFormComponent;\r\n  @ViewChild(SwitchComponent) switchComponent?: SwitchComponent;\r\n\r\n  @Input() itemData?: ItemData;\r\n  @Input() taskView?: TaskTab['view'];\r\n  @Input() taskConfig: TaskConfig = { readOnly: false, formerAnswer: null };\r\n  @Input() savingAnswer = false;\r\n  @Input() editModeEnabled = false;\r\n\r\n  @Output() taskTabsChange = new EventEmitter<TaskTab[]>();\r\n  @Output() taskViewChange = new EventEmitter<TaskTab['view']>();\r\n  @Output() scoreChange = new EventEmitter<number>();\r\n  @Output() skipSave = new EventEmitter<void>();\r\n  @Output() refresh = new EventEmitter<void>();\r\n\r\n  isDirty(): boolean {\r\n    return !!this.itemChildrenEditFormComponent?.dirty;\r\n  }\r\n\r\n  showItemThreadWidget = !!appConfig.forumServerUrl;\r\n  attemptId?: string;\r\n\r\n  constructor(private router: Router, private route: ActivatedRoute) {\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (!this.itemData) return;\r\n    this.attemptId = this.itemData.route.attemptId || this.itemData.currentResult?.attemptId;\r\n  }\r\n\r\n  onEditModeEnableChange(editModeEnabled: boolean): void {\r\n    void this.router.navigate([ editModeEnabled ? './edit-children' : './' ], {\r\n      relativeTo: this.route,\r\n    }).then(redirected => {\r\n      if (!editModeEnabled && !redirected) {\r\n        this.switchComponent?.writeValue(true);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { assertSuccess, SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\nexport interface ItemStringChanges {\r\n  description?: string | null,\r\n  image_url?: string | null,\r\n  subtitle?: string | null,\r\n  title?: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UpdateItemStringService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  updateItem(\r\n    itemId: string,\r\n    changes: ItemStringChanges,\r\n    languageTag?: string\r\n  ) : Observable<void> {\r\n    // Fixme: Get languageTag properly\r\n    const tag = languageTag || 'default';\r\n    return this.http.put<SimpleActionResponse>(\r\n      `${appConfig.apiUrl}/items/${itemId}/strings/${tag}`,\r\n      changes,\r\n    ).pipe(\r\n      map(assertSuccess)\r\n    );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"itemData && itemData.currentResult\">\r\n  <alg-section icon=\"fa fa-book\" i18n-label label=\"Description\" *ngIf=\"itemData.item.permissions | allowsEditingAll\">\r\n    <alg-textarea [parentForm]=\"parentForm\" inputName=\"description\"></alg-textarea>\r\n  </alg-section>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { PossiblyInvisibleChildData } from '../../components/item-children-edit/item-children-edit.component';\r\n\r\n@Component({\r\n  selector: 'alg-item-edit-content',\r\n  templateUrl: './item-edit-content.component.html',\r\n  styleUrls: [ './item-edit-content.component.scss' ]\r\n})\r\nexport class ItemEditContentComponent {\r\n  @Input() parentForm?: UntypedFormGroup;\r\n  @Input() itemData? : ItemData;\r\n\r\n  @Output() childrenChanges = new EventEmitter<PossiblyInvisibleChildData[]>();\r\n\r\n  constructor() {}\r\n\r\n}\r\n","<ng-container *ngIf=\"fetchState$ | async as fetchState\">\r\n\r\n  <div *ngIf=\"fetchState.isReady\" style=\"margin: 1rem 0 0.5rem 0\">\r\n    <form [formGroup]=\"itemForm\" *ngIf=\"fetchState.data.item.permissions | allowsEditingChildren; else notAuthorized\">\r\n\r\n      <div class=\"header\" *ngIf=\"fetchState.data.item.permissions | allowsEditingAll\">\r\n        <alg-input [parentForm]=\"itemForm\" i18n-placeholder placeholder=\"Item title\" name=\"title\" size=\"large\" [isDark]='false'></alg-input>\r\n        <alg-input [parentForm]=\"itemForm\" i18n-placeholder placeholder=\"Item subtitle\" name=\"subtitle\" size=\"small\" [isDark]='false'></alg-input>\r\n      </div>\r\n\r\n      <nav class=\"nav-tab\">\r\n        <a\r\n           class=\"nav-tab-item\"\r\n           [routerLink]=\"'./'\"\r\n           routerLinkActive #rla1=\"routerLinkActive\"\r\n           [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n           [class.active]=\"rla1.isActive\"\r\n           i18n\r\n        >\r\n          Content\r\n        </a>\r\n        <a\r\n          [hidden]=\"!(fetchState.data.item.permissions | allowsEditingAll)\"\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./advanced-parameters'\"\r\n          routerLinkActive #rla2=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n          [class.active]=\"rla2.isActive\"\r\n          i18n\r\n        >\r\n          Advanced parameters\r\n        </a>\r\n      </nav>\r\n\r\n      <div class=\"bg-white\">\r\n        <alg-item-edit-content\r\n          *ngIf=\"rla1.isActive\"\r\n          [parentForm]=\"itemForm\"\r\n          [itemData]=\"fetchState.data\"\r\n        >\r\n        </alg-item-edit-content>\r\n        <ng-container *ngIf=\"attemptId$ | async as attemptId\">\r\n          <alg-item-edit-advanced-parameters #advancedParameters\r\n            *ngIf=\"(fetchState.data.item.permissions | allowsEditingAll) && rla2.isActive\"\r\n            [parentForm]=\"itemForm\"\r\n            [item]=\"initialFormData\"\r\n            [attemptId]=\"attemptId\"\r\n          >\r\n          </alg-item-edit-advanced-parameters>\r\n        </ng-container>\r\n      </div>\r\n\r\n    </form>\r\n    <alg-floating-save *ngIf=\"itemForm.dirty\" [saving]=\"itemForm.disabled\" (save)=\"save()\" (cancel)=\"onCancel()\"></alg-floating-save>\r\n    <ng-template #notAuthorized>\r\n      <p i18n>You do not have the permissions to edit this content.</p>\r\n    </ng-template>\r\n  </div>\r\n\r\n</ng-container>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { ItemDataSource } from '../../services/item-datasource.service';\r\nimport { AbstractControl, UntypedFormBuilder, ValidatorFn, Validators } from '@angular/forms';\r\nimport { forkJoin, Observable, of, Subscription, throwError } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ItemStringChanges, UpdateItemStringService } from '../../http-services/update-item-string.service';\r\nimport { ItemChanges, UpdateItemService } from '../../http-services/update-item.service';\r\nimport { Item } from '../../http-services/get-item-by-id.service';\r\nimport { PendingChangesComponent } from 'src/app/shared/guards/pending-changes-guard';\r\nimport { ModeService } from 'src/app/shared/services/mode.service';\r\nimport { readyData } from 'src/app/shared/operators/state';\r\nimport { Duration } from '../../../../shared/helpers/duration';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { isNotUndefined } from 'src/app/shared/helpers/null-undefined-predicates';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\n\r\nexport const DEFAULT_ENTERING_TIME_MIN = '1000-01-01T00:00:00Z';\r\nexport const DEFAULT_ENTERING_TIME_MAX = '9999-12-31T23:59:59Z';\r\n\r\n@Component({\r\n  selector: 'alg-item-edit',\r\n  templateUrl: './item-edit.component.html',\r\n  styleUrls: [ './item-edit.component.scss' ],\r\n})\r\nexport class ItemEditComponent implements OnDestroy, PendingChangesComponent {\r\n  itemForm = this.formBuilder.group({\r\n    // eslint-disable-next-line @typescript-eslint/unbound-method\r\n    title: [ '', [ Validators.required, Validators.minLength(3), Validators.maxLength(200) ] ],\r\n    subtitle: [ '', Validators.maxLength(200) ],\r\n    description: [ '' ],\r\n    url: [ '', Validators.maxLength(2000) ],\r\n    text_id: [ '', Validators.maxLength(200) ],\r\n    uses_api: [ false ],\r\n    validation_type: [ '' ],\r\n    no_score: [ false ],\r\n    title_bar_visible: [ false ],\r\n    prompt_to_join_group_by_code: [ false ],\r\n    full_screen: [ '' ],\r\n    allows_multiple_attempts: [ false ],\r\n    requires_explicit_entry: [ false ],\r\n    duration_enabled: [ false ],\r\n    duration: [ null ],\r\n    entering_time_min_enabled: [ false ],\r\n    entering_time_min: [ null ],\r\n    entering_time_max_enabled: [ false ],\r\n    entering_time_max: [ null ],\r\n    entry_participant_type: [ false ],\r\n    entry_frozen_teams: [ false ],\r\n    entry_max_team_size: [ '' ],\r\n    entry_min_admitted_members_ratio: [ '' ],\r\n  }, {\r\n    validators: [ this.maxTeamSizeValidator() ],\r\n  });\r\n\r\n  fetchState$ = this.itemDataSource.state$;\r\n  initialFormData?: Item & {durationEnabled?: boolean, enteringTimeMinEnabled?: boolean, enteringTimeMaxEnabled?: boolean};\r\n\r\n  subscription?: Subscription;\r\n\r\n  attemptId$ = this.itemDataSource.state$.pipe(\r\n    map(state => {\r\n      if (state.isReady) {\r\n        return state.data.route.attemptId || state.data.route.parentAttemptId;\r\n      }\r\n      return undefined;\r\n    })\r\n  );\r\n\r\n  get enableParticipation(): boolean {\r\n    return this.initialFormData?.type !== 'Skill';\r\n  }\r\n\r\n  get enableTeam(): boolean {\r\n    return this.initialFormData?.type !== 'Skill';\r\n  }\r\n\r\n  constructor(\r\n    private modeService: ModeService,\r\n    private currentContentService: CurrentContentService,\r\n    private itemDataSource: ItemDataSource,\r\n    private formBuilder: UntypedFormBuilder,\r\n    private updateItemService: UpdateItemService,\r\n    private updateItemStringService: UpdateItemStringService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {\r\n    this.modeService.startEditing();\r\n    this.subscription = this.fetchState$\r\n      .pipe(readyData(), map(data => ({\r\n        ...data.item,\r\n        durationEnabled: data.item.duration !== null,\r\n        enteringTimeMinEnabled: data.item.enteringTimeMin.getTime() !== new Date(DEFAULT_ENTERING_TIME_MIN).getTime(),\r\n        enteringTimeMaxEnabled: data.item.enteringTimeMax.getTime() !== new Date(DEFAULT_ENTERING_TIME_MAX).getTime(),\r\n      })))\r\n      .subscribe(data => {\r\n        this.initialFormData = data;\r\n        this.resetForm();\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.modeService.stopEditing();\r\n    this.subscription?.unsubscribe();\r\n  }\r\n\r\n  isDirty(): boolean {\r\n    return this.itemForm.dirty;\r\n  }\r\n\r\n  private getItemChanges(): ItemChanges | undefined {\r\n    const formControls: {[key: string]: AbstractControl | null} = {\r\n      url: this.itemForm.get('url'),\r\n      textId: this.itemForm.get('text_id'),\r\n      usesApi: this.itemForm.get('uses_api'),\r\n      validationType: this.itemForm.get('validation_type'),\r\n      noScore: this.itemForm.get('no_score'),\r\n      titleBarVisible: this.itemForm.get('title_bar_visible'),\r\n      promptToJoinGroupByCode: this.itemForm.get('prompt_to_join_group_by_code'),\r\n      fullScreen: this.itemForm.get('full_screen'),\r\n      ...(this.enableParticipation ? {\r\n        allowsMultipleAttempts: this.itemForm.get('allows_multiple_attempts'),\r\n        requiresExplicitEntry: this.itemForm.get('requires_explicit_entry'),\r\n        durationEnabled: this.itemForm.get('duration_enabled'),\r\n        duration: this.itemForm.get('duration'),\r\n        enteringTimeMinEnabled: this.itemForm.get('entering_time_min_enabled'),\r\n        enteringTimeMin: this.itemForm.get('entering_time_min'),\r\n        enteringTimeMaxEnabled: this.itemForm.get('entering_time_max_enabled'),\r\n        enteringTimeMax: this.itemForm.get('entering_time_max'),\r\n      } : {}),\r\n      ...(this.enableTeam ? {\r\n        entryParticipantType: this.itemForm.get('entry_participant_type'),\r\n        entryFrozenTeams: this.itemForm.get('entry_frozen_teams'),\r\n        entryMaxTeamSize: this.itemForm.get('entry_max_team_size'),\r\n        entryMinAdmittedMembersRatio: this.itemForm.get('entry_min_admitted_members_ratio'),\r\n      } : {}),\r\n    };\r\n\r\n    if (Object.values(formControls).includes(null) || !this.initialFormData) return undefined;\r\n\r\n    const itemFormValues: ItemChanges = {};\r\n\r\n    const url = formControls.url?.value !== '' ? formControls.url?.value as string : null;\r\n    if (isNotUndefined(this.initialFormData.url) && url !== this.initialFormData.url) itemFormValues.url = url;\r\n\r\n    const usesApi = formControls.usesApi?.value as boolean;\r\n    if (isNotUndefined(this.initialFormData.usesApi) && usesApi !== this.initialFormData.usesApi) itemFormValues.uses_api = usesApi;\r\n\r\n    const textId = formControls.textId?.value as string;\r\n    if (textId !== '') itemFormValues.text_id = textId;\r\n\r\n    const validationType = formControls.validationType?.value as 'None' | 'All' | 'AllButOne' | 'Categories' | 'One' | 'Manual';\r\n    if (validationType !== this.initialFormData.validationType) itemFormValues.validation_type = validationType;\r\n\r\n    const noScore = formControls.noScore?.value as boolean;\r\n    if (noScore !== this.initialFormData.noScore) itemFormValues.no_score = noScore;\r\n\r\n    const titleBarVisible = formControls.titleBarVisible?.value as boolean;\r\n    if (titleBarVisible !== this.initialFormData.titleBarVisible) itemFormValues.title_bar_visible = titleBarVisible;\r\n\r\n    const promptToJoinGroupByCode = formControls.promptToJoinGroupByCode?.value as boolean;\r\n    if (promptToJoinGroupByCode !== this.initialFormData.promptToJoinGroupByCode)\r\n      itemFormValues.prompt_to_join_group_by_code = promptToJoinGroupByCode;\r\n\r\n    const fullScreen = formControls.fullScreen?.value as 'forceYes' | 'forceNo' | 'default';\r\n    if (fullScreen !== this.initialFormData.fullScreen) itemFormValues.full_screen = fullScreen;\r\n\r\n    if (this.enableParticipation) {\r\n      const allowsMultipleAttempts = formControls.allowsMultipleAttempts?.value as boolean;\r\n      if (allowsMultipleAttempts !== this.initialFormData.allowsMultipleAttempts) {\r\n        itemFormValues.allows_multiple_attempts = allowsMultipleAttempts;\r\n      }\r\n\r\n      const requiresExplicitEntry = formControls.requiresExplicitEntry?.value as boolean;\r\n      const hasRequiresExplicitEntryChanges = requiresExplicitEntry !== this.initialFormData.requiresExplicitEntry;\r\n\r\n      if (hasRequiresExplicitEntryChanges) {\r\n        itemFormValues.requires_explicit_entry = requiresExplicitEntry;\r\n      }\r\n\r\n      const durationEnabled = formControls.durationEnabled?.value as boolean;\r\n      const duration = formControls.duration?.value as Duration | null;\r\n      const hasDurationEnabledChanges = durationEnabled !== this.initialFormData.durationEnabled;\r\n      const hasDurationChanges = duration?.getMs() !== this.initialFormData?.duration?.getMs();\r\n\r\n      if (hasDurationChanges || hasDurationEnabledChanges || hasRequiresExplicitEntryChanges) {\r\n        itemFormValues.duration = durationEnabled && requiresExplicitEntry ? duration?.toString() : null;\r\n      }\r\n\r\n      const enteringTimeMinEnabled = formControls.enteringTimeMinEnabled?.value as boolean;\r\n      const hasEnteringTimeMinEnabledChanges = enteringTimeMinEnabled !== this.initialFormData.enteringTimeMinEnabled;\r\n      const enteringTimeMin = formControls.enteringTimeMin?.value as Date;\r\n      const hasEnteringTimeMinChanges = enteringTimeMin.getTime()\r\n        !== this.initialFormData.enteringTimeMin.getTime();\r\n\r\n      if (hasEnteringTimeMinChanges || hasEnteringTimeMinEnabledChanges) {\r\n        itemFormValues.entering_time_min = enteringTimeMinEnabled ? enteringTimeMin : new Date(DEFAULT_ENTERING_TIME_MIN);\r\n      }\r\n\r\n      const enteringTimeMaxEnabled = formControls.enteringTimeMaxEnabled?.value as boolean;\r\n      const hasEnteringTimeMaxEnabledChanges = enteringTimeMaxEnabled !== this.initialFormData.enteringTimeMaxEnabled;\r\n      const enteringTimeMax = formControls.enteringTimeMax?.value as Date;\r\n      const hasEnteringTimeMaxChanges = enteringTimeMax.getTime()\r\n        !== this.initialFormData.enteringTimeMax.getTime();\r\n\r\n      if (hasEnteringTimeMaxChanges || hasEnteringTimeMaxEnabledChanges) {\r\n        itemFormValues.entering_time_max = enteringTimeMaxEnabled ? enteringTimeMax : new Date(DEFAULT_ENTERING_TIME_MAX);\r\n      }\r\n    }\r\n\r\n    if (this.enableTeam) {\r\n      const entryParticipantType = (formControls.entryParticipantType?.value as boolean | undefined) ? 'Team' : 'User';\r\n      const hasEntryParticipantTypeChanges = entryParticipantType !== this.initialFormData.entryParticipantType;\r\n      if (hasEntryParticipantTypeChanges) {\r\n        itemFormValues.entry_participant_type = entryParticipantType;\r\n      }\r\n\r\n      const entryFrozenTeams = formControls.entryFrozenTeams?.value as boolean | undefined;\r\n      const hasEntryFrozenTeamsChanges = entryFrozenTeams !== this.initialFormData.entryFrozenTeams;\r\n      if (hasEntryFrozenTeamsChanges) {\r\n        itemFormValues.entry_frozen_teams = entryFrozenTeams;\r\n      }\r\n\r\n      const entryMaxTeamSize = formControls.entryMaxTeamSize?.value as number | undefined;\r\n      const hasEntryMaxTeamSizeChanges = entryMaxTeamSize !== this.initialFormData.entryMaxTeamSize;\r\n      if (hasEntryMaxTeamSizeChanges) {\r\n        itemFormValues.entry_max_team_size = entryMaxTeamSize;\r\n      }\r\n\r\n      const entryMinAdmittedMembersRatio = formControls.entryMinAdmittedMembersRatio?.value as 'None' | 'All' | 'One' | 'Half' | undefined;\r\n      const hasEntryMinAdmittedMembersRatioChanges = entryMinAdmittedMembersRatio !== this.initialFormData.entryMinAdmittedMembersRatio;\r\n      if (hasEntryMinAdmittedMembersRatioChanges) {\r\n        itemFormValues.entry_min_admitted_members_ratio = entryMinAdmittedMembersRatio;\r\n      }\r\n    }\r\n\r\n    return itemFormValues;\r\n  }\r\n\r\n  private updateItem(): Observable<void> {\r\n    if (!this.initialFormData) return throwError(new Error('Invalid initial data'));\r\n    const changes = this.getItemChanges();\r\n    if (!changes) return throwError(new Error('Invalid form'));\r\n    if (!Object.keys(changes).length) return of(undefined);\r\n    return this.updateItemService.updateItem(this.initialFormData.id, changes);\r\n  }\r\n\r\n  // Item string changes\r\n  private getItemStringChanges(): ItemStringChanges | undefined {\r\n    const titleControl = this.itemForm.get('title');\r\n    const subtitleControl = this.itemForm.get('subtitle');\r\n    const descriptionControl = this.itemForm.get('description');\r\n    const initialValues = this.initialFormData?.string;\r\n\r\n    if (titleControl === null || subtitleControl === null || descriptionControl === null || !initialValues) return undefined;\r\n\r\n    const res: ItemStringChanges = {};\r\n\r\n    const title = titleControl.value as string;\r\n    if (title !== initialValues.title) res.title = title.trim();\r\n\r\n    const subtitle = (subtitleControl.value as string).trim() || null;\r\n    if (subtitle !== initialValues.subtitle) res.subtitle = subtitle;\r\n\r\n    const description = (descriptionControl.value as string).trim() || null;\r\n    if (description !== initialValues.description) res.description = description;\r\n\r\n    return res;\r\n  }\r\n\r\n  private updateString(): Observable<void> {\r\n    if (!this.initialFormData) return throwError(new Error('Missing ID form'));\r\n    const itemStringChanges = this.getItemStringChanges();\r\n    if (!itemStringChanges) return throwError(new Error('Invalid form or initial data'));\r\n    if (!Object.keys(itemStringChanges).length) return of(undefined);\r\n    return this.updateItemStringService.updateItem(this.initialFormData.id, itemStringChanges);\r\n  }\r\n\r\n  save(): void {\r\n    if (!this.initialFormData) return;\r\n\r\n    if (this.itemForm.invalid) {\r\n      this.actionFeedbackService.error($localize`You need to solve all the errors displayed in the form to save changes.`);\r\n      return;\r\n    }\r\n\r\n    this.itemForm.disable();\r\n    forkJoin([\r\n      this.updateItem(),\r\n      this.updateString(),\r\n    ]).subscribe({\r\n      next: _status => {\r\n        this.actionFeedbackService.success($localize`Changes successfully saved.`);\r\n        this.itemDataSource.refreshItem(); // which will re-enable the form\r\n        this.currentContentService.forceNavMenuReload();\r\n      },\r\n      error: err => {\r\n        this.itemForm.enable();\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.resetForm();\r\n  }\r\n\r\n  private resetForm(): void {\r\n    if (!this.initialFormData) {\r\n      return;\r\n    }\r\n\r\n    const item = this.initialFormData;\r\n\r\n    this.itemForm.reset({\r\n      title: item.string.title || '',\r\n      description: item.string.description || '',\r\n      subtitle: item.string.subtitle || '',\r\n      url: item.url || '',\r\n      text_id: '',\r\n      uses_api: item.usesApi || false,\r\n      validation_type: item.validationType,\r\n      no_score: item.noScore,\r\n      title_bar_visible: item.titleBarVisible || false,\r\n      prompt_to_join_group_by_code: item.promptToJoinGroupByCode || false,\r\n      full_screen: item.fullScreen,\r\n      ...(this.enableParticipation ? {\r\n        allows_multiple_attempts: item.allowsMultipleAttempts,\r\n        requires_explicit_entry: item.requiresExplicitEntry,\r\n        duration_enabled: item.durationEnabled,\r\n        duration: item.duration,\r\n        entering_time_min_enabled: item.enteringTimeMinEnabled,\r\n        entering_time_min: item.enteringTimeMin,\r\n        entering_time_max_enabled: item.enteringTimeMaxEnabled,\r\n        entering_time_max: item.enteringTimeMax,\r\n      } : {}),\r\n      ...(this.enableTeam ? {\r\n        entry_participant_type: item.entryParticipantType === 'Team',\r\n        entry_frozen_teams: item.entryFrozenTeams,\r\n        entry_max_team_size: item.entryMaxTeamSize,\r\n        entry_min_admitted_members_ratio: item.entryMinAdmittedMembersRatio,\r\n      } : {}),\r\n    });\r\n    this.itemForm.enable();\r\n  }\r\n\r\n  private maxTeamSizeValidator(): ValidatorFn {\r\n    return (itemForm): null => {\r\n      const isParticipationAsTeamOnly = itemForm.get('entry_participant_type')?.value as boolean;\r\n      const maxTeamSizeControl = itemForm.get('entry_max_team_size');\r\n      if (!maxTeamSizeControl) return null;\r\n\r\n      isParticipationAsTeamOnly\r\n        ? maxTeamSizeControl.setErrors(Validators.min(1)(maxTeamSizeControl))\r\n        : maxTeamSizeControl.setErrors(null);\r\n      return null;\r\n    };\r\n  }\r\n}\r\n","<p-dropdown *ngIf=\"formControl\"\r\n  styleClass=\"alg-dropdown\"\r\n  [options]=\"options\"\r\n  optionLabel=\"label\"\r\n  optionValue=\"value\"\r\n  [placeholder]=\"placeholder\"\r\n  [formControl]=\"formControl\"\r\n></p-dropdown>\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup } from '@angular/forms';\r\n\r\nexport interface DropdownOption {\r\n  label: string,\r\n  value: string,\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-dropdown',\r\n  templateUrl: './dropdown.component.html',\r\n  styleUrls: [ './dropdown.component.scss' ]\r\n})\r\nexport class DropdownComponent implements OnInit {\r\n  @Input() options: DropdownOption[] = [];\r\n  @Input() placeholder = '';\r\n  @Input() parentForm?: UntypedFormGroup;\r\n  @Input() name = '';\r\n\r\n  formControl?: UntypedFormControl;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.parentForm && this.parentForm.get(this.name)) {\r\n      this.formControl = this.parentForm.get(this.name) as UntypedFormControl;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { assertSuccess, SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RemoveItemService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  delete(itemId: string): Observable<void> {\r\n    return this.http.delete<SimpleActionResponse>(`${appConfig.apiUrl}/items/${itemId}`).pipe(\r\n      map(assertSuccess),\r\n    );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"item\">\r\n  <div class=\"container\" *ngIf=\"state$ | async as state\">\r\n    <alg-loading size=\"small\" *ngIf=\"state.isFetching || deletionInProgress\"></alg-loading>\r\n    <ng-container *ngIf=\"item.permissions.isOwner; else notOwner\">\r\n      <span class=\"message\" *ngIf=\"state.isReady && state.data && ['Chapter', 'Skill'].includes(item.type)\" i18n>\r\n        {{ item.type | i18nSelect : {\r\n          Chapter: 'Only empty chapters can be deleted.',\r\n          other: 'Only empty skills can be deleted.'\r\n        } }}\r\n      </span>\r\n    </ng-container>\r\n    <ng-template #notOwner>\r\n      <span class=\"message\" i18n>Only owner can delete items</span>\r\n    </ng-template>\r\n    <alg-error\r\n      *ngIf=\"state.isError\"\r\n      class=\"warning small\"\r\n      i18n-message message=\"Error while loading the item info\"\r\n      [showRefreshButton]=\"true\"\r\n      refreshButtonType=\"refresh\"\r\n      (refresh)=\"refresh()\"\r\n    ></alg-error>\r\n    <button\r\n        pButton\r\n        type=\"button\"\r\n        class=\"p-button-rounded p-button-danger\"\r\n        i18n-label label=\"Delete this item\"\r\n        (click)=\"onDeleteItem()\"\r\n        [disabled]=\"(state.isReady && state.data && ['Chapter', 'Skill'].includes(item.type)) || state.isFetching || state.isError || deletionInProgress || !item.permissions.isOwner\"\r\n    ></button>\r\n  </div>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output } from '@angular/core';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { GetItemChildrenService, ItemChild } from '../../http-services/get-item-children.service';\r\nimport { Item } from '../../http-services/get-item-by-id.service';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { RemoveItemService } from '../../http-services/remove-item.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'alg-item-remove-button',\r\n  templateUrl: './item-remove-button.component.html',\r\n  styleUrls: [ './item-remove-button.component.scss' ],\r\n})\r\nexport class ItemRemoveButtonComponent implements OnChanges, OnDestroy {\r\n  @Output() confirmRemoval = new EventEmitter<void>();\r\n\r\n  @Input() item?: Item;\r\n  @Input() attemptId?: string;\r\n\r\n  private readonly params$ = new ReplaySubject<{ id: string, attemptId: string }>(1);\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.params$.pipe(\r\n    distinctUntilChanged((a, b) => a.id === b.id && a.attemptId === b.attemptId),\r\n    switchMap(({ id, attemptId }) =>\r\n      this.getItemChildrenService.get(id, attemptId).pipe(\r\n        map((itemChildren: ItemChild[]) => itemChildren.length > 0)\r\n      )\r\n    ),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  deletionInProgress = false;\r\n\r\n  constructor(\r\n    private getItemChildrenService: GetItemChildrenService,\r\n    private confirmationService: ConfirmationService,\r\n    private removeItemService: RemoveItemService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private router: Router,\r\n  ) {\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.item && this.attemptId) {\r\n      this.params$.next({\r\n        id: this.item.id,\r\n        attemptId: this.attemptId,\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  onDeleteItem(): void {\r\n    if (!this.item) {\r\n      throw new Error('Unexpected: missed item input of component');\r\n    }\r\n\r\n    this.confirmationService.confirm({\r\n      message: $localize`Deleting it will also remove permanently all answers and results related with this content.`,\r\n      header: $localize`Are you sure you want to delete this content?`,\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: $localize`Yes`,\r\n      acceptButtonStyleClass: 'p-button-danger',\r\n      accept: () => {\r\n        this.confirmRemoval.emit();\r\n        this.deleteItem();\r\n      },\r\n      rejectLabel: $localize`No`,\r\n    });\r\n  }\r\n\r\n  deleteItem(): void {\r\n    if (!this.item) {\r\n      throw new Error('Unexpected: missed item input of component');\r\n    }\r\n\r\n    const id = this.item.id;\r\n    const itemName = this.item.string.title;\r\n\r\n    this.deletionInProgress = true;\r\n    this.removeItemService.delete(id)\r\n      .subscribe({\r\n        next: () => {\r\n          this.deletionInProgress = false;\r\n          this.actionFeedbackService.success($localize`You have delete \"${itemName}\"`);\r\n          this.navigateToMyRoot();\r\n        },\r\n        error: _err => {\r\n          this.deletionInProgress = false;\r\n          this.actionFeedbackService.error($localize`Failed to delete \"${itemName}\"`);\r\n        }\r\n      });\r\n  }\r\n\r\n  navigateToMyRoot(): void {\r\n    void this.router.navigate([ '/' ]);\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n}\r\n","<form *ngIf=\"item && parentForm\" [formGroup]=\"parentForm\">\r\n  <alg-section icon=\"fa fa-cogs\" i18n-label label=\"Global parameters\"\r\n    *ngIf=\"['Task', 'Course'].includes(item.type)\">\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\" i18n>Url</span>\r\n      <div class=\"form-item-control\">\r\n        <alg-input [parentForm]=\"parentForm\" inputName=\"url\" i18n-placeholder name=\"url\" size=\"small\"></alg-input>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\" i18n>Uses API</span>\r\n      <div class=\"form-item-control\">\r\n        <alg-switch formControlName=\"uses_api\" mode=\"white\"></alg-switch>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\">TextID</span>\r\n      <div class=\"form-item-control\">\r\n        <alg-input [parentForm]=\"parentForm\" inputName=\"text_id\" name=\"text_id\" size=\"small\"></alg-input>\r\n      </div>\r\n    </div>\r\n  </alg-section>\r\n\r\n  <alg-section icon=\"fa fa-book\" i18n-label label=\"Score & Validation\"\r\n    *ngIf=\"['Chapter','Skill'].includes(item.type)\">\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\" i18n>Validation criteria</span>\r\n      <div class=\"form-item-control\">\r\n        <alg-dropdown\r\n          [options]=\"validationCriteriaOptions\"\r\n          [parentForm]=\"parentForm\"\r\n          inputName=\"validation_type\"\r\n          name=\"validation_type\"\r\n        ></alg-dropdown>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\" i18n>Disable score</span>\r\n      <div class=\"form-item-control\">\r\n        <alg-switch formControlName=\"no_score\" mode=\"white\"></alg-switch>\r\n      </div>\r\n    </div>\r\n  </alg-section>\r\n\r\n  <alg-section icon=\"fa fa-desktop\" i18n-label label=\"Display\"\r\n    *ngIf=\"item.type !== 'Skill'\">\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\">\r\n        <ng-container i18n>Display header</ng-container>&nbsp;\r\n        <ng-container i18n=\"@@notImplemented\">(not implemented)</ng-container>\r\n      </span>\r\n      <div class=\"form-item-control\">\r\n        <alg-switch formControlName=\"title_bar_visible\" mode=\"white\"></alg-switch>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\" i18n>Display group code header</span>\r\n      <div class=\"form-item-control\">\r\n        <alg-switch formControlName=\"prompt_to_join_group_by_code\" mode=\"white\"></alg-switch>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\">\r\n        <ng-container i18n>Full screen</ng-container>&nbsp;\r\n        <ng-container i18n=\"@@notImplemented\">(not implemented)</ng-container>\r\n      </span>\r\n      <div class=\"form-item-control\">\r\n        <alg-selection formControlName=\"full_screen\" [items]=\"fullScreenOptions\"></alg-selection>\r\n      </div>\r\n    </div>\r\n  </alg-section>\r\n\r\n  <alg-section icon=\"fa fa-desktop\" i18n-label label=\"Participation\" *ngIf=\"item.type !== 'Skill'\">\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\">\r\n        <ng-container i18n>Allow multiple attempts</ng-container>&nbsp;\r\n        <ng-container i18n=\"@@notImplemented\">(not implemented)</ng-container>\r\n      </span>\r\n      <div class=\"form-item-control\">\r\n        <alg-switch formControlName=\"allows_multiple_attempts\" mode=\"white\"></alg-switch>\r\n      </div>\r\n    </div>\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\" i18n>Start participation manually</span>\r\n      <div class=\"form-item-control\">\r\n        <alg-switch\r\n            formControlName=\"requires_explicit_entry\"\r\n            mode=\"white\"\r\n            (ngModelChange)=\"onRequiresExplicitEntryChange()\"\r\n        >\r\n        </alg-switch>\r\n      </div>\r\n    </div>\r\n    <ng-container *ngIf=\"!!parentForm.get('requires_explicit_entry')?.value\">\r\n      <div class=\"form-item-view form-item-duration\">\r\n        <span class=\"form-item-label\">\r\n          <ng-container i18n>Duration</ng-container>&nbsp;\r\n          <ng-container i18n=\"@@notImplemented\">(not implemented)</ng-container>\r\n        </span>\r\n        <div class=\"form-item-control another-input\">\r\n          <alg-switch\r\n              class=\"first-child\"\r\n              formControlName=\"duration_enabled\"\r\n              mode=\"white\"\r\n              (ngModelChange)=\"onDurationEnabledChange()\"\r\n          >\r\n          </alg-switch>\r\n          <div class=\"input-wrapper\">\r\n            <alg-duration\r\n                class=\"alg-duration\"\r\n                formControlName=\"duration\"\r\n                name=\"duration\"\r\n                [parentForm]=\"parentForm\"\r\n                layout=\"HMS\"\r\n                [limitToTimeMax]=\"true\"\r\n                *ngIf=\"!!parentForm.get('duration_enabled')?.value\"\r\n            >\r\n            </alg-duration>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-item-view form-item-datepicker\">\r\n        <span class=\"form-item-label\" i18n>First allowed entering time</span>\r\n        <div class=\"form-item-control another-input\">\r\n          <alg-switch\r\n              class=\"first-child\"\r\n              formControlName=\"entering_time_min_enabled\"\r\n              mode=\"white\"\r\n              (ngModelChange)=\"onEnteringTimeMinEnabledChange($event)\"\r\n          >\r\n          </alg-switch>\r\n          <ng-container *ngIf=\"!!parentForm.get('entering_time_min_enabled')?.value\">\r\n            <div class=\"input-wrapper\">\r\n              <p-calendar\r\n                  class=\"alg-calendar\"\r\n                  formControlName=\"entering_time_min\"\r\n                  [showIcon]=\"true\"\r\n                  [showTime]=\"true\"\r\n                  (ngModelChange)=\"onDateChange()\"\r\n              >\r\n              </p-calendar>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-item-view form-item-datepicker\">\r\n        <span class=\"form-item-label\" i18n>Latest allowed entering time</span>\r\n        <div class=\"form-item-control another-input\">\r\n          <alg-switch\r\n              class=\"first-child\"\r\n              formControlName=\"entering_time_max_enabled\"\r\n              mode=\"white\"\r\n              (ngModelChange)=\"onEnteringTimeMaxEnabledChange($event)\"\r\n          >\r\n          </alg-switch>\r\n          <ng-container *ngIf=\"!!parentForm.get('entering_time_max_enabled')?.value\">\r\n            <div class=\"input-wrapper\">\r\n              <p-calendar\r\n                  class=\"alg-calendar\"\r\n                  formControlName=\"entering_time_max\"\r\n                  [showIcon]=\"true\"\r\n                  [showTime]=\"true\"\r\n                  [minDate]=\"minEnteringTimeMaxDate\"\r\n                  (ngModelChange)=\"onDateChange()\"\r\n              >\r\n              </p-calendar>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  </alg-section>\r\n\r\n  <alg-section icon=\"fa fa-users\" i18n-label label=\"Team\" *ngIf=\"item.type !== 'Skill'\">\r\n    <div class=\"form-item-view\">\r\n      <span class=\"form-item-label\">\r\n        <ng-container i18n>Participation as a team (only)</ng-container>&nbsp;\r\n        <ng-container i18n=\"@@notImplemented\">(not implemented)</ng-container>\r\n      </span>\r\n      <div class=\"form-item-control\">\r\n        <alg-switch formControlName=\"entry_participant_type\" mode=\"white\"></alg-switch>\r\n      </div>\r\n    </div>\r\n    <ng-container *ngIf=\"!!parentForm.get('entry_participant_type')?.value\">\r\n      <div class=\"form-item-view\">\r\n        <span class=\"form-item-label\" i18n>Freeze team on entry</span>\r\n        <div class=\"form-item-control\">\r\n          <alg-switch formControlName=\"entry_frozen_teams\" mode=\"white\"></alg-switch>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-item-view\">\r\n        <span class=\"form-item-label\" i18n>Maximum team size</span>\r\n        <div class=\"form-item-control\">\r\n          <p-inputNumber class=\"alg-input-number\" formControlName=\"entry_max_team_size\"></p-inputNumber>\r\n          <alg-input-error [form]=\"parentForm\" inputName=\"entry_max_team_size\"></alg-input-error>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-item-view\">\r\n        <span class=\"form-item-label\" i18n>Minimum admitted members</span>\r\n        <div class=\"form-item-control\">\r\n          <alg-dropdown\r\n            [options]=\"minAdmittedMembersRatioOptions\"\r\n            [parentForm]=\"parentForm\"\r\n            inputName=\"entry_min_admitted_members_ratio\"\r\n            name=\"entry_min_admitted_members_ratio\"\r\n          ></alg-dropdown>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  </alg-section>\r\n</form>\r\n\r\n<div class=\"delete-button\">\r\n  <alg-item-remove-button [item]=\"item\" [attemptId]=\"attemptId\" (confirmRemoval)=\"onConfirmRemoval()\"></alg-item-remove-button>\r\n</div>\r\n\r\n\r\n\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { DropdownOption } from 'src/app/modules/shared-components/components/dropdown/dropdown.component';\r\nimport { Item } from '../../http-services/get-item-by-id.service';\r\nimport { HOURS } from 'src/app/shared/helpers/duration';\r\nimport { DEFAULT_ENTERING_TIME_MAX, DEFAULT_ENTERING_TIME_MIN } from '../item-edit/item-edit.component';\r\n\r\n@Component({\r\n  selector: 'alg-item-edit-advanced-parameters',\r\n  templateUrl: './item-edit-advanced-parameters.component.html',\r\n  styleUrls: [ './item-edit-advanced-parameters.component.scss' ]\r\n})\r\nexport class ItemEditAdvancedParametersComponent implements OnInit {\r\n  @Output() confirmRemoval = new EventEmitter<void>();\r\n\r\n  @Input() item?: Item;\r\n  @Input() parentForm?: UntypedFormGroup;\r\n  @Input() attemptId?: string;\r\n\r\n  validationCriteriaOptions: DropdownOption[] = [{\r\n    label: $localize`Never`,\r\n    value: 'None'\r\n  }, {\r\n    label: $localize`All children validated`,\r\n    value: 'All'\r\n  }, {\r\n    label: $localize`All children but one validated`,\r\n    value: 'AllButOne'\r\n  }, {\r\n    label: $localize`All 'Categories' children validated`,\r\n    value: 'Categories'\r\n  }, {\r\n    label: $localize`One children validated`,\r\n    value: 'One'\r\n  }];\r\n\r\n  fullScreenOptions: {label: string, value: string}[] = [{\r\n    label: $localize`No`,\r\n    value: 'forceNo'\r\n  }, {\r\n    label: $localize`Based on type`,\r\n    value: 'default'\r\n  }, {\r\n    label: $localize`Yes mapped`,\r\n    value: 'forceYes'\r\n  }];\r\n\r\n  minEnteringTimeMaxDate = new Date();\r\n\r\n  minAdmittedMembersRatioOptions: DropdownOption[] = [{\r\n    label: $localize`All the members must be admitted`,\r\n    value: 'All'\r\n  }, {\r\n    label: $localize`Half of the members must be admitted`,\r\n    value: 'Half'\r\n  }, {\r\n    label: $localize`One of the members must be admitted`,\r\n    value: 'One'\r\n  }, {\r\n    label: $localize`None of the members has to be admitted`,\r\n    value: 'None'\r\n  }];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.handleDurationValidators();\r\n  }\r\n\r\n  onRequiresExplicitEntryChange(): void {\r\n    this.handleDurationValidators();\r\n  }\r\n\r\n  onDurationEnabledChange(): void {\r\n    this.handleDurationValidators();\r\n  }\r\n\r\n  private handleDurationValidators(): void {\r\n    const requiresExplicitEntryValue = this.parentForm?.get('requires_explicit_entry')?.value as boolean;\r\n    const durationEnabledValue = this.parentForm?.get('duration_enabled')?.value as boolean;\r\n    const enableValidation = requiresExplicitEntryValue && durationEnabledValue;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/unbound-method\r\n    this.parentForm?.get('duration')?.setValidators(enableValidation ? Validators.required : null);\r\n    this.parentForm?.get('duration')?.updateValueAndValidity();\r\n  }\r\n\r\n  onEnteringTimeMinEnabledChange(enabled: boolean): void {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n\r\n    const enteringTimeMin = this.parentForm?.get('entering_time_min')?.value as Date;\r\n\r\n    if (enteringTimeMin.getTime() === new Date(DEFAULT_ENTERING_TIME_MIN).getTime()) {\r\n      this.parentForm?.get('entering_time_min')?.patchValue(\r\n        new Date()\r\n      );\r\n    }\r\n  }\r\n\r\n  onEnteringTimeMaxEnabledChange(enabled: boolean): void {\r\n    if (!enabled) {\r\n      return;\r\n    }\r\n\r\n    const enteringTimeMax = this.parentForm?.get('entering_time_max')?.value as Date;\r\n\r\n    if (enteringTimeMax.getTime() === new Date(DEFAULT_ENTERING_TIME_MAX).getTime()) {\r\n      const enteringTimeMinEnabled = this.parentForm?.get('entering_time_min_enabled')?.value as boolean;\r\n      const enteringTimeMin = enteringTimeMinEnabled ? this.parentForm?.get('entering_time_min')?.value as Date : new Date();\r\n      const newTimeMax = enteringTimeMinEnabled ? enteringTimeMin.getTime() + HOURS : enteringTimeMin.getTime();\r\n\r\n      this.parentForm?.get('entering_time_max')?.patchValue(\r\n        new Date(newTimeMax)\r\n      );\r\n    }\r\n  }\r\n\r\n  onDateChange(): void {\r\n    const enteringTimeMinEnabled = this.parentForm?.get('entering_time_min_enabled')?.value as boolean;\r\n    const enteringTimeMin = this.parentForm?.get('entering_time_min')?.value as Date;\r\n    const enteringTimeMax = this.parentForm?.get('entering_time_max')?.value as Date;\r\n\r\n    this.minEnteringTimeMaxDate = enteringTimeMinEnabled ?\r\n      new Date(Math.min(enteringTimeMin.getTime(), enteringTimeMax.getTime())) : new Date();\r\n  }\r\n\r\n  onConfirmRemoval(): void {\r\n    this.confirmRemoval.emit();\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"itemData\">\r\n  <form [formGroup]=\"itemForm\" *ngIf=\"itemData.item.permissions | allowsEditingChildren; else notAuthorized\">\r\n    <alg-section icon=\"fa fa-cog\" i18n-label label=\"Information\" *ngIf=\"itemData.item.permissions | allowsEditingAll\">\r\n      <div class=\"field\">\r\n        <div class=\"field-name\">\r\n          <label i18n>Item title</label>\r\n        </div>\r\n        <div class=\"field-value\">\r\n          <alg-input [parentForm]=\"itemForm\" name=\"title\" size=\"large\"></alg-input>\r\n        </div>\r\n      </div>\r\n      <div class=\"field\">\r\n        <div class=\"field-name\">\r\n          <label i18n>Item subtitle</label>\r\n        </div>\r\n        <div class=\"field-value\">\r\n          <alg-input [parentForm]=\"itemForm\" name=\"subtitle\" size=\"large\"></alg-input>\r\n        </div>\r\n      </div>\r\n    </alg-section>\r\n    <alg-item-edit-content\r\n      [parentForm]=\"itemForm\"\r\n      [itemData]=\"itemData\"\r\n    >\r\n    </alg-item-edit-content>\r\n    <ng-container *ngIf=\"attemptId\">\r\n      <alg-item-edit-advanced-parameters\r\n        *ngIf=\"itemData.item.permissions | allowsEditingAll\"\r\n        [parentForm]=\"itemForm\"\r\n        [item]=\"initialFormData\"\r\n        [attemptId]=\"attemptId\"\r\n        (confirmRemoval)=\"onConfirmRemoval()\"\r\n      >\r\n      </alg-item-edit-advanced-parameters>\r\n    </ng-container>\r\n  </form>\r\n</ng-container>\r\n\r\n<alg-floating-save *ngIf=\"itemForm.dirty\" [saving]=\"itemForm.disabled\" (save)=\"save()\" (cancel)=\"onCancel()\"></alg-floating-save>\r\n\r\n<ng-template #notAuthorized>\r\n  <div class=\"error alg-error-text\" i18n>You do not have the permissions to edit this content.</div>\r\n</ng-template>\r\n","import { Component, Input, OnChanges, OnDestroy, OnInit } from '@angular/core';\r\nimport { ItemData, ItemDataSource } from '../../services/item-datasource.service';\r\nimport { AbstractControl, UntypedFormBuilder, ValidatorFn, Validators } from '@angular/forms';\r\nimport { CurrentContentService } from '../../../../shared/services/current-content.service';\r\nimport { ItemChanges, UpdateItemService } from '../../http-services/update-item.service';\r\nimport { ItemStringChanges, UpdateItemStringService } from '../../http-services/update-item-string.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { Item } from '../../http-services/get-item-by-id.service';\r\nimport { isNotUndefined } from '../../../../shared/helpers/null-undefined-predicates';\r\nimport { Duration } from '../../../../shared/helpers/duration';\r\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { PendingChangesComponent } from '../../../../shared/guards/pending-changes-guard';\r\nimport { PendingChangesService } from '../../../../shared/services/pending-changes-service';\r\n\r\nexport const DEFAULT_ENTERING_TIME_MIN = '1000-01-01T00:00:00Z';\r\nexport const DEFAULT_ENTERING_TIME_MAX = '9999-12-31T23:59:59Z';\r\n\r\n@Component({\r\n  selector: 'alg-item-edit-wrapper',\r\n  templateUrl: './item-edit-wrapper.component.html',\r\n  styleUrls: [ './item-edit-wrapper.component.scss' ],\r\n})\r\nexport class ItemEditWrapperComponent implements OnInit, OnChanges, OnDestroy, PendingChangesComponent {\r\n  @Input() itemData?: ItemData;\r\n\r\n  itemForm = this.formBuilder.group({\r\n    // eslint-disable-next-line @typescript-eslint/unbound-method\r\n    title: [ '', [ Validators.required, Validators.minLength(3), Validators.maxLength(200) ] ],\r\n    subtitle: [ '', Validators.maxLength(200) ],\r\n    description: [ '' ],\r\n    url: [ '', Validators.maxLength(2000) ],\r\n    text_id: [ '', Validators.maxLength(200) ],\r\n    uses_api: [ false ],\r\n    validation_type: [ '' ],\r\n    no_score: [ false ],\r\n    title_bar_visible: [ false ],\r\n    prompt_to_join_group_by_code: [ false ],\r\n    full_screen: [ '' ],\r\n    allows_multiple_attempts: [ false ],\r\n    requires_explicit_entry: [ false ],\r\n    duration_enabled: [ false ],\r\n    duration: [ null ],\r\n    entering_time_min_enabled: [ false ],\r\n    entering_time_min: [ null ],\r\n    entering_time_max_enabled: [ false ],\r\n    entering_time_max: [ null ],\r\n    entry_participant_type: [ false ],\r\n    entry_frozen_teams: [ false ],\r\n    entry_max_team_size: [ '' ],\r\n    entry_min_admitted_members_ratio: [ '' ],\r\n  }, {\r\n    validators: [ this.maxTeamSizeValidator() ],\r\n  });\r\n  initialFormData?: Item & {durationEnabled?: boolean, enteringTimeMinEnabled?: boolean, enteringTimeMaxEnabled?: boolean};\r\n  attemptId?: string;\r\n\r\n  get enableParticipation(): boolean {\r\n    return this.initialFormData?.type !== 'Skill';\r\n  }\r\n\r\n  get enableTeam(): boolean {\r\n    return this.initialFormData?.type !== 'Skill';\r\n  }\r\n\r\n  constructor(\r\n    private currentContentService: CurrentContentService,\r\n    private itemDataSource: ItemDataSource,\r\n    private formBuilder: UntypedFormBuilder,\r\n    private updateItemService: UpdateItemService,\r\n    private updateItemStringService: UpdateItemStringService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private pendingChangesService: PendingChangesService,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.pendingChangesService.set(this);\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.itemData) {\r\n      this.attemptId = this.itemData.route.attemptId || this.itemData.route.parentAttemptId;\r\n      this.initialFormData = {\r\n        ...this.itemData.item,\r\n        durationEnabled: this.itemData.item.duration !== null,\r\n        enteringTimeMinEnabled: this.itemData.item.enteringTimeMin.getTime() !== new Date(DEFAULT_ENTERING_TIME_MIN).getTime(),\r\n        enteringTimeMaxEnabled: this.itemData.item.enteringTimeMax.getTime() !== new Date(DEFAULT_ENTERING_TIME_MAX).getTime(),\r\n      };\r\n      this.resetForm();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.pendingChangesService.clear();\r\n  }\r\n\r\n  isDirty(): boolean {\r\n    return this.itemForm.dirty;\r\n  }\r\n\r\n  private getItemChanges(): ItemChanges | undefined {\r\n    const formControls: {[key: string]: AbstractControl | null} = {\r\n      url: this.itemForm.get('url'),\r\n      textId: this.itemForm.get('text_id'),\r\n      usesApi: this.itemForm.get('uses_api'),\r\n      validationType: this.itemForm.get('validation_type'),\r\n      noScore: this.itemForm.get('no_score'),\r\n      titleBarVisible: this.itemForm.get('title_bar_visible'),\r\n      promptToJoinGroupByCode: this.itemForm.get('prompt_to_join_group_by_code'),\r\n      fullScreen: this.itemForm.get('full_screen'),\r\n      ...(this.enableParticipation ? {\r\n        allowsMultipleAttempts: this.itemForm.get('allows_multiple_attempts'),\r\n        requiresExplicitEntry: this.itemForm.get('requires_explicit_entry'),\r\n        durationEnabled: this.itemForm.get('duration_enabled'),\r\n        duration: this.itemForm.get('duration'),\r\n        enteringTimeMinEnabled: this.itemForm.get('entering_time_min_enabled'),\r\n        enteringTimeMin: this.itemForm.get('entering_time_min'),\r\n        enteringTimeMaxEnabled: this.itemForm.get('entering_time_max_enabled'),\r\n        enteringTimeMax: this.itemForm.get('entering_time_max'),\r\n      } : {}),\r\n      ...(this.enableTeam ? {\r\n        entryParticipantType: this.itemForm.get('entry_participant_type'),\r\n        entryFrozenTeams: this.itemForm.get('entry_frozen_teams'),\r\n        entryMaxTeamSize: this.itemForm.get('entry_max_team_size'),\r\n        entryMinAdmittedMembersRatio: this.itemForm.get('entry_min_admitted_members_ratio'),\r\n      } : {}),\r\n    };\r\n\r\n    if (Object.values(formControls).includes(null) || !this.initialFormData) return undefined;\r\n\r\n    const itemFormValues: ItemChanges = {};\r\n\r\n    const url = formControls.url?.value !== '' ? formControls.url?.value as string : null;\r\n    if (isNotUndefined(this.initialFormData.url) && url !== this.initialFormData.url) itemFormValues.url = url;\r\n\r\n    const usesApi = formControls.usesApi?.value as boolean;\r\n    if (isNotUndefined(this.initialFormData.usesApi) && usesApi !== this.initialFormData.usesApi) itemFormValues.uses_api = usesApi;\r\n\r\n    const textId = formControls.textId?.value as string;\r\n    if (textId !== '') itemFormValues.text_id = textId;\r\n\r\n    const validationType = formControls.validationType?.value as 'None' | 'All' | 'AllButOne' | 'Categories' | 'One' | 'Manual';\r\n    if (validationType !== this.initialFormData.validationType) itemFormValues.validation_type = validationType;\r\n\r\n    const noScore = formControls.noScore?.value as boolean;\r\n    if (noScore !== this.initialFormData.noScore) itemFormValues.no_score = noScore;\r\n\r\n    const titleBarVisible = formControls.titleBarVisible?.value as boolean;\r\n    if (titleBarVisible !== this.initialFormData.titleBarVisible) itemFormValues.title_bar_visible = titleBarVisible;\r\n\r\n    const promptToJoinGroupByCode = formControls.promptToJoinGroupByCode?.value as boolean;\r\n    if (promptToJoinGroupByCode !== this.initialFormData.promptToJoinGroupByCode)\r\n      itemFormValues.prompt_to_join_group_by_code = promptToJoinGroupByCode;\r\n\r\n    const fullScreen = formControls.fullScreen?.value as 'forceYes' | 'forceNo' | 'default';\r\n    if (fullScreen !== this.initialFormData.fullScreen) itemFormValues.full_screen = fullScreen;\r\n\r\n    if (this.enableParticipation) {\r\n      const allowsMultipleAttempts = formControls.allowsMultipleAttempts?.value as boolean;\r\n      if (allowsMultipleAttempts !== this.initialFormData.allowsMultipleAttempts) {\r\n        itemFormValues.allows_multiple_attempts = allowsMultipleAttempts;\r\n      }\r\n\r\n      const requiresExplicitEntry = formControls.requiresExplicitEntry?.value as boolean;\r\n      const hasRequiresExplicitEntryChanges = requiresExplicitEntry !== this.initialFormData.requiresExplicitEntry;\r\n\r\n      if (hasRequiresExplicitEntryChanges) {\r\n        itemFormValues.requires_explicit_entry = requiresExplicitEntry;\r\n      }\r\n\r\n      const durationEnabled = formControls.durationEnabled?.value as boolean;\r\n      const duration = formControls.duration?.value as Duration | null;\r\n      const hasDurationEnabledChanges = durationEnabled !== this.initialFormData.durationEnabled;\r\n      const hasDurationChanges = duration?.getMs() !== this.initialFormData?.duration?.getMs();\r\n\r\n      if (hasDurationChanges || hasDurationEnabledChanges || hasRequiresExplicitEntryChanges) {\r\n        itemFormValues.duration = durationEnabled && requiresExplicitEntry ? duration?.toString() : null;\r\n      }\r\n\r\n      const enteringTimeMinEnabled = formControls.enteringTimeMinEnabled?.value as boolean;\r\n      const hasEnteringTimeMinEnabledChanges = enteringTimeMinEnabled !== this.initialFormData.enteringTimeMinEnabled;\r\n      const enteringTimeMin = formControls.enteringTimeMin?.value as Date;\r\n      const hasEnteringTimeMinChanges = enteringTimeMin.getTime()\r\n        !== this.initialFormData.enteringTimeMin.getTime();\r\n\r\n      if (hasEnteringTimeMinChanges || hasEnteringTimeMinEnabledChanges) {\r\n        itemFormValues.entering_time_min = enteringTimeMinEnabled ? enteringTimeMin : new Date(DEFAULT_ENTERING_TIME_MIN);\r\n      }\r\n\r\n      const enteringTimeMaxEnabled = formControls.enteringTimeMaxEnabled?.value as boolean;\r\n      const hasEnteringTimeMaxEnabledChanges = enteringTimeMaxEnabled !== this.initialFormData.enteringTimeMaxEnabled;\r\n      const enteringTimeMax = formControls.enteringTimeMax?.value as Date;\r\n      const hasEnteringTimeMaxChanges = enteringTimeMax.getTime()\r\n        !== this.initialFormData.enteringTimeMax.getTime();\r\n\r\n      if (hasEnteringTimeMaxChanges || hasEnteringTimeMaxEnabledChanges) {\r\n        itemFormValues.entering_time_max = enteringTimeMaxEnabled ? enteringTimeMax : new Date(DEFAULT_ENTERING_TIME_MAX);\r\n      }\r\n    }\r\n\r\n    if (this.enableTeam) {\r\n      const entryParticipantType = (formControls.entryParticipantType?.value as boolean | undefined) ? 'Team' : 'User';\r\n      const hasEntryParticipantTypeChanges = entryParticipantType !== this.initialFormData.entryParticipantType;\r\n      if (hasEntryParticipantTypeChanges) {\r\n        itemFormValues.entry_participant_type = entryParticipantType;\r\n      }\r\n\r\n      const entryFrozenTeams = formControls.entryFrozenTeams?.value as boolean | undefined;\r\n      const hasEntryFrozenTeamsChanges = entryFrozenTeams !== this.initialFormData.entryFrozenTeams;\r\n      if (hasEntryFrozenTeamsChanges) {\r\n        itemFormValues.entry_frozen_teams = entryFrozenTeams;\r\n      }\r\n\r\n      const entryMaxTeamSize = formControls.entryMaxTeamSize?.value as number | undefined;\r\n      const hasEntryMaxTeamSizeChanges = entryMaxTeamSize !== this.initialFormData.entryMaxTeamSize;\r\n      if (hasEntryMaxTeamSizeChanges) {\r\n        itemFormValues.entry_max_team_size = entryMaxTeamSize;\r\n      }\r\n\r\n      const entryMinAdmittedMembersRatio = formControls.entryMinAdmittedMembersRatio?.value as 'None' | 'All' | 'One' | 'Half' | undefined;\r\n      const hasEntryMinAdmittedMembersRatioChanges = entryMinAdmittedMembersRatio !== this.initialFormData.entryMinAdmittedMembersRatio;\r\n      if (hasEntryMinAdmittedMembersRatioChanges) {\r\n        itemFormValues.entry_min_admitted_members_ratio = entryMinAdmittedMembersRatio;\r\n      }\r\n    }\r\n\r\n    return itemFormValues;\r\n  }\r\n\r\n  private updateItem(): Observable<void> {\r\n    if (!this.initialFormData) return throwError(new Error('Invalid initial data'));\r\n    const changes = this.getItemChanges();\r\n    if (!changes) return throwError(new Error('Invalid form'));\r\n    if (!Object.keys(changes).length) return of(undefined);\r\n    return this.updateItemService.updateItem(this.initialFormData.id, changes);\r\n  }\r\n\r\n  // Item string changes\r\n  private getItemStringChanges(): ItemStringChanges | undefined {\r\n    const titleControl = this.itemForm.get('title');\r\n    const subtitleControl = this.itemForm.get('subtitle');\r\n    const descriptionControl = this.itemForm.get('description');\r\n    const initialValues = this.initialFormData?.string;\r\n\r\n    if (titleControl === null || subtitleControl === null || descriptionControl === null || !initialValues) return undefined;\r\n\r\n    const res: ItemStringChanges = {};\r\n\r\n    const title = titleControl.value as string;\r\n    if (title !== initialValues.title) res.title = title.trim();\r\n\r\n    const subtitle = (subtitleControl.value as string).trim() || null;\r\n    if (subtitle !== initialValues.subtitle) res.subtitle = subtitle;\r\n\r\n    const description = (descriptionControl.value as string).trim() || null;\r\n    if (description !== initialValues.description) res.description = description;\r\n\r\n    return res;\r\n  }\r\n\r\n  private updateString(): Observable<void> {\r\n    if (!this.initialFormData) return throwError(new Error('Missing ID form'));\r\n    const itemStringChanges = this.getItemStringChanges();\r\n    if (!itemStringChanges) return throwError(new Error('Invalid form or initial data'));\r\n    if (!Object.keys(itemStringChanges).length) return of(undefined);\r\n    return this.updateItemStringService.updateItem(this.initialFormData.id, itemStringChanges);\r\n  }\r\n\r\n  save(): void {\r\n    if (!this.initialFormData) return;\r\n\r\n    if (this.itemForm.invalid) {\r\n      this.actionFeedbackService.error($localize`You need to solve all the errors displayed in the form to save changes.`);\r\n      return;\r\n    }\r\n\r\n    this.itemForm.disable();\r\n    forkJoin([\r\n      this.updateItem(),\r\n      this.updateString(),\r\n    ]).subscribe({\r\n      next: _status => {\r\n        this.actionFeedbackService.success($localize`Changes successfully saved.`);\r\n        this.itemDataSource.refreshItem(); // which will re-enable the form\r\n        this.currentContentService.forceNavMenuReload();\r\n      },\r\n      error: err => {\r\n        this.itemForm.enable();\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.resetForm();\r\n  }\r\n\r\n  onConfirmRemoval(): void {\r\n    this.resetForm();\r\n  }\r\n\r\n  private resetForm(): void {\r\n    if (!this.initialFormData) {\r\n      return;\r\n    }\r\n\r\n    const item = this.initialFormData;\r\n\r\n    this.itemForm.reset({\r\n      title: item.string.title || '',\r\n      description: item.string.description || '',\r\n      subtitle: item.string.subtitle || '',\r\n      url: item.url || '',\r\n      text_id: '',\r\n      uses_api: item.usesApi || false,\r\n      validation_type: item.validationType,\r\n      no_score: item.noScore,\r\n      title_bar_visible: item.titleBarVisible || false,\r\n      prompt_to_join_group_by_code: item.promptToJoinGroupByCode || false,\r\n      full_screen: item.fullScreen,\r\n      ...(this.enableParticipation ? {\r\n        allows_multiple_attempts: item.allowsMultipleAttempts,\r\n        requires_explicit_entry: item.requiresExplicitEntry,\r\n        duration_enabled: item.durationEnabled,\r\n        duration: item.duration,\r\n        entering_time_min_enabled: item.enteringTimeMinEnabled,\r\n        entering_time_min: item.enteringTimeMin,\r\n        entering_time_max_enabled: item.enteringTimeMaxEnabled,\r\n        entering_time_max: item.enteringTimeMax,\r\n      } : {}),\r\n      ...(this.enableTeam ? {\r\n        entry_participant_type: item.entryParticipantType === 'Team',\r\n        entry_frozen_teams: item.entryFrozenTeams,\r\n        entry_max_team_size: item.entryMaxTeamSize,\r\n        entry_min_admitted_members_ratio: item.entryMinAdmittedMembersRatio,\r\n      } : {}),\r\n    });\r\n    this.itemForm.enable();\r\n  }\r\n\r\n  private maxTeamSizeValidator(): ValidatorFn {\r\n    return (itemForm): null => {\r\n      const isParticipationAsTeamOnly = itemForm.get('entry_participant_type')?.value as boolean;\r\n      const maxTeamSizeControl = itemForm.get('entry_max_team_size');\r\n      if (!maxTeamSizeControl) return null;\r\n\r\n      isParticipationAsTeamOnly\r\n        ? maxTeamSizeControl.setErrors(Validators.min(1)(maxTeamSizeControl))\r\n        : maxTeamSizeControl.setErrors(null);\r\n      return null;\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { dateDecoder } from 'src/app/shared/helpers/decoders';\r\n\r\nexport const answerDecoder = D.struct({\r\n  answer: D.nullable(D.string),\r\n  attemptId: D.nullable(D.string),\r\n  authorId: D.string,\r\n  createdAt: dateDecoder,\r\n  gradedAt: D.nullable(dateDecoder),\r\n  id: D.string,\r\n  itemId: D.string,\r\n  score: D.nullable(D.number),\r\n  state: D.nullable(D.string),\r\n  type: D.literal('Submission', 'Saved', 'Current'),\r\n});\r\n\r\nexport type Answer = D.TypeOf<typeof answerDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GetAnswerService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get(answerId: string): Observable<Answer | null> {\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/answers/${answerId}`)\r\n      .pipe(decodeSnakeCase(answerDecoder));\r\n  }\r\n\r\n}\r\n","<div class=\"task-header-container\" *ngIf=\"itemData\">\r\n  <div class=\"task-header\">\r\n    <div class=\"task-score-ring\" *ngIf=\"itemData.item.type !== 'Skill'\">\r\n      <ng-container *ngIf=\"itemData.item.permissions | allowsViewingContent; else lock\">\r\n        <alg-score-ring\r\n          *ngIf=\"itemData.currentResult\"\r\n          [bestScore]=\"itemData.item.bestScore\"\r\n          [currentScore]=\"itemData.currentResult.score\"\r\n          [isValidated]=\"itemData.currentResult.validated\"\r\n          [diameter]=\"70\"\r\n        ></alg-score-ring>\r\n      </ng-container>\r\n      <ng-template #lock>\r\n        <span class=\"lock-icon\">\r\n            <i class=\"fa fa-lock\"></i>\r\n        </span>\r\n      </ng-template>\r\n    </div>\r\n    <alg-skill-progress\r\n      *ngIf=\"itemData.item.type === 'Skill' && itemData.currentResult\"\r\n      [bestScore]=\"itemData.item.bestScore\"\r\n      [currentScore]=\"itemData.currentResult.score\"\r\n    ></alg-skill-progress>\r\n    <div class=\"task-title\">\r\n      <p>{{itemData.item.string.title}}</p>\r\n      <span *ngIf=\"itemData.item.string.subtitle\">{{itemData.item.string.subtitle}}</span>\r\n    </div>\r\n    <alg-page-navigator\r\n      *ngIf=\"navigationNeighbors$ | async as navigationNeighbors\"\r\n      [allowEditing]=\"false\"\r\n      [allowFullScreen]=\"false\"\r\n      [navigationMode]=\"{\r\n        parent: !!navigationNeighbors?.isReady && !!navigationNeighbors?.data?.parent,\r\n        left: !!navigationNeighbors?.isReady && !!navigationNeighbors?.data?.previous,\r\n        right: !!navigationNeighbors?.isReady && !!navigationNeighbors?.data?.next\r\n      }\"\r\n      (parent)=\"navigationNeighbors?.data?.parent?.navigateTo()\"\r\n      (left)=\"navigationNeighbors?.data?.previous?.navigateTo()\"\r\n      (right)=\"navigationNeighbors?.data?.next?.navigateTo()\"\r\n      (edit)=\"onEditButtonClicked()\"\r\n    ></alg-page-navigator>\r\n  </div>\r\n</div>\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { ActivityNavTreeService, SkillNavTreeService } from 'src/app/core/services/navigation/item-nav-tree.service';\r\nimport { isASkill } from 'src/app/shared/helpers/item-type';\r\nimport { ModeAction, ModeService } from 'src/app/shared/services/mode.service';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\n\r\n@Component({\r\n  selector: 'alg-item-header',\r\n  templateUrl: './item-header.component.html',\r\n  styleUrls: [ './item-header.component.scss' ]\r\n})\r\nexport class ItemHeaderComponent implements OnChanges {\r\n  @Input() itemData?: ItemData;\r\n\r\n  private activityNavigationNeighbors$ = this.activityNavTreeService.navigationNeighbors$;\r\n  private skillNavigationNeighbors$ = this.skillNavTreeService.navigationNeighbors$;\r\n  navigationNeighbors$ = this.activityNavigationNeighbors$;\r\n\r\n  constructor(\r\n    private modeService: ModeService,\r\n    private activityNavTreeService: ActivityNavTreeService,\r\n    private skillNavTreeService: SkillNavTreeService,\r\n  ) {}\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (!this.itemData) return;\r\n    this.navigationNeighbors$ = isASkill(this.itemData.item) ? this.skillNavigationNeighbors$ : this.activityNavigationNeighbors$;\r\n  }\r\n\r\n  onEditButtonClicked(): void {\r\n    this.modeService.modeActions$.next(ModeAction.StartEditing);\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-loading size=\"medium\" *ngIf=\"state.isFetching && !state.data\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    i18n-message message=\"Unable to load the recent activity\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n\r\n  <ng-container *ngIf=\"state.data\">\r\n    <p-table class=\"alg-table\" [columns]=\"state.data.columns\" [value]=\"state.data.rowData\" [loading]=\"state.isFetching\">\r\n      <ng-template pTemplate=\"header\" let-rowData let-columns>\r\n        <tr>\r\n          <th [colSpan]=\"columns.length\">\r\n            <div class=\"header-container header-refresh\">\r\n              <p-button icon=\"pi pi-refresh\" (click)=\"refresh()\"></p-button>\r\n            </div>\r\n          </th>\r\n        </tr>\r\n        <tr *ngIf=\"rowData.length > 0\">\r\n          <ng-container *ngFor=\"let col of columns\">\r\n            <th>\r\n              <div class=\"header-container\">\r\n                {{ col.header }}\r\n              </div>\r\n            </th>\r\n          </ng-container>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template\r\n          pTemplate=\"body\"\r\n          let-rowData\r\n          let-columns=\"columns\"\r\n      >\r\n        <tr>\r\n          <td *ngFor=\"let col of columns\">\r\n            <ng-container [ngSwitch]=\"col.field\">\r\n              <ng-container *ngSwitchCase=\"'activityType'\">\r\n                {{ rowData.activityType | logActionDisplay : rowData.score }}\r\n                <ng-container *ngIf=\"rowData.displayLoadButton\">\r\n                  &nbsp;(\r\n                  <a\r\n                    class=\"alg-link\"\r\n                    [routerLink]=\"rowData.item | rawItemLink:'details':rowData.answerId\"\r\n                    i18n=\"text on button to load a submission\"\r\n                  >\r\n                    Load\r\n                  </a>\r\n                  )\r\n                </ng-container>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'item.string.title'\">\r\n                <a class=\"alg-link\" [ngClass]=\"{'disabled': !rowData.item}\" [routerLink]=\"rowData.item | rawItemLink\">\r\n                  {{ rowData.item.string.title }}\r\n                </a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'item.user'\">\r\n                <a class=\"alg-link\" [routerLink]=\"{ id: rowData.user.id, isUser: true } | groupLink\">{{ rowData.user | userCaption }}</a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'at'\">\r\n                {{ rowData.at | date:'short' }}\r\n              </ng-container>\r\n              <ng-container *ngSwitchDefault>\r\n                {{ rowData[col.field] }}\r\n              </ng-container>\r\n            </ng-container>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"emptymessage\" let-columns>\r\n        <tr>\r\n          <td [attr.colspan]=\"columns.length\">\r\n            <span i18n>There is no progress to report for this item.</span>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </p-table>\r\n  </ng-container>\r\n</ng-container>\r\n","import { Component, Input, OnChanges, OnDestroy } from '@angular/core';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { ActivityLog, ActivityLogService } from 'src/app/shared/http-services/activity-log.service';\r\nimport { combineLatest, Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\nimport { ItemType } from '../../../../shared/helpers/item-type';\r\nimport { Item } from '../../http-services/get-item-by-id.service';\r\nimport { GroupWatchingService, WatchedGroup } from 'src/app/core/services/group-watching.service';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { allowsWatchingAnswers } from 'src/app/shared/models/domain/item-watch-permission';\r\n\r\ninterface Column {\r\n  field: string,\r\n  header: string,\r\n}\r\n\r\ninterface Data {\r\n  columns: Column[],\r\n  rowData: (ActivityLog & { displayLoadButton: boolean })[],\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-item-log-view',\r\n  templateUrl: './item-log-view.component.html',\r\n  styleUrls: [ './item-log-view.component.scss' ],\r\n})\r\nexport class ItemLogViewComponent implements OnChanges, OnDestroy {\r\n\r\n  @Input() itemData?: ItemData;\r\n  @Input() isTaskReadOnly = false;\r\n\r\n  private readonly refresh$ = new Subject<void>();\r\n  private readonly item$ = new ReplaySubject<Item>(1);\r\n  readonly state$ = combineLatest([\r\n    this.item$.pipe(distinctUntilChanged()),\r\n    this.groupWatchingService.watchedGroup$,\r\n  ]).pipe(\r\n    switchMap(([ item, watchedGroup ]) => this.getData$(item, watchedGroup)),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private activityLogService: ActivityLogService,\r\n    private groupWatchingService: GroupWatchingService,\r\n    private sessionService: UserSessionService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    if (!this.itemData) {\r\n      return;\r\n    }\r\n\r\n    this.item$.next(this.itemData.item);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.item$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  private getData$(item: Item, watchingGroup: WatchedGroup|null): Observable<Data> {\r\n    return combineLatest([\r\n      this.activityLogService.getActivityLog(item.id, watchingGroup?.route.id),\r\n      this.sessionService.userProfile$,\r\n    ]).pipe(\r\n      map(([ data, profile ]) => ({\r\n        columns: this.getLogColumns(item.type, watchingGroup),\r\n        rowData: data\r\n          .filter(log => !this.isSelfCurrentAnswer(log, profile.groupId))\r\n          .map(log => ({ ...log, displayLoadButton: this.canDisplayLoadButton(log, profile.groupId) })),\r\n      }))\r\n    );\r\n  }\r\n  private isSelfCurrentAnswer(log: ActivityLog, profileId: string): boolean {\r\n    return log.activityType === 'current_answer' && log.participant.id === profileId;\r\n  }\r\n\r\n  private canDisplayLoadButton(log: ActivityLog, profileId: string): boolean {\r\n    if (!this.itemData) throw new Error('itemData must be defined');\r\n    if (!log.answerId) return false;\r\n\r\n    // Can load other user answer only in read-only mode and with correct permissions\r\n    if (this.isTaskReadOnly) {\r\n      return allowsWatchingAnswers(this.itemData.item.permissions) &&\r\n        [ 'submission', 'saved_answer', 'current_answer' ].includes(log.activityType);\r\n    }\r\n\r\n    // If answer author is self, we can always load it\r\n    if (log.user?.id === profileId) return [ 'submission', 'saved_answer' ].includes(log.activityType);\r\n\r\n    return false;\r\n  }\r\n\r\n  private getLogColumns(type: ItemType, watchingGroup: WatchedGroup|null): Column[] {\r\n    const columns = [\r\n      {\r\n        field: 'activityType',\r\n        header: $localize`Action`,\r\n        enabled: true,\r\n      },\r\n      {\r\n        field: 'item.string.title',\r\n        header: $localize`Content`,\r\n        enabled: ![ 'Task', 'Course' ].includes(type),\r\n      },\r\n      {\r\n        field: 'item.user',\r\n        header: $localize`User`,\r\n        enabled: watchingGroup && !watchingGroup.route.isUser,\r\n      },\r\n      {\r\n        field: 'at',\r\n        header: $localize`Time`,\r\n        enabled: true,\r\n      }\r\n    ];\r\n\r\n    return columns.filter(item => item.enabled).map(item => ({\r\n      field: item.field,\r\n      header: item.header,\r\n    }));\r\n  }\r\n\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { dateDecoder } from '../helpers/decoders';\r\n\r\nconst groupProgressDecoder = D.struct({\r\n  averageScore: D.number,\r\n  avgHintsRequested: D.number,\r\n  avgSubmissions: D.number,\r\n  avgTimeSpent: D.number,\r\n  groupId: D.string,\r\n  itemId: D.string,\r\n  validationRate: D.number,\r\n});\r\n\r\nexport type GroupProgress = D.TypeOf<typeof groupProgressDecoder>;\r\n\r\nconst teamUserProgressDecoder = D.struct({\r\n  groupId: D.string,\r\n  hintsRequested: D.number,\r\n  itemId: D.string,\r\n  latestActivityAt: D.nullable(dateDecoder),\r\n  score: D.number,\r\n  submissions: D.number,\r\n  timeSpent: D.number,\r\n  validated: D.boolean,\r\n});\r\n\r\nexport type TeamUserProgress = D.TypeOf<typeof teamUserProgressDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupProgressService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getUsersProgress(\r\n    groupId: string,\r\n    parentItemIds: string[],\r\n    options?: {\r\n      limit?: number,\r\n      fromId?: string,\r\n    },\r\n  ): Observable<TeamUserProgress[]> {\r\n    let params = new HttpParams().set('parent_item_ids', parentItemIds.join(','));\r\n    if (options?.limit !== undefined) params = params.set('limit', options.limit);\r\n    if (options?.fromId !== undefined) params = params.set('from.id', options.fromId);\r\n\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/user-progress`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(teamUserProgressDecoder)),\r\n      );\r\n  }\r\n\r\n  getTeamsProgress(\r\n    groupId: string,\r\n    parentItemIds: string[],\r\n  ): Observable<TeamUserProgress[]> {\r\n    const params = new HttpParams().set('parent_item_ids', parentItemIds.join(','));\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/team-progress`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(teamUserProgressDecoder)),\r\n      );\r\n  }\r\n\r\n  getGroupsProgress(\r\n    groupId: string,\r\n    parentItemIds: string[],\r\n  ): Observable<GroupProgress[]> {\r\n    const params = new HttpParams().set('parent_item_ids', parentItemIds.join(','));\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/group-progress`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(groupProgressDecoder)),\r\n      );\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { appConfig } from '../helpers/config';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { decodeSnakeCase } from '../operators/decode';\r\nimport * as D from 'io-ts/Decoder';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgressCSVService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getCSVData(groupId: string, type: 'group' | 'team' | 'user', parentItemIds: string[]): Observable<string> {\r\n    const params = new HttpParams().set('parent_item_ids', parentItemIds.join(','));\r\n    return this.http\r\n      .get(`${appConfig.apiUrl}/groups/${ groupId }/${ type }-progress-csv`, {\r\n        params: params,\r\n        responseType: 'text',\r\n      }).pipe(\r\n        decodeSnakeCase(D.string),\r\n      );\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ensureDefined } from 'src/app/shared/helpers/assert';\r\nimport { TypeFilter } from '../../helpers/composition-filter';\r\n\r\n@Component({\r\n  selector: 'alg-composition-filter',\r\n  templateUrl: './composition-filter.component.html',\r\n  styleUrls: [ './composition-filter.component.scss' ]\r\n})\r\nexport class CompositionFilterComponent implements OnInit {\r\n\r\n  @Input() defaultValue?: TypeFilter;\r\n\r\n  @Output() change = new EventEmitter<TypeFilter>();\r\n\r\n  selectedTypeFilter = 0;\r\n\r\n  readonly typeFilters: {icon:string, label:string, value:TypeFilter}[] = [\r\n    {\r\n      icon: 'fa fa-users',\r\n      label: $localize`sub-groups`,\r\n      value: 'Groups'\r\n    },\r\n    {\r\n      icon: 'fa fa-users',\r\n      label: $localize`teams`,\r\n      value: 'Teams'\r\n    },\r\n    {\r\n      icon: 'fa fa-user',\r\n      label: $localize`users`,\r\n      value: 'Users'\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.defaultValue) {\r\n      this.selectedTypeFilter = this.typeFilters.findIndex(filter => filter.value === this.defaultValue);\r\n    }\r\n  }\r\n\r\n  onTypeFilterChanged(index: number): void {\r\n    this.change.emit(ensureDefined(this.typeFilters[index]).value);\r\n    this.selectedTypeFilter = index;\r\n  }\r\n\r\n}\r\n","<div class=\"selection-tool\">\r\n  <alg-selection\r\n    [items]=\"typeFilters\"\r\n    [selected]=\"selectedTypeFilter\"\r\n    type=\"square\"\r\n    (change)=\"onTypeFilterChanged($event)\"\r\n  ></alg-selection>\r\n</div>\r\n","<div\r\n  class=\"group-situation-data\"\r\n  [ngClass]=\"state\"\r\n  [class.pointer]=\"state !== 'not-started'\"\r\n>\r\n  <alg-score-ring\r\n    *ngIf=\"state !== 'success' && state !== 'not-started'\"\r\n    [currentScore]=\"userProgress.score\"\r\n    [diameter]=\"32\"\r\n    [scoreFillColor]=\"'#FFF'\"\r\n  ></alg-score-ring>\r\n  <span class=\"situation-check\" *ngIf=\"state === 'success'\">\r\n    <i class=\"fa fa-check\"></i>\r\n  </span>\r\n</div>\r\n","import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { mustNotBeUndefined } from 'src/app/shared/helpers/assert';\r\nimport { TeamUserProgress } from 'src/app/shared/http-services/get-group-progress.service';\r\n\r\n@Component({\r\n  selector: 'alg-user-progress[userProgress]',\r\n  templateUrl: './user-progress.component.html',\r\n  styleUrls: [ './user-progress.component.scss' ]\r\n})\r\nexport class UserProgressComponent implements OnInit, OnChanges {\r\n\r\n  @Input() userProgress!: TeamUserProgress;\r\n\r\n  state: 'success'|'in-progress'|'no-score'|'not-started' = 'no-score';\r\n\r\n  ngOnInit(): void {\r\n    // When the component has no inputs, the hook onChange is not executed.\r\n    // Therefore, the user progress assertion must be declared also at init.\r\n    mustNotBeUndefined(this.userProgress, 'user progress must be defined');\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    mustNotBeUndefined(this.userProgress, 'user progress must be defined');\r\n\r\n    if (this.userProgress.validated || this.userProgress.score === 100) this.state = 'success';\r\n    else if (this.userProgress.score > 0) this.state = 'in-progress';\r\n    else if (this.userProgress.score === 0 && this.userProgress.timeSpent > 0) this.state = 'no-score';\r\n    else this.state = 'not-started';\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from '../helpers/config';\r\nimport { assertSuccess, SimpleActionResponse } from './action-response';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { decodeSnakeCase } from '../operators/decode';\r\nimport {\r\n  itemCorePermDecoder,\r\n  itemEntryFromPermDecoder,\r\n  itemEntryUntilPermDecoder,\r\n  itemSessionPermDecoder\r\n} from '../models/domain/item-permissions';\r\n\r\nconst groupPermissionsDecoder = pipe(\r\n  itemCorePermDecoder,\r\n  D.intersect(itemSessionPermDecoder),\r\n  D.intersect(itemEntryFromPermDecoder),\r\n);\r\n\r\nconst groupPermissionsInfoDecoder = D.struct({\r\n  granted: D.intersect(groupPermissionsDecoder)(itemEntryUntilPermDecoder),\r\n  computed: groupPermissionsDecoder,\r\n  grantedViaGroupMembership: groupPermissionsDecoder,\r\n  grantedViaItemUnlocking: groupPermissionsDecoder,\r\n  grantedViaSelf: groupPermissionsDecoder,\r\n  grantedViaOther: groupPermissionsDecoder,\r\n});\r\n\r\nexport type GroupPermissionsInfo = D.TypeOf<typeof groupPermissionsInfoDecoder>;\r\n\r\nexport type GroupPermissions = GroupPermissionsInfo['granted'];\r\nexport type GroupComputedPermissions = GroupPermissionsInfo['computed'];\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupPermissionsService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getPermissions(sourceGroupId: string, groupId: string, itemId: string): Observable<GroupPermissionsInfo> {\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${sourceGroupId}/permissions/${groupId}/${itemId}`).pipe(\r\n        decodeSnakeCase(groupPermissionsInfoDecoder),\r\n      );\r\n  }\r\n\r\n  updatePermissions(sourceGroupId: string, groupId: string, itemId: string,\r\n    permissions: Partial<GroupPermissions>): Observable<void> {\r\n\r\n    const body = {\r\n      can_view: permissions.canView,\r\n      can_grant_view: permissions.canGrantView,\r\n      can_watch: permissions.canWatch,\r\n      can_edit: permissions.canEdit,\r\n      can_make_session_official: permissions.canMakeSessionOfficial,\r\n      is_owner: permissions.isOwner,\r\n    };\r\n    return this.http\r\n      .put<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${sourceGroupId}/permissions/${groupId}/${itemId}`, body)\r\n      .pipe(map(assertSuccess));\r\n  }\r\n}\r\n","import { TypeFilter } from './composition-filter';\r\nimport { ConstraintError } from './item-permissions-constraints';\r\n\r\nexport const permissionsInfoString = {\r\n  canView: {\r\n    string: $localize`Can view`,\r\n    none: $localize`Nothing`,\r\n    info: $localize`Info`,\r\n    content: $localize`Content`,\r\n    content_with_descendants: $localize`Content and descendants`,\r\n    solution: $localize`Solution`,\r\n  },\r\n  canGrantView: {\r\n    string: $localize`Can grant view`,\r\n    none: $localize`Nothing`,\r\n    enter: $localize`Info & enter`,\r\n    content: $localize`Content`,\r\n    content_with_descendants: $localize`Content and descendants`,\r\n    solution: $localize`Solution`,\r\n    solution_with_grant: $localize`Solution and grant`,\r\n  },\r\n  canWatch: {\r\n    string: $localize`Can watch`,\r\n    none: $localize`Nothing`,\r\n    result: $localize`Result`,\r\n    answer: $localize`Answer`,\r\n    answer_with_grant: $localize`Answer and grant`,\r\n  },\r\n  canEdit: {\r\n    string: $localize`Can edit`,\r\n    none: $localize`Nothing`,\r\n    children: $localize`Children`,\r\n    all: $localize`All`,\r\n    all_with_grant: $localize`All and grant`,\r\n  }\r\n};\r\n\r\nfunction getTargetTypeString(targetType: TypeFilter): string {\r\n  switch (targetType) {\r\n    case 'Users':\r\n      return $localize`This user`;\r\n    case 'Groups':\r\n      return $localize`This group`;\r\n    case 'Teams':\r\n      return $localize`This team`;\r\n  }\r\n}\r\n\r\nconst multipleValuesPermissions = [ 'canView', 'canGrantView', 'canWatch', 'canEdit' ] as const;\r\n\r\nfunction isMultipleValuesPermissionConstraint(\r\n  constraintError: ConstraintError\r\n): constraintError is ConstraintError<typeof multipleValuesPermissions[number]> {\r\n  return multipleValuesPermissions.includes(constraintError.permission as typeof multipleValuesPermissions[number]);\r\n}\r\n\r\nexport function generateErrorMessage(targetType: TypeFilter) {\r\n  return (constraintError: ConstraintError): string => {\r\n    if (isMultipleValuesPermissionConstraint(constraintError)) {\r\n      const permissionString = permissionsInfoString[constraintError.permission];\r\n\r\n      const target = constraintError.on === 'giver' ? $localize`You` : getTargetTypeString(targetType);\r\n      const permission = permissionString.string;\r\n      const comparison = constraintError.constraintType === 'atLeast' ? $localize`to be at least` : $localize`to be`;\r\n      const permissionValue = permissionString[constraintError.expectedValue as keyof typeof permissionString];\r\n\r\n      return `${target} needs \"${permission}\" ${comparison} \"${permissionValue}\"`;\r\n    }\r\n\r\n    if (constraintError.permission === 'isOwner' && constraintError.expectedValue === true) {\r\n      return $localize`You need to be owner of this item`;\r\n    }\r\n\r\n    throw new Error('Unexpected constraint error on permissions');\r\n  };\r\n}\r\n","import { GroupPermissions } from 'src/app/shared/http-services/group-permissions.service';\r\nimport { ItemEditPerm, ItemPermWithEdit } from 'src/app/shared/models/domain/item-edit-permission';\r\nimport { ItemPermWithGrantView, itemGrantViewPermValues, ItemGrantViewPerm } from 'src/app/shared/models/domain/item-grant-view-permission';\r\nimport { ItemOwnerPerm, ItemSessionPerm } from 'src/app/shared/models/domain/item-permissions';\r\nimport { ItemViewPerm, itemViewPermValues, ItemPermWithView } from 'src/app/shared/models/domain/item-view-permission';\r\nimport { ItemPermWithWatch, ItemWatchPerm } from 'src/app/shared/models/domain/item-watch-permission';\r\n\r\n/**\r\n * The permissions that are subject to a constraint\r\n */\r\nexport type ConstrainedPermissions = Omit<GroupPermissions, 'canEnterUntil' | 'canEnterFrom'>;\r\n\r\nexport interface ConstraintError<Permission extends keyof ConstrainedPermissions = keyof ConstrainedPermissions> {\r\n  permission: Permission,\r\n  expectedValue: ConstrainedPermissions[Permission],\r\n  constraintType: 'atLeast' | 'equals',\r\n  on: 'giver' | 'receiver',\r\n}\r\n\r\nfunction genError<Permission extends keyof ConstrainedPermissions>(permission: Permission) {\r\n  return (\r\n    expectedValue: ConstrainedPermissions[Permission],\r\n    on: 'giver' | 'receiver',\r\n    constraintType?: ConstrainedPermissions[Permission] extends boolean ? never : 'atLeast',\r\n  ): ConstraintError<Permission> => ({\r\n    permission, expectedValue, constraintType: constraintType ?? 'equals', on\r\n  });\r\n}\r\n\r\nexport function hasAtLeastPermission<T extends readonly string[]>(permissionsSortedByLoosest: T, permission: T[number]) {\r\n  return (minimumPermission: T[number]): boolean =>\r\n    permissionsSortedByLoosest.indexOf(permission) >= permissionsSortedByLoosest.indexOf(minimumPermission);\r\n}\r\n\r\nexport function validateCanView(receiverPermissions: ItemPermWithView, giverPermissions: ItemPermWithGrantView): ConstraintError[] {\r\n\r\n  const giverCanAtLeastGrantView = hasAtLeastPermission(itemGrantViewPermValues, giverPermissions.canGrantView);\r\n\r\n  if (receiverPermissions.canView === ItemViewPerm.Info && !giverCanAtLeastGrantView(ItemGrantViewPerm.Enter)) {\r\n    return [ genError('canGrantView')(ItemGrantViewPerm.Enter, 'giver', 'atLeast') ];\r\n  }\r\n  if (receiverPermissions.canView === ItemViewPerm.Content && !giverCanAtLeastGrantView(ItemGrantViewPerm.Content)) {\r\n    return [ genError('canGrantView')(ItemGrantViewPerm.Content, 'giver', 'atLeast') ];\r\n  }\r\n  if (receiverPermissions.canView === ItemViewPerm.ContentWithDescendants &&\r\n    !giverCanAtLeastGrantView(ItemGrantViewPerm.ContentWithDescendants)) {\r\n    return [ genError('canGrantView')(ItemGrantViewPerm.ContentWithDescendants, 'giver', 'atLeast') ];\r\n  }\r\n  if (receiverPermissions.canView === ItemViewPerm.Solution && !giverCanAtLeastGrantView(ItemGrantViewPerm.Solution)) {\r\n    return [ genError('canGrantView')(ItemGrantViewPerm.Solution, 'giver', 'atLeast') ];\r\n  }\r\n  return [];\r\n}\r\n\r\nexport function validateCanGrantView(\r\n  receiverPermissions: ItemPermWithView & ItemPermWithGrantView,\r\n  giverPermissions: ItemPermWithGrantView & ItemOwnerPerm\r\n): ConstraintError[] {\r\n\r\n  if (receiverPermissions.canGrantView === ItemGrantViewPerm.None) return [];\r\n\r\n  const errors: ConstraintError[] = [];\r\n  const receiverCanAtLeastView = hasAtLeastPermission(itemViewPermValues, receiverPermissions.canView);\r\n\r\n  if (receiverPermissions.canGrantView === ItemGrantViewPerm.SolutionWithGrant) {\r\n    if (!giverPermissions.isOwner) {\r\n      errors.push(genError('isOwner')(true, 'giver'));\r\n    }\r\n    if (!receiverCanAtLeastView(ItemViewPerm.Solution)) {\r\n      errors.push(genError('canView')(ItemViewPerm.Solution, 'receiver', 'atLeast'));\r\n    }\r\n  } else {\r\n\r\n    if (giverPermissions.canGrantView !== ItemGrantViewPerm.SolutionWithGrant) {\r\n      errors.push(genError('canGrantView')(ItemGrantViewPerm.SolutionWithGrant, 'giver'));\r\n    }\r\n\r\n    if (receiverPermissions.canGrantView === ItemGrantViewPerm.Enter && !receiverCanAtLeastView(ItemViewPerm.Info)) {\r\n      errors.push(genError('canView')(ItemViewPerm.Info, 'receiver', 'atLeast'));\r\n    }\r\n\r\n    if (receiverPermissions.canGrantView === ItemGrantViewPerm.Content && !receiverCanAtLeastView(ItemViewPerm.Content)) {\r\n      errors.push(genError('canView')(ItemViewPerm.Content, 'receiver', 'atLeast'));\r\n    }\r\n    if (receiverPermissions.canGrantView === ItemGrantViewPerm.ContentWithDescendants &&\r\n      !receiverCanAtLeastView(ItemViewPerm.ContentWithDescendants)) {\r\n      errors.push(genError('canView')(ItemViewPerm.ContentWithDescendants, 'receiver', 'atLeast'));\r\n    }\r\n    if (receiverPermissions.canGrantView === ItemGrantViewPerm.Solution && !receiverCanAtLeastView(ItemViewPerm.Solution)) {\r\n      errors.push(genError('canView')(ItemViewPerm.Solution, 'receiver', 'atLeast'));\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function validateCanWatch(\r\n  receiverPermissions: ItemPermWithView & ItemPermWithWatch,\r\n  giverPermissions: ItemPermWithWatch & ItemOwnerPerm\r\n): ConstraintError[] {\r\n\r\n  if (receiverPermissions.canWatch === ItemWatchPerm.None) return [];\r\n\r\n  const errors: ConstraintError[] = [];\r\n\r\n  // For all canWatch except 'none'\r\n  if (!hasAtLeastPermission(itemViewPermValues, receiverPermissions.canView)(ItemViewPerm.Content)) {\r\n    errors.push(genError('canView')(ItemViewPerm.Content, 'receiver', 'atLeast'));\r\n  }\r\n\r\n  if (receiverPermissions.canWatch === ItemWatchPerm.AnswerWithGrant) {\r\n    if (!giverPermissions.isOwner) {\r\n      errors.push(genError('isOwner')(true, 'giver'));\r\n    }\r\n  } else {\r\n\r\n    // if receiverPermissions.canWatch is 'result' or 'answer'\r\n    if (giverPermissions.canWatch !== ItemWatchPerm.AnswerWithGrant) {\r\n      errors.push(genError('canWatch')(ItemWatchPerm.AnswerWithGrant, 'giver'));\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function validateCanEdit(\r\n  receiverPermissions: ItemPermWithView & ItemPermWithEdit,\r\n  giverPermissions: ItemPermWithEdit & ItemOwnerPerm\r\n): ConstraintError[] {\r\n\r\n  if (receiverPermissions.canEdit === ItemEditPerm.None) return [];\r\n\r\n  const errors: ConstraintError[] = [];\r\n\r\n  // For all can_edit except 'none'\r\n  if (!hasAtLeastPermission(itemViewPermValues, receiverPermissions.canView)(ItemViewPerm.Content)) {\r\n    errors.push(genError('canView')(ItemViewPerm.Content, 'receiver', 'atLeast'));\r\n  }\r\n\r\n  if (receiverPermissions.canEdit === ItemEditPerm.AllWithGrant) {\r\n    if (!giverPermissions.isOwner) {\r\n      errors.push(genError('isOwner')(true, 'giver'));\r\n    }\r\n  } else {\r\n\r\n    // if receiverPermissions.canEdit is 'children' or 'all_with_grant'\r\n    if (giverPermissions.canEdit !== ItemEditPerm.AllWithGrant) {\r\n      errors.push(genError('canEdit')(ItemEditPerm.AllWithGrant, 'giver'));\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function validateCanMakeSessionOfficial(\r\n  receiverPermissions: ItemPermWithView & ItemSessionPerm,\r\n  giverPermissions: ItemOwnerPerm\r\n): ConstraintError[] {\r\n\r\n  if (!receiverPermissions.canMakeSessionOfficial) return [];\r\n\r\n  const errors: ConstraintError[] = [];\r\n\r\n  if (!giverPermissions.isOwner) {\r\n    errors.push(genError('isOwner')(true, 'giver'));\r\n  }\r\n  if (!hasAtLeastPermission(itemViewPermValues, receiverPermissions.canView)(ItemViewPerm.Info)) {\r\n    errors.push(genError('canView')(ItemViewPerm.Info, 'receiver', 'atLeast'));\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function validateIsOwner(receiverPermissions: ItemOwnerPerm, giverPermissions: ItemOwnerPerm): ConstraintError[] {\r\n\r\n  if (!receiverPermissions.isOwner) return [];\r\n\r\n  if (!giverPermissions.isOwner) {\r\n    return [ genError('isOwner')(true, 'giver') ];\r\n  }\r\n  return [];\r\n}\r\n\r\n","import {\r\n  ProgressSelectValue\r\n} from 'src/app/modules/shared-components/components/collapsible-section/progress-select/progress-select.component';\r\nimport { GroupPermissions } from 'src/app/shared/http-services/group-permissions.service';\r\nimport { generateErrorMessage, permissionsInfoString } from './permissions-string';\r\nimport { TypeFilter } from './composition-filter';\r\nimport {\r\n  validateCanView,\r\n  validateCanGrantView,\r\n  validateCanWatch,\r\n  validateCanEdit,\r\n  validateIsOwner,\r\n  validateCanMakeSessionOfficial,\r\n  ConstraintError,\r\n} from './item-permissions-constraints';\r\nimport { ItemViewPerm } from 'src/app/shared/models/domain/item-view-permission';\r\nimport { ItemGrantViewPerm } from 'src/app/shared/models/domain/item-grant-view-permission';\r\nimport { ItemEditPerm } from 'src/app/shared/models/domain/item-edit-permission';\r\nimport { ItemWatchPerm } from 'src/app/shared/models/domain/item-watch-permission';\r\nimport { ItemCorePerm } from 'src/app/shared/models/domain/item-permissions';\r\n\r\nexport interface PermissionsDialogData {\r\n  canViewValues: ProgressSelectValue<string>[],\r\n  canGrantViewValues: ProgressSelectValue<string>[],\r\n  canWatchValues: ProgressSelectValue<string>[],\r\n  canEditValues: ProgressSelectValue<string>[],\r\n  isOwnerDisabledTooltip?: string[],\r\n  canMakeSessionOfficialDisabledTooltip?: string[],\r\n}\r\n\r\nexport function getTargetTypeString(targetType: TypeFilter): string {\r\n  switch (targetType) {\r\n    case 'Users':\r\n      return $localize`The user`;\r\n    case 'Groups':\r\n      return $localize`The group`;\r\n    case 'Teams':\r\n      return $localize`The team`;\r\n  }\r\n}\r\n\r\nexport function generateCanViewValues(\r\n  targetType: TypeFilter,\r\n): ProgressSelectValue<GroupPermissions['canView']>[] {\r\n  const targetTypeString = getTargetTypeString(targetType);\r\n  return [\r\n    {\r\n      value: ItemViewPerm.None,\r\n      label: permissionsInfoString.canView.none,\r\n      comment: $localize`${targetTypeString} can\\'t see the item`\r\n    },\r\n    {\r\n      value: ItemViewPerm.Info,\r\n      label: permissionsInfoString.canView.info,\r\n      comment: $localize`${targetTypeString} can see the item title and description, but not its content`,\r\n    },\r\n    {\r\n      value: ItemViewPerm.Content,\r\n      label: permissionsInfoString.canView.content,\r\n      comment: $localize`${targetTypeString} can see the content of this item`,\r\n    },\r\n    {\r\n      value: ItemViewPerm.ContentWithDescendants,\r\n      label: permissionsInfoString.canView.content_with_descendants,\r\n      comment: $localize`${targetTypeString} can also see the content of this items descendants (when possible for this group)`,\r\n    },\r\n    {\r\n      value: ItemViewPerm.Solution,\r\n      label: permissionsInfoString.canView.solution,\r\n      comment: $localize`${targetTypeString} can also see the solution of this items and its descendants (when possible for this group)`,\r\n    }\r\n  ];\r\n}\r\n\r\nfunction generateCanGrantViewValues(\r\n  targetType: TypeFilter,\r\n): ProgressSelectValue<GroupPermissions['canGrantView']>[] {\r\n  const targetTypeString = getTargetTypeString(targetType);\r\n\r\n  return [\r\n    {\r\n      value: ItemGrantViewPerm.None,\r\n      label: permissionsInfoString.canGrantView.none,\r\n      comment: $localize`${targetTypeString} can\\'t grant any access to this item`\r\n    },\r\n    {\r\n      value: ItemGrantViewPerm.Enter,\r\n      label: permissionsInfoString.canGrantView.enter,\r\n      comment: $localize`${targetTypeString} can grant \\'Can view: info\\' and  \\'Can enter\\' access`,\r\n    },\r\n    {\r\n      value: ItemGrantViewPerm.Content,\r\n      label: permissionsInfoString.canGrantView.content,\r\n      comment: $localize`${targetTypeString} can also grant \\'Can view: content\\' access`,\r\n    },\r\n    {\r\n      value: ItemGrantViewPerm.ContentWithDescendants,\r\n      label: permissionsInfoString.canGrantView.content_with_descendants,\r\n      comment: $localize`${targetTypeString} can also grant \\'Can view: content and descendants\\' access`,\r\n    },\r\n    {\r\n      value: ItemGrantViewPerm.Solution,\r\n      label: permissionsInfoString.canGrantView.solution,\r\n      comment: $localize`${targetTypeString} can also grant \\'Can view: solution\\' access`,\r\n    },\r\n    {\r\n      value: ItemGrantViewPerm.SolutionWithGrant,\r\n      label: permissionsInfoString.canGrantView.solution_with_grant,\r\n      comment: $localize`${targetTypeString} can also grant \\'Can grant view\\' access`,\r\n    }\r\n  ];\r\n}\r\n\r\nfunction generateCanWatchValues(\r\n  targetType: TypeFilter,\r\n): ProgressSelectValue<GroupPermissions['canWatch']>[] {\r\n  const targetTypeString = getTargetTypeString(targetType);\r\n\r\n  return [\r\n    {\r\n      value: ItemWatchPerm.None,\r\n      label: permissionsInfoString.canWatch.none,\r\n      comment: $localize`${targetTypeString} can\\'t watch the activity of others on this item`\r\n    },\r\n    {\r\n      value: ItemWatchPerm.Result,\r\n      label: permissionsInfoString.canWatch.result,\r\n      comment:\r\n        $localize`${targetTypeString} can view information about submissions and scores of others on this item, but not their answers`,\r\n    },\r\n    {\r\n      value: ItemWatchPerm.Answer,\r\n      label: permissionsInfoString.canWatch.answer,\r\n      comment: $localize`${targetTypeString} can also look at other people\\'s answers on this item`,\r\n    },\r\n    {\r\n      value: ItemWatchPerm.AnswerWithGrant,\r\n      label: permissionsInfoString.canWatch.answer_with_grant,\r\n      comment: $localize`${targetTypeString} can also grant \\'Can watch\\' access to others`,\r\n    }\r\n  ];\r\n}\r\n\r\nfunction generateCanEditValues(\r\n  targetType: TypeFilter,\r\n): ProgressSelectValue<GroupPermissions['canEdit']>[] {\r\n  const targetTypeString = getTargetTypeString(targetType);\r\n\r\n  return [\r\n    {\r\n      value: ItemEditPerm.None,\r\n      label: permissionsInfoString.canEdit.none,\r\n      comment: $localize`${targetTypeString} can\\'t make any changes to this item`\r\n    },\r\n    {\r\n      value: ItemEditPerm.Children,\r\n      label: permissionsInfoString.canEdit.children,\r\n      comment: $localize`${targetTypeString} can add children to this item and edit how permissions propagate to them`,\r\n    },\r\n    {\r\n      value: ItemEditPerm.All,\r\n      label: permissionsInfoString.canEdit.all,\r\n      comment: $localize`${targetTypeString} can also edit the content of the item itself, but may not delete it`,\r\n    },\r\n    {\r\n      value: ItemEditPerm.AllWithGrant,\r\n      label: permissionsInfoString.canEdit.all_with_grant,\r\n      comment: $localize`${targetTypeString} can also give \\'Can edit\\' access to others`,\r\n    }\r\n  ];\r\n}\r\n\r\nexport function generateValues(\r\n  targetType: TypeFilter,\r\n  receiverPermissions: GroupPermissions,\r\n  giverPermissions: ItemCorePerm\r\n): PermissionsDialogData {\r\n\r\n  const formatErrors = (errors: ConstraintError[]): string[] | undefined => {\r\n    const errorMessages = errors.map(error => generateErrorMessage(targetType)(error));\r\n    return errorMessages.length ? errorMessages : undefined;\r\n  };\r\n\r\n  return {\r\n    canViewValues: generateCanViewValues(targetType).map(val => {\r\n      const errors = formatErrors(validateCanView({ ...receiverPermissions, canView: val.value }, giverPermissions));\r\n      return errors ? { ...val, disabled: true, tooltip: errors } : val;\r\n    }),\r\n\r\n    canGrantViewValues: generateCanGrantViewValues(targetType).map(val => {\r\n      const errors = formatErrors(validateCanGrantView({ ...receiverPermissions, canGrantView: val.value }, giverPermissions));\r\n      return errors ? { ...val, disabled: true, tooltip: errors } : val;\r\n    }),\r\n\r\n    canWatchValues: generateCanWatchValues(targetType).map(val => {\r\n      const errors = formatErrors(validateCanWatch({ ...receiverPermissions, canWatch: val.value }, giverPermissions));\r\n      return errors ? { ...val, disabled: true, tooltip: errors } : val;\r\n    }),\r\n\r\n    canEditValues: generateCanEditValues(targetType).map(val => {\r\n      const errors = formatErrors(validateCanEdit({ ...receiverPermissions, canEdit: val.value }, giverPermissions));\r\n      return errors ? { ...val, disabled: true, tooltip: errors } : val;\r\n    }),\r\n\r\n    isOwnerDisabledTooltip: formatErrors(validateIsOwner({ ...receiverPermissions, isOwner: true }, giverPermissions)) || undefined,\r\n\r\n    canMakeSessionOfficialDisabledTooltip: formatErrors(validateCanMakeSessionOfficial(\r\n      { ...receiverPermissions, canMakeSessionOfficial: true }, giverPermissions\r\n    )) || undefined,\r\n  };\r\n}\r\n","import {\r\n  ProgressSelectValue\r\n} from '../../shared-components/components/collapsible-section/progress-select/progress-select.component';\r\nimport { TypeFilter } from './composition-filter';\r\nimport { PermissionsDialogData } from './permissions-texts';\r\nimport { GroupComputedPermissions, GroupPermissions } from '../../../shared/http-services/group-permissions.service';\r\nimport { itemViewPermValues } from '../../../shared/models/domain/item-view-permission';\r\nimport { itemGrantViewPermValues } from '../../../shared/models/domain/item-grant-view-permission';\r\nimport { itemWatchPermValues } from '../../../shared/models/domain/item-watch-permission';\r\nimport { itemEditPermValues } from '../../../shared/models/domain/item-edit-permission';\r\n\r\nexport function hasHigherPermission<T extends readonly string[]>(permissionsSortedByLoosest: T, permission: T[number]) {\r\n  return (minimumPermission: T[number]): boolean =>\r\n    permissionsSortedByLoosest.indexOf(permission) > permissionsSortedByLoosest.indexOf(minimumPermission);\r\n}\r\n\r\nfunction getComputeValues(\r\n  values: ProgressSelectValue<string>[],\r\n  currentValue: string,\r\n  computedValue: string,\r\n  targetType: TypeFilter,\r\n): ProgressSelectValue<string>[] {\r\n  const currentValueIndex = values.findIndex(value => value.value === currentValue);\r\n  const computedValueIndex = values.findIndex(value => value.value === computedValue);\r\n\r\n  values = values.map((value, index) => {\r\n    if (index > currentValueIndex && index <= computedValueIndex) {\r\n      return {\r\n        ...value,\r\n        selected: true,\r\n        tooltip: [\r\n          ...(value.tooltip || []),\r\n          targetType === 'Users'\r\n            ? $localize`This user has this permission via one of the other group he is member of, or one of their ancestors.`\r\n            : $localize`This group has this permission via one of one of its ancestor group.`\r\n        ],\r\n      };\r\n    }\r\n    return value;\r\n  });\r\n\r\n  return values;\r\n}\r\n\r\nexport function withComputePermissions(\r\n  permissionsDialogData: PermissionsDialogData,\r\n  permissions: Omit<GroupPermissions,'canEnterFrom'|'canEnterUntil'>,\r\n  receiverPermissions: Omit<GroupPermissions,'canEnterFrom'|'canEnterUntil'>,\r\n  computedPermissions: Omit<GroupComputedPermissions,'canEnterFrom'|'canEnterUntil'>,\r\n  targetType: TypeFilter,\r\n): PermissionsDialogData {\r\n  const giverCanAtLeastView = hasHigherPermission(itemViewPermValues, computedPermissions.canView);\r\n  const giverCanAtLeastGrantView = hasHigherPermission(itemGrantViewPermValues, computedPermissions.canGrantView);\r\n  const giverCanAtLeastWatch = hasHigherPermission(itemWatchPermValues, computedPermissions.canWatch);\r\n  const giverCanAtLeastEdit = hasHigherPermission(itemEditPermValues, computedPermissions.canEdit);\r\n\r\n  if (giverCanAtLeastView(permissions.canView)) {\r\n    permissionsDialogData.canViewValues = getComputeValues(\r\n      permissionsDialogData.canViewValues,\r\n      receiverPermissions.canView,\r\n      computedPermissions.canView,\r\n      targetType,\r\n    );\r\n  }\r\n\r\n  if (giverCanAtLeastGrantView(permissions.canGrantView)) {\r\n    permissionsDialogData.canGrantViewValues = getComputeValues(\r\n      permissionsDialogData.canGrantViewValues,\r\n      receiverPermissions.canGrantView,\r\n      computedPermissions.canGrantView,\r\n      targetType,\r\n    );\r\n  }\r\n\r\n  if (giverCanAtLeastWatch(permissions.canWatch)) {\r\n    permissionsDialogData.canWatchValues = getComputeValues(\r\n      permissionsDialogData.canWatchValues,\r\n      receiverPermissions.canWatch,\r\n      computedPermissions.canWatch,\r\n      targetType,\r\n    );\r\n  }\r\n\r\n  if (giverCanAtLeastEdit(permissions.canEdit)) {\r\n    permissionsDialogData.canEditValues = getComputeValues(\r\n      permissionsDialogData.canEditValues,\r\n      receiverPermissions.canEdit,\r\n      computedPermissions.canEdit,\r\n      targetType,\r\n    );\r\n  }\r\n\r\n  return permissionsDialogData;\r\n}\r\n\r\n","<form [formGroup]=\"form\" *ngIf=\"form\">\r\n  <alg-collapsible-section\r\n      i18n-header header=\"Can view\" icon=\"fa fa-eye\"\r\n      [collapsible]=\"!form.errors?.canView\"\r\n      [errorMessage]=\"form.errors?.canView?.[0]\"\r\n  >\r\n    <ng-template #content let-collapsed>\r\n      <alg-progress-select\r\n          [collapsed]=\"collapsed\"\r\n          formControlName=\"canView\"\r\n          [values]=\"permissionsDialogData.canViewValues\"\r\n      ></alg-progress-select>\r\n    </ng-template>\r\n  </alg-collapsible-section>\r\n\r\n  <!--<alg-switch-field\r\n    i18n-title title=\"Can Enter\"\r\n    icon=\"fa fa-door-open\"\r\n    [(value)]=\"permissions.can_enter_from\"\r\n  >\r\n    <ng-template #label i18n>{{targetTypeString}} may enter this item (a contest or time-limited chapter)</ng-template>\r\n  </alg-switch-field>-->\r\n\r\n  <alg-collapsible-section\r\n      i18n-header header=\"Can grant view\" icon=\"fa fa-key\"\r\n      [collapsible]=\"!form.errors?.canGrantView\"\r\n      [errorMessage]=\"form.errors?.canGrantView?.[0]\"\r\n  >\r\n    <ng-template #content let-collapsed>\r\n      <alg-progress-select\r\n          [collapsed]=\"collapsed\"\r\n          formControlName=\"canGrantView\"\r\n          [values]=\"permissionsDialogData.canGrantViewValues\"\r\n      ></alg-progress-select>\r\n    </ng-template>\r\n  </alg-collapsible-section>\r\n\r\n  <alg-collapsible-section\r\n      i18n-header header=\"Can watch\" icon=\"fa fa-binoculars\"\r\n      [collapsible]=\"!form.errors?.canWatch\"\r\n      [errorMessage]=\"form.errors?.canWatch?.[0]\"\r\n  >\r\n    <ng-template #content let-collapsed>\r\n      <alg-progress-select\r\n          [collapsed]=\"collapsed\"\r\n          formControlName=\"canWatch\"\r\n          [values]=\"permissionsDialogData.canWatchValues\"\r\n      ></alg-progress-select>\r\n    </ng-template>\r\n  </alg-collapsible-section>\r\n\r\n  <alg-collapsible-section\r\n      i18n-header header=\"Can edit\" icon=\"fa fa-pencil-alt\"\r\n      [collapsible]=\"!form.errors?.canEdit\"\r\n      [errorMessage]=\"form.errors?.canEdit?.[0]\"\r\n  >\r\n    <ng-template #content let-collapsed>\r\n      <alg-progress-select\r\n          [collapsed]=\"collapsed\"\r\n          formControlName=\"canEdit\"\r\n          [values]=\"permissionsDialogData.canEditValues\"\r\n      ></alg-progress-select>\r\n    </ng-template>\r\n  </alg-collapsible-section>\r\n\r\n  <alg-collapsible-section\r\n      i18n-header header=\"Can attach official sessions\" icon=\"fa fa-paperclip\"\r\n      [collapsible]=\"!form.errors?.canMakeSessionOfficial\"\r\n      [errorMessage]=\"form.errors?.canMakeSessionOfficial?.[0]\"\r\n  >\r\n    <ng-template #content let-collapsed>\r\n      <alg-switch-field\r\n          [collapsed]=\"collapsed\"\r\n          formControlName=\"canMakeSessionOfficial\"\r\n          [disabledTooltip]=\"permissionsDialogData.canMakeSessionOfficialDisabledTooltip ?? []\"\r\n      >\r\n        <ng-template #label>\r\n          <span i18n>{{targetTypeString}} may attach official sessions to this item, that will be visible to everyone in the content tab of the item</span>\r\n        </ng-template>\r\n      </alg-switch-field>\r\n    </ng-template>\r\n  </alg-collapsible-section>\r\n\r\n  <alg-collapsible-section\r\n      i18n-header header=\"Is owner\" icon=\"fa fa-user-tie\"\r\n      [collapsible]=\"!form.errors?.isOwner\"\r\n      [errorMessage]=\"form.errors?.isOwner?.[0]\"\r\n  >\r\n    <ng-template #content let-collapsed>\r\n      <alg-switch-field\r\n          [collapsed]=\"collapsed\"\r\n          formControlName=\"isOwner\"\r\n          [disabledTooltip]=\"permissionsDialogData.isOwnerDisabledTooltip ?? []\"\r\n      >\r\n        <ng-template #label>\r\n          <span i18n>{{targetTypeString}} own this item, and get the maximum access in all categories above, and may also delete this item</span>\r\n        </ng-template>\r\n      </alg-switch-field>\r\n    </ng-template>\r\n  </alg-collapsible-section>\r\n\r\n  <div class=\"buttons\">\r\n    <p-button\r\n      class=\"button\"\r\n      icon=\"fa fa-times\"\r\n      i18n-label label=\"Cancel\"\r\n      styleClass=\"alg-button p-button-rounded p-button-danger\"\r\n      (onClick)=\"onCancel()\"\r\n    ></p-button>\r\n    <p-button\r\n      class=\"button\"\r\n      icon=\"fa fa-check\"\r\n      i18n-label label=\"Proceed\"\r\n      styleClass=\"alg-button p-button-rounded\"\r\n      (onClick)=\"onAccept()\"\r\n      [disabled]=\"!form.dirty || form.invalid || form.disabled || acceptButtonDisabled\"\r\n    ></p-button>\r\n  </div>\r\n</form>\r\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges } from '@angular/core';\r\nimport { UntypedFormBuilder } from '@angular/forms';\r\nimport { generateValues, getTargetTypeString, PermissionsDialogData } from '../../helpers/permissions-texts';\r\nimport { GroupComputedPermissions, GroupPermissions } from '../../../../shared/http-services/group-permissions.service';\r\nimport { ItemCorePerm } from '../../../../shared/models/domain/item-permissions';\r\nimport { TypeFilter } from '../../helpers/composition-filter';\r\nimport { ItemViewPerm } from '../../../../shared/models/domain/item-view-permission';\r\nimport {\r\n  ItemGrantViewPerm,\r\n} from '../../../../shared/models/domain/item-grant-view-permission';\r\nimport { ItemWatchPerm } from '../../../../shared/models/domain/item-watch-permission';\r\nimport { ItemEditPerm } from '../../../../shared/models/domain/item-edit-permission';\r\nimport { merge, Subject } from 'rxjs';\r\nimport { permissionsConstraintsValidator } from '../../helpers/permissions-constraints-validator';\r\nimport { withComputePermissions } from '../../helpers/computed-permissions';\r\n\r\n@Component({\r\n  selector: 'alg-permissions-edit-form[giverPermissions]',\r\n  templateUrl: 'permissions-edit-form.component.html',\r\n  styleUrls: [ 'permissions-edit-form.component.scss' ],\r\n})\r\nexport class PermissionsEditFormComponent implements OnDestroy, OnChanges {\r\n  @Input() permissions?: Omit<GroupPermissions,'canEnterFrom'|'canEnterUntil'>;\r\n  @Input() computedPermissions?: Omit<GroupComputedPermissions,'canEnterFrom'|'canEnterUntil'>;\r\n  @Input() giverPermissions!: ItemCorePerm;\r\n  @Input() targetType: TypeFilter = 'Users';\r\n  @Input() acceptButtonDisabled = false;\r\n  @Output() save = new EventEmitter<Partial<GroupPermissions>>();\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  targetTypeString = '';\r\n\r\n  permissionsDialogData: PermissionsDialogData = {\r\n    canViewValues: [],\r\n    canGrantViewValues: [],\r\n    canEditValues: [],\r\n    canWatchValues: [],\r\n  };\r\n\r\n  form = this.fb.group({\r\n    canView: [ ItemViewPerm.None ],\r\n    canGrantView: [ ItemGrantViewPerm.None ],\r\n    canWatch: [ ItemWatchPerm.None ],\r\n    canEdit: [ ItemEditPerm.None ],\r\n    canMakeSessionOfficial: [ false ],\r\n    isOwner: [ true ],\r\n  });\r\n\r\n  private regenerateValues = new Subject<void>();\r\n  private subscription = merge(\r\n    this.form.valueChanges,\r\n    this.regenerateValues.asObservable()\r\n  ).subscribe(() => {\r\n    if (this.permissions) {\r\n      const receiverPermissions = this.form.value as GroupPermissions;\r\n      this.permissionsDialogData = generateValues(this.targetType, receiverPermissions, this.giverPermissions);\r\n\r\n      if (this.computedPermissions) {\r\n        this.permissionsDialogData = withComputePermissions(\r\n          this.permissionsDialogData,\r\n          this.permissions,\r\n          receiverPermissions,\r\n          this.computedPermissions,\r\n          this.targetType,\r\n        );\r\n      }\r\n    }\r\n  });\r\n\r\n  constructor(private fb: UntypedFormBuilder) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n    this.regenerateValues.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.targetTypeString = getTargetTypeString(this.targetType);\r\n    if ((changes.permissions || changes.giverPermissions) && this.permissions) {\r\n      this.form.setValidators(permissionsConstraintsValidator(this.giverPermissions, this.targetType));\r\n      this.form.updateValueAndValidity();\r\n      this.form.reset({ ...this.permissions }, { emitEvent: false });\r\n    }\r\n    if (changes.targetType) this.regenerateValues.next();\r\n  }\r\n\r\n  onAccept(): void {\r\n    if (!this.form.dirty || this.form.invalid) return;\r\n\r\n    const groupPermissions: Partial<GroupPermissions> = {\r\n      canView: this.form.get('canView')?.value as GroupPermissions['canView'],\r\n      canGrantView: this.form.get('canGrantView')?.value as GroupPermissions['canGrantView'],\r\n      canWatch: this.form.get('canWatch')?.value as GroupPermissions['canWatch'],\r\n      canEdit: this.form.get('canEdit')?.value as GroupPermissions['canEdit'],\r\n      canMakeSessionOfficial: this.form.get('canMakeSessionOfficial')?.value as GroupPermissions['canMakeSessionOfficial'],\r\n      isOwner: this.form.get('isOwner')?.value as GroupPermissions['isOwner'],\r\n    };\r\n\r\n    this.save.emit(groupPermissions);\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancel.emit();\r\n  }\r\n}\r\n","import { ValidationErrors, ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { GroupPermissions } from 'src/app/shared/http-services/group-permissions.service';\r\nimport { ItemCorePerm } from 'src/app/shared/models/domain/item-permissions';\r\nimport { TypeFilter } from './composition-filter';\r\nimport {\r\n  validateCanView,\r\n  validateCanGrantView,\r\n  validateCanWatch,\r\n  validateCanEdit,\r\n  validateIsOwner,\r\n  validateCanMakeSessionOfficial,\r\n  ConstrainedPermissions,\r\n  ConstraintError\r\n} from './item-permissions-constraints';\r\nimport { generateErrorMessage } from './permissions-string';\r\n\r\n\r\nexport function permissionsConstraintsValidator(\r\n  giverPermissions: ItemCorePerm,\r\n  targetType: TypeFilter\r\n): ValidatorFn {\r\n\r\n  const formatValidationError = (permission: keyof ConstrainedPermissions) =>\r\n    (constraintErrors: ConstraintError[]): { [key: string]: string[] } => {\r\n      const e = constraintErrors.map(generateErrorMessage(targetType));\r\n      return e.length ? { [permission]: e } : {};\r\n    };\r\n\r\n\r\n  return (group: AbstractControl): ValidationErrors | null => {\r\n\r\n    const value: GroupPermissions = {\r\n      canView: group.get('canView')?.value as GroupPermissions['canView'],\r\n      canGrantView: group.get('canGrantView')?.value as GroupPermissions['canGrantView'],\r\n      canWatch: group.get('canWatch')?.value as GroupPermissions['canWatch'],\r\n      canEdit: group.get('canEdit')?.value as GroupPermissions['canEdit'],\r\n      canMakeSessionOfficial: group.get('canMakeSessionOfficial')?.value as GroupPermissions['canMakeSessionOfficial'],\r\n      isOwner: group.get('isOwner')?.value as GroupPermissions['isOwner'],\r\n      canEnterFrom: new Date(),\r\n      canEnterUntil: new Date(),\r\n    };\r\n\r\n    let errors: ValidationErrors = {\r\n      ...formatValidationError('canView')(validateCanView(value, giverPermissions)),\r\n      ...formatValidationError('canGrantView')(validateCanGrantView(value, giverPermissions)),\r\n      ...formatValidationError('canWatch')(validateCanWatch(value, giverPermissions)),\r\n      ...formatValidationError('canEdit')(validateCanEdit(value, giverPermissions)),\r\n    };\r\n\r\n    if (group.get('isOwner')?.dirty) {\r\n      errors = { ...errors, ...formatValidationError('isOwner')(validateIsOwner(value, giverPermissions)) };\r\n    }\r\n    if (group.get('canMakeSessionOfficial')?.dirty) {\r\n      errors = { ...errors, ...formatValidationError('canMakeSessionOfficial')(validateCanMakeSessionOfficial(value, giverPermissions)) };\r\n    }\r\n\r\n    return Object.keys(errors).length > 0 ? errors : null;\r\n  };\r\n}\r\n","<p-dialog\r\n  [visible]=\"true\"\r\n  [modal]=\"true\"\r\n  [draggable]=\"false\"\r\n  [closable]=\"false\"\r\n  styleClass=\"alg-permissions-edit-dialog\"\r\n>\r\n  <p-header>\r\n    <div class=\"dialog-header\">\r\n      <span class=\"dialog-handler\">\r\n        <i class=\"fa fa-lock\"></i>\r\n      </span>\r\n      <span class=\"dialog-title\" i18n>Permission editor</span>\r\n      <span class=\"dialog-close\" (click)=\"onCancel()\">\r\n        <img src=\"assets/images/close.svg\" alt=\"close\">\r\n      </span>\r\n    </div>\r\n  </p-header>\r\n\r\n  <alg-error\r\n    i18n-message message=\"User permissions cannot be changed via this page for the moment\"\r\n    *ngIf=\"group.isUser && !sourceGroup; else stateBlock\"\r\n  ></alg-error>\r\n\r\n  <ng-template #stateBlock>\r\n    <ng-container *ngIf=\"state$ | async as state\">\r\n      <alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n      <alg-error *ngIf=\"state.isError\">\r\n        <span class=\"error-message\" i18n>The permissions cannot be retrieved.</span>\r\n        <span i18n=\"@@contactUs\">If the problem persists, please contact us.</span>\r\n      </alg-error>\r\n\r\n      <div class=\"dialog-container\" *ngIf=\"state.isReady\">\r\n        <div class=\"dialog-content\">\r\n          <alg-permissions-edit-form\r\n            (save)=\"onPermissionsDialogSave($event)\"\r\n            (cancel)=\"onCancel()\"\r\n            [targetType]=\"targetType\"\r\n            [permissions]=\"state.data.granted\"\r\n            [computedPermissions]=\"state.data.computed\"\r\n            [giverPermissions]=\"currentUserPermissions\"\r\n            [acceptButtonDisabled]=\"updateInProcess\"\r\n          ></alg-permissions-edit-form>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  </ng-template>\r\n</p-dialog>\r\n\r\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output } from '@angular/core';\r\nimport { ItemCorePerm } from 'src/app/shared/models/domain/item-permissions';\r\nimport { RawGroupRoute } from '../../../../shared/routing/group-route';\r\nimport { GroupPermissions, GroupPermissionsService } from '../../../../shared/http-services/group-permissions.service';\r\nimport { ReplaySubject, switchMap } from 'rxjs';\r\nimport { shareReplay } from 'rxjs/operators';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { TypeFilter } from '../../helpers/composition-filter';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\n\r\n@Component({\r\n  selector: 'alg-permissions-edit-dialog[currentUserPermissions][item][group]',\r\n  templateUrl: './permissions-edit-dialog.component.html',\r\n  styleUrls: [ './permissions-edit-dialog.component.scss' ]\r\n})\r\nexport class PermissionsEditDialogComponent implements OnDestroy, OnChanges {\r\n  @Output() close = new EventEmitter<boolean>();\r\n\r\n  @Input() currentUserPermissions!: ItemCorePerm;\r\n  @Input() item!: { id: string, string: { title: string | null } };\r\n  @Input() group!: RawGroupRoute;\r\n  @Input() sourceGroup?: RawGroupRoute;\r\n\r\n  private params$ = new ReplaySubject<{ sourceGroupId: string, groupId: string, itemId: string }>(1);\r\n  state$ = this.params$.pipe(\r\n    switchMap(params =>\r\n      this.groupPermissionsService.getPermissions(params.sourceGroupId, params.groupId, params.itemId)\r\n    ),\r\n    mapToFetchState(),\r\n    shareReplay(1),\r\n  );\r\n\r\n  permissions?: Omit<GroupPermissions,'canEnterFrom'|'canEnterUntil'>;\r\n  updateInProcess = false;\r\n  targetType: TypeFilter = 'Users';\r\n\r\n  constructor(\r\n    private groupPermissionsService: GroupPermissionsService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.params$.complete();\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.group.isUser && !this.sourceGroup) {\r\n      return;\r\n    }\r\n\r\n    if (this.sourceGroup?.isUser) {\r\n      throw new Error('Unexpected: Source group must not be a user');\r\n    }\r\n\r\n    this.targetType = this.group.isUser ? 'Users' : 'Groups';\r\n    this.params$.next({\r\n      sourceGroupId: this.sourceGroup?.id ?? this.group.id,\r\n      groupId: this.group.id,\r\n      itemId: this.item.id,\r\n    });\r\n  }\r\n\r\n  onPermissionsDialogSave(permissions: Partial<GroupPermissions>): void {\r\n    if (this.sourceGroup?.isUser) {\r\n      throw new Error('Unexpected: Source group must not be a user');\r\n    }\r\n\r\n    if (this.group.isUser && !this.sourceGroup) {\r\n      throw new Error('Unexpected: A user group must be provided with source group');\r\n    }\r\n\r\n    this.updateInProcess = true;\r\n    this.groupPermissionsService.updatePermissions(\r\n      this.sourceGroup?.id ?? this.group.id,\r\n      this.group.id,\r\n      this.item.id,\r\n      permissions,\r\n    )\r\n      .subscribe({\r\n        next: () => {\r\n          this.updateInProcess = false;\r\n          this.actionFeedbackService.success($localize`:@@permissionsUpdated:Permissions successfully updated.`);\r\n          this.closeDialog(true);\r\n        },\r\n        error: err => {\r\n          this.updateInProcess = false;\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        },\r\n      });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.closeDialog();\r\n  }\r\n\r\n  closeDialog(changed = false): void {\r\n    this.close.emit(changed);\r\n  }\r\n}\r\n","<p-overlayPanel #panel appendTo=\"body\" styleClass=\"user-progress-overlay-panel\" hideTransitionOptions=\"0s\">\r\n  <ng-template pTemplate>\r\n    <div class=\"user-progress-info\">\r\n      <div class=\"content validated\">\r\n        <ng-container *ngIf=\"progress && (progress.timeSpent > 0 || progress.score > 0); else notStarted\">\r\n          <span>\r\n            <i class=\"fa fa-clock\"></i>\r\n            <span class=\"menu-label\" i18n>Time spent</span>\r\n            <span class=\"menu-value\">{{ progress.timeSpent | duration }}</span>\r\n          </span>\r\n          <span class=\"score\" *ngIf=\"!progress.validated\">\r\n            <alg-score-ring\r\n              [isDark]=\"true\"\r\n              [currentScore]=\"progress.score\"\r\n              [diameter]=\"32\"\r\n            ></alg-score-ring>\r\n            <span class=\"situation-check\" *ngIf=\"progress.validated\">\r\n              <i class=\"fa fa-check\"></i>\r\n            </span>\r\n          </span>\r\n        </ng-container>\r\n        <ng-template #notStarted>\r\n          <span class=\"not-started\" i18n=\"In progress matrix, explanation when cell is empty\">Not started</span>\r\n        </ng-template>\r\n        <span\r\n          *ngIf=\"canEditPermissions\"\r\n          class=\"clickable\"\r\n          (click)=\"editPermissions.emit()\"\r\n          >\r\n          <i class=\"fa fa-lock\"></i>\r\n          <span i18n>ACCESS</span>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</p-overlayPanel>\r\n","import { AfterViewInit, SimpleChanges } from '@angular/core';\r\nimport { Component, EventEmitter, Input, Output, ViewChild, OnChanges } from '@angular/core';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { delay, take } from 'rxjs';\r\nimport { TeamUserProgress } from 'src/app/shared/http-services/get-group-progress.service';\r\n\r\nexport interface ProgressData {\r\n  progress: TeamUserProgress,\r\n  target: Element,\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-user-progress-details',\r\n  templateUrl: './user-progress-details.component.html',\r\n  styleUrls: [ './user-progress-details.component.scss' ],\r\n})\r\nexport class UserProgressDetailsComponent implements OnChanges, AfterViewInit {\r\n\r\n  @Input() progressData?: ProgressData;\r\n  @Input() canEditPermissions?: boolean;\r\n\r\n  @Output() editPermissions = new EventEmitter<void>();\r\n  @Output() hide = new EventEmitter<void>();\r\n\r\n  @ViewChild('panel') panel?: OverlayPanel;\r\n\r\n  progress?: ProgressData['progress'];\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.progressData) this.showOverlay();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.progressData && !changes.progressData.firstChange) {\r\n      this.progress = this.progressData?.progress;\r\n      this.toggleOverlay();\r\n    }\r\n  }\r\n\r\n  private toggleOverlay(): void {\r\n    const shouldReopen = this.panel?.overlayVisible && !!this.progressData;\r\n    if (shouldReopen) return this.reopenOverlay();\r\n    this.progressData ? this.showOverlay() : this.hideOverlay();\r\n  }\r\n\r\n  private showOverlay(): void {\r\n    if (!this.panel) throw new Error('panel not available');\r\n    if (!this.progressData) throw new Error('no progress to render');\r\n    this.panel.show(null, this.progressData.target);\r\n  }\r\n\r\n  private hideOverlay(): void {\r\n    if (!this.panel) throw new Error('panel not available');\r\n    this.panel.hide();\r\n  }\r\n\r\n  private reopenOverlay(): void {\r\n    if (!this.panel) throw new Error('no panel available');\r\n    this.panel.onHide.pipe(delay(0), take(1)).subscribe(() => this.showOverlay());\r\n    this.hideOverlay();\r\n  }\r\n\r\n}\r\n","<alg-composition-filter\r\n  [defaultValue]=\"defaultFilter\"\r\n  (change)=\"onFilterChange($event)\"\r\n></alg-composition-filter>\r\n\r\n<ng-container *ngIf=\"columns$ | async as columnsState\">\r\n  <ng-container *ngIf=\"rows$ | async as rowsState\">\r\n    <alg-error\r\n      *ngIf=\"rowsState.isError || columnsState.isError; else noError\"\r\n      class=\"dark\"\r\n      i18n-message message=\"Error while loading the data\"\r\n      icon=\"fa fa-exclamation-triangle\"\r\n      [showRefreshButton]=\"true\"\r\n      (refresh)=\"fetchRows()\"\r\n    ></alg-error>\r\n\r\n    <ng-template #noError>\r\n      <div class=\"loader\" *ngIf=\"rowsState.isFetching && (!rowsState.data || rowsState.data.length === 0)\">\r\n        <alg-loading></alg-loading>\r\n      </div>\r\n\r\n      <p class=\"empty-message\" *ngIf=\"rowsState.isReady && rowsState.data.length === 0\">\r\n        <ng-container [ngSwitch]=\"currentFilter\">\r\n          <span *ngSwitchCase=\"'Users'\" i18n>This group has no users</span>\r\n          <span *ngSwitchCase=\"'Teams'\" i18n>This group has no teams</span>\r\n          <span *ngSwitchCase=\"'Groups'\" i18n>This group has no sub-groups</span>\r\n        </ng-container>\r\n        <p-button icon=\"pi pi-refresh\" (click)=\"fetchRows()\" styleClass=\"p-button-sm\"></p-button>\r\n      </p>\r\n\r\n      <alg-user-progress-details\r\n        [canEditPermissions]=\"canAccess\"\r\n        [progressData]=\"progressOverlay\"\r\n        (hide)=\"hideProgressDetail()\"\r\n        (editPermissions)=\"onAccessPermissions()\"\r\n      ></alg-user-progress-details>\r\n\r\n      <ng-container *ngIf=\"rowsState.data && columnsState.data && rowsState.data.length > 0\">\r\n        <div class=\"operations\">\r\n          <button\r\n            pButton\r\n            type=\"button\"\r\n            i18n-label label=\"Export as CSV\"\r\n            icon=\"fa fa-file-download\"\r\n            class=\"p-button-sm\"\r\n            (click)=\"onCSVExport()\"\r\n            [disabled]=\"isCSVDataFetching\"\r\n          ></button>\r\n        </div>\r\n\r\n        <p-table #table\r\n          [columns]=\"columnsState.data\"\r\n          [value]=\"rowsState.data\"\r\n          class=\"slanted-grid\"\r\n          [rowTrackBy]=\"trackByRow\"\r\n          [loading]=\"rowsState.isFetching\"\r\n        >\r\n          <ng-template pTemplate=\"header\" let-columns>\r\n            <tr>\r\n              <th class=\"empty first header-refresh\">\r\n                <p-button icon=\"pi pi-refresh\" (click)=\"fetchRows()\"></p-button>\r\n              </th>\r\n              <th *ngFor=\"let col of columns\">\r\n                <div class=\"slanted-header\">\r\n                  <div class=\"slanted-header-content\" pTooltip=\"{{ col.title }}\" tooltipPosition=\"top\" [showDelay]=\"100\">\r\n                    <span class=\"slanted-header-link alg-link cursor-pointer\" (click)=\"navigateToItem(col)\">{{ col.title }}</span>\r\n                  </div>\r\n                </div>\r\n              </th>\r\n              <th class=\"empty last\"></th>\r\n            </tr>\r\n          </ng-template>\r\n          <ng-template\r\n            pTemplate=\"body\"\r\n            let-row\r\n            let-columns=\"columns\"\r\n          >\r\n            <tr>\r\n              <td class=\"users\" pTooltip=\"{{ row.header }}\" tooltipPosition=\"left\" [showDelay]=\"100\">\r\n                <span class=\"alg-link cursor-pointer\" (click)=\"navigateToGroup(row)\">{{ row.header }}</span>\r\n              </td>\r\n              <td\r\n                class=\"cursor-pointer user-progress\"\r\n                *ngFor=\"let col of columns; let colIndex = index\"\r\n                (click)=\"showProgressDetail(overlayTarget, row.data[colIndex], row, col)\"\r\n              >\r\n                <alg-user-progress\r\n                  *ngIf=\"row.data[colIndex]\"\r\n                  [userProgress]=\"row.data[colIndex]\"\r\n                ></alg-user-progress>\r\n                <div class=\"overlay-target\">\r\n                  <span class=\"overlay-position\" #overlayTarget></span>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </ng-template>\r\n          <ng-template pTemplate=\"footer\">\r\n            <tr *ngIf=\"currentFilter === 'Users' && (datapager.canLoadMore$ | async)\">\r\n              <td [colSpan]=\"columnsState.data.length + 1\">\r\n                <div class=\"text-center\">\r\n                  <button\r\n                    pButton\r\n                    class=\"p-button-rounded\"\r\n                    i18n-label label=\"Load more\"\r\n                    (click)=\"fetchMoreRows()\"\r\n                    [disabled]=\"rowsState.isFetching\"\r\n                  ></button>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </ng-template>\r\n        </p-table>\r\n      </ng-container>\r\n\r\n      <alg-permissions-edit-dialog\r\n        [currentUserPermissions]=\"itemData.item.permissions\"\r\n        [item]=\"progressDataDialog.item\"\r\n        [group]=\"progressDataDialog.group\"\r\n        [sourceGroup]=\"sourceGroup\"\r\n        (close)=\"onDialogClose()\"\r\n        *ngIf=\"isPermissionsDialogOpened && itemData && progressDataDialog && sourceGroup\"\r\n      ></alg-permissions-edit-dialog>\r\n    </ng-template>\r\n  </ng-container>\r\n</ng-container>\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { forkJoin, Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { combineLatestWith, map, shareReplay, switchMap } from 'rxjs/operators';\r\nimport { canCurrentUserGrantGroupAccess } from 'src/app/modules/group/helpers/group-management';\r\nimport { Group } from 'src/app/modules/group/http-services/get-group-by-id.service';\r\nimport { GetGroupChildrenService } from 'src/app/modules/group/http-services/get-group-children.service';\r\nimport { formatUser } from 'src/app/shared/helpers/user';\r\nimport { GetGroupDescendantsService } from 'src/app/shared/http-services/get-group-descendants.service';\r\nimport { GetGroupProgressService, TeamUserProgress } from 'src/app/shared/http-services/get-group-progress.service';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { TypeFilter } from '../../helpers/composition-filter';\r\nimport { GetItemChildrenService } from '../../http-services/get-item-children.service';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { ProgressCSVService } from '../../../../shared/http-services/progress-csv.service';\r\nimport { downloadFile } from '../../../../shared/helpers/download-file';\r\nimport { typeCategoryOfItem } from '../../../../shared/helpers/item-type';\r\nimport { ItemRouter } from '../../../../shared/routing/item-router';\r\nimport { GroupRouter } from '../../../../shared/routing/group-router';\r\nimport { RawGroupRoute, rawGroupRoute } from '../../../../shared/routing/group-route';\r\nimport { ProgressData } from '../../components/user-progress-details/user-progress-details.component';\r\nimport { DataPager } from 'src/app/shared/helpers/data-pager';\r\nimport { mapToFetchState, readyData } from 'src/app/shared/operators/state';\r\nimport { FetchState } from 'src/app/shared/helpers/state';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { allowsGivingPermToItem } from 'src/app/shared/models/domain/item-permissions';\r\n\r\nconst progressListLimit = 25;\r\n\r\ninterface DataRow {\r\n  header: string,\r\n  id: string,\r\n  data: (TeamUserProgress|undefined)[],\r\n}\r\ninterface DataColumn {\r\n  id: string,\r\n  title: string|null,\r\n}\r\ninterface DataFetching {\r\n  groupId: string,\r\n  itemId: string,\r\n  filter: TypeFilter,\r\n  fromId?: string,\r\n  pageSize: number,\r\n}\r\n\r\ninterface ProgressDataDialog {\r\n  item: {\r\n    id: string,\r\n    string: {\r\n      title: string | null,\r\n    },\r\n  },\r\n  group: RawGroupRoute,\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-group-progress-grid',\r\n  templateUrl: './group-progress-grid.component.html',\r\n  styleUrls: [ './group-progress-grid.component.scss' ]\r\n})\r\nexport class GroupProgressGridComponent implements OnChanges {\r\n\r\n  @Input() group?: Group;\r\n  @Input() itemData?: ItemData;\r\n\r\n  defaultFilter: TypeFilter = 'Users';\r\n\r\n  currentFilter = this.defaultFilter;\r\n\r\n  progressOverlay?: ProgressData;\r\n  progressDataDialog?: ProgressDataDialog;\r\n  sourceGroup?: RawGroupRoute;\r\n\r\n  isPermissionsDialogOpened = false;\r\n\r\n  isCSVDataFetching = false;\r\n  canAccess = false;\r\n\r\n  private itemData$ = new ReplaySubject<ItemData>(1);\r\n  private refresh$ = new Subject<void>();\r\n  // columns containing results, including the first \"chapter summary\" one\r\n  readonly columns$: Observable<FetchState<DataColumn[]>> = this.itemData$.pipe(\r\n    switchMap(itemData => this.getColumns(itemData)),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n    shareReplay(1),\r\n  );\r\n\r\n  readonly datapager = new DataPager<DataRow>({\r\n    pageSize: progressListLimit,\r\n    fetch: (pageSize, latestRow?: DataRow): Observable<DataRow[]> => {\r\n      if (!this.group || !this.itemData) throw new Error('properties are missing');\r\n      return this.getRowsWithProgress({\r\n        groupId: this.group.id,\r\n        itemId: this.itemData.item.id,\r\n        filter: this.currentFilter,\r\n        fromId: latestRow?.id,\r\n        pageSize,\r\n      });\r\n    },\r\n    onLoadMoreError: (): void => {\r\n      this.actionFeedbackService.error($localize`Could not load more results, are you connected to the internet?`);\r\n    },\r\n  });\r\n\r\n  rows$ = this.datapager.list$;\r\n\r\n  constructor(\r\n    private getItemChildrenService: GetItemChildrenService,\r\n    private getGroupDescendantsService: GetGroupDescendantsService,\r\n    private getGroupUsersProgressService: GetGroupProgressService,\r\n    private getGroupChildrenService: GetGroupChildrenService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private progressCSVService: ProgressCSVService,\r\n    private itemRouter: ItemRouter,\r\n    private groupRouter: GroupRouter,\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this.isPermissionsDialogOpened = false;\r\n    if (changes.itemData && this.itemData) this.itemData$.next(this.itemData);\r\n    if (this.group) {\r\n      this.fetchRows();\r\n      this.sourceGroup = rawGroupRoute(this.group);\r\n    }\r\n    this.canAccess = !!(this.group && canCurrentUserGrantGroupAccess(this.group)\r\n      && this.itemData && allowsGivingPermToItem(this.itemData.item.permissions));\r\n  }\r\n\r\n  trackByRow(_index: number, row: DataRow): string {\r\n    return row.id;\r\n  }\r\n\r\n  showProgressDetail(target: HTMLElement, userProgress: TeamUserProgress, row: DataRow, col: DataColumn): void {\r\n    this.progressOverlay = {\r\n      target,\r\n      progress: userProgress,\r\n    };\r\n    this.progressDataDialog = {\r\n      item: {\r\n        id: col.id,\r\n        string: {\r\n          title: row.header,\r\n        },\r\n      },\r\n      group: rawGroupRoute({ id: row.id, isUser: this.currentFilter === 'Users' }),\r\n    };\r\n  }\r\n\r\n  hideProgressDetail(): void {\r\n    this.progressOverlay = undefined;\r\n  }\r\n\r\n  fetchRows(): void {\r\n    this.datapager.reset();\r\n    this.refresh$.next(); // refreshes the columns.\r\n    this.fetchMoreRows();\r\n  }\r\n\r\n  private getProgress({ itemId, groupId, filter, pageSize, fromId }: DataFetching): Observable<TeamUserProgress[]> {\r\n    switch (filter) {\r\n      case 'Users':\r\n        return this.getGroupUsersProgressService.getUsersProgress(groupId, [ itemId ], { limit: pageSize, fromId });\r\n      case 'Teams':\r\n        return this.getGroupUsersProgressService.getTeamsProgress(groupId, [ itemId ]);\r\n      case 'Groups':\r\n        return this.getGroupUsersProgressService.getGroupsProgress(groupId, [ itemId ])\r\n          .pipe(map(groupsProgress => groupsProgress.map(m => ({\r\n            groupId: m.groupId,\r\n            itemId: m.itemId,\r\n            validated: m.validationRate === 1,\r\n            score: m.averageScore,\r\n            timeSpent: m.avgTimeSpent,\r\n            hintsRequested: m.avgHintsRequested,\r\n            submissions: m.avgSubmissions,\r\n            latestActivityAt: null,\r\n          }))));\r\n    }\r\n  }\r\n\r\n  private getRows({ groupId, filter, pageSize, fromId }: Omit<DataFetching, 'itemId'>): Observable<{id :string, value: string}[]> {\r\n    switch (filter) {\r\n      case 'Users':\r\n        return this.getGroupDescendantsService.getUserDescendants(groupId, { limit: pageSize, fromId })\r\n          .pipe(map(users => users.map(user => ({ id: user.id, value: formatUser(user.user) }))));\r\n      case 'Teams':\r\n        return this.getGroupDescendantsService.getTeamDescendants(groupId)\r\n          .pipe(map(teams => teams.map(team => ({ id: team.id, value: team.name }))));\r\n      case 'Groups':\r\n        return this.getGroupChildrenService.getGroupChildren(groupId, [], [], [ 'Team', 'User' ])\r\n          .pipe(map(groups => groups.map(group => ({ id: group.id, value: group.name }))));\r\n    }\r\n  }\r\n\r\n  private getRowsWithProgress({ itemId, groupId, filter, fromId, pageSize }: DataFetching): Observable<DataRow[]> {\r\n    return forkJoin({\r\n      rows: this.getRows({ groupId, filter, pageSize, fromId }),\r\n      progress: this.getProgress({ itemId, groupId, filter, pageSize, fromId }),\r\n    }).pipe(\r\n      combineLatestWith(this.columns$.pipe(readyData())),\r\n      map(([{ rows, progress }, items ]) =>\r\n        rows\r\n          .filter(row => progress.find(progress => progress.groupId === row.id)) // only keep rows with a defined progress\r\n          .map(row => ({\r\n            header: row.value,\r\n            id: row.id,\r\n            data: items.map(item =>\r\n              progress.find(progress => progress.itemId === item.id && progress.groupId === row.id)\r\n            ),\r\n          })),\r\n      )\r\n    );\r\n  }\r\n\r\n  onFilterChange(typeFilter: TypeFilter): void {\r\n    if (typeFilter !== this.currentFilter) {\r\n      this.currentFilter = typeFilter;\r\n      this.fetchRows();\r\n    }\r\n  }\r\n\r\n  fetchMoreRows(): void {\r\n    this.datapager.load();\r\n  }\r\n\r\n  onAccessPermissions(): void {\r\n    this.hideProgressDetail();\r\n    this.isPermissionsDialogOpened = true;\r\n  }\r\n\r\n  onDialogClose(): void {\r\n    this.isPermissionsDialogOpened = false;\r\n    this.progressDataDialog = undefined;\r\n  }\r\n\r\n  getCSVDownloadTypeByFilter(): 'group' | 'team' | 'user' {\r\n    switch (this.currentFilter) {\r\n      case 'Groups':\r\n        return 'group';\r\n      case 'Users':\r\n        return 'user';\r\n      case 'Teams':\r\n        return 'team';\r\n    }\r\n  }\r\n\r\n  onCSVExport(): void {\r\n    if (!this.group || !this.itemData) {\r\n      throw new Error('Unexpected: input component params is required');\r\n    }\r\n\r\n    const parentItemId = this.itemData.item.id;\r\n    const downloadDataType = this.getCSVDownloadTypeByFilter();\r\n\r\n    this.isCSVDataFetching = true;\r\n    this.progressCSVService\r\n      .getCSVData(this.group.id, downloadDataType, [ parentItemId ])\r\n      .subscribe({\r\n        next: data => {\r\n          this.isCSVDataFetching = false;\r\n          downloadFile([ data ], `${parentItemId}-${new Date().toDateString()}.csv`, 'text/csv');\r\n        },\r\n        error: err => {\r\n          this.isCSVDataFetching = false;\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        },\r\n      });\r\n  }\r\n\r\n  navigateToItem(item: { id: string, title: string | null }): void {\r\n    if (!this.itemData) {\r\n      throw new Error('Unexpected: Missed input itemData of component');\r\n    }\r\n\r\n    const parentAttemptId = this.itemData.currentResult?.attemptId;\r\n\r\n    if (!parentAttemptId) throw new Error('Unexpected: Children have been loaded, so we are sure this item has an attempt');\r\n\r\n    this.itemRouter.navigateTo({\r\n      contentType: typeCategoryOfItem(this.itemData.item),\r\n      id: item.id,\r\n      path: this.itemData.route.path.concat([ this.itemData.item.id ]),\r\n      parentAttemptId,\r\n    });\r\n  }\r\n\r\n  navigateToGroup(row: { header: string, id: string, data: (TeamUserProgress|undefined)[] }): void {\r\n    this.groupRouter.navigateTo(rawGroupRoute({ id: row.id, isUser: this.currentFilter === 'Users' }));\r\n  }\r\n\r\n  private getColumns(itemData: ItemData): Observable<DataColumn[]> {\r\n    if (!itemData.currentResult?.attemptId) throw new Error('unexpected');\r\n    return this.getItemChildrenService.get(itemData.item.id, itemData.currentResult.attemptId).pipe(\r\n      map(items => [\r\n        {\r\n          id: itemData.item.id,\r\n          title: itemData.item.string.title,\r\n        },\r\n        ...items.map(item => ({\r\n          id: item.id,\r\n          title: item.string.title,\r\n        }))\r\n      ]),\r\n    );\r\n  }\r\n}\r\n","export function downloadFile(data: BlobPart[], fileName: string, type: string): void {\r\n  const file = new Blob(data, { type });\r\n  const a = document.createElement('a');\r\n  a.href = URL.createObjectURL(file);\r\n  a.download = fileName;\r\n  a.click();\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-group-progress-grid\r\n    *ngIf=\"state.isReady\"\r\n    [itemData]=\"itemData\"\r\n    [group]=\"state.data\"\r\n  >\r\n  </alg-group-progress-grid>\r\n\r\n  <div class=\"spinner\" *ngIf=\"state.isFetching\">\r\n    <alg-loading size=\"medium\"></alg-loading>\r\n  </div>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    i18n-message message=\"Error while loading the group progress\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n\r\n</ng-container>\r\n\r\n\r\n","import { Component, Input, OnDestroy } from '@angular/core';\r\nimport { switchMap, filter } from 'rxjs/operators';\r\nimport { GetGroupByIdService } from 'src/app/modules/group/http-services/get-group-by-id.service';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { isNotNull } from '../../../../shared/helpers/null-undefined-predicates';\r\nimport { Subject } from 'rxjs';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\n\r\n@Component({\r\n  selector: 'alg-chapter-group-progress',\r\n  templateUrl: './chapter-group-progress.component.html',\r\n  styleUrls: [ './chapter-group-progress.component.scss' ]\r\n})\r\nexport class ChapterGroupProgressComponent implements OnDestroy {\r\n\r\n  @Input() itemData?: ItemData;\r\n\r\n  private refresh$ = new Subject<void>();\r\n  state$ = this.groupWatchingService.watchedGroup$.pipe(\r\n    filter(isNotNull),\r\n    switchMap(watchedGroup => this.getGroupByIdService.get(watchedGroup.route.id)),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private groupWatchingService: GroupWatchingService,\r\n    private getGroupByIdService: GetGroupByIdService,\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { dateDecoder } from 'src/app/shared/helpers/decoders';\r\nimport { itemCorePermDecoder } from 'src/app/shared/models/domain/item-permissions';\r\n\r\nconst participantProgressDecoder = D.struct({\r\n  children: D.array(D.struct({\r\n    currentUserPermissions: itemCorePermDecoder,\r\n    hintsRequested: D.number,\r\n    itemId: D.string,\r\n    latestActivityAt: D.nullable(dateDecoder),\r\n    noScore: D.boolean,\r\n    score: D.number,\r\n    string: D.struct({\r\n      languageTag: D.string,\r\n      title: D.nullable(D.string),\r\n    }),\r\n    submissions: D.number,\r\n    timeSpent: D.number,\r\n    type: D.literal('Chapter', 'Task', 'Course', 'Skill'),\r\n    validated: D.boolean,\r\n  })),\r\n  item: D.struct({\r\n    hintsRequested: D.number,\r\n    itemId: D.string,\r\n    latestActivityAt: D.nullable(dateDecoder),\r\n    score: D.number,\r\n    submissions: D.number,\r\n    timeSpent: D.number,\r\n    validated: D.boolean,\r\n  })\r\n});\r\n\r\nexport type ParticipantProgress = D.TypeOf<typeof participantProgressDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetParticipantProgressService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  get(id: string): Observable<ParticipantProgress> {\r\n    return this.http\r\n      .get<unknown[]>(`${appConfig.apiUrl}/items/${id}/participant-progress`)\r\n      .pipe(\r\n        decodeSnakeCase(participantProgressDecoder)\r\n      );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <div class=\"spinner\" *ngIf=\"state.isFetching && !state.data\">\r\n    <alg-loading size=\"medium\"></alg-loading>\r\n  </div>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    i18n-message message=\"Error while loading the user progress\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n\r\n  <div *ngIf=\"state.data\">\r\n    <p-table class=\"alg-table alg-table chapter-user-progress\" [columns]=\"columns\" [value]=\"state.data\" [loading]=\"state.isFetching\">\r\n      <ng-template pTemplate=\"header\" let-rowData let-columns>\r\n        <tr>\r\n          <th [colSpan]=\"columns.length\">\r\n            <div class=\"header-container header-refresh\">\r\n              <p-button icon=\"pi pi-refresh\" (click)=\"refresh()\"></p-button>\r\n            </div>\r\n          </th>\r\n        </tr>\r\n        <tr *ngIf=\"rowData.length > 0\">\r\n          <ng-container *ngFor=\"let col of columns\">\r\n            <th>\r\n              <div class=\"header-container\">\r\n                {{ col.header }}\r\n              </div>\r\n            </th>\r\n          </ng-container>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template\r\n          pTemplate=\"body\"\r\n          let-rowData\r\n          let-columns=\"columns\"\r\n      >\r\n        <tr>\r\n          <td *ngFor=\"let col of columns\">\r\n            <ng-container [ngSwitch]=\"col.field\">\r\n              <ng-container *ngSwitchCase=\"'title'\">\r\n                <a\r\n                  class=\"alg-link\"\r\n                  [ngClass]=\"{'disabled': rowData.id === itemData?.item?.id}\"\r\n                  (click)=\"onClick(rowData)\"\r\n                >\r\n                  {{ rowData.title }}\r\n                </a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'latestActivityAt'\">\r\n                {{ rowData.latestActivityAt | date:'short' }}\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'timeSpent'\">\r\n                {{ rowData.timeSpent | duration }}\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'score'\">\r\n                <div class=\"score-ring\">\r\n                  <alg-score-ring [diameter]=\"42\" [currentScore]=\"rowData.score\"></alg-score-ring>\r\n                </div>\r\n              </ng-container>\r\n              <ng-container *ngSwitchDefault>\r\n                {{ rowData[col.field] }}\r\n              </ng-container>\r\n            </ng-container>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"emptymessage\" let-columns>\r\n        <tr>\r\n          <td [attr.colspan]=\"columns.length\">\r\n            <span i18n>There is no progress to report for this group/user.</span>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </p-table>\r\n  </div>\r\n</ng-container>\r\n","import { Component, Input, OnChanges, OnDestroy } from '@angular/core';\r\nimport { GetParticipantProgressService } from '../../http-services/get-participant-progress.service';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { Item } from '../../http-services/get-item-by-id.service';\r\nimport { FetchState } from '../../../../shared/helpers/state';\r\nimport { ItemType, typeCategoryOfItem } from '../../../../shared/helpers/item-type';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { ItemRouter } from '../../../../shared/routing/item-router';\r\n\r\ninterface Column {\r\n  field: string,\r\n  header: string,\r\n}\r\n\r\ninterface RowData {\r\n  id: string,\r\n  type: ItemType,\r\n  title: string,\r\n  latestActivityAt: Date | null,\r\n  timeSpent: number,\r\n  submissions: number,\r\n  score: number,\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-chapter-user-progress',\r\n  templateUrl: './chapter-user-progress.component.html',\r\n  styleUrls: [ './chapter-user-progress.component.scss' ]\r\n})\r\nexport class ChapterUserProgressComponent implements OnChanges, OnDestroy {\r\n  @Input() itemData?: ItemData;\r\n\r\n  private readonly item$ = new ReplaySubject<Item>(1);\r\n  private readonly refresh$ = new Subject<void>();\r\n  state$: Observable<FetchState<RowData[]>> = this.item$.pipe(\r\n    switchMap(item =>\r\n      this.getParticipantProgressService.get(item.id).pipe(map(participantProgress => ([\r\n        {\r\n          id: item.id,\r\n          type: item.type,\r\n          title: item.string.title || '',\r\n          latestActivityAt: participantProgress.item.latestActivityAt,\r\n          timeSpent: participantProgress.item.timeSpent,\r\n          submissions: participantProgress.item.submissions,\r\n          score: participantProgress.item.score,\r\n        },\r\n        ...participantProgress.children.map(itemData => ({\r\n          id: itemData.itemId,\r\n          type: itemData.type,\r\n          title: itemData.string.title || '',\r\n          latestActivityAt: itemData.latestActivityAt,\r\n          timeSpent: itemData.timeSpent,\r\n          submissions: itemData.submissions,\r\n          score: itemData.score,\r\n        })),\r\n      ])))\r\n    ),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  columns: Column[] = [\r\n    {\r\n      field: 'title',\r\n      header: $localize`Content`,\r\n    },\r\n    {\r\n      field: 'latestActivityAt',\r\n      header: $localize`Latest activity`,\r\n    },\r\n    {\r\n      field: 'timeSpent',\r\n      header: $localize`Time spent`,\r\n    },\r\n    {\r\n      field: 'submissions',\r\n      header: $localize`:Truncated title (little space available) for 'number of submissions':# subm.`,\r\n    },\r\n    {\r\n      field: 'score',\r\n      header: $localize`Score`,\r\n    }\r\n  ];\r\n\r\n  constructor(\r\n    private getParticipantProgressService: GetParticipantProgressService,\r\n    private itemRouter: ItemRouter,\r\n  ) { }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.itemData) {\r\n      this.item$.next(this.itemData.item);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.item$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  onClick(rowData: RowData): void {\r\n    if (!this.itemData) {\r\n      throw new Error('Unexpected: Missed input itemData of component');\r\n    }\r\n\r\n    if (this.itemData.item.id === rowData.id) {\r\n      return;\r\n    }\r\n\r\n    const parentAttemptId = this.itemData.currentResult?.attemptId;\r\n\r\n    if (!parentAttemptId) throw new Error('Unexpected: Children have been loaded, so we are sure this item has an attempt');\r\n\r\n    this.itemRouter.navigateTo({\r\n      contentType: typeCategoryOfItem(rowData),\r\n      id: rowData.id,\r\n      path: this.itemData.route.path.concat([ this.itemData.item.id ]),\r\n      parentAttemptId,\r\n    });\r\n  }\r\n\r\n}\r\n","<ng-container *ngrxLet=\"isWatching$ as isWatching\">\r\n  <alg-section\r\n      icon=\"fa fa-list\"\r\n      *ngIf=\"itemData\"\r\n      [label]=\"(sectionLabel$ | async) || ''\"\r\n  >\r\n\r\n    <ng-container *ngIf=\"(!isWatching && (itemData.item.permissions | allowsViewingContent)) || (itemData.item.permissions | allowsWatchingResults) ; else unallowed\">\r\n\r\n      <ng-container *ngIf=\"selectors$ | async as selectors\">\r\n\r\n        <div [hidden]=\"selectors === 'none'\">\r\n          <div class=\"selection-center\">\r\n            <nav class=\"tab-rounded\">\r\n              <a class=\"tab-rounded-item\"\r\n                [ngClass]=\"{'active': !!historyTab.isActive, 'prev': !!chapterGroupProgressTab?.isActive || !!chapterUserProgressTab?.isActive}\"\r\n                [routerLink]=\"'./progress/history'\"\r\n                routerLinkActive #historyTab=\"routerLinkActive\"\r\n                i18n\r\n              >\r\n                History\r\n              </a>\r\n\r\n              <a class=\"tab-rounded-item\"\r\n                [ngClass]=\"{'active': !!chapterGroupProgressTab.isActive, 'prev': !!chapterUserProgressTab?.isActive}\"\r\n                [routerLink]=\"'./progress/chapter'\"\r\n                routerLinkActive #chapterGroupProgressTab=\"routerLinkActive\"\r\n                *ngIf=\"selectors === 'withGroupProgress'\"\r\n                i18n\r\n              >\r\n                Chapter view\r\n              </a>\r\n\r\n              <a class=\"tab-rounded-item\"\r\n                [ngClass]=\"{'active': !!chapterUserProgressTab?.isActive}\"\r\n                [routerLink]=\"'./progress/chapter-user-progress'\"\r\n                routerLinkActive #chapterUserProgressTab=\"routerLinkActive\"\r\n                *ngIf=\"selectors === 'withUserProgress'\"\r\n                i18n\r\n              >\r\n                Chapter view\r\n              </a>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"container\">\r\n          <div *ngIf=\"savingAnswer\" class=\"save-answer-loader\">\r\n            <p class=\"save-answer-loader-message\">\r\n              <span i18n>Saving answer before loading submission...</span>\r\n              <alg-loading size=\"medium\"></alg-loading>\r\n              <p-button type=\"button\" (click)=\"skipSave.emit()\" i18n-label label=\"Skip\"></p-button>\r\n            </p>\r\n          </div>\r\n\r\n          <alg-item-log-view\r\n            *ngIf=\"!!historyTab?.isActive\"\r\n            [itemData]=\"itemData\"\r\n            [isTaskReadOnly]=\"isTaskReadOnly\"\r\n          ></alg-item-log-view>\r\n\r\n          <div class=\"chapter-group-progress\">\r\n            <alg-chapter-group-progress\r\n              *ngIf=\"!!chapterGroupProgressTab?.isActive\"\r\n              [itemData]=\"itemData\"\r\n            ></alg-chapter-group-progress>\r\n          </div>\r\n\r\n          <alg-chapter-user-progress\r\n              *ngIf=\"!!chapterUserProgressTab?.isActive\"\r\n              [itemData]=\"itemData\"\r\n          ></alg-chapter-user-progress>\r\n        </div>\r\n\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-template #unallowed>\r\n      <p class=\"not-allow-caption\" *ngIf=\"isWatching\" i18n>You are not allowed to view the progress of other users on this content.</p>\r\n      <p class=\"not-allow-caption\" *ngIf=\"!isWatching\" i18n>You are not allowed to view this content.</p>\r\n    </ng-template>\r\n  </alg-section>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { RouterLinkActive } from '@angular/router';\r\nimport { isATask } from '../../../../shared/helpers/item-type';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { combineLatest, ReplaySubject } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'alg-item-progress',\r\n  templateUrl: './item-progress.component.html',\r\n  styleUrls: [ './item-progress.component.scss' ]\r\n})\r\nexport class ItemProgressComponent implements OnChanges {\r\n\r\n  @Input() itemData?: ItemData;\r\n  @Input() isTaskReadOnly = false;\r\n  @Input() savingAnswer = false;\r\n\r\n  @Output() skipSave = new EventEmitter<void>();\r\n\r\n  @ViewChild('historyTab') historyTab?: RouterLinkActive;\r\n  @ViewChild('chapterGroupProgressTab') chapterGroupProgressTab?: RouterLinkActive;\r\n  @ViewChild('chapterUserProgressTab') chapterUserProgressTab?: RouterLinkActive;\r\n\r\n  private itemData$ = new ReplaySubject<ItemData>();\r\n  selectors$ = combineLatest([ this.itemData$, this.groupWatchingService.watchedGroup$ ]).pipe(\r\n    map(([ itemData, watchedGroup ]) => {\r\n      if (!watchedGroup || watchedGroup.route.isUser) {\r\n        return isATask(itemData.item) ? 'none' : 'withUserProgress';\r\n      } else {\r\n        return 'withGroupProgress';\r\n      }\r\n    }),\r\n  );\r\n\r\n  sectionLabel$ = this.groupWatchingService.watchedGroup$.pipe(\r\n    map(g => (g ? $localize`Situation of ${ g.name }` : $localize`Your situation`))\r\n  );\r\n\r\n  isWatching$ = this.groupWatchingService.isWatching$;\r\n\r\n  constructor(\r\n    private groupWatchingService: GroupWatchingService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    if (this.itemData) this.itemData$.next(this.itemData);\r\n  }\r\n\r\n}\r\n","<div class=\"container\" *ngIf=\"author$ | async as author\">\r\n  <alg-loading *ngIf=\"author.isFetching && !author.data\" size=\"small\"></alg-loading>\r\n  <alg-error *ngIf=\"author.isError\" i18n-message message=\"Error while fetching author info\"></alg-error>\r\n\r\n  <div class=\"content\" *ngIf=\"author.isReady && author.data as author\" i18n>\r\n    Submitted by\r\n    <a [routerLink]=\"groupLink$ | async\" class=\"alg-link links\">{{ author | userCaption }}</a>\r\n    on {{ answer.createdAt | date:'short' }}.\r\n    <span *ngIf=\"answer.score || answer.score === 0\" class=\"score\">Score: {{ answer.score }} points.</span>\r\n  </div>\r\n</div>\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\r\nimport { GetUserService } from 'src/app/modules/group/http-services/get-user.service';\r\nimport { mapToFetchState, readyData } from 'src/app/shared/operators/state';\r\nimport { groupRoute } from 'src/app/shared/routing/group-route';\r\nimport { GroupRouter } from 'src/app/shared/routing/group-router';\r\nimport { Answer } from '../../http-services/get-answer.service';\r\n\r\n@Component({\r\n  selector: 'alg-answer-author-indicator[answer]',\r\n  templateUrl: './answer-author-indicator.component.html',\r\n  styleUrls: [ './answer-author-indicator.component.scss' ],\r\n})\r\nexport class AnswerAuthorIndicatorComponent implements OnChanges {\r\n\r\n  @Input() answer!: Answer;\r\n\r\n  private answer$ = new ReplaySubject<Answer>(1);\r\n  readonly author$ = this.answer$.pipe(\r\n    switchMap(answer => this.getUserService.getForId(answer.authorId)),\r\n    mapToFetchState(),\r\n    shareReplay(1),\r\n  );\r\n  readonly groupLink$ = this.author$.pipe(\r\n    readyData(),\r\n    map(user => this.groupRouter.urlArray(groupRoute({ id: user.groupId, isUser: true }, [])))\r\n  );\r\n\r\n  constructor(\r\n    private groupRouter: GroupRouter,\r\n    private getUserService: GetUserService,\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.answer) this.answer$.next(this.answer);\r\n  }\r\n}\r\n","<ng-container *ngIf=\"watchedGroup\">\r\n  <ng-container *ngIf=\"itemData\">\r\n    <alg-section-paragraph\r\n      [theme]=\"'warning'\"\r\n      icon=\"fa fa-flag\"\r\n      [collapsible]=\"true\"\r\n      [collapsed]=\"true\"\r\n    >\r\n      <ng-container *ngIf=\"watchedGroupPermissions; else noPermissionToWatchLabel\" label-section i18n>\r\n        «{{ watchedGroup.name }}»\r\n        {{ (watchedGroupPermissions | allowsViewingContent).toString() | i18nSelect : {\r\n          true: 'can',\r\n          other: 'can\\'t'\r\n        } }}\r\n        access this\r\n        {{ itemData.item.type | i18nSelect : {\r\n          Skill: 'skill',\r\n          other: 'activity'\r\n        } }}\r\n      </ng-container>\r\n\r\n      <ng-template #noPermissionToWatchLabel>\r\n        <ng-container i18n>You cannot watch this {{ itemData.item.type | i18nSelect : {\r\n            Skill: 'skill',\r\n            other: 'activity'\r\n          } }}\r\n        </ng-container>\r\n      </ng-template>\r\n\r\n      <ng-container *ngIf=\"watchedGroupPermissions; else noPermissionToWatchContent\">\r\n        <ng-container *ngIf=\"!(watchedGroupPermissions | allowsViewingInfo)\" i18n>\r\n          The {{ watchedGroup.route.isUser.toString() | i18nSelect : {\r\n            true: 'user',\r\n            other: 'group'\r\n          } }} cannot currently view this content.\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"(watchedGroupPermissions | allowsViewingInfo) && !(watchedGroupPermissions | allowsViewingContent)\" i18n>\r\n          The {{ watchedGroup.route.isUser.toString() | i18nSelect : {\r\n            true: 'user',\r\n            other: 'group'\r\n          } }}\r\n          can list this\r\n          {{ itemData.item.type | i18nSelect : {\r\n            Skill: 'skill',\r\n            other: 'activity'\r\n          } }}\r\n          but cannot\r\n          {{ ['Skill', 'Chapter'].includes(itemData.item.type).toString() | i18nSelect : {\r\n            true: 'list its content.',\r\n            other: 'view its content.'\r\n          } }}\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <ng-template #noPermissionToWatchContent>\r\n        <ng-container i18n>\r\n          You cannot view the results or submissions of the group\r\n        </ng-container>\r\n      </ng-template>\r\n\r\n      <ng-container *ngIf=\"watchedGroupPermissions\">\r\n        <div class=\"permission-indicator-section\">\r\n          <alg-section-header\r\n            i18n-title title=\"Can view\"\r\n            icon=\"fa fa-eye\"\r\n            theme=\"warning\"\r\n          >\r\n            <ng-template #content>\r\n              <alg-progress-select\r\n                [collapsed]=\"true\"\r\n                [(ngModel)]=\"watchedGroupPermissions.canView\"\r\n                [values]=\"canViewValues\"\r\n                theme=\"warning\"\r\n              ></alg-progress-select>\r\n            </ng-template>\r\n          </alg-section-header>\r\n        </div>\r\n\r\n        <div class=\"text-center note-caption\" *ngIf=\"!watchedGroup.route.isUser\" i18n>\r\n          Note that some subgroups or users of the groups may have higher permissions.\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"itemData?.item?.permissions\">\r\n          <div class=\"give-access-button\">\r\n            <span\r\n              [pTooltip]=\"lockEdit | i18nSelect : {\r\n                content: 'You are not allowed to give permissions on this content',\r\n                group: 'You are not allowed to give permissions to this group',\r\n                contentGroup: 'You are not allowed to give permissions on this content and to this group'\r\n              }\"\r\n              tooltipPosition=\"bottom\"\r\n              tooltipStyleClass=\"permissions-dialog\"\r\n              [tooltipDisabled]=\"!lockEdit\"\r\n            >\r\n             <button\r\n               pButton\r\n               type=\"button\"\r\n               class=\"alg-button p-button-rounded-full p-button-warning\"\r\n               i18n-label label=\"Edit permissions\"\r\n               [disabled]=\"lockEdit\"\r\n               (click)=\"openPermissionsDialog()\"\r\n             ></button>\r\n            </span>\r\n          </div>\r\n\r\n          <alg-permissions-edit-dialog\r\n            [currentUserPermissions]=\"itemData.item.permissions\"\r\n            [item]=\"itemData.item\"\r\n            [group]=\"watchedGroup.route\"\r\n            (close)=\"closePermissionsDialog($event)\"\r\n            *ngIf=\"isPermissionsDialogOpened\"\r\n          ></alg-permissions-edit-dialog>\r\n        </ng-container>\r\n      </ng-container>\r\n    </alg-section-paragraph>\r\n  </ng-container>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { WatchedGroup } from 'src/app/core/services/group-watching.service';\r\nimport {\r\n  ProgressSelectValue\r\n} from '../../../shared-components/components/collapsible-section/progress-select/progress-select.component';\r\nimport { generateCanViewValues } from '../../helpers/permissions-texts';\r\nimport { allowsGivingPermToItem, ItemCorePerm, ItemOwnerPerm, ItemSessionPerm } from 'src/app/shared/models/domain/item-permissions';\r\n\r\n@Component({\r\n  selector: 'alg-item-permissions',\r\n  templateUrl: './item-permissions.component.html',\r\n  styleUrls: [ './item-permissions.component.scss' ],\r\n})\r\nexport class ItemPermissionsComponent implements OnChanges {\r\n  @Output() changed = new EventEmitter<void>();\r\n\r\n  @Input() itemData?: ItemData;\r\n  @Input() watchedGroup?: WatchedGroup;\r\n\r\n  canViewValues: ProgressSelectValue<string>[] = generateCanViewValues('Groups');\r\n  isPermissionsDialogOpened = false;\r\n  watchedGroupPermissions?: ItemCorePerm & ItemOwnerPerm & ItemSessionPerm;\r\n  lockEdit?: 'content' | 'group' | 'contentGroup';\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    this.watchedGroupPermissions = this.itemData?.item?.watchedGroup?.permissions ? {\r\n      ...this.itemData.item.watchedGroup.permissions,\r\n      canMakeSessionOfficial: false,\r\n    } : undefined;\r\n\r\n    const currentUserCanGrantAccess = this.watchedGroup?.currentUserCanGrantAccess;\r\n    const currentUserCanGivePermissions = this.itemData && allowsGivingPermToItem(this.itemData.item.permissions);\r\n\r\n    this.lockEdit = currentUserCanGrantAccess && !currentUserCanGivePermissions ? 'content' :\r\n      !currentUserCanGrantAccess && currentUserCanGivePermissions ? 'group' :\r\n        !currentUserCanGrantAccess && !currentUserCanGivePermissions ? 'contentGroup' : undefined;\r\n  }\r\n\r\n  openPermissionsDialog(): void {\r\n    this.isPermissionsDialogOpened = true;\r\n  }\r\n\r\n  closePermissionsDialog(changed: boolean): void {\r\n    this.isPermissionsDialogOpened = false;\r\n    if (changed) {\r\n      this.changed.emit();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { assertSuccess, SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AddItemPrerequisiteService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  create(dependentItemId: string, prerequisiteItemId: string): Observable<void> {\r\n    return this.http\r\n      .post<SimpleActionResponse>(`${appConfig.apiUrl}/items/${ dependentItemId }/prerequisites/${ prerequisiteItemId }`, {\r\n        grant_content_view: true,\r\n      })\r\n      .pipe(map(assertSuccess));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { assertSuccess, SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RemoveItemPrerequisiteService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  delete(dependentItemId: string, prerequisiteItemId: string): Observable<void> {\r\n    return this.http.delete<SimpleActionResponse>(`${appConfig.apiUrl}/items/${dependentItemId}/prerequisites/${prerequisiteItemId}`).pipe(\r\n      map(assertSuccess),\r\n    );\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { AddedContent, NewContentType } from '../../../shared-components/components/add-content/add-content.component';\r\nimport { getAllowedNewItemTypes } from '../../../../shared/helpers/new-item-types';\r\nimport { ItemType } from '../../../../shared/helpers/item-type';\r\nimport { Observable } from 'rxjs';\r\nimport { SearchItemService } from '../../http-services/search-item.service';\r\n\r\n@Component({\r\n  selector: 'alg-add-dependency',\r\n  templateUrl: './add-dependency.component.html',\r\n  styleUrls: [ './add-dependency.component.scss' ]\r\n})\r\nexport class AddDependencyComponent implements OnChanges {\r\n  @Input() allowSkills = false;\r\n  @Input() addedIds: string[] = [];\r\n  @Output() contentAdded = new EventEmitter<AddedContent<ItemType>>();\r\n\r\n  allowedNewItemTypes: NewContentType<ItemType>[] = [];\r\n\r\n  searchFunction = (value: string): Observable<AddedContent<ItemType>[]> =>\r\n    this.searchItemService.search(value, getAllowedNewItemTypes(this.allowSkills).map(item => item.type));\r\n\r\n  constructor(\r\n    private searchItemService: SearchItemService\r\n  ) {}\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    this.allowedNewItemTypes = getAllowedNewItemTypes(this.allowSkills);\r\n  }\r\n\r\n  addDependency(item: AddedContent<ItemType>): void {\r\n    this.contentAdded.emit(item);\r\n  }\r\n}\r\n","<alg-section icon=\"pi pi-plus\" i18n-label label=\"Create a new dependency\">\r\n  <alg-add-content\r\n    [allowedTypesForNewContent]=\"allowedNewItemTypes\"\r\n    [searchFunction]=\"searchFunction\"\r\n    [addedIds]=\"addedIds\"\r\n    [loading]=\"false\"\r\n    [showCreateUI]=\"false\"\r\n    (contentAdded)=\"addDependency($event)\"\r\n    i18n-inputCreatePlaceholder inputCreatePlaceholder=\"Enter a title to create a new dependency\"\r\n  ></alg-add-content>\r\n</alg-section>\r\n","<ng-container *ngIf=\"itemData\">\r\n  <alg-section icon=\"fa fa-list\" i18n-label label=\"Prerequisites\">\r\n    <ng-container *ngIf=\"['all','all_with_grant'].includes(itemData.item.permissions.canEdit); else notAllowToView\">\r\n      <div *ngIf=\"state$ | async as state\">\r\n        <alg-loading size=\"medium\" *ngIf=\"state.isFetching || changeInProgress\"></alg-loading>\r\n\r\n        <alg-error\r\n          *ngIf=\"state.isError\"\r\n          class=\"dark\"\r\n          icon=\"fa fa-exclamation-triangle\"\r\n          i18n-message message=\"Unable to load the dependencies\"\r\n          [showRefreshButton]=\"true\"\r\n          (refresh)=\"refresh()\"\r\n        ></alg-error>\r\n\r\n        <ng-container *ngIf=\"!state.isFetching && !changeInProgress && state.data\">\r\n          <ng-container *ngIf=\"state.data.length > 0; else emptyList\">\r\n            <p class=\"explanation\" i18n>\r\n              Users will unlock access to this content if they solve <strong>at least one</strong> of the content below.\r\n            </p>\r\n            <ul class=\"list\">\r\n              <li\r\n                class=\"list-item\"\r\n                *ngFor=\"let item of state.data; let i = index\"\r\n                (mouseleave)=\"onMouseLeave($event)\"\r\n              >\r\n                <a\r\n                  class=\"alg-link\"\r\n                  [routerLink]=\"item | rawItemLink\"\r\n                  (mouseenter)=\"onMouseEnter($event, item.id, i)\"\r\n                  #contentRef\r\n                >\r\n                  {{ item.string.title }}\r\n                </a>\r\n                <button\r\n                  pButton\r\n                  type=\"button\"\r\n                  icon=\"fa fa-trash-alt\"\r\n                  class=\"p-button-text\"\r\n                  (click)=\"onRemove(item.id)\"\r\n                ></button>\r\n              </li>\r\n            </ul>\r\n            <p class=\"note-caption\" i18n>\r\n              Users will see the list of dependencies on the \"content\" tab and only when they do not have access to the content yet.\r\n              They will only see dependencies they are allowed to view already.\r\n            </p>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n    </ng-container>\r\n  </alg-section>\r\n\r\n  <ng-container *ngIf=\"addedIds$ | async as addedIds\">\r\n    <alg-add-dependency\r\n      *ngIf=\"['all','all_with_grant'].includes(itemData.item.permissions.canEdit)\"\r\n      (contentAdded)=\"onAdd($event)\"\r\n      [addedIds]=\"addedIds\"\r\n    ></alg-add-dependency>\r\n  </ng-container>\r\n\r\n  <ng-template #emptyList>\r\n    <p class=\"alg-error-text\" i18n>\r\n      There are no prerequisites for this\r\n      {{ itemData.item.type | i18nSelect : {\r\n        Skill: 'skill',\r\n        other: 'activity'\r\n      } }}.\r\n      Users will have access to it only if they are given access manually or if the \"default access\" is configured as\r\n      \"open\" in its parent\r\n      {{ itemData.item.type | i18nSelect : {\r\n        Skill: 'skill',\r\n        Chapter: 'chapter',\r\n        other: 'activity'\r\n    } }}.\r\n    </p>\r\n  </ng-template>\r\n\r\n  <ng-template #notAllowToView>\r\n    <div class=\"alg-error-text\" i18n>You are not allowed to view dependencies for this content</div>\r\n  </ng-template>\r\n\r\n  <p-overlayPanel\r\n    styleClass=\"alg-path-suggestion-overlay\"\r\n    #op\r\n  >\r\n    <ng-container *ngIf=\"op.overlayVisible\">\r\n      <alg-path-suggestion [itemId]=\"(showOverlay$ | async)?.itemId\" (mouseleave)=\"closeOverlay()\"></alg-path-suggestion>\r\n    </ng-container>\r\n  </p-overlayPanel>\r\n</ng-container>\r\n","import { Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { GetItemPrerequisitesService } from '../../http-services/get-item-prerequisites.service';\r\nimport { BehaviorSubject, debounceTime, merge, ReplaySubject, Subject, switchMap } from 'rxjs';\r\nimport { mapToFetchState, readyData } from '../../../../shared/operators/state';\r\nimport { distinctUntilChanged, filter, map, share, shareReplay } from 'rxjs/operators';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { ItemData } from '../../services/item-datasource.service';\r\nimport { canCloseOverlay } from '../../../../shared/helpers/overlay';\r\nimport { AddedContent } from '../../../shared-components/components/add-content/add-content.component';\r\nimport { ItemType } from '../../../../shared/helpers/item-type';\r\nimport { AddItemPrerequisiteService } from '../../http-services/add-item-prerequisite.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { RemoveItemPrerequisiteService } from '../../http-services/remove-item-prerequisite.service';\r\n\r\n@Component({\r\n  selector: 'alg-item-dependencies',\r\n  templateUrl: './item-dependencies.component.html',\r\n  styleUrls: [ './item-dependencies.component.scss' ],\r\n})\r\nexport class ItemDependenciesComponent implements OnChanges, OnDestroy {\r\n  @Input() itemData?: ItemData;\r\n\r\n  @ViewChild('op') op?: OverlayPanel;\r\n  @ViewChildren('contentRef') contentRef?: QueryList<ElementRef<HTMLElement>>;\r\n\r\n  private readonly itemId$ = new ReplaySubject<string>(1);\r\n  private readonly refresh$ = new Subject<void>();\r\n\r\n  state$ = this.itemId$.pipe(\r\n    switchMap(itemId => this.getItemPrerequisitesService.get(itemId)),\r\n    map(items => items.filter(item => item.dependencyGrantContentView)),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n    share(),\r\n  );\r\n  addedIds$ = this.state$.pipe(readyData(), map(data => data.map(dependency => dependency.id)));\r\n  private readonly showOverlaySubject$ = new BehaviorSubject<{ event: Event, itemId: string, target: HTMLElement }|undefined>(undefined);\r\n  showOverlay$ = merge(\r\n    this.showOverlaySubject$.pipe(debounceTime(750)),\r\n    this.showOverlaySubject$.pipe(filter(value => !value)), // this allows to close the overlay immediately and not after debounce delay\r\n  ).pipe(distinctUntilChanged(), shareReplay(1));\r\n\r\n  private readonly showOverlaySubscription = this.showOverlay$.subscribe(data => {\r\n    data ? this.op?.toggle(data.event, data.target) : this.op?.hide();\r\n  });\r\n\r\n\r\n  changeInProgress = false;\r\n\r\n  constructor(\r\n    private getItemPrerequisitesService: GetItemPrerequisitesService,\r\n    private addItemPrerequisiteService: AddItemPrerequisiteService,\r\n    private removeItemPrerequisiteService: RemoveItemPrerequisiteService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.itemData) {\r\n      this.itemId$.next(this.itemData.item.id);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.itemId$.complete();\r\n    this.showOverlaySubject$.complete();\r\n    this.refresh$.complete();\r\n    this.showOverlaySubscription.unsubscribe();\r\n  }\r\n\r\n  onMouseEnter(event: Event, itemId: string, index: number): void {\r\n    const targetRef = this.contentRef?.get(index);\r\n    if (!targetRef) {\r\n      throw new Error('Unexpected: Target is not found');\r\n    }\r\n    this.showOverlaySubject$.next({ event, itemId, target: targetRef.nativeElement });\r\n  }\r\n\r\n  onMouseLeave(event: MouseEvent): void {\r\n    if (canCloseOverlay(event)) {\r\n      this.closeOverlay();\r\n    }\r\n  }\r\n\r\n  closeOverlay(): void {\r\n    this.showOverlaySubject$.next(undefined);\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  onAdd(item: AddedContent<ItemType>): void {\r\n    if (!item.id) {\r\n      throw new Error('Unexpected: item id is missing');\r\n    }\r\n    const dependentItemId = this.itemData?.item.id;\r\n    if (!dependentItemId) {\r\n      throw new Error('Unexpected: dependent item id is missing');\r\n    }\r\n    this.changeInProgress = true;\r\n    this.addItemPrerequisiteService.create(dependentItemId, item.id).subscribe({\r\n      next: () => {\r\n        this.changeInProgress = false;\r\n        this.actionFeedbackService.success('The new dependency has been added');\r\n        this.refresh();\r\n      },\r\n      error: err => {\r\n        this.changeInProgress = false;\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n  onRemove(id: string): void {\r\n    const dependentItemId = this.itemData?.item.id;\r\n    if (!dependentItemId) {\r\n      throw new Error('Unexpected: Missed dependent item id');\r\n    }\r\n    this.changeInProgress = true;\r\n    this.removeItemPrerequisiteService.delete(dependentItemId, id).subscribe({\r\n      next: () => {\r\n        this.changeInProgress = false;\r\n        this.actionFeedbackService.success('The dependency has been removed');\r\n        this.refresh();\r\n      },\r\n      error: err => {\r\n        this.changeInProgress = false;\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"itemData$ | async as state\">\r\n\r\n  <ng-container *ngIf=\"state.isReady && state.data as itemData\">\r\n\r\n    <ng-container *ngIf=\"taskTabs$ | async as taskTabs\">\r\n      <alg-item-header [itemData]=\"itemData\" *ngIf=\"!(fullFrame$ | async)?.active\"></alg-item-header>\r\n\r\n      <alg-access-code-view\r\n        *ngIf=\"showAccessCodeField$ | async\"\r\n        i18n-sectionLabel sectionLabel=\"Access to activity\"\r\n        i18n-buttonLabel=\"Button label for joining an item by (group) code\" buttonLabel=\"Access\"\r\n        [itemData]=\"itemData\"\r\n        (groupJoined)=\"reloadItem()\"\r\n      ></alg-access-code-view>\r\n\r\n      <alg-item-permissions\r\n        *ngIf=\"watchedGroup$ | async as watchedGroup\"\r\n        [itemData]=\"itemData\"\r\n        [watchedGroup]=\"watchedGroup\"\r\n        (changed)=\"reloadItem()\"\r\n      ></alg-item-permissions>\r\n\r\n      <nav class=\"nav-tab\" [hidden]=\"!(showProgressTab$ | async) && taskTabs.length <= 1 && !(itemData.item.permissions | allowsEditingAll) && !progressTab.isActive && !dependenciesTab.isActive && !parametersTab.isActive\">\r\n        <a\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./'\"\r\n          routerLinkActive #contentTab=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored' }\"\r\n          [class.active]=\"contentTab.isActive\"\r\n          [hidden]=\"taskTabs.length > 1 || editChildrenTab.isActive\"\r\n          i18n\r\n        >\r\n          Content\r\n        </a>\r\n        <a\r\n            class=\"nav-tab-item\"\r\n            [routerLink]=\"'./edit-children'\"\r\n            routerLinkActive #editChildrenTab=\"routerLinkActive\"\r\n            [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored' }\"\r\n            [class.active]=\"editChildrenTab.isActive\"\r\n            [hidden]=\"taskTabs.length > 1 || !editChildrenTab.isActive\"\r\n            i18n\r\n        >\r\n          Content\r\n        </a>\r\n        <ng-container *ngIf=\"taskTabs.length > 1\">\r\n          <a\r\n            *ngFor=\"let tab of taskTabs\"\r\n            class=\"nav-tab-item cursor-pointer\"\r\n            [routerLink]=\"'./'\"\r\n            [class.active]=\"contentTab.isActive && tab.view === taskView\"\r\n            (click)=\"setTaskTabActive(tab)\"\r\n          >\r\n            {{ tab.name }}\r\n          </a>\r\n        </ng-container>\r\n        <a\r\n          [hidden]=\"!(showProgressTab$ | async) && !progressTab.isActive\"\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./progress'\"\r\n          routerLinkActive #progressTab=\"routerLinkActive\"\r\n          [class.active]=\"progressTab?.isActive\"\r\n        >\r\n          <i class=\"fa fa-chart-line\"></i>\r\n          &nbsp;\r\n          <span i18n>Progress</span>\r\n        </a>\r\n        <a\r\n          [hidden]=\"!(itemData.item.permissions | allowsEditingAll) && !dependenciesTab.isActive\"\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./dependencies'\"\r\n          routerLinkActive #dependenciesTab=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored' }\"\r\n          [class.active]=\"dependenciesTab.isActive\"\r\n        >\r\n          <span i18n>Dependencies</span>\r\n        </a>\r\n        <a\r\n            [hidden]=\"!(itemData.item.permissions | allowsEditingAll) && !parametersTab.isActive\"\r\n            class=\"nav-tab-item\"\r\n            [routerLink]=\"'./parameters'\"\r\n            routerLinkActive #parametersTab=\"routerLinkActive\"\r\n            [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n            [class.active]=\"parametersTab.isActive\"\r\n        >\r\n          <span i18n>Parameters</span>\r\n        </a>\r\n      </nav>\r\n      <div class=\"bg-white\" [ngClass]=\"{ 'compensate-margin': !(showProgressTab$ | async) && taskTabs.length <= 1 && !(itemData.item.permissions | allowsEditingAll) }\">\r\n        <alg-error\r\n          *ngIf=\"unknownError\"\r\n          [message]=\"errorMessage\"\r\n        ></alg-error>\r\n\r\n        <ng-container *ngIf=\"contentTab.isActive || editChildrenTab.isActive || taskTabs.length > 0\">\r\n          <alg-error *ngIf=\"answerFallbackLink$ | async as fallbackLink\">\r\n            <ng-container *ngIf=\"(taskReadOnly$ | async); else fallback\" i18n>Unable to load the answer</ng-container>\r\n            <ng-template #fallback>\r\n              <ng-container i18n>\r\n                Unable to load the answer, <a [routerLink]=\"fallbackLink\" class=\"alg-link\">load your most recent answer</a>\r\n              </ng-container>\r\n            </ng-template>\r\n          </alg-error>\r\n\r\n          <ng-container *ngIf=\"taskConfig$ | async as taskConfig\">\r\n            <div *ngIf=\"taskConfig.readOnly && contentTab.isActive\" class=\"indicator\">\r\n              <alg-answer-author-indicator *ngIf=\"taskConfig.formerAnswer\" [answer]=\"taskConfig.formerAnswer\"></alg-answer-author-indicator>\r\n            </div>\r\n            <alg-item-content\r\n              [hidden]=\"!contentTab.isActive && !editChildrenTab.isActive\"\r\n              [itemData]=\"itemData\"\r\n              [taskConfig]=\"taskConfig\"\r\n              [savingAnswer]=\"(savingAnswer$ | async) ?? false\"\r\n              [(taskView)]=\"taskView\"\r\n              [editModeEnabled]=\"editChildrenTab.isActive\"\r\n              (taskTabsChange)=\"setTaskTabs($event)\"\r\n              (scoreChange)=\"patchStateWithScore($event)\"\r\n              (skipSave)=\"skipBeforeUnload()\"\r\n              (refresh)=\"reloadItem()\"\r\n            ></alg-item-content>\r\n          </ng-container>\r\n        </ng-container>\r\n        <alg-item-progress\r\n          *ngIf=\"progressTab?.isActive\"\r\n          [itemData]=\"itemData\"\r\n          [isTaskReadOnly]=\"(taskReadOnly$ | async) ?? false\"\r\n          [savingAnswer]=\"(savingAnswer$ | async) ?? false\"\r\n          (skipSave)=\"skipBeforeUnload()\"\r\n        ></alg-item-progress>\r\n\r\n        <ng-container *ngIf=\"dependenciesTab.isActive\">\r\n          <alg-item-dependencies [itemData]=\"itemData\"></alg-item-dependencies>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"parametersTab.isActive\">\r\n          <alg-item-edit-wrapper [itemData]=\"itemData\"></alg-item-edit-wrapper>\r\n        </ng-container>\r\n      </div>\r\n    </ng-container>\r\n\r\n  </ng-container>\r\n\r\n</ng-container>\r\n\r\n<p-dialog\r\n  *ngIf=\"saveBeforeUnloadError$ | async\"\r\n  [visible]=\"true\"\r\n  [modal]=\"true\"\r\n  [closeOnEscape]=\"false\"\r\n  [closable]=\"false\"\r\n  i18n-header header=\"Leave unsaved task\"\r\n>\r\n  <p i18n>You do not appear to be connected to the Internet, if you leave this task you may loose your progress. Are you sure you want to continue?</p>\r\n  <ng-template pTemplate=\"footer\">\r\n    <button\r\n      pButton\r\n      class=\"p-button-danger\"\r\n      i18n-label label=\"Loose progress and leave the task\"\r\n      (click)=\"skipBeforeUnload()\"\r\n    ></button>\r\n    <button\r\n      pButton\r\n      i18n-label label=\"Retry\"\r\n      (click)=\"retryBeforeUnload()\"\r\n    ></button>\r\n  </ng-template>\r\n</p-dialog>\r\n","import { Component, OnDestroy, ViewChild } from '@angular/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { ItemDataSource } from '../../services/item-datasource.service';\r\nimport { mapStateData, readyData } from 'src/app/shared/operators/state';\r\nimport { LayoutService } from '../../../../shared/services/layout.service';\r\nimport { Router, RouterLinkActive } from '@angular/router';\r\nimport { TaskTab } from '../item-display/item-display.component';\r\nimport { combineLatest, EMPTY, fromEvent, merge, Observable, of, ReplaySubject, Subject } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  distinctUntilChanged,\r\n  filter,\r\n  map,\r\n  mergeWith,\r\n  shareReplay,\r\n  switchMap,\r\n  take,\r\n  takeUntil,\r\n} from 'rxjs/operators';\r\nimport { TaskConfig } from '../../services/item-task.service';\r\nimport { BeforeUnloadComponent } from 'src/app/shared/guards/before-unload-guard';\r\nimport { ItemContentComponent } from '../item-content/item-content.component';\r\nimport { errorIsHTTPForbidden } from 'src/app/shared/helpers/errors';\r\nimport { urlArrayForItemRoute } from 'src/app/shared/routing/item-route';\r\nimport { GetAnswerService } from '../../http-services/get-answer.service';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\nimport { isTask } from 'src/app/shared/helpers/item-type';\r\nimport { PendingChangesComponent } from '../../../../shared/guards/pending-changes-guard';\r\nimport {\r\n  allowsViewingContent,\r\n  canCurrentUserViewContent,\r\n  canCurrentUserViewSolution,\r\n} from 'src/app/shared/models/domain/item-view-permission';\r\nimport { ItemEditWrapperComponent } from '../../components/item-edit-wrapper/item-edit-wrapper.component';\r\nimport { allowsWatchingResults } from 'src/app/shared/models/domain/item-watch-permission';\r\n\r\nconst loadForbiddenAnswerError = new Error('load answer forbidden');\r\n\r\n@Component({\r\n  selector: 'alg-item-details',\r\n  templateUrl: './item-details.component.html',\r\n  styleUrls: [ './item-details.component.scss' ],\r\n})\r\nexport class ItemDetailsComponent implements OnDestroy, BeforeUnloadComponent, PendingChangesComponent {\r\n  @ViewChild('progressTab') progressTab?: RouterLinkActive;\r\n  @ViewChild(ItemContentComponent) itemContentComponent?: ItemContentComponent;\r\n  @ViewChild(ItemEditWrapperComponent) itemEditWrapperComponent?: ItemEditWrapperComponent;\r\n\r\n  itemData$ = this.itemDataSource.state$;\r\n\r\n  showAccessCodeField$ = this.itemData$.pipe(\r\n    mapStateData(data =>\r\n      data.item.promptToJoinGroupByCode && !canCurrentUserViewContent(data.item) && !this.userService.isCurrentUserTemp()\r\n    ),\r\n    map(state => state.isReady && state.data),\r\n  );\r\n\r\n  private tabs = new ReplaySubject<TaskTab[]>(1);\r\n  tabs$ = combineLatest([ this.tabs, this.itemData$.pipe(readyData()) ]).pipe(\r\n    map(([ tabs, data ]) => (\r\n      canCurrentUserViewSolution(data.item, data.currentResult) ? tabs : tabs.filter(tab => tab.view !== 'solution')\r\n    )),\r\n    map(tabs => tabs.filter(tab => !appConfig.featureFlags.hideTaskTabs.includes(tab.view))),\r\n    shareReplay(1),\r\n  );\r\n  readonly taskTabs$ = this.tabs$.pipe(map(tabs => tabs.filter(tab => tab.view !== 'progress')));\r\n  readonly showProgressTab$ = combineLatest([ this.itemData$.pipe(readyData()), this.groupWatchingService.isWatching$, this.tabs$ ]).pipe(\r\n    map(([ itemData, isWatching, tabs ]) =>\r\n      (!isWatching && allowsViewingContent(itemData.item.permissions) && tabs.some(tab => tab.view === 'progress')) ||\r\n      (isWatching && allowsWatchingResults(itemData.item.permissions))\r\n    ),\r\n  );\r\n  taskView?: TaskTab['view'];\r\n\r\n  readonly fullFrame$ = this.layoutService.fullFrame$;\r\n  readonly watchedGroup$ = this.groupWatchingService.watchedGroup$;\r\n\r\n  unknownError?: Error;\r\n\r\n  readonly formerAnswer$ = this.itemData$.pipe(\r\n    map(state => state.data?.route.answerId),\r\n    distinctUntilChanged(),\r\n    switchMap(answerId => (answerId ? this.getAnswerService.get(answerId) : of(null))),\r\n    shareReplay(1),\r\n  );\r\n\r\n  readonly formerAnswerError$ = this.formerAnswer$.pipe(\r\n    catchError(error => {\r\n      if (errorIsHTTPForbidden(error)) return of(loadForbiddenAnswerError);\r\n      return of(error instanceof Error ? error : new Error('unknown error'));\r\n    }),\r\n    filter((error): error is Error => error instanceof Error),\r\n  );\r\n  readonly formerAnswerLoadForbidden$ = this.formerAnswerError$.pipe(filter(error => error === loadForbiddenAnswerError));\r\n  readonly answerFallbackLink$ = combineLatest([ this.itemData$.pipe(readyData()), this.formerAnswerLoadForbidden$ ]).pipe(\r\n    map(([{ route }]) => urlArrayForItemRoute({ ...route, attemptId: undefined, parentAttemptId: undefined, answerId: undefined })),\r\n  );\r\n\r\n  readonly taskReadOnly$ = this.groupWatchingService.isWatching$;\r\n  readonly taskConfig$: Observable<TaskConfig> = combineLatest([\r\n    this.formerAnswer$.pipe(catchError(() => EMPTY)), // error is handled by formerAnswerError$\r\n    this.taskReadOnly$,\r\n    this.itemData$.pipe(readyData()),\r\n  ]).pipe(map(([ formerAnswer, readOnly, data ]) => ({ readOnly, formerAnswer, locale: data.item.string.languageTag })));\r\n\r\n  // Any value emitted in skipBeforeUnload$ resumes navigation WITHOUT cancelling the save request.\r\n  private skipBeforeUnload$ = new Subject<void>();\r\n  private retryBeforeUnload$ = new Subject<void>();\r\n  private beforeUnload$ = new Subject<void>();\r\n  private saveBeforeUnload$: Observable<{ saving: boolean, error?: Error }> = merge(this.beforeUnload$, this.retryBeforeUnload$).pipe(\r\n    switchMap(() => {\r\n      if (!this.itemContentComponent?.itemDisplayComponent) return of({ saving: false });\r\n      return this.itemContentComponent.itemDisplayComponent.saveAnswerAndState().pipe(\r\n        catchError(() => of({ saving: false, error: new Error('fail') })),\r\n      );\r\n    }),\r\n    takeUntil(this.skipBeforeUnload$),\r\n    mergeWith(this.skipBeforeUnload$.pipe(map(() => ({ saving: false })))),\r\n    shareReplay(1),\r\n  );\r\n  // When navigating elsewhere but the current answer is unsaved, navigation is blocked until the save is performed.\r\n  // savingAnswer$ indicates the loading state while blocking navigation because of the save request.\r\n  readonly savingAnswer$ = this.saveBeforeUnload$.pipe(map(({ saving }) => saving));\r\n  readonly saveBeforeUnloadError$ = this.saveBeforeUnload$.pipe(map(({ error }) => error));\r\n\r\n  private subscriptions = [\r\n    this.itemDataSource.state$.pipe(\r\n      // submission reloads the item data. Here we handle the progress tab existence only when the item loads, not when it reloads.\r\n      distinctUntilChanged((a, b) => a.data?.route.id === b.data?.route.id),\r\n    ).subscribe(state => {\r\n      // reset tabs when item changes. By default do not display it unless we currently are on progress page\r\n      if (state.isFetching) this.tabs.next(this.showTaskTab() ? [] : [{ view: 'progress', name: 'Progress' }]);\r\n      // update tabs when item is fetched\r\n      // Case 1: item is not a task: display the progress tab anyway\r\n      // Case 2: item is a task: delegate tab display to item task service, start with no tabs\r\n      if (state.isReady) this.tabs.next(isTask(state.data.item) && this.showTaskTab() ? [] : [{ view: 'progress', name: 'Progress' }]);\r\n    }),\r\n    fromEvent<BeforeUnloadEvent>(globalThis, 'beforeunload', { capture: true })\r\n      .pipe(switchMap(() => this.itemContentComponent?.itemDisplayComponent?.saveAnswerAndState() ?? of(undefined)), take(1))\r\n      .subscribe({\r\n        error: () => { /* Errors cannot be handled before unloading page. */ },\r\n      }),\r\n    this.formerAnswerError$.subscribe(caught => {\r\n      if (caught !== loadForbiddenAnswerError) this.unknownError = caught;\r\n    }),\r\n  ];\r\n\r\n  errorMessage = $localize`:@@unknownError:An unknown error occurred. ` +\r\n    $localize`:@@contactUs:If the problem persists, please contact us.`;\r\n\r\n  isDirty(): boolean {\r\n    return !!this.itemContentComponent?.isDirty() || !!this.itemEditWrapperComponent?.isDirty();\r\n  }\r\n\r\n  constructor(\r\n    private userService: UserSessionService,\r\n    private groupWatchingService: GroupWatchingService,\r\n    private itemDataSource: ItemDataSource,\r\n    private layoutService: LayoutService,\r\n    private getAnswerService: GetAnswerService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.tabs.complete();\r\n  }\r\n\r\n  reloadItem(): void {\r\n    this.itemDataSource.refreshItem();\r\n  }\r\n\r\n  patchStateWithScore(score: number): void {\r\n    this.itemDataSource.patchItemScore(score);\r\n  }\r\n\r\n  setTaskTabs(tabs: TaskTab[]): void {\r\n    this.tabs.next(tabs);\r\n    if (tabs.every(tab => tab.view !== this.taskView)) this.taskView = tabs[0]?.view;\r\n  }\r\n\r\n  setTaskTabActive(tab: TaskTab): void {\r\n    this.taskView = tab.view;\r\n  }\r\n\r\n  beforeUnload(): Observable<boolean> {\r\n    this.beforeUnload$.next();\r\n    return this.saveBeforeUnload$.pipe(\r\n      map(({ saving, error }) => !saving && !error),\r\n      filter(saved => saved),\r\n      take(1),\r\n    );\r\n  }\r\n\r\n  retryBeforeUnload(): void {\r\n    this.retryBeforeUnload$.next();\r\n  }\r\n\r\n  skipBeforeUnload(): void {\r\n    this.skipBeforeUnload$.next();\r\n  }\r\n\r\n  private showTaskTab(): boolean {\r\n    return !this.isProgressPage() && !this.isDependenciesPage() && !this.isParametersPage();\r\n  }\r\n\r\n  private isProgressPage(): boolean {\r\n    return this.router.url.includes('/progress/');\r\n  }\r\n\r\n  private isDependenciesPage(): boolean {\r\n    return this.router.url.includes('/dependencies');\r\n  }\r\n\r\n  private isParametersPage(): boolean {\r\n    return this.router.url.includes('/parameters');\r\n  }\r\n\r\n}\r\n","import { merge } from './merge';\nexport function mergeWith(...otherSources) {\n    return merge(...otherSources);\n}\n","import { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mergeAll } from './mergeAll';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from '../observable/from';\nexport function merge(...args) {\n    const scheduler = popScheduler(args);\n    const concurrent = popNumber(args, Infinity);\n    args = argsOrArgArray(args);\n    return operate((source, subscriber) => {\n        mergeAll(concurrent)(from([source, ...args], scheduler)).subscribe(subscriber);\n    });\n}\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { BeforeUnloadGuard } from 'src/app/shared/guards/before-unload-guard';\r\nimport { PendingChangesGuard } from 'src/app/shared/guards/pending-changes-guard';\r\nimport { ItemByIdComponent } from './pages/item-by-id/item-by-id.component';\r\nimport { ItemDetailsComponent } from './pages/item-details/item-details.component';\r\nimport { ItemEditComponent } from './pages/item-edit/item-edit.component';\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forChild([\r\n    {\r\n      path: 'by-id/:id',\r\n      component: ItemByIdComponent,\r\n      children: [\r\n        { path: '', redirectTo: 'details', pathMatch: 'full' },\r\n        {\r\n          path: 'details',\r\n          component: ItemDetailsComponent,\r\n          canDeactivate: [ BeforeUnloadGuard, PendingChangesGuard ],\r\n          // Children below do not use routing but there are defined here so that the router can validate the route exists\r\n          children: [\r\n            { path: '', pathMatch: 'full', children: [] },\r\n            {\r\n              path: 'edit-children',\r\n              canDeactivate: [ PendingChangesGuard ],\r\n              children: [],\r\n            },\r\n            {\r\n              path: 'parameters',\r\n              canDeactivate: [ PendingChangesGuard ],\r\n              children: [],\r\n            },\r\n            {\r\n              path: 'progress',\r\n              children: [\r\n                {\r\n                  path: '',\r\n                  redirectTo: 'history',\r\n                  pathMatch: 'full',\r\n                },\r\n                {\r\n                  path: 'history',\r\n                  children: [],\r\n                },\r\n                {\r\n                  path: 'chapter',\r\n                  children: [],\r\n                },\r\n                {\r\n                  path: 'chapter-user-progress',\r\n                  children: [],\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              path: 'dependencies',\r\n              children: [],\r\n            },\r\n          ]\r\n        },\r\n        {\r\n          path: 'edit',\r\n          component: ItemEditComponent,\r\n          canDeactivate: [ PendingChangesGuard ],\r\n          children: [\r\n            { path: '', pathMatch: 'full', children: [] },\r\n            { path: 'advanced-parameters', children: [] }\r\n          ]\r\n        },\r\n      ]\r\n    }\r\n  ]) ],\r\n  exports: [ RouterModule ],\r\n})\r\nexport class ItemRoutingModule {}\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { NewContentType, AddedContent } from 'src/app/modules/shared-components/components/add-content/add-content.component';\r\nimport { ItemType } from 'src/app/shared/helpers/item-type';\r\nimport { getAllowedNewItemTypes } from 'src/app/shared/helpers/new-item-types';\r\nimport { SearchItemService } from '../../http-services/search-item.service';\r\n\r\n@Component({\r\n  selector: 'alg-add-item',\r\n  templateUrl: './add-item.component.html',\r\n  styleUrls: [ './add-item.component.scss' ]\r\n})\r\nexport class AddItemComponent implements OnChanges {\r\n\r\n  @Input() allowSkills = false;\r\n  @Input() addedItemIds: string[] = [];\r\n  @Output() contentAdded = new EventEmitter<AddedContent<ItemType>>();\r\n\r\n  allowedNewItemTypes: NewContentType<ItemType>[] = [];\r\n\r\n  searchFunction = (value: string): Observable<AddedContent<ItemType>[]> =>\r\n    this.searchItemService.search(value, getAllowedNewItemTypes(this.allowSkills).map(item => item.type));\r\n\r\n  constructor(\r\n    private searchItemService: SearchItemService\r\n  ) {}\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    this.allowedNewItemTypes = getAllowedNewItemTypes(this.allowSkills);\r\n  }\r\n\r\n  addChild(item: AddedContent<ItemType>): void {\r\n    this.contentAdded.emit(item);\r\n  }\r\n}\r\n","<alg-sub-section icon=\"sign-in-alt\" i18n-label label=\"Add a content\">\r\n  <alg-add-content\r\n    [allowedTypesForNewContent]=\"allowedNewItemTypes\"\r\n    [searchFunction]=\"searchFunction\"\r\n    [addedIds]=\"addedItemIds\"\r\n    (contentAdded)=\"addChild($event)\"\r\n  ></alg-add-content>\r\n</alg-sub-section>\r\n","<ul class=\"menu\">\r\n  <li class=\"menu-item menu-header no-hover\">\r\n    <div class=\"menu-item-title uppercase text-center\" i18n>Default access</div>\r\n  </li>\r\n  <li class=\"menu-item cursor-pointer\"\r\n      [ngClass]=\"{'active': childData?.contentViewPropagation === 'none'}\"\r\n      (click)=\"onClick('none')\">\r\n    <div class=\"menu-item-title\" i18n>Locked and hidden</div>\r\n    <div class=\"menu-item-icon\">\r\n      <i class=\"fa fa-eye-slash\"></i>\r\n    </div>\r\n  </li>\r\n  <li\r\n      class=\"menu-item active cursor-pointer\"\r\n      [ngClass]=\"{'active': childData?.contentViewPropagation === 'as_info'}\"\r\n      (click)=\"onClick('as_info')\"\r\n      *ngIf=\"(childData?.permissions && (childData!.permissions! | allowsGrantingView)) || [ 'as_info', 'as_content' ].includes(childData?.contentViewPropagation || '')\"\r\n  >\r\n    <div class=\"menu-item-title\" i18n>Locked</div>\r\n    <div class=\"menu-item-icon\">\r\n      <i class=\"fa fa-lock\"></i>\r\n    </div>\r\n  </li>\r\n  <li\r\n      class=\"menu-item cursor-pointer\"\r\n      [ngClass]=\"{'active': childData?.contentViewPropagation === 'as_content'}\"\r\n      (click)=\"onClick('as_content')\"\r\n      *ngIf=\"(childData?.permissions && (childData!.permissions! | allowsGrantingContentView)) || childData?.contentViewPropagation === 'as_content'\"\r\n  >\r\n    <div class=\"menu-item-title\" i18n>Open</div>\r\n    <div class=\"menu-item-icon\">\r\n      <i class=\"fa fa-eye\"></i>\r\n    </div>\r\n  </li>\r\n</ul>\r\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\r\nimport { PossiblyInvisibleChildData } from '../item-children-edit/item-children-edit.component';\r\n\r\n@Component({\r\n  selector: 'alg-propagation-edit-menu',\r\n  templateUrl: 'propagation-edit-menu.component.html',\r\n  styleUrls: [ 'propagation-edit-menu.component.scss' ],\r\n})\r\nexport class PropagationEditMenuComponent {\r\n  @Input() childData?: PossiblyInvisibleChildData;\r\n  @Output() clickEvent = new EventEmitter<'none' | 'as_info' | 'as_content'>();\r\n\r\n  onClick(contentViewPropagation: 'none' | 'as_info' | 'as_content'): void {\r\n    this.clickEvent.emit(contentViewPropagation);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveComponentModule } from '@ngrx/component';\r\nimport { ItemRoutingModule } from './item-routing.module';\r\nimport { SharedComponentsModule } from '../shared-components/shared-components.module';\r\nimport { ItemDetailsComponent } from './pages/item-details/item-details.component';\r\nimport { ItemHeaderComponent } from './components/item-header/item-header.component';\r\nimport { ItemEditComponent } from './pages/item-edit/item-edit.component';\r\nimport { ItemByIdComponent } from './pages/item-by-id/item-by-id.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { ItemContentComponent } from './pages/item-content/item-content.component';\r\nimport { ChapterChildrenComponent } from './components/chapter-children/chapter-children.component';\r\nimport { ItemProgressComponent } from './pages/item-progress/item-progress.component';\r\nimport { ItemLogViewComponent } from './pages/item-log-view/item-log-view.component';\r\nimport { SubSkillsComponent } from './components/sub-skills/sub-skills.component';\r\nimport { ParentSkillsComponent } from './components/parent-skills/parent-skills.component';\r\nimport { ItemEditContentComponent } from './pages/item-edit-content/item-edit-content.component';\r\nimport { ItemChildrenEditComponent } from './components/item-children-edit/item-children-edit.component';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\nimport { PendingChangesGuard } from 'src/app/shared/guards/pending-changes-guard';\r\nimport { DurationToReadable } from 'src/app/shared/pipes/duration';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { PermissionsEditDialogComponent } from './components/permissions-edit-dialog/permissions-edit-dialog.component';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { AddItemComponent } from './components/add-item/add-item.component';\r\nimport { CompositionFilterComponent } from './components/composition-filter/composition-filter.component';\r\nimport { UserProgressComponent } from './components/user-progress/user-progress.component';\r\nimport { ChapterGroupProgressComponent } from './pages/chapter-group-progress/chapter-group-progress.component';\r\nimport { GroupProgressGridComponent } from './pages/group-progress-grid/group-progress-grid.component';\r\nimport { ItemEditAdvancedParametersComponent } from './pages/item-edit-advanced-parameters/item-edit-advanced-parameters.component';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { InputNumberModule } from 'primeng/inputnumber';\r\nimport { ChapterUserProgressComponent } from './pages/chapter-user-progress/chapter-user-progress.component';\r\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\r\nimport { UserProgressDetailsComponent } from './components/user-progress-details/user-progress-details.component';\r\nimport { PropagationEditMenuComponent } from './components/propagation-edit-menu/propagation-edit-menu.component';\r\nimport { ItemDisplayComponent } from './pages/item-display/item-display.component';\r\nimport { ItemRemoveButtonComponent } from './components/item-remove-button/item-remove-button.component';\r\nimport { BeforeUnloadGuard } from 'src/app/shared/guards/before-unload-guard';\r\nimport { AnswerAuthorIndicatorComponent } from './components/answer-author-indicator/answer-author-indicator.component';\r\nimport { ItemPermissionsComponent } from './components/item-permissions/item-permissions.component';\r\nimport { TaskLoaderComponent } from './components/task-loader/task-loader.component';\r\nimport { ItemChildrenEditFormComponent } from './components/item-children-edit-form/item-children-edit-form.component';\r\nimport { ThreadComponent } from './components/thread/thread.component';\r\nimport { ItemDependenciesComponent } from './components/item-dependencies/item-dependencies.component';\r\nimport { ItemEditWrapperComponent } from './components/item-edit-wrapper/item-edit-wrapper.component';\r\nimport { AddDependencyComponent } from './components/add-dependency/add-dependency.component';\r\nimport {\r\n  PermissionsEditFormComponent\r\n} from './components/permissions-edit-dialog-form/permissions-edit-form.component';\r\nimport { ItemUnlockAccessComponent } from './components/item-unlock-access/item-unlock-access.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ItemByIdComponent,\r\n    ItemDetailsComponent,\r\n    ItemHeaderComponent,\r\n    ItemEditComponent,\r\n    ItemContentComponent,\r\n    ChapterChildrenComponent,\r\n    ItemProgressComponent,\r\n    ItemLogViewComponent,\r\n    SubSkillsComponent,\r\n    ParentSkillsComponent,\r\n    ItemEditContentComponent,\r\n    ItemChildrenEditComponent,\r\n    ItemProgressComponent,\r\n    ChapterGroupProgressComponent,\r\n    GroupProgressGridComponent,\r\n    CompositionFilterComponent,\r\n    UserProgressComponent,\r\n    DurationToReadable,\r\n    PermissionsEditDialogComponent,\r\n    PermissionsEditFormComponent,\r\n    AddItemComponent,\r\n    ItemEditAdvancedParametersComponent,\r\n    ChapterUserProgressComponent,\r\n    UserProgressDetailsComponent,\r\n    PropagationEditMenuComponent,\r\n    ItemDisplayComponent,\r\n    ItemRemoveButtonComponent,\r\n    AnswerAuthorIndicatorComponent,\r\n    ItemPermissionsComponent,\r\n    TaskLoaderComponent,\r\n    ItemChildrenEditFormComponent,\r\n    ThreadComponent,\r\n    ItemDependenciesComponent,\r\n    ItemEditWrapperComponent,\r\n    AddDependencyComponent,\r\n    ItemUnlockAccessComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ItemRoutingModule,\r\n    SharedComponentsModule,\r\n    ReactiveFormsModule,\r\n    ReactiveComponentModule,\r\n    FormsModule,\r\n    TooltipModule,\r\n    DialogModule,\r\n    ButtonModule,\r\n    CalendarModule,\r\n    InputNumberModule,\r\n    OverlayPanelModule,\r\n  ],\r\n  exports: [],\r\n  providers: [\r\n    PendingChangesGuard,\r\n    BeforeUnloadGuard,\r\n  ]\r\n})\r\nexport class ItemModule { }\r\n","/*\n * js_channel is a very lightweight abstraction on top of\n * postMessage which defines message formats and semantics\n * to support interactions more rich than just message passing\n * js_channel supports:\n *  + query/response - traditional rpc\n *  + query/update/response - incremental async return of results\n *    to a query\n *  + notifications - fire and forget\n *  + error handling\n *\n * js_channel is based heavily on json-rpc, but is focused at the\n * problem of inter-iframe RPC.\n *\n * Message types:\n *  There are 5 types of messages that can flow over this channel,\n *  and you may determine what type of message an object is by\n *  examining its parameters:\n *  1. Requests\n *    + integer id\n *    + string method\n *    + (optional) any params\n *  2. Callback Invocations (or just \"Callbacks\")\n *    + integer id\n *    + string callback\n *    + (optional) params\n *  3. Error Responses (or just \"Errors)\n *    + integer id\n *    + string error\n *    + (optional) string message\n *  4. Responses\n *    + integer id\n *    + (optional) any result\n *  5. Notifications\n *    + string method\n *    + (optional) any params\n */\n\n// Universal module definition //\n(function (root, factory) {\n  if (typeof exports === 'object') {\n    // CommonJS\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define([], function () {\n      return (root.Channel = factory());\n    });\n  } else {\n    // Global Variables\n    root.Channel = factory();\n  }\n}(this, function () {\n  \"use strict\";\n  var Channel = (function() {\n\n    // current transaction id, start out at a random *odd* number between 1 and a million\n    // There is one current transaction counter id per page, and it's shared between\n    // channel instances.  That means of all messages posted from a single javascript\n    // evaluation context, we'll never have two with the same id.\n    var s_curTranId = Math.floor(Math.random()*1000001);\n\n    // no two bound channels in the same javascript evaluation context may have the same origin, scope, and window.\n    // further if two bound channels have the same window and scope, they may not have *overlapping* origins\n    // (either one or both support '*').  This restriction allows a single onMessage handler to efficiently\n    // route messages based on origin and scope.  The s_boundChans maps origins to scopes, to message\n    // handlers.  Request and Notification messages are routed using this table.\n    // Finally, channels are inserted into this table when built, and removed when destroyed.\n    var s_boundChans = { };\n\n    // add a channel to s_boundChans, throwing if a dup exists\n    function s_addBoundChan(win, origin, scope, handler) {\n        function hasWin(arr) {\n            for (var i = 0; i < arr.length; i++) if (arr[i].win === win) return true;\n            return false;\n        }\n\n        // does she exist?\n        var exists = false;\n\n        if (origin === '*') {\n            // we must check all other origins, sadly.\n            for (var k in s_boundChans) {\n                if (!s_boundChans.hasOwnProperty(k)) continue;\n                if (k === '*') continue;\n                if (typeof s_boundChans[k][scope] === 'object') {\n                    exists = hasWin(s_boundChans[k][scope]);\n                    if (exists) break;\n                }\n            }\n        } else {\n            // we must check only '*'\n            if ((s_boundChans['*'] && s_boundChans['*'][scope])) {\n                exists = hasWin(s_boundChans['*'][scope]);\n            }\n            if (!exists && s_boundChans[origin] && s_boundChans[origin][scope])\n            {\n                exists = hasWin(s_boundChans[origin][scope]);\n            }\n        }\n        if (exists) throw \"A channel is already bound to the same window which overlaps with origin '\"+ origin +\"' and has scope '\"+scope+\"'\";\n\n        if (typeof s_boundChans[origin] != 'object') s_boundChans[origin] = { };\n        if (typeof s_boundChans[origin][scope] != 'object') s_boundChans[origin][scope] = [ ];\n        s_boundChans[origin][scope].push({win: win, handler: handler});\n    }\n\n    function s_removeBoundChan(win, origin, scope) {\n        var arr = s_boundChans[origin][scope];\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i].win === win) {\n                arr.splice(i,1);\n            }\n        }\n        if (s_boundChans[origin][scope].length === 0) {\n            delete s_boundChans[origin][scope];\n        }\n    }\n\n    function s_isArray(obj) {\n        if (Array.isArray) return Array.isArray(obj);\n        else {\n            return (obj.constructor.toString().indexOf(\"Array\") != -1);\n        }\n    }\n\n    // No two outstanding outbound messages may have the same id, period.  Given that, a single table\n    // mapping \"transaction ids\" to message handlers, allows efficient routing of Callback, Error, and\n    // Response messages.  Entries are added to this table when requests are sent, and removed when\n    // responses are received.\n    var s_transIds = { };\n\n    // class singleton onMessage handler\n    // this function is registered once and all incoming messages route through here.  This\n    // arrangement allows certain efficiencies, message data is only parsed once and dispatch\n    // is more efficient, especially for large numbers of simultaneous channels.\n    var s_onMessage = function(e) {\n        try {\n          var m = JSON.parse(e.data);\n          if (typeof m !== 'object' || m === null) throw \"malformed\";\n        } catch(e) {\n          // just ignore any posted messages that do not consist of valid JSON\n          return;\n        }\n\n        var w = e.source;\n        var o = e.origin;\n        var s, i, meth;\n\n        if (typeof m.method === 'string') {\n            var ar = m.method.split('::');\n            if (ar.length == 2) {\n                s = ar[0];\n                meth = ar[1];\n            } else {\n                meth = m.method;\n            }\n        }\n\n        if (typeof m.id !== 'undefined') i = m.id;\n\n        // w is message source window\n        // o is message origin\n        // m is parsed message\n        // s is message scope\n        // i is message id (or undefined)\n        // meth is unscoped method name\n        // ^^ based on these factors we can route the message\n\n        // if it has a method it's either a notification or a request,\n        // route using s_boundChans\n        if (typeof meth === 'string') {\n            var delivered = false;\n            if (s_boundChans[o] && s_boundChans[o][s]) {\n                for (var j = 0; j < s_boundChans[o][s].length; j++) {\n                    if (s_boundChans[o][s][j].win === w) {\n                        s_boundChans[o][s][j].handler(o, meth, m);\n                        delivered = true;\n                        break;\n                    }\n                }\n            }\n\n            if (!delivered && s_boundChans['*'] && s_boundChans['*'][s]) {\n                for (var j = 0; j < s_boundChans['*'][s].length; j++) {\n                    if (s_boundChans['*'][s][j].win === w) {\n                        s_boundChans['*'][s][j].handler(o, meth, m);\n                        break;\n                    }\n                }\n            }\n        }\n        // otherwise it must have an id (or be poorly formed\n        else if (typeof i != 'undefined') {\n            if (s_transIds[i]) s_transIds[i](o, meth, m);\n        }\n    };\n\n    // Setup postMessage event listeners\n    if (window.addEventListener) window.addEventListener('message', s_onMessage, false);\n    else if(window.attachEvent) window.attachEvent('onmessage', s_onMessage);\n\n    /* a messaging channel is constructed from a window and an origin.\n     * the channel will assert that all messages received over the\n     * channel match the origin\n     *\n     * Arguments to Channel.build(cfg):\n     *\n     *   cfg.window - the remote window with which we'll communicate\n     *   cfg.origin - the expected origin of the remote window, may be '*'\n     *                which matches any origin\n     *   cfg.scope  - the 'scope' of messages.  a scope string that is\n     *                prepended to message names.  local and remote endpoints\n     *                of a single channel must agree upon scope. Scope may\n     *                not contain double colons ('::').\n     *   cfg.debugOutput - A boolean value.  If true and window.console.log is\n     *                a function, then debug strings will be emitted to that\n     *                function.\n     *   cfg.postMessageObserver - A function that will be passed two arguments,\n     *                an origin and a message.  It will be passed these immediately\n     *                before messages are posted.\n     *   cfg.gotMessageObserver - A function that will be passed two arguments,\n     *                an origin and a message.  It will be passed these arguments\n     *                immediately after they pass scope and origin checks, but before\n     *                they are processed.\n     *   cfg.onReady - A function that will be invoked when a channel becomes \"ready\",\n     *                this occurs once both sides of the channel have been\n     *                instantiated and an application level handshake is exchanged.\n     *                the onReady function will be passed a single argument which is\n     *                the channel object that was returned from build().\n     *   cfg.reconnect - A boolean value - if true, the channel allows reconnection\n     *                useful when the page in a child frame is reloaded and wants\n     *                to re-establish connection with parent window using the same\n     *                origin, scope and bindings.\n     *   cfg.publish - A boolean value. If true, bind will automatically publish\n     *                the method on the remote side. The method will be published under\n     *                channelObject.remote, but it will not be available before the onReady\n     *                callback is called on the other side.\n     *   cfg.remote - An array of method names for which stubs should be generated without\n     *                waiting for remote end to publish them. A string (for a single method name)\n     *                is also accepted. This allows methods under channelObject.remote to be called\n     *                also before onReady callback is called; the invocations will be queued until\n     *                the channel is ready. If the methods do not exist on remote side, the\n     *                error callback will be called.\n     */\n    return {\n        build: function(cfg) {\n            var debug = function(m) {\n                if (cfg.debugOutput && window.console && window.console.log) {\n                    // try to stringify, if it doesn't work we'll let javascript's built in toString do its magic\n                    try {\n                        if (typeof m !== 'string') {\n                            m = JSON.stringify(m);\n                        }\n                    }\n                    catch(e) {\n                    }\n                    window.console.log(\"[\"+chanId+\"] \" + m);\n                }\n            };\n\n            /* browser capabilities check */\n            if (!window.postMessage) throw(\"jschannel cannot run this browser, no postMessage\");\n            if (!window.JSON || !window.JSON.stringify || ! window.JSON.parse) {\n                throw(\"jschannel cannot run this browser, no JSON parsing/serialization\");\n            }\n\n            /* basic argument validation */\n            if (typeof cfg != 'object') throw(\"Channel build invoked without a proper object argument\");\n\n            if (!cfg.window || !cfg.window.postMessage) throw(\"Channel.build() called without a valid window argument\");\n\n            /* we'd have to do a little more work to be able to run multiple channels that intercommunicate the same\n             * window...  Not sure if we care to support that */\n            if (window === cfg.window) debug(\"target window is same as present window -- use at your own risk\");\n\n            // let's require that the client specify an origin.  if we just assume '*' we'll be\n            // propagating unsafe practices.  that would be lame.\n            var validOrigin = false;\n            if (typeof cfg.origin === 'string') {\n                var oMatch;\n                if (cfg.origin === \"*\") validOrigin = true;\n                // allow valid domains under http and https.  Also, trim paths off otherwise valid origins.\n                else if (null !== (oMatch = cfg.origin.match(/^https?:\\/\\/(?:[-a-zA-Z0-9_\\.])+(?::\\d+)?/))) {\n                    cfg.origin = oMatch[0].toLowerCase();\n                    validOrigin = true;\n                }\n            }\n\n            if (!validOrigin) throw (\"Channel.build() called with an invalid origin\");\n\n            if (typeof cfg.scope !== 'undefined') {\n                if (typeof cfg.scope !== 'string') throw 'scope, when specified, must be a string';\n                if (cfg.scope.split('::').length > 1) throw \"scope may not contain double colons: '::'\";\n            } else {\n                cfg.scope = \"__default\";\n            }\n\n            /* private variables */\n            // generate a random and psuedo unique id for this channel\n            var chanId = (function () {\n                var text = \"\";\n                var alpha = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n                for(var i=0; i < 5; i++) text += alpha.charAt(Math.floor(Math.random() * alpha.length));\n                return text;\n            })();\n\n            // registrations: mapping method names to call objects\n            var regTbl = { };\n            // current oustanding sent requests\n            var outTbl = { };\n            // current oustanding received requests\n            var inTbl = { };\n            // are we ready yet?  when false we will block outbound messages.\n            var ready = false;\n            var pendingQueue = [ ];\n            var publishQueue = [ ];\n\n            var createTransaction = function(id,origin,callbacks) {\n                var shouldDelayReturn = false;\n                var completed = false;\n\n                return {\n                    origin: origin,\n                    invoke: function(cbName, v) {\n                        // verify in table\n                        if (!inTbl[id]) throw \"attempting to invoke a callback of a nonexistent transaction: \" + id;\n                        // verify that the callback name is valid\n                        var valid = false;\n                        for (var i = 0; i < callbacks.length; i++) if (cbName === callbacks[i]) { valid = true; break; }\n                        if (!valid) throw \"request supports no such callback '\" + cbName + \"'\";\n\n                        // send callback invocation\n                        postMessage({ id: id, callback: cbName, params: v});\n                    },\n                    error: function(error, message) {\n                        completed = true;\n                        // verify in table\n                        if (!inTbl[id]) throw \"error called for nonexistent message: \" + id;\n\n                        // remove transaction from table\n                        delete inTbl[id];\n\n                        // send error\n                        postMessage({ id: id, error: error, message: message });\n                    },\n                    complete: function(v) {\n                        completed = true;\n                        // verify in table\n                        if (!inTbl[id]) throw \"complete called for nonexistent message: \" + id;\n                        // remove transaction from table\n                        delete inTbl[id];\n                        // send complete\n                        postMessage({ id: id, result: v });\n                    },\n                    delayReturn: function(delay) {\n                        if (typeof delay === 'boolean') {\n                            shouldDelayReturn = (delay === true);\n                        }\n                        return shouldDelayReturn;\n                    },\n                    completed: function() {\n                        return completed;\n                    }\n                };\n            };\n\n            var setTransactionTimeout = function(transId, timeout, method) {\n              return window.setTimeout(function() {\n                if (outTbl[transId]) {\n                  // XXX: what if client code raises an exception here?\n                  var msg = \"timeout (\" + timeout + \"ms) exceeded on method '\" + method + \"'\";\n                  if (outTbl[transId].error) {\n                      outTbl[transId].error(\"timeout_error\", msg);\n                  }\n                  delete outTbl[transId];\n                  delete s_transIds[transId];\n                }\n              }, timeout);\n            };\n\n            var onMessage = function(origin, method, m) {\n                // if an observer was specified at allocation time, invoke it\n                if (typeof cfg.gotMessageObserver === 'function') {\n                    // pass observer a clone of the object so that our\n                    // manipulations are not visible (i.e. method unscoping).\n                    // This is not particularly efficient, but then we expect\n                    // that message observers are primarily for debugging anyway.\n                    try {\n                        cfg.gotMessageObserver(origin, m);\n                    } catch (e) {\n                        debug(\"gotMessageObserver() raised an exception: \" + e.toString());\n                    }\n                }\n\n                // now, what type of message is this?\n                if (m.id && method) {\n                    inTbl[m.id] = { };\n                    var trans = createTransaction(m.id, origin, m.callbacks ? m.callbacks : [ ]);\n                    // a request!  do we have a registered handler for this request?\n                    if (regTbl[method]) {\n                        try {\n                            // callback handling.  we'll magically create functions inside the parameter list for each\n                            // callback\n                            if (m.callbacks && s_isArray(m.callbacks) && m.callbacks.length > 0) {\n                                for (var i = 0; i < m.callbacks.length; i++) {\n                                    var path = m.callbacks[i];\n                                    var obj = m.params;\n                                    var pathItems = path.split('/');\n                                    for (var j = 0; j < pathItems.length - 1; j++) {\n                                        var cp = pathItems[j];\n                                        if (typeof obj[cp] !== 'object') obj[cp] = { };\n                                        obj = obj[cp];\n                                    }\n                                    obj[pathItems[pathItems.length - 1]] = (function() {\n                                        var cbName = path;\n                                        return function(params) {\n                                            return trans.invoke(cbName, params);\n                                        };\n                                    })();\n                                }\n                            }\n                            var resp = regTbl[method](trans, m.params);\n                            if (!trans.delayReturn() && !trans.completed()) trans.complete(resp);\n                        } catch(e) {\n                            // automagic handling of exceptions:\n                            var error = \"runtime_error\";\n                            var message = null;\n                            // * if it's a string then it gets an error code of 'runtime_error' and string is the message\n                            if (typeof e === 'string') {\n                                message = e;\n                            } else if (typeof e === 'object') {\n                                // if it's an Error instance we use the constructor name to set the error property\n                                // and we just copy the error message\n                                if (e instanceof Error) {\n                                    error = e.constructor.name;\n                                    message = e.message;\n                                }\n                                // Otherwise, it's either an array or an object\n                                // * if it's an array of length two, then  array[0] is the code, array[1] is the error message\n                                else if (e && s_isArray(e) && e.length == 2) {\n                                    error = e[0];\n                                    message = e[1];\n                                }\n                                // * if it's an object then we'll look form error and message parameters\n                                else if (typeof e.error === 'string') {\n                                    error = e.error;\n                                    if (!e.message) message = \"\";\n                                    else if (typeof e.message === 'string') message = e.message;\n                                    else e = e.message; // let the stringify/toString message give us a reasonable verbose error string\n                                }\n                            }\n\n                            // message is *still* null, let's try harder\n                            if (message === null) {\n                                try {\n                                    message = JSON.stringify(e);\n                                    /* On MSIE8, this can result in 'out of memory', which\n                                     * leaves message undefined. */\n                                    if (typeof(message) == 'undefined')\n                                      message = e.toString();\n                                } catch (e2) {\n                                    message = e.toString();\n                                }\n                            }\n\n                            trans.error(error,message);\n                        }\n                    } else { // if no method found, send error\n                        trans.error(\"method_not_found\", \"No method '\" + method + \"' was (yet) bound by the provider\");\n                    }\n                } else if (m.id && m.callback) {\n                    if (!outTbl[m.id] ||!outTbl[m.id].callbacks || !outTbl[m.id].callbacks[m.callback])\n                    {\n                        debug(\"ignoring invalid callback, id:\"+m.id+ \" (\" + m.callback +\")\");\n                    } else {\n                        // XXX: what if client code raises an exception here?\n                        outTbl[m.id].callbacks[m.callback](m.params);\n                    }\n                } else if (m.id) {\n                    if (!outTbl[m.id]) {\n                        debug(\"ignoring invalid response: \" + m.id);\n                    } else {\n                        // XXX: what if client code raises an exception here?\n                        if (m.error) {\n                            // We might not have an error callback\n                            if(outTbl[m.id].error) {\n                                outTbl[m.id].error(m.error, m.message);\n                            }\n                        } else {\n                            // But we always have a success callback\n                            if (m.result !== undefined) {\n                                outTbl[m.id].success(m.result);\n                            } else {\n                                outTbl[m.id].success();\n                            }\n                        }\n                        delete outTbl[m.id];\n                        delete s_transIds[m.id];\n                    }\n                } else if (method) {\n                    // tis a notification.\n                    if (regTbl[method]) {\n                        // yep, there's a handler for that.\n                        // transaction has only origin for notifications.\n                        regTbl[method]({ origin: origin }, m.params);\n                        // if the client throws, we'll just let it bubble out\n                        // what can we do?  Also, here we'll ignore return values\n                    }\n                }\n            };\n\n            // now register our bound channel for msg routing\n            s_addBoundChan(cfg.window, cfg.origin, cfg.scope, onMessage);\n\n            // scope method names based on cfg.scope specified when the Channel was instantiated\n            var scopeMethod = function(m) {\n                return [cfg.scope, m].join(\"::\");\n            };\n\n            // a small wrapper around postmessage whose primary function is to handle the\n            // case that clients start sending messages before the other end is \"ready\"\n            var postMessage = function(msg, force) {\n                if (!msg) throw \"postMessage called with null message\";\n\n                // delay posting if we're not ready yet.\n                if (!force && !ready) {\n                    debug(\"queue message: \" + JSON.stringify(msg));\n                    pendingQueue.push(msg);\n                } else {\n                    if (typeof cfg.postMessageObserver === 'function') {\n                        try {\n                            cfg.postMessageObserver(cfg.origin, msg);\n                        } catch (e) {\n                            debug(\"postMessageObserver() raised an exception: \" + e.toString());\n                        }\n                    }\n                    debug(\"post message: \" + JSON.stringify(msg) + \" with origin \" + cfg.origin);\n                    cfg.window.postMessage(JSON.stringify(msg), cfg.origin);\n                }\n            };\n\n            var onReady = function(trans, params) {\n                debug('ready msg received');\n                if (ready && !cfg.reconnect) {\n                    throw \"received ready message while in ready state.\";\n                }\n                ready = true;\n\n                // only append suffix to chanId once:\n                if (chanId.length < 6) {\n\t                if (params.type === 'publish-request') {\n\t                    chanId += '-R';\n\t                } else {\n\t                    chanId += '-L';\n\t                }\n                }\n                debug('ready msg accepted.');\n\n                if (params.type === 'publish-request') {\n                    obj.notify({ method: '__ready', params: {\n                        type:'publish-reply',\n                        publish: publishQueue\n                    } });\n                }\n\n                for (var i = 0; i < params.publish.length; i++) {\n                    if (params.publish[i].action === \"bind\") {\n                        createStubs([params.publish[i].method], obj.remote);\n                    } else { // unbind\n                        delete obj.remote[params.publish[i].method];\n                    }\n                }\n\n                //unbind ready handler unless we allow reconnecting:\n                if (!cfg.reconnect) {\n                    obj.unbind('__ready', true); // now this handler isn't needed any more.\n                }\n\n                // flush queue\n                while (pendingQueue.length) {\n                    postMessage(pendingQueue.splice(0, 1)[0]);\n                }\n                publishQueue = [];\n                // invoke onReady observer if provided\n                if (typeof cfg.onReady === 'function') cfg.onReady(obj);\n\n            };\n\n            var createStubs = function(stubList, targetObj) {\n                stubList = [].concat(stubList); // Coerce into array, allows string to be used for single-item array\n                var method;\n                for(var i=0; i < stubList.length; i++) {\n                    method = stubList[i].toString();\n                    targetObj[method] = function(m) {\n                        return function(params, success, error) {\n                            if (success) {\n                                obj.call({\n                                    method: m,\n                                    params: params,\n                                    success: success,\n                                    error: error\n                                });\n                            } else {\n                                obj.notify({\n                                    method: m,\n                                    params: params\n                                });\n                            }\n                        };\n                    }(method);\n                }\n            }\n\n            // Dynamic publish from remote\n            var onBind = function(trans, method) {\n                createStubs([method], obj.remote);\n            };\n\n            // Dynamic unpublish from remote\n            var onUnbind = function(trans, method) {\n                if (obj.remote[method]) {\n                    delete obj.remote[method];\n                }\n            };\n\n            var obj = {\n\n                remote: {},\n\n                // tries to unbind a bound message handler.  returns false if not possible\n                unbind: function (method, doNotPublish) {\n                    if (regTbl[method]) {\n                        if (!(delete regTbl[method])) throw (\"can't delete method: \" + method);\n                        if (cfg.publish && ! doNotPublish) {\n                            if (ready) {\n                                obj.notify({ method: '__unbind', params: method });\n                            } else {\n                                publishQueue.push({ action: 'unbind', method: method });\n                            }\n                        }\n                        return true;\n                    }\n                    return false;\n                },\n                bind: function (method, cb, doNotPublish) {\n                    if (!method || typeof method !== 'string') throw \"'method' argument to bind must be string\";\n                    if (!cb || typeof cb !== 'function') throw \"callback missing from bind params\";\n\n                    if (regTbl[method]) throw \"method '\"+method+\"' is already bound!\";\n                    regTbl[method] = cb;\n                    if (cfg.publish && ! doNotPublish) {\n                        if (ready) {\n                            obj.notify({ method: '__bind', params: method });\n                        } else {\n                            publishQueue.push({ action: 'bind', method: method });\n                        }\n                    }\n                    return this;\n                },\n                call: function(m) {\n                    if (!m) throw 'missing arguments to call function';\n                    if (!m.method || typeof m.method !== 'string') throw \"'method' argument to call must be string\";\n                    if (!m.success || typeof m.success !== 'function') throw \"'success' callback missing from call\";\n\n                    // now it's time to support the 'callback' feature of jschannel.  We'll traverse the argument\n                    // object and pick out all of the functions that were passed as arguments.\n                    var callbacks = { };\n                    var callbackNames = [ ];\n                    var seen = [ ];\n\n                    var pruneFunctions = function (path, obj) {\n                        if (seen.indexOf(obj) >= 0) {\n                            throw \"params cannot be a recursive data structure\"\n                        }\n                        if(obj) {\n                            seen.push(obj);\n                        }\n\n                        if (typeof obj === 'object') {\n                            for (var k in obj) {\n                                if (!obj.hasOwnProperty(k)) continue;\n                                var np = path + (path.length ? '/' : '') + k;\n                                if (typeof obj[k] === 'function') {\n                                    callbacks[np] = obj[k];\n                                    callbackNames.push(np);\n                                    delete obj[k];\n                                } else if (typeof obj[k] === 'object') {\n                                    pruneFunctions(np, obj[k]);\n                                }\n                            }\n                        }\n                    };\n                    pruneFunctions(\"\", m.params);\n\n                    // build a 'request' message and send it\n                    var msg = { id: s_curTranId, method: scopeMethod(m.method), params: m.params };\n                    if (callbackNames.length) msg.callbacks = callbackNames;\n\n                    if (m.timeout)\n                      // XXX: This function returns a timeout ID, but we don't do anything with it.\n                      // We might want to keep track of it so we can cancel it using clearTimeout()\n                      // when the transaction completes.\n                      setTransactionTimeout(s_curTranId, m.timeout, scopeMethod(m.method));\n\n                    // insert into the transaction table\n                    outTbl[s_curTranId] = { callbacks: callbacks, error: m.error, success: m.success };\n                    s_transIds[s_curTranId] = onMessage;\n\n                    // increment current id\n                    s_curTranId++;\n\n                    postMessage(msg);\n                },\n                notify: function(m) {\n                    if (!m) throw 'missing arguments to notify function';\n                    if (!m.method || typeof m.method !== 'string') throw \"'method' argument to notify must be string\";\n\n                    // no need to go into any transaction table\n                    postMessage({ method: scopeMethod(m.method), params: m.params });\n                },\n                destroy: function () {\n                    s_removeBoundChan(cfg.window, cfg.origin, cfg.scope);\n                    if (window.removeEventListener) window.removeEventListener('message', onMessage, false);\n                    else if(window.detachEvent) window.detachEvent('onmessage', onMessage);\n                    ready = false;\n                    regTbl = { };\n                    inTbl = { };\n                    outTbl = { };\n                    cfg.origin = null;\n                    pendingQueue = [ ];\n                    debug(\"channel destroyed\");\n                    chanId = \"\";\n                }\n            };\n\n            obj.bind('__ready', onReady, true);\n            obj.bind('__bind', onBind, true);\n            obj.bind('__unbind', onUnbind, true);\n            if (cfg.remote) {\n                createStubs(cfg.remote, obj.remote);\n            }\n            setTimeout(function() {\n                if (chanId.length > 0) { // The channel might already have been destroyed\n                    postMessage({ method: scopeMethod('__ready'), params: {\n                        type: \"publish-request\",\n                        publish: publishQueue\n                    } }, true);\n                }\n\n            }, 0);\n\n            return obj;\n        }\n    };\n  })();\n\n\n  return Channel;\n}));\n"],"names":["BeforeUnloadGuard","constructor","canDeactivate","component","_currentRoute","_currentState","_nextState","beforeUnload","of","factory","operate","source","subscriber","prev","hasPrev","subscribe","createOperatorSubscriber","value","p","next","breadcrumbServiceTag","breadcrumbItemDecoder","pipe","D","itemId","languageTag","title","type","attemptId","attemptNumber","GetBreadcrumbService","http","getBreadcrumb","itemRoute","this","get","appConfig","path","concat","id","join","params","isRouteWithSelfAttempt","attempt_id","parent_attempt_id","parentAttemptId","decodeSnakeCase","map","items","last","ensureDefined","length","slice","item","idx","route","it","contentType","typeCategoryOfItem","attemptCnt","undefined","catchError","err","tagError","i0","userDecoder","groupId","login","firstName","lastName","resultDecoder","allowsSubmissionsUntil","dateDecoder","createdAt","endedAt","latestActivityAt","scoreComputed","startedAt","validated","userCreator","GetResultsService","getResults","results","r","score","ItemDataSource","getBreadcrumbService","getItemByIdService","resultActionsService","getResultsService","userSessionService","groupWatchingService","localeService","ReplaySubject","Subject","scorePatch$","scan","max","Math","startWith","distinctUntilChanged","userProfile$","filter","profile","defaultLanguage","currentLang","tag","combineLatest","fetchOperation$","watchedGroup$","delayWhen","profileLanguageMatchesAppLanguage$","switchMap","watchedGroup","fetchItemData","mapToFetchState","resetter","refresh$","state","maxScorePatch$","patchScore","shareReplay","userChanged$","_s","refreshItem","fetchItem","patchItemScore","ngOnDestroy","complete","subscription","unsubscribe","watchedGroupId","forkJoin","breadcrumbs","project","initialValue","additionalValue","buildUp","data","canCurrentUserViewContent","fetchResults","EMPTY","currentResult","find","bestAttemptFromResults","implicitResultStart","start","Error","newScore","bestScore","itemBreadcrumbCat","$localize","ItemByIdComponent","itemRouter","activatedRoute","currentContent","modeService","itemDataSource","getItemPathService","layoutService","fetchingState","paramMap","repeatLatestWhen","history","preventRefetch","fetchItemAtRoute","subscriptions","push","state$","isReady","hasRedirected","replace","itemInfo","category","el","hintNumber","navigateTo","url","currentPageIdx","string","routeWithSelfAttempt","details","currentScore","isValidated","answerId","navExtras","replaceUrl","isError","errorHasTag","error","errorIsHTTPForbidden","errorIsHTTPNotFound","getItemRoute","clear","modeActions$","action","ModeAction","includes","combineLatestWith","content$","isItemInfo","content","page","readyData","a","b","pairwise","previous","current","isTask","activateFullFrame","preventFullFrame","configure","fullFrameActive","forEach","s","fullFrame$","take","fullFrame","active","snapshot","parent","prefix","cat","itemCategoryFromPrefix","answerIdOrNull","decodeItemRouterParameters","pathList","split","itemRouteFromParams","isItemRouteError","solveMissingPathAttempt","errorState","getItemPath","defaultAttemptId","startWithoutAttempt","selectors","decls","period","scheduler","asyncScheduler","timer","performanceTimestampProvider","now","delegate","performance","animationFrameProvider","schedule","callback","request","requestAnimationFrame","cancel","cancelAnimationFrame","handle","timestamp","Subscription","args","timestampProvider","Observable","provider","run","elapsed","closed","add","DEFAULT_ANIMATION_FRAMES","animationFramesFactory","RxMessagingChannel","channel","unbind","method","doNotPublish","destroyed","bind","mapper","transaction","forwardError","toString","result","isObservable","delayReturn","call","message","innerMessage","success","_message","notify","destroy","taskParamsDecoder","minScore","maxScore","noScore","randomSeed","readOnly","options","taskParamsValueDecoder","taskParamsKeyDefaultDecoder","key","defaultValue","taskViewDecoder","requires","taskViewsDecoder","taskGradeDecoder","scoreToken","updateDisplayParamsDecoder","height","views","scrollTop","taskLogDecoder","metadataDecoder","autoHeight","disablePlatformProgress","openUrlParamsDecoder","newTab","Task","chan","bindPlatform","platform","platformSet","mode","validate","decode","Array","isArray","getTaskParams","view","showView","hintToken","askHint","updateDisplay","openUrl","log","load","unload","timeout","getHeight","updateToken","token","getMetaData","metadata","getAnswer","answer","reloadAnswer","getState","reloadState","getViews","taskViews","showViews","gradeAnswer","answerToken","getResources","taskTokenDataDecoder","taskToken","TaskTokenService","generate","asTeamId","HttpParams","fromObject","as_team_id","post","successData","loadTaskTimeout","SECONDS","ItemTaskInitService","taskTokenService","configFromItem$","asObservable","configFromIframe$","config","iframe","config$","taskToken$","withLatestFrom","locale","taskUrl","channelId","low","floor","random","high","getRandomID","URL","searchParams","set","href","taskUrlWithParameters","checkUrl","fromEvent","observer","contentWindow","notifier","innerSub","errors$","syncResub","subscribeForRetryWhen","retryWhen","delay","window","build","onReady","rxBuild","origin","scope","src","taskProxyFromIframe","task","solution","editor","hints","grader","mapTo","task$","first","timeoutError","TimeoutError","iframeSrc$","urlError","formerAnswer","configured","initTask","initialized","startsWith","globalThis","location","protocol","answerDecoder","authorId","CurrentAnswerService","update","body","put","assertSuccess","AnswerService","save","payload","answerTokenDataDecoder","AnswerTokenService","task_token","GradeService","answer_token","score_token","answerAndStateSaveInterval","ItemTaskAnswerService","taskInitService","currentAnswerService","answerService","answerTokenService","gradeService","errorSubject","scoreChange","takeUntil","error$","loadFormerAsNewCurrentAnswer","getCurrentAnswer","retry","initialAnswer$","initialAnswer","initializedTaskState$","saved$","initializedTaskAnswer$","taskSaveIntervalInSec","interval","refreshAnswerAndStatePeriod","destroyed$","canStartSaveInterval$","saveError$","saved","answerOrStateChange$","merge","initial","implementsError","autoSaveInterval$","savedOrError","submitAnswer","answer$","answerToken$","grade$","saveGrade$","grade","clearAnswer","saveAnswerAndState","saving","defaultIfEmpty","savedCurrentAnswer$","isNotNull","ItemTaskViewsService","initService","displaySubject","display$","isNotUndefined","availableViews","getAvailableViews","activeViewSubject","activeView$","showViews$","iframe$","display","scrollTopInPx","iframeTopInPx","getBoundingClientRect","top","scrollY","scrollTo","behavior","Object","entries","name","_index","requiresOtherView","isIncludedInOtherView","some","otherView","sort","sortView","weights","submission","forum","unknownViewWeight","values","askHintDataDecoder","AskHintService","ask","hintRequested","hint_requested","ItemTaskService","viewsService","activityNavTreeService","router","askHintService","initError$","urlError$","unknownError$","throwError","views$","scoreChange$","saveAnswerAndStateInterval$","navigationNeighbors$","neighborsState","Number","isNaN","validateReadOnly","updateHeight","navigateToItem","navigate","messages","console","navigateToNextItem","navigateToNext$","tap","nav","animationFrames","parentIds","pop","serializeUrl","openNewTab","replaceWindowUrl","hintError$","PublishResultsService","publish","context","HttpContext","requestTimeout","FullHeightContentDirective","renderer","resize","setHeight","ngAfterViewChecked","setStyle","nativeElement","algFullHeightContent","ngOnChanges","changes","firstChange","unsetHeight","removeStyle","ctx","TaskLoaderComponent","ngOnInit","delayedLabel","showDelayedLabel","heightSyncInterval","ItemDisplayComponent","taskService","sanitizer","actionFeedbackService","publishResultService","ltiDataSource","canEdit","ItemEditPerm","EventEmitter","bypassSecurityTrustResourceUrl","metadata$","getTabNameByView","shouldDisplaySuccess","hasFeedback","life","HOURS","contentId","taskConfig","previousValue","currentValue","capitalize","ItemChildrenEditComponent","getItemChildrenService","params$","getWithInvisibleItems","children","order","child","baseChildData","scoreWeight","contentViewPropagation","editPropagation","grantViewPropagation","upperViewLevelsPropagation","watchPropagation","permissions","isVisibleItemChild","res","isVisible","share","scoreWeightEnabled","c","onChildrenListUpdate","itemData","reloadData","addChild","permissionsForCreatedItem","canView","itemViewPermMax","canWatch","itemWatchPermMax","itemEditPermMax","canGrantView","itemGrantViewPermMax","isOwner","allowsGrantingView","childrenChanges","emit","onSelectAll","selectedRows","onRemove","elm","orderChanged","reset","onEnableScoreWeightChange","event","resetScoreWeight","onScoreWeightChange","openPropagationEditMenu","actualTarget","itemIdx","propagationEditItemIdx","op","toggle","onContentViewPropagationChanged","hide","index","recomputeAddedItemIds","addedItemIds","onClick","serviceTimeout","UpdateItemService","updateItem","ItemChildrenEditFormComponent","createItemService","updateItemService","pendingChangesService","currentContentService","isDirty","dirty","updateItemChanges","itemChanges","createChildren","hasId","create","item_id","score_weight","content_view_propagation","edit_propagation","grant_view_propagation","upper_view_levels_propagation","watch_propagation","disabled","_status","forceNavMenuReload","unexpectedError","HttpErrorResponse","onCancel","childrenEdit","MessageInfoComponent","StateWidgetComponent","_changes","icon","class","toLowerCase","ChapterChildrenComponent","itemChildren","isLocked","missingValidation","every","click","refresh","SubSkillsComponent","isASkill","itemParentDecoder","itemCorePermDecoder","GetItemParentsService","ParentSkillsComponent","getItemParentsService","parents","DEFAULT_WEBSOCKET_CONFIG","deserializer","e","JSON","parse","serializer","stringify","WebSocketSubject","AnonymousSubject","urlConfigOrSource","destination","super","_socket","_config","assign","_output","hasOwnProperty","WebSocketCtor","WebSocket","lift","operator","sock","_resetState","multiplex","subMsg","unsubMsg","messageFilter","self","x","_connectSocket","binaryType","socket","readyState","close","onopen","evt","openObserver","queue","Subscriber","send","closingObserver","A","code","reason","TypeError","onerror","onclose","closeObserver","l","wasClean","onmessage","_subscribe","observers","threadOpenedEventDecoder","eventType","byUserId","threadClosedEventDecoder","followEventDecoder","userId","unfollowEventDecoder","attemptStartedEventDecoder","submissionEventDecoder","messageEventDecoder","threadEventDecoder","time","threadStatusDecoder","status","ThreadService","activityLogService","webSocket","newEvents$","events$","clearEvents$","oldEvents","newEvents","events","valueOf","status$","getStatus","init","tokenData","open","onDoneOrError","participantId","getActivityLog","follow","unfollow","sendMessage","ThreadComponent","threadService","userSession","isWatching$","threadStatus$","isWatching","itemId$","isMine","canWatchParticipant","widgetOpened","skip","previousItemId","openThread","openingThread","closeThread","toggleWidget","opened","messageToSend","trim","itemPrerequisitesDecoder","allowsMultipleAttempts","defaultLanguageTag","dependencyGrantContentView","dependencyRequiredScore","displayDetailsInParent","duration","durationDecoder","entryParticipantType","requiresExplicitEntry","subtitle","validationType","allValidated","avgScore","GetItemPrerequisitesService","ItemUnlockAccessComponent","getItemPrerequisitesService","BehaviorSubject","showOverlaySubject$","debounceTime","showOverlay$","target","showOverlaySubscription","onMouseEnter","targetRef","contentRef","onMouseLeave","canCloseOverlay","closeOverlay","ItemContentComponent","itemChildrenEditFormComponent","onEditModeEnableChange","editModeEnabled","relativeTo","then","redirected","switchComponent","writeValue","SwitchComponent","UpdateItemStringService","ItemEditContentComponent","DEFAULT_ENTERING_TIME_MIN","DEFAULT_ENTERING_TIME_MAX","ItemEditComponent","formBuilder","updateItemStringService","group","Validators","description","text_id","uses_api","validation_type","no_score","title_bar_visible","prompt_to_join_group_by_code","full_screen","allows_multiple_attempts","requires_explicit_entry","duration_enabled","entering_time_min_enabled","entering_time_min","entering_time_max_enabled","entering_time_max","entry_participant_type","entry_frozen_teams","entry_max_team_size","entry_min_admitted_members_ratio","validators","maxTeamSizeValidator","startEditing","fetchState$","durationEnabled","enteringTimeMinEnabled","enteringTimeMin","getTime","Date","enteringTimeMaxEnabled","enteringTimeMax","initialFormData","resetForm","enableParticipation","enableTeam","stopEditing","itemForm","getItemChanges","formControls","textId","usesApi","titleBarVisible","promptToJoinGroupByCode","fullScreen","entryFrozenTeams","entryMaxTeamSize","entryMinAdmittedMembersRatio","itemFormValues","hasRequiresExplicitEntryChanges","hasDurationEnabledChanges","getMs","hasEnteringTimeMinEnabledChanges","hasEnteringTimeMaxEnabledChanges","hasEntryParticipantTypeChanges","hasEntryFrozenTeamsChanges","hasEntryMaxTeamSizeChanges","hasEntryMinAdmittedMembersRatioChanges","keys","getItemStringChanges","titleControl","subtitleControl","descriptionControl","initialValues","updateString","itemStringChanges","invalid","disable","enable","isParticipationAsTeamOnly","maxTeamSizeControl","setErrors","DropdownComponent","parentForm","formControl","RemoveItemService","delete","ItemRemoveButtonComponent","confirmationService","removeItemService","onDeleteItem","confirm","header","acceptLabel","acceptButtonStyleClass","accept","confirmRemoval","deleteItem","rejectLabel","itemName","deletionInProgress","navigateToMyRoot","_err","ItemEditAdvancedParametersComponent","label","handleDurationValidators","onRequiresExplicitEntryChange","onDurationEnabledChange","requiresExplicitEntryValue","durationEnabledValue","enableValidation","setValidators","updateValueAndValidity","onEnteringTimeMinEnabledChange","enabled","patchValue","onEnteringTimeMaxEnabledChange","newTimeMax","onDateChange","minEnteringTimeMaxDate","min","onConfirmRemoval","ItemEditWrapperComponent","gradedAt","GetAnswerService","navigationNeighbors_r9","ItemHeaderComponent","skillNavTreeService","activityNavigationNeighbors$","skillNavigationNeighbors$","onEditButtonClicked","ItemLogViewComponent","sessionService","item$","getData$","watchingGroup","columns","getLogColumns","rowData","isSelfCurrentAnswer","displayLoadButton","canDisplayLoadButton","profileId","activityType","participant","isTaskReadOnly","allowsWatchingAnswers","user","field","isUser","groupProgressDecoder","averageScore","avgHintsRequested","avgSubmissions","avgTimeSpent","validationRate","teamUserProgressDecoder","hintsRequested","submissions","timeSpent","GetGroupProgressService","getUsersProgress","parentItemIds","limit","fromId","getTeamsProgress","getGroupsProgress","ProgressCSVService","getCSVData","responseType","CompositionFilterComponent","selectedTypeFilter","typeFilters","findIndex","onTypeFilterChanged","change","UserProgressComponent","mustNotBeUndefined","userProgress","groupPermissionsDecoder","itemSessionPermDecoder","itemEntryFromPermDecoder","groupPermissionsInfoDecoder","granted","itemEntryUntilPermDecoder","computed","grantedViaGroupMembership","grantedViaItemUnlocking","grantedViaSelf","grantedViaOther","GroupPermissionsService","getPermissions","sourceGroupId","updatePermissions","can_view","can_grant_view","can_watch","can_edit","can_make_session_official","canMakeSessionOfficial","is_owner","permissionsInfoString","none","info","content_with_descendants","enter","solution_with_grant","answer_with_grant","all","all_with_grant","multipleValuesPermissions","targetType","constraintError","permission","isMultipleValuesPermissionConstraint","permissionString","on","getTargetTypeString","constraintType","expectedValue","permissionsSortedByLoosest","minimumPermission","indexOf","receiverPermissions","giverPermissions","giverCanAtLeastGrantView","hasAtLeastPermission","itemGrantViewPermValues","ItemViewPerm","ItemGrantViewPerm","genError","errors","receiverCanAtLeastView","itemViewPermValues","ItemWatchPerm","n","targetTypeString","comment","computedValue","currentValueIndex","computedValueIndex","selected","tooltip","PermissionsEditFormComponent","fb","canViewValues","canGrantViewValues","canEditValues","canWatchValues","form","valueChanges","regenerateValues","permissionsDialogData","formatErrors","errorMessages","generateErrorMessage","generateCanViewValues","val","validateCanView","generateCanGrantViewValues","validateCanGrantView","generateCanWatchValues","validateCanWatch","generateCanEditValues","validateCanEdit","isOwnerDisabledTooltip","validateIsOwner","canMakeSessionOfficialDisabledTooltip","validateCanMakeSessionOfficial","generateValues","computedPermissions","giverCanAtLeastView","hasHigherPermission","giverCanAtLeastWatch","itemWatchPermValues","giverCanAtLeastEdit","itemEditPermValues","getComputeValues","withComputePermissions","formatValidationError","constraintErrors","canEnterFrom","canEnterUntil","permissionsConstraintsValidator","emitEvent","onAccept","groupPermissions","PermissionsEditDialogComponent","groupPermissionsService","sourceGroup","onPermissionsDialogSave","updateInProcess","closeDialog","changed","UserProgressDetailsComponent","ngAfterViewInit","progressData","showOverlay","progress","toggleOverlay","panel","overlayVisible","reopenOverlay","hideOverlay","show","onHide","GroupProgressGridComponent","getGroupDescendantsService","getGroupUsersProgressService","getGroupChildrenService","progressCSVService","groupRouter","defaultFilter","itemData$","getColumns","DataPager","pageSize","fetch","latestRow","getRowsWithProgress","currentFilter","onLoadMoreError","datapager","list$","isPermissionsDialogOpened","fetchRows","rawGroupRoute","canAccess","canCurrentUserGrantGroupAccess","allowsGivingPermToItem","trackByRow","row","showProgressDetail","col","progressOverlay","progressDataDialog","hideProgressDetail","fetchMoreRows","getProgress","groupsProgress","m","getRows","getUserDescendants","users","formatUser","getTeamDescendants","teams","team","getGroupChildren","groups","rows","columns$","onFilterChange","typeFilter","onAccessPermissions","onDialogClose","getCSVDownloadTypeByFilter","onCSVExport","parentItemId","downloadDataType","isCSVDataFetching","fileName","file","Blob","document","createElement","createObjectURL","download","downloadFile","toDateString","navigateToGroup","ChapterGroupProgressComponent","getGroupByIdService","participantProgressDecoder","currentUserPermissions","GetParticipantProgressService","ChapterUserProgressComponent","getParticipantProgressService","participantProgress","ItemProgressComponent","isATask","g","AnswerAuthorIndicatorComponent","getUserService","getForId","author$","urlArray","groupRoute","ItemPermissionsComponent","watchedGroupPermissions","currentUserCanGrantAccess","currentUserCanGivePermissions","lockEdit","openPermissionsDialog","closePermissionsDialog","AddItemPrerequisiteService","dependentItemId","prerequisiteItemId","grant_content_view","RemoveItemPrerequisiteService","AddDependencyComponent","searchItemService","search","getAllowedNewItemTypes","allowSkills","allowedNewItemTypes","addDependency","contentAdded","ItemDependenciesComponent","addItemPrerequisiteService","removeItemPrerequisiteService","dependency","onAdd","changeInProgress","loadForbiddenAnswerError","ItemDetailsComponent","userService","getAnswerService","mapStateData","isCurrentUserTemp","tabs","canCurrentUserViewSolution","tab","tabs$","allowsViewingContent","allowsWatchingResults","formerAnswer$","formerAnswerError$","formerAnswerLoadForbidden$","urlArrayForItemRoute","taskReadOnly$","beforeUnload$","retryBeforeUnload$","itemContentComponent","itemDisplayComponent","skipBeforeUnload$","otherSources","popScheduler","concurrent","popNumber","Infinity","argsOrArgArray","mergeAll","from","mergeWith","saveBeforeUnload$","isFetching","showTaskTab","capture","caught","unknownError","itemEditWrapperComponent","reloadItem","patchStateWithScore","setTaskTabs","taskView","setTaskTabActive","retryBeforeUnload","skipBeforeUnload","isProgressPage","isDependenciesPage","isParametersPage","ItemRoutingModule","RouterModule","redirectTo","pathMatch","PendingChangesGuard","AddItemComponent","PropagationEditMenuComponent","clickEvent","ItemModule","imports","CommonModule","SharedComponentsModule","ReactiveFormsModule","ReactiveComponentModule","FormsModule","TooltipModule","DialogModule","ButtonModule","CalendarModule","InputNumberModule","OverlayPanelModule","module","exports","s_curTranId","s_boundChans","obj","s_transIds","s_onMessage","i","meth","w","o","ar","delivered","j","win","handler","addEventListener","attachEvent","cfg","debug","debugOutput","chanId","postMessage","oMatch","validOrigin","match","text","alpha","charAt","regTbl","outTbl","inTbl","ready","pendingQueue","publishQueue","onMessage","gotMessageObserver","trans","callbacks","shouldDelayReturn","completed","invoke","cbName","v","valid","createTransaction","s_isArray","pathItems","cp","resp","I","T","R","arr","exists","k","hasWin","s_addBoundChan","scopeMethod","msg","force","postMessageObserver","createStubs","stubList","targetObj","remote","cb","callbackNames","seen","pruneFunctions","np","transId","setTimeout","setTransactionTimeout","splice","s_removeBoundChan","removeEventListener","detachEvent","reconnect"],"sourceRoot":"webpack:///"}