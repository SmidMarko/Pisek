{"version":3,"file":"common.84b0d49c8bc89328.js","mappings":"6MAUA,MAAMA,EAAuBC,KAAS,CACpCC,GAAID,KACJE,MAAOF,KACPG,SAAUH,KAAU,YAAa,YAAa,cAAe,aAAc,aAC3EI,YAAaC,KACbC,YAAaN,KACbO,uBAAwBP,KAAU,OAAQ,UAAW,cACrDQ,gBAAiBR,KACjBS,qBAAsBT,KACtBU,2BAA4BV,KAAU,+BAAgC,8BAA+B,SACrGW,iBAAkBX,OAGdY,EAAmBZ,KAAYD,EAAZC,CACvBA,KAAS,CACPa,UAAWb,KACXc,OAAQd,KAAS,CACfe,MAAOf,KAAWA,QAEpBgB,KAAMhB,KAAU,UAAU,OAAO,SAAS,SAC1CiB,QAASjB,KAAQA,KAAS,CACxBkB,UAAWlB,KACXmB,iBAAkBC,KAClBC,UAAWrB,KAAWoB,MACtBE,cAAetB,KACfuB,UAAWvB,WAOXwB,EAA6BxB,KACjCY,EAHgCb,GAW5B,WAA6B0B,GACjC,OAAOC,QAAuBD,GAOzB,IAAME,EAAsB,MAA7B,MAAOA,EAEXC,YAAoBC,eAEpBC,IAAI7B,EAAYiB,GACd,IAAIa,EAAS,IAAIC,KACjBD,SAASA,EAAOE,IAAI,aAAcf,GAC3BgB,KAAKL,KACTC,IAAe,GAAGK,oBAA0BlC,aAAe,CAAE8B,OAAQA,IACrEK,MACCC,OAAgBrC,KAAQY,KAI9B0B,sBAAsBrC,EAAYiB,GAChC,MAAMa,GAAS,IAAIC,MAChBC,IAAI,aAAcf,GAClBe,IAAI,uBAAwB,KAC/B,OAAOC,KAAKL,KACTC,IAAe,GAAGK,oBAA0BlC,aAAe,CAAE8B,WAC7DK,MACCC,OAAgBrC,KAAQwB,mDArBnBG,GAAsBY,wCAAtBZ,EAAsBa,QAAtBb,EAAsB,qBAFrB,SAEDA,GAAsB,+EC9C5B,IAAMc,EAAkB,MAAzB,MAAOA,EAEXb,YAAoBC,eAEpBa,YAAYC,GACV,OAAOT,KAAKL,KAAKC,IAAiB,GAAGK,oBAA0BQ,oBAAyBP,MAEtFQ,OAAIC,GAAOA,EAAIC,KAAKC,MAAM,GAAE,mDAPrBN,GAAkBO,wCAAlBP,EAAkBD,QAAlBC,EAAkB,qBAFjB,SAEDA,GAAkB,kDCHxB,IAAMQ,EAAa,MAApB,MAAOA,EAHbrB,cAKEM,UAAuB,mDAFZe,gCAAaT,QAAbS,EAAa,qBAFZ,SAEDA,GAAa,yFCEnB,IAAMC,EAAoB,MAA3B,MAAOA,EAEXtB,YAAoBC,eAEpBsB,MAAMC,EAAsBlC,GAC1B,MAAM4B,EAAOM,EAAWC,KAAK,KAC7B,OAAOnB,KAAKL,KACTyB,KAA2B,GAAGnB,oBAA0BW,iBAAqB,KAAM,CAClFf,OAAQ,CACNwB,WAAYrC,KAGfkB,MACCQ,OAAIY,OAOVC,oBAAoBL,GAClB,MAAMN,EAAOM,EAAWC,KAAK,KAC7B,OAAOnB,KAAKL,KACTyB,KAA6C,GAAGnB,oBAA0BW,sBAA0B,KAAM,IAC1GV,MACCQ,OAAIc,OACJd,OAAIe,GAAQA,EAAKJ,2DA1BZL,GAAoBU,wCAApBV,EAAoBV,QAApBU,EAAoB,qBAFnB,SAEDA,GAAoB","names":["baseItemChildDecoder","D","id","order","category","permissions","itemCorePermDecoder","scoreWeight","contentViewPropagation","editPropagation","grantViewPropagation","upperViewLevelsPropagation","watchPropagation","itemChildDecoder","bestScore","string","title","type","results","attemptId","latestActivityAt","dateDecoder","startedAt","scoreComputed","validated","possiblyInvisibleItemChild","item","canCurrentUserViewInfo","GetItemChildrenService","constructor","http","get","params","HttpParams","set","this","appConfig","pipe","decodeSnakeCase","getWithInvisibleItems","n","factory","GetItemPathService","getItemPath","itemId","map","raw","path","slice","t","LTIDataSource","ResultActionsService","start","itemIdPath","join","post","attempt_id","assertSuccess","startWithoutAttempt","successData","data","i"],"sourceRoot":"webpack:///","sources":["./src/app/modules/item/http-services/get-item-children.service.ts","./src/app/modules/item/http-services/get-item-path.service.ts","./src/app/modules/lti/services/lti-datasource.service.ts","./src/app/shared/http-services/result-actions.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { dateDecoder } from 'src/app/shared/helpers/decoders';\r\nimport { canCurrentUserViewInfo, ItemWithViewPerm } from 'src/app/shared/models/domain/item-view-permission';\r\nimport { itemCorePermDecoder } from 'src/app/shared/models/domain/item-permissions';\r\n\r\nconst baseItemChildDecoder = D.struct({\r\n  id: D.string,\r\n  order: D.number,\r\n  category: D.literal('Undefined', 'Discovery', 'Application', 'Validation', 'Challenge'),\r\n  permissions: itemCorePermDecoder,\r\n  scoreWeight: D.number,\r\n  contentViewPropagation: D.literal('none', 'as_info', 'as_content'),\r\n  editPropagation: D.boolean,\r\n  grantViewPropagation: D.boolean,\r\n  upperViewLevelsPropagation: D.literal('use_content_view_propagation', 'as_content_with_descendants', 'as_is'),\r\n  watchPropagation: D.boolean,\r\n});\r\n\r\nconst itemChildDecoder = D.intersect(baseItemChildDecoder)(\r\n  D.struct({\r\n    bestScore: D.number,\r\n    string: D.struct({\r\n      title: D.nullable(D.string),\r\n    }),\r\n    type: D.literal('Chapter','Task','Course','Skill'),\r\n    results: D.array(D.struct({\r\n      attemptId: D.string,\r\n      latestActivityAt: dateDecoder,\r\n      startedAt: D.nullable(dateDecoder),\r\n      scoreComputed: D.number,\r\n      validated: D.boolean,\r\n    })),\r\n  }),\r\n);\r\n\r\nconst invisibleItemChildDecoder = baseItemChildDecoder;\r\n\r\nconst possiblyInvisibleItemChild = D.union(\r\n  itemChildDecoder,\r\n  invisibleItemChildDecoder,\r\n);\r\n\r\nexport type ItemChild = D.TypeOf<typeof itemChildDecoder>;\r\nexport type InvisibleItemChild = D.TypeOf<typeof invisibleItemChildDecoder>;\r\ntype PossiblyInvisibleItemChild = D.TypeOf<typeof possiblyInvisibleItemChild>;\r\n\r\nexport function isVisibleItemChild(item: ItemWithViewPerm): item is ItemChild {\r\n  return canCurrentUserViewInfo(item);\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetItemChildrenService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  get(id: string, attemptId: string): Observable<ItemChild[]> {\r\n    let params = new HttpParams();\r\n    params = params.set('attempt_id', attemptId);\r\n    return this.http\r\n      .get<unknown[]>(`${appConfig.apiUrl}/items/${id}/children`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(itemChildDecoder))\r\n      );\r\n  }\r\n\r\n  getWithInvisibleItems(id: string, attemptId: string): Observable<PossiblyInvisibleItemChild[]> {\r\n    const params = new HttpParams()\r\n      .set('attempt_id', attemptId)\r\n      .set('show_invisible_items', '1');\r\n    return this.http\r\n      .get<unknown[]>(`${appConfig.apiUrl}/items/${id}/children`, { params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(possiblyInvisibleItemChild))\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { map } from 'rxjs/operators';\r\n\r\ntype ItemId = string;\r\ntype ItemPath = ItemId[];\r\ninterface RawItemPath { path: ItemPath }\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetItemPathService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getItemPath(itemId: ItemId): Observable<ItemPath> {\r\n    return this.http.get<RawItemPath>(`${appConfig.apiUrl}/items/${itemId}/path-from-root`).pipe(\r\n      // remove the last element from the path as it is the item id itself, that we do not need in our item paths\r\n      map(raw => raw.path.slice(0,-1))\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\ninterface LTIData {\r\n  contentId: string,\r\n  attemptId: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LTIDataSource {\r\n\r\n  data: LTIData | null = null;\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SimpleActionResponse, assertSuccess, ActionResponse, successData } from './action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../helpers/config';\r\n\r\ntype AttemptId = string;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResultActionsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  start(itemIdPath: string[], attemptId: string): Observable<void> {\r\n    const path = itemIdPath.join('/');\r\n    return this.http\r\n      .post<SimpleActionResponse>(`${appConfig.apiUrl}/items/${path}/start-result`, null, {\r\n        params: {\r\n          attempt_id: attemptId\r\n        }\r\n      })\r\n      .pipe(\r\n        map(assertSuccess)\r\n      );\r\n  }\r\n\r\n  /*\r\n   * Start an item when no attempt or parent attempt is known. To be used only in this case!\r\n   */\r\n  startWithoutAttempt(itemIdPath: string[]): Observable<AttemptId> {\r\n    const path = itemIdPath.join('/');\r\n    return this.http\r\n      .post<ActionResponse<{ attempt_id: string }>>(`${appConfig.apiUrl}/items/${path}/start-result-path`, null, {})\r\n      .pipe(\r\n        map(successData),\r\n        map(data => data.attempt_id)\r\n      );\r\n  }\r\n\r\n}\r\n"]}