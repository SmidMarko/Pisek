{"version":3,"file":"851.a4ae092d0e141331.js","mappings":"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","sources":["./src/app/core/http-services/managed-groups.service.ts","./src/app/modules/group/http-services/get-group-children.service.ts","./src/app/modules/group/http-services/get-group-members.service.ts","./src/app/modules/item/http-services/create-item.service.ts","./src/app/modules/item/http-services/get-item-by-id.service.ts","./src/app/modules/item/http-services/search-item.service.ts","./src/app/shared/http-services/join-by-code.service.ts","./src/app/modules/shared-components/components/access-code-view/access-code-view.component.ts","./src/app/modules/shared-components/components/access-code-view/access-code-view.component.html","./src/app/modules/shared-components/components/add-content/add-content.component.html","./src/app/modules/shared-components/components/add-content/add-content.component.ts","./src/app/modules/shared-components/components/collapsible-section/collapsible-section.component.html","./src/app/modules/shared-components/components/collapsible-section/collapsible-section.component.ts","./src/app/modules/shared-components/components/progress-level/progress-level.component.html","./src/app/modules/shared-components/components/progress-level/progress-level.component.ts","./src/app/modules/shared-components/components/collapsible-section/progress-select/progress-select.component.html","./src/app/modules/shared-components/components/collapsible-section/progress-select/progress-select.component.ts","./src/app/modules/shared-components/components/collapsible-section/switch-field/switch-field.component.html","./src/app/modules/shared-components/components/collapsible-section/switch-field/switch-field.component.ts","./src/app/modules/shared-components/components/duration/duration.component.html","./src/app/modules/shared-components/components/duration/duration.component.ts","./src/app/modules/shared-components/components/floating-save/floating-save.component.ts","./src/app/modules/shared-components/components/floating-save/floating-save.component.html","./src/app/modules/shared-components/components/form-error/form-error.component.html","./src/app/modules/shared-components/components/form-error/form-error.component.ts","./src/app/modules/shared-components/components/input/input.component.html","./src/app/modules/shared-components/components/input/input.component.ts","./src/app/modules/shared-components/components/page-navigator/page-navigator.component.html","./src/app/modules/shared-components/components/page-navigator/page-navigator.component.ts","./src/app/modules/item/http-services/get-breadcrumbs-from-roots.service.ts","./src/app/modules/shared-components/components/path-suggestion/path-suggestion.component.html","./src/app/modules/shared-components/components/path-suggestion/path-suggestion.component.ts","./src/app/modules/shared-components/components/section-header/section-header.component.html","./src/app/modules/shared-components/components/section-header/section-header.component.ts","./src/app/modules/shared-components/components/section-paragrah/section-paragraph.component.html","./src/app/modules/shared-components/components/section-paragrah/section-paragraph.component.ts","./src/app/modules/shared-components/components/section/section.component.html","./src/app/modules/shared-components/components/section/section.component.ts","./src/app/modules/shared-components/components/selection/selection.component.html","./src/app/modules/shared-components/components/selection/selection.component.ts","./src/app/modules/shared-components/components/sub-section/sub-section.component.html","./src/app/modules/shared-components/components/sub-section/sub-section.component.ts","./src/app/modules/shared-components/components/switch/switch.component.ts","./src/app/modules/shared-components/components/switch/switch.component.html","./src/app/modules/shared-components/components/textarea/textarea.component.html","./src/app/modules/shared-components/components/textarea/textarea.component.ts","./src/app/shared/guards/pending-changes-guard.ts","./src/app/shared/helpers/data-pager.ts","./node_modules/rxjs/dist/esm/internal/operators/switchScan.js","./src/app/shared/helpers/new-item-types.ts","./src/app/shared/helpers/overlay.ts","./src/app/shared/http-services/activity-log.service.ts","./src/app/shared/http-services/get-group-descendants.service.ts","./src/app/shared/pipes/duration.ts","./src/app/shared/pipes/logActionDisplay.ts","./src/app/shared/pipes/rawItemLink.ts","./src/app/shared/pipes/userCaption.ts","./src/app/shared/services/action-feedback.service.ts","./src/app/shared/services/pending-changes-service.ts","./node_modules/rxjs/dist/esm/internal/operators/combineLatest.js","./node_modules/rxjs/dist/esm/internal/operators/combineLatestWith.js","./node_modules/rxjs/dist/esm/internal/util/argsOrArgArray.js","./node_modules/primeng/fesm2020/primeng-overlaypanel.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../shared/operators/decode';\r\n\r\nconst typeDecoder = D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'Session', 'Base');\r\nexport const manageTypeDecoder = D.literal('none', 'memberships', 'memberships_and_group');\r\n\r\nconst groupDecoder = D.struct({\r\n  id: D.string,\r\n  name: D.string,\r\n  description: D.nullable(D.string),\r\n  type: typeDecoder,\r\n  canManage: manageTypeDecoder,\r\n  canWatchMembers: D.boolean,\r\n  canGrantGroupAccess: D.boolean,\r\n});\r\n\r\nexport type GroupType = D.TypeOf<typeof typeDecoder>;\r\nexport type ManageType = D.TypeOf<typeof manageTypeDecoder>;\r\nexport type Group = D.TypeOf<typeof groupDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ManagedGroupsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getManagedGroups(): Observable<Group[]> {\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/current-user/managed-groups`)\r\n      .pipe(\r\n        decodeSnakeCase(D.array(groupDecoder)),\r\n      );\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, switchMap, map, forkJoin, of } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { pipe } from 'fp-ts/function';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { manageTypeDecoder } from '../../../core/http-services/managed-groups.service';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\n\r\nconst typeDecoder = D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'User','Session', 'Base');\r\n\r\nconst groupChildDecoder = pipe(\r\n  D.struct({\r\n    currentUserIsManager: D.boolean,\r\n    grade: D.number,\r\n    id: D.string,\r\n    isOpen: D.boolean,\r\n    isPublic: D.boolean,\r\n    name: D.string,\r\n    type: typeDecoder,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      currentUserCanGrantGroupAccess: D.boolean,\r\n      currentUserCanManage: manageTypeDecoder,\r\n      currentUserCanWatchMembers: D.boolean,\r\n      userCount: D.number,\r\n    })\r\n  )\r\n);\r\n\r\nexport type GroupChild = D.TypeOf<typeof groupChildDecoder>;\r\nexport type GroupType = D.TypeOf<typeof typeDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupChildrenService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getGroupChildren(\r\n    groupId: string,\r\n    sort: string[] = [],\r\n    typesInclude: GroupType[] = [],\r\n    typesExclude: GroupType[] = [],\r\n  ): Observable<GroupChild[]> {\r\n    let params = new HttpParams();\r\n    if (sort.length > 0) params = params.set('sort', sort.join(','));\r\n    if (typesInclude.length > 0) params = params.set('types_include', typesInclude.join(','));\r\n    if (typesExclude.length > 0) params = params.set('types_exclude', typesExclude.join(','));\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/children`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(groupChildDecoder))\r\n      );\r\n  }\r\n\r\n  getGroupChildrenWithSubgroupCount(\r\n    groupId: string,\r\n    sort: string[] = [],\r\n    typesInclude: GroupType[] = [],\r\n    typesExclude: GroupType[] = [],\r\n  ): Observable<(GroupChild & { isEmpty: boolean })[]> {\r\n    return this.getGroupChildren(groupId, sort, typesInclude, typesExclude).pipe(\r\n      switchMap(groupChildren => {\r\n        if (groupChildren.length === 0) {\r\n          return of([]);\r\n        }\r\n        return forkJoin(\r\n          groupChildren.map(g =>\r\n            this.getGroupChildren(g.id).pipe(\r\n              map(subGroupChildren => ({\r\n                ...g,\r\n                isEmpty: subGroupChildren.length === 0,\r\n              })),\r\n            )\r\n          )\r\n        );\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { pipe } from 'fp-ts/function';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { dateDecoder } from '../../../shared/helpers/decoders';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\n\r\nexport const userDecoder = pipe(\r\n  D.struct({\r\n    grade: D.nullable(D.number),\r\n    groupId: D.string,\r\n    login: D.string,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      firstName: D.nullable(D.string),\r\n      lastName: D.nullable(D.string),\r\n    }),\r\n  ),\r\n);\r\n\r\nconst memberDecoder = pipe(\r\n  D.struct({\r\n    id: D.string,\r\n    user: userDecoder,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      action: D.literal('invitation_accepted', 'join_request_accepted', 'joined_by_code', 'joined_by_badge', 'added_directly'),\r\n      memberSince: dateDecoder,\r\n    })\r\n  )\r\n);\r\n\r\nexport type Member = D.TypeOf<typeof memberDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupMembersService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getGroupMembers(\r\n    groupId: string,\r\n    sort: string[] = [],\r\n    limit?: number,\r\n    fromId?: string,\r\n  ): Observable<Member[]> {\r\n    let params = new HttpParams();\r\n    if (sort.length > 0) params = params.set('sort', sort.join(','));\r\n    if (limit !== undefined) params = params.set('limit', limit.toString());\r\n    if (fromId !== undefined) params = params.set('from.id', fromId);\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/members`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(memberDecoder)),\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ItemType } from '../../../shared/helpers/item-type';\r\nimport { map } from 'rxjs/operators';\r\nimport { ActionResponse, successData } from '../../../shared/http-services/action-response';\r\n\r\ninterface NewItemData {\r\n  id: string,\r\n}\r\n\r\nexport type NewItem = {\r\n  title: string,\r\n  type: ItemType,\r\n  languageTag: string,\r\n} & ({ parent: string } | { asRootOfGroupId: string });\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CreateItemService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  create(newItem: NewItem): Observable<string> {\r\n    const body: {[k: string]: any} = {\r\n      title: newItem.title,\r\n      type: newItem.type,\r\n      language_tag: newItem.languageTag,\r\n    };\r\n    if ('parent' in newItem) body.parent = { item_id: newItem.parent };\r\n    if ('asRootOfGroupId' in newItem) body.as_root_of_group_id = newItem.asRootOfGroupId;\r\n\r\n    return this.http\r\n      .post<ActionResponse<NewItemData>>(`${appConfig.apiUrl}/items`, body)\r\n      .pipe(\r\n        map(successData),\r\n        map(response => response.id)\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { dateDecoder, durationDecoder } from 'src/app/shared/helpers/decoders';\r\nimport { itemCorePermDecoder } from 'src/app/shared/models/domain/item-permissions';\r\n\r\nexport const itemDecoder = pipe(\r\n  D.struct({\r\n    id: D.string,\r\n    requiresExplicitEntry: D.boolean,\r\n    string: pipe(\r\n      D.struct({\r\n        title: D.nullable(D.string),\r\n        languageTag: D.string,\r\n      }),\r\n      D.intersect(\r\n        D.partial({\r\n          subtitle: D.nullable(D.string),\r\n          description: D.nullable(D.string),\r\n        })\r\n      )\r\n    ),\r\n    bestScore: D.number,\r\n    permissions: itemCorePermDecoder,\r\n    type: D.literal('Chapter','Task','Course','Skill'),\r\n    promptToJoinGroupByCode: D.boolean,\r\n    textId: D.nullable(D.string),\r\n    validationType: D.literal('None','All','AllButOne','Categories','One','Manual'),\r\n    noScore: D.boolean,\r\n    titleBarVisible: D.boolean,\r\n    fullScreen: D.literal('forceYes','forceNo','default'),\r\n    allowsMultipleAttempts: D.boolean,\r\n    duration: D.nullable(durationDecoder),\r\n    enteringTimeMin: dateDecoder,\r\n    enteringTimeMax: dateDecoder,\r\n    entryParticipantType: D.literal('Team', 'User'),\r\n    entryFrozenTeams: D.boolean,\r\n    entryMaxTeamSize: D.number,\r\n    entryMinAdmittedMembersRatio: D.literal('All', 'Half', 'One', 'None'),\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      url: D.nullable(D.string),\r\n      usesApi: D.nullable(D.boolean),\r\n      watchedGroup: D.partial({\r\n        averageScore: D.number,\r\n        permissions: itemCorePermDecoder,\r\n      }),\r\n    })\r\n  )\r\n);\r\n\r\nexport type Item = D.TypeOf<typeof itemDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GetItemByIdService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  get(id: string, watchedGroupId?: string): Observable<Item> {\r\n    let params = new HttpParams();\r\n    if (watchedGroupId) {\r\n      params = params.set('watched_group_id', watchedGroupId);\r\n    }\r\n    return this.http.get<unknown>(`${appConfig.apiUrl}/items/${id}`, { params }).pipe(\r\n      decodeSnakeCase(itemDecoder),\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { ItemType } from '../../../shared/helpers/item-type';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\nimport { ItemCorePerm, itemCorePermDecoder } from 'src/app/shared/models/domain/item-permissions';\r\n\r\nexport interface ItemFound<T> {\r\n  id: string,\r\n  title: string,\r\n  type: T,\r\n  permissions: ItemCorePerm,\r\n}\r\n\r\nexport const itemFoundDecoder = D.struct({\r\n  id: D.string,\r\n  title: D.string,\r\n  type: D.literal('Chapter','Task','Course','Skill'),\r\n  permissions: itemCorePermDecoder,\r\n});\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SearchItemService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  search(\r\n    searchString: string,\r\n    includedTypes?: ItemType[],\r\n    excludedTypes?: ItemType[],\r\n    limit = 5,\r\n  ): Observable<ItemFound<ItemType>[]> {\r\n    let params = new HttpParams().set('search', searchString).set('limit', limit.toString());\r\n\r\n    if (includedTypes) params = params.set('types_include', includedTypes.join(','));\r\n    if (excludedTypes) params = params.set('types_exclude', excludedTypes.join(','));\r\n\r\n    return this.http.get<unknown[]>(\r\n      `${appConfig.apiUrl}/items/search`,\r\n      { params: params },\r\n    ).pipe(\r\n      decodeSnakeCase(D.array(itemFoundDecoder))\r\n    );\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { assertSuccess, SimpleActionResponse } from 'src/app/shared/http-services/action-response';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { dateDecoder } from '../helpers/decoders';\r\n\r\nconst managerDecoder = D.struct({\r\n  id: D.string,\r\n  firstName: D.nullable(D.string),\r\n  lastName: D.nullable(D.string),\r\n  login: D.string,\r\n});\r\n\r\nconst groupDecoder = D.struct({\r\n  name: D.string,\r\n  requireLockMembershipApprovalUntil: D.nullable(dateDecoder),\r\n  requirePersonalInfoAccessApproval: D.literal('none', 'view', 'edit'),\r\n  requireWatchApproval: D.boolean,\r\n  rootActivityId: D.nullable(D.string),\r\n  rootSkillId: D.nullable(D.string),\r\n  managers: D.array(managerDecoder),\r\n});\r\n\r\nconst invalidReasonDecoder = D.literal(\r\n  'no_group',\r\n  'frozen_membership',\r\n  'already_member',\r\n  'conflicting_team_participation',\r\n  'team_conditions_not_met'\r\n);\r\n\r\nconst isCodeValidDecoder = pipe(\r\n  D.struct({\r\n    valid: D.boolean,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      group: groupDecoder,\r\n      reason: invalidReasonDecoder,\r\n    }),\r\n  ),\r\n);\r\n\r\nexport type IsCodeValid = D.TypeOf<typeof isCodeValidDecoder>;\r\n\r\nexport type InvalidCodeReason = D.TypeOf<typeof invalidReasonDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JoinByCodeService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  checkCodeValidity(code: string): Observable<IsCodeValid> {\r\n    let params = new HttpParams();\r\n    params = params.set('code', code);\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/is-code-valid`,\r\n        { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(isCodeValidDecoder),\r\n      );\r\n  }\r\n\r\n  joinGroupThroughCode(code: string, approvals: string[] = []): Observable<void> {\r\n    let params = new HttpParams();\r\n    params = params.set('code', code).set('approvals', approvals.join(','));\r\n    return this.http\r\n      .post<SimpleActionResponse>(`${appConfig.apiUrl}/current-user/group-memberships/by-code`, null, { params: params })\r\n      .pipe(\r\n        map(assertSuccess)\r\n      );\r\n  }\r\n}\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { InvalidCodeReason, JoinByCodeService } from '../../../../shared/http-services/join-by-code.service';\r\nimport { ItemData } from '../../../item/services/item-datasource.service';\r\n\r\n@Component({\r\n  selector: 'alg-access-code-view',\r\n  templateUrl: './access-code-view.component.html',\r\n  styleUrls: [ './access-code-view.component.scss' ]\r\n})\r\nexport class AccessCodeViewComponent {\r\n  @Input() sectionLabel = '';\r\n  @Input() buttonLabel = '';\r\n  @Input() itemData?: ItemData;\r\n  @Input() sectionStyleClass = '';\r\n  @Output() groupJoined = new EventEmitter<void>();\r\n\r\n  code = '';\r\n  state: 'ready'|'loading' = 'ready';\r\n\r\n  constructor(\r\n    private joinByCodeService: JoinByCodeService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private confirmationService: ConfirmationService,\r\n  ) { }\r\n\r\n  onClickAccess(): void {\r\n    this.state = 'loading';\r\n\r\n    this.joinByCodeService.checkCodeValidity(this.code).subscribe({\r\n      error: () => {\r\n        this.actionFeedbackService.error($localize`Failed to check code validity, please retry. If the problem persists, contact us.`);\r\n      },\r\n      next: response => {\r\n        this.state = 'ready';\r\n\r\n        if (!response.valid) {\r\n          this.actionFeedbackService.error(\r\n            response.reason ? this.invalidCodeReasonToString(response.reason): $localize`The provided code is invalid`\r\n          );\r\n          return;\r\n        }\r\n\r\n        if (!response.group) {\r\n          throw new Error('Unexpected: Missed group for invalid state');\r\n        }\r\n\r\n        let message = $localize`Are you sure you want to join the group \"${response.group.name}\"?`;\r\n\r\n        if (this.itemData) {\r\n          const id = this.itemData.item.type === 'Skill' ? response.group.rootSkillId : response.group.rootActivityId;\r\n\r\n          if (this.itemData.item.id !== id) {\r\n            message = $localize`The code does not correspond to the group attached to this page. Are you sure you want to join the group \"\r\n            ${response.group.name}\"?`;\r\n          }\r\n        }\r\n\r\n        this.confirmationService.confirm({\r\n          header: $localize`Join the group \"${response.group.name}\"`,\r\n          message: message,\r\n          acceptLabel: $localize`Join`,\r\n          acceptIcon: 'fa fa-check',\r\n          rejectLabel: $localize`Cancel`,\r\n          accept: () => {\r\n            this.joinGroup(this.code);\r\n          }\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  joinGroup(code: string): void {\r\n    this.joinByCodeService.joinGroupThroughCode(code).subscribe({\r\n      next: _result => {\r\n        this.code = '';\r\n        this.actionFeedbackService.success($localize`Changes successfully saved.`);\r\n        this.groupJoined.emit();\r\n      },\r\n      error: err => {\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      },\r\n    });\r\n  }\r\n\r\n  invalidCodeReasonToString(reason: InvalidCodeReason): string {\r\n    switch (reason) {\r\n      case 'already_member':\r\n        return $localize`You are already a member of this group.`;\r\n      case 'conflicting_team_participation':\r\n        return $localize`You cannot join this team as it would conflict with another team you belong to.`;\r\n      case 'frozen_membership':\r\n        return $localize`This group does not allow any membership change.`;\r\n      case 'no_group':\r\n        return $localize`No group corresponds to this code.`;\r\n      case 'team_conditions_not_met':\r\n        return $localize`You cannot join this team as it would break the entry conditions of content it is participating to.`;\r\n    }\r\n  }\r\n\r\n}\r\n","<alg-section-paragraph icon=\"fa fa-sign-in-alt\" [label]=\"sectionLabel\" [ngClass]=\"sectionStyleClass\">\r\n  <div class=\"input-wrapper\">\r\n    <input\r\n      #input\r\n      type=\"text\"\r\n      i18n-placeholder placeholder=\"Group code\"\r\n      (keyup)=\"0\"\r\n      [(ngModel)]=\"code\"\r\n      [disabled]=\"state === 'loading'\"\r\n    >\r\n    <span class=\"icon\">\r\n      <i class=\"fa fa-font\"></i>\r\n    </span>\r\n    <p-button\r\n      styleClass=\"alg-button p-button-rounded\"\r\n      icon=\"fa fa-check\"\r\n      [label]=\"buttonLabel\"\r\n      [disabled]=\"input.value === '' || state === 'loading'\"\r\n      (onClick)=\"onClickAccess()\"\r\n    ></p-button>\r\n  </div>\r\n</alg-section-paragraph>\r\n","<div class=\"add-content-wrapper\">\r\n  <alg-input\r\n    [parentForm]=\"addContentForm\"\r\n    [hasClearButton]=\"true\"\r\n    (focus)=\"onNewFocus()\"\r\n    (blur)=\"onBlur()\"\r\n    [ngClass]=\"{'input-light': focused === 'searchExisting'}\"\r\n    name=\"create\"\r\n    [placeholder]=\"inputCreatePlaceholder\"\r\n    i18n-pTooltip pTooltip=\"Enter at least 3 characters\"\r\n    tooltipEvent=\"focus\"\r\n    tooltipPosition=\"bottom\"\r\n    [tooltipDisabled]=\"trimmedInputsValue.create.length >= minInputLength\"\r\n    *ngIf=\"showCreateUI\"\r\n  >\r\n  </alg-input>\r\n  <span class=\"label\" i18n *ngIf=\"showCreateUI && showSearchUI\">or</span>\r\n  <alg-input\r\n    [parentForm]=\"addContentForm\"\r\n    [hasClearButton]=\"true\"\r\n    (focus)=\"onExistingFocus()\"\r\n    (blur)=\"onBlur()\"\r\n    [ngClass]=\"{'input-light': focused === 'create'}\"\r\n    name=\"searchExisting\"\r\n    i18n-placeholder placeholder=\"Search for existing content\"\r\n    i18n-pTooltip pTooltip=\"Enter at least 3 characters\"\r\n    tooltipEvent=\"focus\"\r\n    tooltipPosition=\"bottom\"\r\n    [tooltipDisabled]=\"trimmedInputsValue.searchExisting.length >= minInputLength\"\r\n    *ngIf=\"showSearchUI\"\r\n  >\r\n  </alg-input>\r\n</div>\r\n\r\n<ng-container *ngIf=\"loading; else ready\" style=\"text-align: center;\">\r\n  <alg-loading size=\"medium\"></alg-loading>\r\n</ng-container>\r\n<ng-template #ready>\r\n  <div *ngIf=\"trimmedInputsValue.create.length >= minInputLength\" class=\"new-content-type\">\r\n    <div class=\"new-content-container\">\r\n      <div *ngFor=\"let newContent of allowedTypesForNewContent\" class=\"content-type-item-container\" (click)=\"addNew(newContent.type)\">\r\n        <div class=\"item-image-wrapper\">\r\n          <span><i class=\"{{newContent.icon}}\"></i></span>\r\n        </div>\r\n        <div class=\"item-title\">{{newContent.title}}</div>\r\n        <div class=\"item-description\">{{newContent.description}}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <ng-container *ngIf=\"state\">\r\n    <div *ngIf=\"state.isError\">\r\n      <div class=\"text-center\" i18n>An error occurred while searching. If the problem persists, please contact us.</div>\r\n    </div>\r\n\r\n    <div *ngIf=\"trimmedInputsValue.searchExisting.length >= minInputLength && !state.isError\">\r\n      <h3 i18n>Select a Content</h3>\r\n      <p-table class=\"alg-table --add-content\" [value]=\"(state.data || []) | slice : 0 : 4\" [loading]=\"state.isFetching\">\r\n        <ng-template pTemplate=\"body\" let-item>\r\n          <tr style=\"background-color: #dfe7f4\">\r\n            <td><span class=\"type\">{{ item.type }}</span></td>\r\n            <td class=\"main\">{{ item.title }}</td>\r\n            <td>\r\n              <p-button\r\n                styleClass=\"alg-button p-small-button p-button-rounded\"\r\n                [icon]=\"addedIds.includes(item.id) ? 'fa fa-check' : selectExistingText === 'Add' ? 'fa fa-plus' : ''\"\r\n                [label]=\"addedIds.includes(item.id) ? addedText : selectExistingText\"\r\n                [disabled]=\"addedIds.includes(item.id)\"\r\n                (onClick)=\"addExisting(item)\"\r\n              ></p-button>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"emptymessage\">\r\n          <tr>\r\n            <td [attr.colspan]=\"1\" i18n>No records found</td>\r\n          </tr>\r\n        </ng-template>\r\n      </p-table>\r\n      <p class=\"more-items text-center\" *ngIf=\"(state.data || []).length > 4\">\r\n        More than 4 results match your search terms. If you have not found what you are looking for, make your search more specific.\r\n      </p>\r\n    </div>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { map, filter, switchMap, debounceTime } from 'rxjs/operators';\r\nimport { ItemCorePerm } from 'src/app/shared/models/domain/item-permissions';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\nimport { FetchState } from '../../../../shared/helpers/state';\r\n\r\nexport interface AddedContent<T> {\r\n  id?: string,\r\n  title: string,\r\n  type: T,\r\n  permissions?: ItemCorePerm,\r\n}\r\n\r\nexport interface NewContentType<T> {\r\n  type: T,\r\n  icon: string,\r\n  title: string,\r\n  description: string,\r\n}\r\n\r\nconst defaultFormValues = { create: '', searchExisting: '' };\r\n\r\n@Component({\r\n  selector: 'alg-add-content',\r\n  templateUrl: './add-content.component.html',\r\n  styleUrls: [ './add-content.component.scss' ],\r\n})\r\nexport class AddContentComponent<Type> implements OnInit, OnDestroy {\r\n  @Input() allowedTypesForNewContent: NewContentType<Type>[] = [];\r\n  @Input() searchFunction?: (searchValue: string) => Observable<AddedContent<Type>[]>;\r\n  @Input() loading = false;\r\n  @Input() addedIds: string[] = [];\r\n  @Input() selectExistingText: string = $localize`Add`;\r\n  @Input() addedText: string = $localize`Already added`;\r\n  @Input() inputCreatePlaceholder = $localize`Enter a title to create a new child`;\r\n  @Input() showCreateUI = true;\r\n  @Input() showSearchUI = true;\r\n\r\n  @Output() contentAdded = new EventEmitter<AddedContent<Type>>();\r\n\r\n  readonly minInputLength = 3;\r\n\r\n  state?: FetchState<AddedContent<Type>[]>;\r\n  addContentForm: UntypedFormGroup = this.formBuilder.group(defaultFormValues);\r\n  trimmedInputsValue = defaultFormValues;\r\n\r\n  focused?: 'create' | 'searchExisting';\r\n\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(private formBuilder: UntypedFormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    if (!this.searchFunction && this.showSearchUI) throw new Error('The input \\'searchFunction\\' is required');\r\n    const searchFunction = this.searchFunction;\r\n\r\n    this.subscriptions.push(\r\n      this.addContentForm.valueChanges.subscribe((changes: typeof defaultFormValues) => {\r\n        this.trimmedInputsValue = {\r\n          create: changes.create.trim(),\r\n          searchExisting: changes.searchExisting.trim(),\r\n        };\r\n      })\r\n    );\r\n\r\n    if (!searchFunction) {\r\n      return;\r\n    }\r\n\r\n    const existingTitleControl: Observable<string> | undefined = this.addContentForm.get('searchExisting')?.valueChanges;\r\n    if (existingTitleControl) this.subscriptions.push(\r\n      existingTitleControl.pipe(\r\n        map(value => value.trim()),\r\n        filter(value => this.checkLength(value)),\r\n        debounceTime(300),\r\n        switchMap(value => searchFunction(value).pipe(mapToFetchState())),\r\n      ).subscribe(state =>\r\n        this.state = state\r\n      )\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n  }\r\n\r\n  onNewFocus(): void {\r\n    if (this.focused === 'create') return;\r\n    this.reset('create');\r\n  }\r\n\r\n  onExistingFocus(): void {\r\n    if (this.focused === 'searchExisting') return;\r\n    this.reset('searchExisting');\r\n  }\r\n\r\n  onBlur(): void {\r\n    // Do not un-lighten the input if there is content in the other one\r\n    if (this.focused === 'searchExisting' && this.trimmedInputsValue.searchExisting) return;\r\n    if (this.focused === 'create' && this.trimmedInputsValue.create) return;\r\n    this.focused = undefined;\r\n  }\r\n\r\n  addNew(type: Type): void {\r\n    const title = this.trimmedInputsValue.create;\r\n    if (!this.checkLength(title)) return;\r\n    this.contentAdded.emit({\r\n      title: title,\r\n      type: type,\r\n    });\r\n    this.reset();\r\n  }\r\n\r\n  addExisting(item: AddedContent<Type>): void {\r\n    this.contentAdded.emit(item);\r\n  }\r\n\r\n  private checkLength(s: string): boolean {\r\n    return s.length >= this.minInputLength;\r\n  }\r\n\r\n  private reset(focused?: 'searchExisting' | 'create'): void {\r\n    this.addContentForm.reset(defaultFormValues);\r\n    this.focused = focused;\r\n  }\r\n}\r\n","<div class=\"section-container\" [ngClass]=\"theme\">\r\n  <alg-section-header\r\n      [title]=\"header\"\r\n      [icon]=\"icon\"\r\n      [theme]=\"theme\"\r\n      [styleClass]=\"{disabled: disabled, 'cursor-pointer': collapsible}\"\r\n      (click)=\"onCollapse()\"\r\n  >\r\n    <ng-template #content>\r\n      <p-tag\r\n        *ngIf=\"!(collapsed && collapsible) && errorMessage\"\r\n        styleClass=\"mr-2\"\r\n        severity=\"danger\"\r\n        [value]=\"errorMessage\"\r\n      ></p-tag>\r\n      <ng-container *ngIf=\"contentTemplate && collapsed && collapsible\"\r\n                    [ngTemplateOutlet]=\"contentTemplate\"\r\n                    [ngTemplateOutletContext]=\"{ $implicit: true }\"\r\n      ></ng-container>\r\n      <span class=\"toggle-expand\" *ngIf=\"collapsible\">\r\n        <i *ngIf=\"collapsed\" class=\"fa fa-caret-down\"></i>\r\n        <i *ngIf=\"!collapsed\" class=\"fa fa-caret-up\"></i>\r\n      </span>\r\n    </ng-template>\r\n  </alg-section-header>\r\n\r\n  <ng-container\r\n    *ngIf=\"contentTemplate && (!collapsed || !collapsible)\"\r\n    [ngTemplateOutlet]=\"contentTemplate\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: false }\"\r\n  ></ng-container>\r\n</div>\r\n","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-collapsible-section',\r\n  templateUrl: './collapsible-section.component.html',\r\n  styleUrls: [ './collapsible-section.component.scss' ]\r\n})\r\nexport class CollapsibleSectionComponent {\r\n\r\n  @Input() header = '';\r\n  @Input() errorMessage?: string;\r\n  @Input() icon = '';\r\n\r\n  @Input() disabled = false;\r\n  @Input() collapsed = true;\r\n  @Input() collapsible = true;\r\n  @Input() theme: 'success' | 'warning' | 'danger' = 'success';\r\n\r\n  @ContentChild('content') contentTemplate?: TemplateRef<any>;\r\n\r\n  constructor() { }\r\n\r\n  onCollapse(): void {\r\n    if (this.collapsible) {\r\n      this.collapsed = !this.collapsed;\r\n    }\r\n  }\r\n}\r\n","<div class=\"progress-level-container\" [ngClass]=\"colorTheme\">\r\n  <ng-container *ngFor=\"let i of totalArray\">\r\n    <span class=\"progress-level-item\" [ngClass]=\"{active: i < value, revert: theme === 'revert'}\"></span>\r\n    <span *ngIf=\"i + 1 < maximum\" class=\"progress-level-item-link\" [ngClass]=\"{active: i + 1 < value, revert: theme === 'revert'}\"></span>\r\n  </ng-container>\r\n</div>\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-progress-level',\r\n  templateUrl: './progress-level.component.html',\r\n  styleUrls: [ './progress-level.component.scss' ]\r\n})\r\nexport class ProgressLevelComponent implements OnChanges {\r\n\r\n  @Input() theme : 'default' | 'revert' = 'default';\r\n  @Input() value = 0;\r\n  @Input() maximum = 4;\r\n  @Input() colorTheme: 'success' | 'warning' | 'danger' = 'success';\r\n\r\n  totalArray : number[] = []; // array containing [0, 1, 2, ...] as the template cannot iterate by itself\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    this.totalArray = [ ...Array(this.maximum).keys() ];\r\n  }\r\n}\r\n","<div *ngIf=\"collapsed\" class=\"header-content\">\r\n  <alg-progress-level [maximum]=\"values.length\" [value]=\"selected + 1\" theme=\"revert\" [colorTheme]=\"theme\"></alg-progress-level>\r\n  <span class=\"selected-progress-level\">{{ values[selected]?.label }}</span>\r\n</div>\r\n\r\n<div *ngIf=\"!collapsed\" class=\"progress-select-body\">\r\n  <div class=\"progress-select-item\">\r\n    <div class=\"progress-control\">\r\n      <span *ngIf=\"values.length > 0\" class=\"progress-branch\" [ngClass]=\"{active: selected >= 0}\"></span>\r\n    </div>\r\n    <div class=\"progress-desc header-comment\">\r\n      <ng-container *ngIf=\"descriptionTemplate\" [ngTemplateOutlet]=\"descriptionTemplate\" [ngTemplateOutletContext]=\"{ $implicit: value }\"></ng-container>\r\n    </div>\r\n  </div>\r\n  <div *ngFor=\"let item of values; let idx = index;\" class=\"progress-select-item\">\r\n    <div class=\"progress-control\">\r\n      <span\r\n        class=\"progress-point\"\r\n        [ngClass]=\"{active: idx < selected + 1, last: idx + 1 == selected + 1, 'active-light': item.selected}\"\r\n        (click)=\"onSet(item.value)\"\r\n        [pTooltip]=\"item.tooltip?.join('\\n') || ''\"\r\n        tooltipPosition=\"right\"\r\n        tooltipStyleClass=\"permissions-dialog\"\r\n        [escape]=\"false\"\r\n      >\r\n        <i *ngIf=\"idx < selected || item.selected\" class=\"fa fa-check\"></i>\r\n        <i *ngIf=\"idx === selected\" class=\"fa fa-check\"></i>\r\n      </span>\r\n      <span *ngIf=\"idx + 1 < values.length\" class=\"progress-branch\" [ngClass]=\"{active: idx < selected, disabled: values[idx + 1]?.disabled}\"></span>\r\n    </div>\r\n    <div class=\"progress-desc\">\r\n      <div class=\"progress-desc-name\" [ngClass]=\"{active: idx < selected + 1}\" (click)=\"onSet(item.value)\">{{ item.label }}</div>\r\n      <div class=\"progress-desc-comment\">{{ item.comment }}</div>\r\n    </div>\r\n    <div *ngIf=\"item.disabled\" class=\"gray-overlay tool\"\r\n      [pTooltip]=\"item.tooltip?.join('\\n') || ''\"\r\n      tooltipPosition=\"top\"\r\n      tooltipStyleClass=\"permissions-dialog\"\r\n      [escape]=\"false\"\r\n    ></div>\r\n  </div>\r\n</div>\r\n","import { Component, Input, OnChanges, SimpleChanges,\r\n  Output, EventEmitter, OnInit, ContentChild, TemplateRef, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nexport interface ProgressSelectValue<T> {\r\n  label: string,\r\n  comment: string,\r\n  value: T,\r\n  disabled?: boolean,\r\n  tooltip?: string[],\r\n  selected?: boolean,\r\n}\r\n\r\n/**\r\n * This component is to be used in a `collapsible-section` component\r\n * To use inside form, just set the `formControlName`\r\n * ```\r\n * <alg-collapsible-section ... >\r\n *      <ng-template #content let-collapsed>\r\n *        <alg-progress-select\r\n *          [collapsed]=\"collapsed\"\r\n *          ...\r\n *        ></alg-progress-select>\r\n *      </ng-template>\r\n *    </alg-collapsible-section>\r\n * ```\r\n */\r\n@Component({\r\n  selector: 'alg-progress-select',\r\n  templateUrl: './progress-select.component.html',\r\n  styleUrls: [ './progress-select.component.scss' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ProgressSelectComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class ProgressSelectComponent<T> implements OnChanges, OnInit, ControlValueAccessor {\r\n\r\n  @Input() collapsed = false;\r\n\r\n  @Input() values: ProgressSelectValue<T>[] = [];\r\n  @Input() defaultValue?: T;\r\n  @Input() value?: T;\r\n  @Input() theme: 'success' | 'warning' | 'danger' = 'success';\r\n\r\n  @ContentChild('description') descriptionTemplate?: TemplateRef<any>;\r\n\r\n  @Output() valueChange = new EventEmitter<T>();\r\n\r\n  selected = 0;\r\n\r\n  private onChange: (value: T) => void = () => {};\r\n\r\n  constructor() { }\r\n\r\n  writeValue(value: T): void {\r\n    this.value = value;\r\n    this.selected = Math.max(0, this.values.findIndex(item => item.value === this.value));\r\n  }\r\n\r\n  registerOnChange(fn: (value: T) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(_fn: (value: T) => void): void {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.defaultValue !== undefined) this.value = this.defaultValue;\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    this.selected = Math.max(0, this.values.findIndex(item => item.value === this.value));\r\n  }\r\n\r\n  onSet(value: T): void {\r\n    this.writeValue(value);\r\n    this.onChange(value);\r\n    this.valueChange.emit(value);\r\n  }\r\n}\r\n","<div *ngIf=\"collapsed\" class=\"header-content\">\r\n  <ng-container *ngIf=\"value; else no\" i18n>Yes</ng-container>\r\n  <ng-template #no i18n>No</ng-template>\r\n</div>\r\n\r\n<div *ngIf=\"!collapsed\" class=\"body\">\r\n  <div class=\"item\">\r\n    <div class=\"desc header-comment\" *ngIf=\"descriptionTemplate\">\r\n      <ng-container [ngTemplateOutlet]=\"descriptionTemplate\"></ng-container>\r\n    </div>\r\n  </div>\r\n  <div class=\"item\">\r\n    <div class=\"switch\">\r\n      <alg-switch [checked]=\"value\" (change)=\"onSet($event)\" mode=\"circular\"></alg-switch>\r\n    </div>\r\n    <div class=\"desc\">\r\n      <div class=\"desc-name\" [ngClass]=\"{ active: value }\" (click)=\"onSet(!value)\">\r\n        <ng-container\r\n          *ngIf=\"labelTemplate\"\r\n          [ngTemplateOutlet]=\"labelTemplate\"\r\n          [ngTemplateOutletContext]=\"{ $implicit: value }\"\r\n        ></ng-container>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"disabledTooltip.length\" class=\"gray-overlay tool\"\r\n      [pTooltip]=\"disabledTooltip.join('\\n') || ''\"\r\n      tooltipPosition=\"top\"\r\n      tooltipStyleClass=\"permissions-dialog\"\r\n      [escape]=\"false\"\r\n    ></div>\r\n  </div>\r\n</div>\r\n","import { Component, ContentChild, EventEmitter, forwardRef, Input, Output, TemplateRef } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\n\r\n/**\r\n * This component is to be used in a `collapsible-section` component.\r\n * To use inside form, just set the `formControlName`\r\n * ```\r\n * <alg-collapsible-section ... >\r\n *      <ng-template #content let-collapsed>\r\n *        <alg-switch-field\r\n *          [collapsed]=\"collapsed\"\r\n *          ...\r\n *        ></alg-switch-field>\r\n *      </ng-template>\r\n *    </alg-collapsible-section>\r\n * ```\r\n */\r\n@Component({\r\n  selector: 'alg-switch-field',\r\n  templateUrl: './switch-field.component.html',\r\n  styleUrls: [ './switch-field.component.scss' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SwitchFieldComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class SwitchFieldComponent implements ControlValueAccessor {\r\n\r\n  @Input() value = false;\r\n  @Input() collapsed = false;\r\n\r\n  // If this is not empty, the switch will be disabled, and the content of this array will appear as a tooltip\r\n  @Input() disabledTooltip: string[] = [];\r\n\r\n  @ContentChild('description') descriptionTemplate?: TemplateRef<any>;\r\n  @ContentChild('label') labelTemplate?: TemplateRef<any>;\r\n\r\n  @Output() valueChange = new EventEmitter<boolean>();\r\n\r\n  private onChange: (value: boolean) => void = () => {};\r\n\r\n  writeValue(value: boolean): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: (value: boolean) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(_fn: (value: boolean) => void): void {\r\n  }\r\n\r\n  onSet(value: boolean): void {\r\n    this.writeValue(value);\r\n    this.valueChange.emit(value);\r\n    this.onChange(value);\r\n  }\r\n}\r\n","<div class=\"elements\">\r\n  <div class=\"element\" *ngIf=\"showField.days\">\r\n    <p class=\"label\">\r\n      <small i18n>Days</small>\r\n    </p>\r\n    <p-inputMask\r\n        placeholder=\"DDD\"\r\n        slotChar=\"DDD\"\r\n        mask=\"9?99\"\r\n        [unmask]=\"true\"\r\n        [size]=\"8\"\r\n        [(ngModel)]=\"days\"\r\n        (ngModelChange)=\"handleChange()\"\r\n    >\r\n    </p-inputMask>\r\n  </div>\r\n  <div class=\"element\" *ngIf=\"showField.hours\">\r\n    <p class=\"label\">\r\n      <small i18n>Hours</small>\r\n    </p>\r\n    <p-inputMask\r\n        [placeholder]=\"showField.days ? 'HH' : 'HHH'\"\r\n        [slotChar]=\"showField.days ? 'HH' : 'HHH'\"\r\n        [mask]=\"showField.days ? '9?9' : '9?99'\"\r\n        [unmask]=\"true\"\r\n        [size]=\"8\"\r\n        [(ngModel)]=\"hours\"\r\n        (ngModelChange)=\"handleChange()\"\r\n    >\r\n    </p-inputMask>\r\n  </div>\r\n  <div class=\"element\" *ngIf=\"showField.minutes\">\r\n    <p class=\"label\">\r\n      <small i18n>Minutes</small>\r\n    </p>\r\n    <p-inputMask\r\n        placeholder=\"MM\"\r\n        slotChar=\"MM\"\r\n        mask=\"9?9\"\r\n        [unmask]=\"true\"\r\n        [size]=\"8\"\r\n        [(ngModel)]=\"minutes\"\r\n        (ngModelChange)=\"handleChange()\"\r\n    >\r\n    </p-inputMask>\r\n  </div>\r\n  <div class=\"element\" *ngIf=\"showField.seconds\">\r\n    <p class=\"label\">\r\n      <small i18n>Seconds</small>\r\n    </p>\r\n    <p-inputMask\r\n        placeholder=\"SS\"\r\n        slotChar=\"SS\"\r\n        mask=\"9?9\"\r\n        [unmask]=\"true\"\r\n        [size]=\"8\"\r\n        [(ngModel)]=\"seconds\"\r\n        (ngModelChange)=\"handleChange()\"\r\n    >\r\n    </p-inputMask>\r\n  </div>\r\n</div>\r\n\r\n<alg-input-error [control]=\"control\"></alg-input-error>\r\n<div *ngIf=\"!control?.invalid\">&nbsp;</div>\r\n","import { Component, EventEmitter, forwardRef, Injector, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  UntypedFormGroup,\r\n  NgControl,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n} from '@angular/forms';\r\nimport { Duration, MAX_SECONDS_FORMAT_DURATION, MAX_TIME_FORMAT_DURATION } from 'src/app/shared/helpers/duration';\r\n\r\nconst MAX_HOURS_VALUE = 23;\r\nconst MAX_MINUTES_VALUE = 59;\r\nconst MAX_SECONDS_VALUE = 59;\r\n\r\n@Component({\r\n  selector: 'alg-duration[ngModel], alg-duration[formControl], alg-duration[formControlName]',\r\n  templateUrl: './duration.component.html',\r\n  styleUrls: [ './duration.component.scss' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => DurationComponent),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => DurationComponent),\r\n      multi: true,\r\n    },\r\n  ]\r\n})\r\nexport class DurationComponent implements OnInit, OnChanges, ControlValueAccessor, Validator {\r\n  @Output() change = new EventEmitter<Duration | null>();\r\n\r\n  @Input() name = '';\r\n  @Input() parentForm?: UntypedFormGroup;\r\n  @Input() layout: 'DHM' | 'HMS' = 'HMS';\r\n  /**\r\n   * Currently, the backend stores duration values with 2 distinct formats:\r\n   * - 'time': uses MySQL 'time' column, has the shape \"h:m:s\" and is limited to 838:59:59\r\n   * - 'seconds': the duration is stored as a number of seconds, the limit is the integer limit which is `2147483647`\r\n   *\r\n   * This property allows to decide which limit to apply for validation.\r\n   *\r\n   * If you are using the 'time' format, set `limitToTimeMax` to true.\r\n   */\r\n  @Input() limitToTimeMax = false;\r\n\r\n  control?: AbstractControl;\r\n\r\n  get maxDuration(): number {\r\n    return this.limitToTimeMax ? MAX_TIME_FORMAT_DURATION : MAX_SECONDS_FORMAT_DURATION;\r\n  }\r\n\r\n  days = '0';\r\n  hours = '0';\r\n  minutes = '0';\r\n  seconds = '0';\r\n\r\n  showField = {\r\n    days: false,\r\n    hours: false,\r\n    minutes: false,\r\n    seconds: false,\r\n  };\r\n\r\n  constructor(private injector: Injector) {}\r\n\r\n  ngOnInit(): void {\r\n    // Inject NgControl at init to avoid circular dependency\r\n    // https://stackoverflow.com/questions/39809084/injecting-ngcontrol-in-custom-validator-directive-causes-cyclic-dependency\r\n    this.control = this.parentForm && this.name\r\n      ? this.parentForm.get(this.name) ?? undefined\r\n      : this.injector.get(NgControl, null)?.control ?? undefined;\r\n    this.showField = {\r\n      days: this.layout === 'DHM',\r\n      hours: this.layout === 'DHM' || this.layout === 'HMS',\r\n      minutes: this.layout === 'DHM' || this.layout === 'HMS',\r\n      seconds: this.layout === 'HMS',\r\n    };\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.layout && !changes.layout.firstChange) throw new Error('layout must not change');\r\n  }\r\n\r\n  private onChange: (duration: Duration | null) => void = () => {};\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    const duration = control.value as Duration | null;\r\n    if (!duration) return null;\r\n    if (!duration.isValid()) return { invalidDuration: { invalidDuration: true } };\r\n    if (duration.ms > this.maxDuration) {\r\n      const duration = new Duration(this.maxDuration);\r\n      switch (this.layout) {\r\n        case 'DHM':\r\n          return { max: { max: duration.getDHM().join(':') } };\r\n        case 'HMS':\r\n          return { max: { max: duration.getHMS().join(':') } };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  writeValue(duration: Duration | null): void {\r\n    if (!duration) return;\r\n    switch (this.layout) {\r\n      case 'HMS':\r\n        [ this.hours, this.minutes, this.seconds ] = duration.getHMS();\r\n        break;\r\n      case 'DHM':\r\n        [ this.days, this.hours, this.minutes ] = duration.getDHM();\r\n        break;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (duration: Duration | null) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(_fn: (duration: Duration | null) => void): void {\r\n  }\r\n\r\n  emitValue(duration: Duration | null): void {\r\n    this.change.emit(duration);\r\n    this.onChange(duration);\r\n  }\r\n\r\n  handleChange(): void {\r\n    switch (this.layout) {\r\n      case 'DHM':\r\n        return this.emitValue(this.handleDHMChange());\r\n      case 'HMS':\r\n        return this.emitValue(this.handleHMSChange());\r\n    }\r\n  }\r\n\r\n  private handleHMSChange(): Duration | null {\r\n    if (this.hours === '' || this.minutes === '' || this.seconds === '') return null;\r\n\r\n    if (+this.minutes > MAX_MINUTES_VALUE) this.minutes = MAX_MINUTES_VALUE.toString();\r\n    if (+this.seconds > MAX_SECONDS_VALUE) this.seconds = MAX_SECONDS_VALUE.toString();\r\n\r\n    return Duration.fromHMS(+this.hours, +this.minutes, +this.seconds);\r\n  }\r\n\r\n  private handleDHMChange(): Duration | null {\r\n    if (this.days === '' || this.hours === '' || this.minutes === '') return null;\r\n\r\n    if (+this.hours > MAX_HOURS_VALUE) this.hours = MAX_HOURS_VALUE.toString();\r\n    if (+this.minutes > MAX_MINUTES_VALUE) this.minutes = MAX_MINUTES_VALUE.toString();\r\n\r\n    return Duration.fromDHM(+this.days, +this.hours, +this.minutes);\r\n  }\r\n\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-floating-save',\r\n  templateUrl: './floating-save.component.html',\r\n  styleUrls: [ './floating-save.component.scss' ]\r\n})\r\nexport class FloatingSaveComponent {\r\n\r\n  @Input() saving = false;\r\n  @Output() save = new EventEmitter<void>();\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  constructor() {}\r\n\r\n  onSave(): void {\r\n    this.save.emit();\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.cancel.emit();\r\n  }\r\n}\r\n","<p-button\r\n    class=\"save\"\r\n    styleClass=\"p-button-rounded p-button-success\"\r\n    i18n-label label=\"Save\"\r\n    [disabled]=\"saving\"\r\n    (onClick)=\"onSave()\"\r\n></p-button>\r\n\r\n<p-button\r\n    styleClass=\"p-button-rounded p-button-outlined p-button-danger\"\r\n    i18n-label label=\"Cancel Changes\"\r\n    [disabled]=\"saving\"\r\n    (onClick)=\"onCancel()\"\r\n></p-button>\r\n","<div *ngIf=\"control && control.errors\" class=\"input-error\">\r\n  <div *ngIf=\"control.errors.required\"><small i18n>This field is required</small></div>\r\n  <div *ngIf=\"control.errors.minlength as err\"><small i18n>This field is too short, minimum : {{err.requiredLength}} characters.</small></div>\r\n  <div *ngIf=\"control.errors.maxlength as err\"><small i18n>This field is too long, maximum : {{err.requiredLength}} characters.</small></div>\r\n  <div *ngIf=\"control.errors.min as err\"><small i18n>Invalid value, minimum: {{ err.min }}</small></div>\r\n  <div *ngIf=\"control.errors.max as err\"><small i18n>Invalid value, maximum: {{ err.max }}</small></div>\r\n  <div *ngIf=\"control.errors.invalidDuration as err\"><small i18n>Invalid duration</small></div>\r\n</div>\r\n","import { Component, Input, OnChanges } from '@angular/core';\r\nimport { AbstractControl, UntypedFormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'alg-input-error',\r\n  templateUrl: './form-error.component.html',\r\n  styleUrls: [ './form-error.component.scss' ],\r\n})\r\nexport class FormErrorComponent implements OnChanges {\r\n  @Input() form?: UntypedFormGroup;\r\n  @Input() inputName = '';\r\n  @Input() control?: AbstractControl;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (!this.control && this.form && this.inputName) {\r\n      this.control = this.form.get(this.inputName) ?? undefined;\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"input-wrapper\" [ngClass]=\"{ large: size === 'large', light: !isDark }\" *ngIf=\"parentForm\" [formGroup]=\"parentForm\">\r\n  <input\r\n    #input\r\n    [type]=\"inputType\"\r\n    [placeholder]=\"placeholder\"\r\n    [ngClass]=\"{'has-button': buttonIcon}\"\r\n    [formControlName]=\"name\"\r\n    (focus)=\"focus.emit($event)\"\r\n    (blur)=\"blur.emit($event)\"\r\n    [pTooltip]=\"pTooltip\"\r\n    [tooltipEvent]=\"tooltipEvent\"\r\n    [tooltipPosition]=\"tooltipPosition\"\r\n    [tooltipDisabled]=\"tooltipDisabled\"\r\n  >\r\n  <span *ngIf=\"hasClearButton && input.value\" class=\"clear-button\">\r\n    <button type=\"button\" (click)=\"clearInput(); input.focus()\" tabindex=\"-1\">\r\n      <i class=\"pi pi-times\"></i>\r\n    </button>\r\n  </span>\r\n  <span class=\"icon\">\r\n    <i class=\"fa fa-{{inputIcon}}\"></i>\r\n  </span>\r\n  <span *ngIf=\"buttonIcon\" class=\"input-button\" (click)=\"onButtonClick()\">\r\n    <i class=\"fa fa-{{buttonIcon}}\"></i>\r\n  </span>\r\n</div>\r\n\r\n<alg-input-error [form]=\"parentForm\" [inputName]=\"name\"></alg-input-error>\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'alg-input',\r\n  templateUrl: './input.component.html',\r\n  styleUrls: [ './input.component.scss' ],\r\n})\r\nexport class InputComponent {\r\n  @Input() name = ''; // name of the input in the parent form\r\n  @Input() parentForm?: UntypedFormGroup;\r\n\r\n  @Input() placeholder = ''; // avoid 'undefined' if no placeholder specified\r\n  @Input() isDark = true;\r\n  @Input() size: 'small' | 'large' = 'small';\r\n  @Input() inputType = 'text';\r\n  @Input() inputIcon = 'font'; // a font-awesome icon identifier\r\n  @Input() buttonIcon?: string; // a font-awesome icon identifier for the input button\r\n  @Input() hasClearButton = false;\r\n\r\n  @Input() pTooltip = '';\r\n  @Input() tooltipEvent = 'hover';\r\n  @Input() tooltipPosition = 'right';\r\n  @Input() tooltipDisabled = false;\r\n\r\n  @Output() click = new EventEmitter<void>();\r\n  @Output() focus = new EventEmitter<FocusEvent>();\r\n  @Output() blur = new EventEmitter<FocusEvent>();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  onButtonClick(): void {\r\n    this.click.emit();\r\n  }\r\n\r\n  clearInput(): void {\r\n    this.parentForm?.get(this.name)?.reset('');\r\n  }\r\n}\r\n","<div class=\"page-nav\">\r\n  <span\r\n    *ngIf=\"allowWatching\"\r\n    class=\"round-icon-action-button\"\r\n    [ngClass]=\"isWatched ? 'watched' : 'watch'\"\r\n    (click)=\"isWatched ? stopWatch.emit() : watch.emit($event)\"\r\n  >\r\n    <i class=\"fa fa-eye\"></i>\r\n  </span>\r\n  <span *ngIf=\"!allowFullScreen && allowEditing\" class=\"round-icon-action-button\" (click)=\"edit.emit()\">\r\n    <i class=\"fa fa-pencil-alt\"></i>\r\n  </span>\r\n  <span *ngIf=\"allowFullScreen\" class=\"top-bar-expand\">\r\n    <i class=\"fa fa-expand-arrows-alt\"></i>\r\n  </span>\r\n  <span class=\"navigator\" *ngIf=\"navigationMode\">\r\n    <span class=\"p-buttonset\">\r\n      <button pButton type=\"button\" icon=\"fa fa-arrow-up\" (click)=\"parent.emit()\" *ngIf=\"navigationMode.parent\"></button>\r\n      <button pButton type=\"button\" icon=\"fa fa-chevron-left\" (click)=\"left.emit()\" [disabled]=\"!navigationMode.left\"></button>\r\n      <button pButton type=\"button\" icon=\"fa fa-chevron-right\" (click)=\"right.emit()\" [disabled]=\"!navigationMode.right\"></button>\r\n    </span>\r\n  </span>\r\n</div>\r\n\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-page-navigator',\r\n  templateUrl: './page-navigator.component.html',\r\n  styleUrls: [ './page-navigator.component.scss' ],\r\n})\r\nexport class PageNavigatorComponent {\r\n  @Input() allowWatching = false;\r\n  @Input() isWatched = false;\r\n  @Input() allowEditing = false;\r\n  @Input() allowFullScreen = false;\r\n\r\n  @Input() navigationMode?: {parent: boolean, left: boolean, right: boolean};\r\n\r\n  @Output() edit = new EventEmitter<void>();\r\n  @Output() watch = new EventEmitter<Event>();\r\n  @Output() stopWatch = new EventEmitter<void>();\r\n\r\n  @Output() parent = new EventEmitter<void>();\r\n  @Output() left = new EventEmitter<void>();\r\n  @Output() right = new EventEmitter<void>();\r\n\r\n  constructor() {\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport * as D from 'io-ts/Decoder';\r\n\r\nconst breadcrumbsFromRootDecoder = D.struct({\r\n  id: D.string,\r\n  languageTag: D.string,\r\n  title: D.string,\r\n});\r\n\r\nexport type BreadcrumbsFromRoot = D.TypeOf<typeof breadcrumbsFromRootDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GetBreadcrumbsFromRootsService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  get(id: string): Observable<BreadcrumbsFromRoot[][]> {\r\n    return this.http.get<unknown>(`${appConfig.apiUrl}/items/${id}/breadcrumbs-from-roots`).pipe(\r\n      decodeSnakeCase(D.array(D.array(breadcrumbsFromRootDecoder))),\r\n    );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <div class=\"spinner-container\" *ngIf=\"state.isFetching\">\r\n    <alg-loading size=\"small\"></alg-loading>\r\n  </div>\r\n  <alg-error\r\n      *ngIf=\"state.isError\"\r\n      class=\"dark small\"\r\n      icon=\"fa fa-exclamation-triangle\"\r\n      [showRefreshButton]=\"$any(state.error).status !== 403\"\r\n      (refresh)=\"refresh()\"\r\n  >\r\n    <ng-container *ngIf=\"$any(state.error).status === 403; else otherError;\">\r\n      <span i18n>You are not allowed to view path suggestion.</span>\r\n    </ng-container>\r\n    <ng-template #otherError>\r\n      <span i18n>Error while loading path suggestion</span>\r\n    </ng-template>\r\n  </alg-error>\r\n  <ng-container *ngIf=\"state.isReady\">\r\n    <ng-container *ngIf=\"state.data; else noPath\">\r\n      <ng-container *ngIf=\"state.data.length > 0; else emptyPath\">\r\n        <div class=\"breadcrumbs-container\" *ngFor=\"let breadcrumbs of state.data\">\r\n          <span class=\"breadcrumbs-prefix\" i18n>via</span>\r\n          <ul class=\"breadcrumbs\">\r\n            <li class=\"breadcrumbs-item\" *ngFor=\"let item of breadcrumbs; let i = index\">\r\n              <a class=\"alg-link\" [routerLink]=\"item.url\">\r\n                {{ item.title }}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-template #noPath>\r\n      <alg-error class=\"dark small\">\r\n        <span i18n>You have no path to this content.</span>\r\n      </alg-error>\r\n    </ng-template>\r\n    <ng-template #emptyPath>\r\n      <alg-error class=\"dark small\">\r\n        <span i18n>This content is one of your root activity/skill</span>\r\n      </alg-error>\r\n    </ng-template>\r\n  </ng-container>\r\n</ng-container>\r\n","import { Component, Input, OnChanges, OnDestroy } from '@angular/core';\r\nimport {\r\n  BreadcrumbsFromRoot,\r\n  GetBreadcrumbsFromRootsService\r\n} from '../../../item/http-services/get-breadcrumbs-from-roots.service';\r\nimport { ReplaySubject, Subject, switchMap } from 'rxjs';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { map } from 'rxjs/operators';\r\nimport { itemRoute, urlArrayForItemRoute } from '../../../../shared/routing/item-route';\r\nimport { UrlCommand } from '../../../../shared/helpers/url';\r\n\r\nconst getItemRouteUrl = (id: string, breadcrumbs: BreadcrumbsFromRoot[]): UrlCommand => {\r\n  const index = breadcrumbs.findIndex(item => item.id === id);\r\n  const path = breadcrumbs.slice(0, index).map(item => item.id);\r\n  return urlArrayForItemRoute(itemRoute('activity', id, path));\r\n};\r\n\r\n@Component({\r\n  selector: 'alg-path-suggestion',\r\n  templateUrl: './path-suggestion.component.html',\r\n  styleUrls: [ './path-suggestion.component.scss' ],\r\n})\r\nexport class PathSuggestionComponent implements OnDestroy, OnChanges {\r\n  @Input() itemId?: string;\r\n\r\n  private readonly itemId$ = new ReplaySubject<string>(1);\r\n  private readonly refresh$ = new Subject<void>();\r\n\r\n  state$ = this.itemId$.pipe(\r\n    switchMap(itemId => this.getBreadcrumbsFromRootsService.get(itemId).pipe(\r\n      map(group =>\r\n        (group.length > 0 ? group.map(breadcrumbs =>\r\n          breadcrumbs.slice(0, breadcrumbs.length - 1).map(item => ({\r\n            ...item,\r\n            url: getItemRouteUrl(item.id, breadcrumbs),\r\n          }))\r\n        ).filter(group => group.length > 0) : undefined)\r\n      ),\r\n    )),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(private getBreadcrumbsFromRootsService: GetBreadcrumbsFromRootsService) {\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.itemId) {\r\n      this.itemId$.next(this.itemId);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.itemId$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n}\r\n","<div class=\"section-container\" [ngClass]=\"theme\">\r\n  <div class=\"section-header\" [ngClass]=\"styleClass\">\r\n    <span class=\"header-icon\">\r\n      <i class=\"{{ icon }}\"></i>\r\n    </span>\r\n    <span class=\"header-title\">{{ title }}</span>\r\n    <ng-container *ngIf=\"contentTemplate\"\r\n                  [ngTemplateOutlet]=\"contentTemplate\"\r\n                  [ngTemplateOutletContext]=\"{ $implicit: true }\"\r\n    ></ng-container>\r\n  </div>\r\n</div>\r\n","import { Component, ContentChild, Input, TemplateRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-section-header',\r\n  templateUrl: './section-header.component.html',\r\n  styleUrls: [ './section-header.component.scss' ],\r\n})\r\nexport class SectionHeaderComponent {\r\n\r\n  @Input() title = '';\r\n  @Input() icon = '';\r\n  @Input() theme: 'success' | 'warning' | 'danger' = 'success';\r\n  @Input() styleClass: string | string[] | Set<string> | { [klass: string]: boolean } = '';\r\n\r\n  @ContentChild('content') contentTemplate?: TemplateRef<any>;\r\n\r\n  constructor() { }\r\n}\r\n","<div class=\"section-container\" [ngClass]=\"theme\">\r\n  <div class=\"section-header\" [ngClass]=\"{'show-cursor': collapsible}\" (click)=\"toggleContent()\">\r\n    <div class=\"section-handler\">\r\n      <i class=\"{{icon}}\" *ngIf=\"icon && (!data || !data.ID)\"></i>\r\n      <div class=\"score-container\" *ngIf=\"data && data.ID\">\r\n        <alg-score-ring\r\n          [currentScore]=\"data.progress.currentScore\"\r\n          [icon]=\"data.progress.isStarted === false ? 'flag-checkered' : ''\"\r\n          [bestScore]=\"data.progress.bestScore\" [diameter]=\"24\"\r\n        ></alg-score-ring>\r\n      </div>\r\n    </div>\r\n    <div class=\"section-header-content\" [ngClass]=\"{'show-border': hasBorder && !collapsed}\">\r\n      <span *ngIf=\"remainOrigin || !collapsed || !data.ID\" class=\"section-title\">\r\n        <ng-container *ngIf=\"label; else labelSection\">{{ label }}</ng-container>\r\n        <ng-template #labelSection><ng-content select=\"[label-section]\"></ng-content></ng-template>\r\n      </span>\r\n      <div class=\"additional-content\" *ngIf=\"headerTemplate\">\r\n        <ng-container [ngTemplateOutlet]=\"headerTemplate\" [ngTemplateOutletContext]=\"{ $implicit: data }\"></ng-container>\r\n      </div>\r\n      <span *ngIf=\"collapsible\" class=\"toggle-content\">\r\n        <img [ngClass]=\"{down: collapsed}\" src=\"assets/images/collapse.svg\">\r\n      </span>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"!(collapsible && collapsed)\" class=\"section-content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n","import { Component, Input, ContentChild, Output, EventEmitter, TemplateRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-section-paragraph',\r\n  templateUrl: './section-paragraph.component.html',\r\n  styleUrls: [ './section-paragraph.component.scss' ],\r\n})\r\nexport class SectionParagraphComponent {\r\n  @Input() icon?: string;\r\n  @Input() label = '';\r\n  @Input() collapsible = false;\r\n  @Input() theme: 'success' | 'warning' | 'danger' = 'success';\r\n  @Input() hasBorder = false;\r\n  @Input() data: any;\r\n  @Input() remainOrigin = true;\r\n  @Input() collapsed = false;\r\n\r\n  @Output() collapse = new EventEmitter<boolean>();\r\n\r\n  @ContentChild('headerTemplate') headerTemplate?: TemplateRef<any>;\r\n\r\n  toggleContent(): void {\r\n    if (!this.collapsible) {\r\n      return;\r\n    }\r\n    this.collapsed = !this.collapsed;\r\n    this.collapse.emit(this.collapsed);\r\n  }\r\n}\r\n","<div class=\"section-container\" [class]=\"styleClass\" [ngClass]=\"{'no-border': hideBorder}\">\r\n  <div class=\"section-header\" *ngIf=\"icon\">\r\n    <span class=\"section-handler\">\r\n      <i class=\"{{icon}}\"></i>\r\n    </span>\r\n    <span class=\"section-title\">{{label}}</span>\r\n  </div>\r\n  <div class=\"section-content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-section',\r\n  templateUrl: './section.component.html',\r\n  styleUrls: [ './section.component.scss' ],\r\n})\r\nexport class SectionComponent {\r\n  @Input() icon?: string; // icon class, for instance a fa icon\r\n  @Input() label = '';\r\n  @Input() hideBorder = false;\r\n  @Input() styleClass = '';\r\n\r\n}\r\n","<div class=\"selection-container\">\r\n  <ul *ngIf=\"type === 'square'\" class=\"square\">\r\n    <li\r\n      *ngFor=\"let item of items; index as idx\"\r\n      [ngClass]=\"{active: idx === selected}\"\r\n      (click)=\"itemChanged(idx)\"\r\n      [pTooltip]=\"item.tooltip ?? ''\"\r\n      tooltipPosition=\"top\"\r\n      tooltipEvent=\"hover\"\r\n    >\r\n      <span *ngIf=\"item.icon\" class=\"icon\">\r\n        <i class=\"{{item.icon}}\"></i>\r\n      </span>\r\n      <span class=\"label\">{{item.label}}</span>\r\n    </li>\r\n  </ul>\r\n  <ul *ngIf=\"type === 'rounded'\" class=\"rounded\" [ngClass]=\"{dark: mode === 'dark', basic: mode === 'basic'}\">\r\n    <li\r\n      *ngFor=\"let item of items; index as idx\"\r\n      [ngClass]=\"{active: idx === selected, previous: idx === selected - 1}\"\r\n      (click)=\"itemChanged(idx)\"\r\n      [pTooltip]=\"item.tooltip ?? ''\"\r\n      tooltipPosition=\"top\"\r\n      tooltipEvent=\"hover\"\r\n    >\r\n      <span *ngIf=\"item.icon\" class=\"icon\">\r\n        <i class=\"{{item.icon}}\"></i>\r\n      </span>\r\n      <span class=\"label\">{{item.label}}</span>\r\n    </li>\r\n  </ul>\r\n</div>\r\n","\r\nimport { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ensureDefined } from 'src/app/shared/helpers/assert';\r\n\r\n/**\r\n * To use inside form, just set the formControlName\r\n * ```\r\n * <alg-selection [items]=\"items\" formControlName=\"mode\"></alg-selection>\r\n * ```\r\n * Otherwise you can use the 'change' output and the 'selected' input for regular uses\r\n * ```\r\n * <alg-selection [items]=\"items\" [selected]=\"initialIndex\" (change)=\"onChange($event)\"></alg-selection>\r\n * ```\r\n */\r\n@Component({\r\n  selector: 'alg-selection',\r\n  templateUrl: './selection.component.html',\r\n  styleUrls: [ './selection.component.scss' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SelectionComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class SelectionComponent<T> implements OnChanges, ControlValueAccessor {\r\n\r\n  @Input() type: 'rounded' | 'square' = 'rounded';\r\n  @Input() items: { label: string, value: T, icon?: string, tooltip?: string }[] = [];\r\n  @Input() selected = 0;\r\n  @Input() mode: 'light' | 'dark' | 'basic' = 'light';\r\n\r\n  @Output() change = new EventEmitter<number>();\r\n\r\n  private onChange: (value: T) => void = () => {};\r\n\r\n  ngOnChanges(_simpleChanges: SimpleChanges): void {\r\n    if (this.items.length === 0) throw Error('Invalid items');\r\n    if (this.selected < 0 || this.selected >= this.items.length) throw Error('Invalid selected index');\r\n  }\r\n\r\n  writeValue(value: T): void {\r\n    const index = this.items.findIndex(item => item.value === value);\r\n    if (index === -1) throw Error('Invalid value set by form');\r\n    this.selected = index;\r\n  }\r\n\r\n  registerOnChange(fn: (value: T) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(_fn: (value: T) => void): void {\r\n  }\r\n\r\n  itemChanged(index: number): void {\r\n    if (index < 0 || index >= this.items.length) throw Error('Invalid index');\r\n\r\n    this.selected = index;\r\n    this.change.emit(this.selected);\r\n    this.onChange(ensureDefined(this.items[this.selected]).value);\r\n  }\r\n}\r\n","<div class=\"section-container\">\r\n  <div class=\"section-header\">\r\n    <span class=\"section-handler\">\r\n      <i class=\"fa fa-{{icon}}\"></i>\r\n    </span>\r\n    <span class=\"section-title\">{{label}}</span>\r\n    <span class=\"section-help\" *ngIf=\"tooltip\" title=\"{{tooltip}}\">\r\n      <i class=\"fa fa-question\"></i>\r\n    </span>\r\n    <span class=\"section-close\" *ngIf=\"canClose\" (click)=\"onCloseEvent($event)\">\r\n      <i class=\"fa fa-times\"></i>\r\n    </span>\r\n  </div>\r\n  <div class=\"section-content\">\r\n    <ng-content></ng-content>\r\n  </div>\r\n</div>\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-sub-section',\r\n  templateUrl: './sub-section.component.html',\r\n  styleUrls: [ './sub-section.component.scss' ],\r\n})\r\nexport class SubSectionComponent {\r\n  @Input() icon?: string; // font awesome identifier\r\n  @Input() label?: string;\r\n  @Input() tooltip?: string;\r\n  @Input() canClose = false;\r\n\r\n  @Output() close = new EventEmitter<any>();\r\n\r\n  onCloseEvent(e: MouseEvent): void {\r\n    this.close.emit(e);\r\n  }\r\n\r\n}\r\n","import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n/**\r\n * To use inside form, just set the formControlName\r\n * ```\r\n * <alg-switch formControlName=\"full_screen\"></alg-switch>\r\n * ```\r\n * Otherwise you can use the 'change' output and the 'checked' input for regular uses\r\n * ```\r\n * <alg-switch [checked]=\"initialValue\" (change)=\"onChange($event)\"></alg-switch>\r\n * ```\r\n */\r\n@Component({\r\n  selector: 'alg-switch',\r\n  templateUrl: './switch.component.html',\r\n  styleUrls: [ './switch.component.scss' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SwitchComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class SwitchComponent implements ControlValueAccessor {\r\n\r\n  @Input() checked = false;\r\n  @Input() mode: 'dark' | 'white' | 'circular' | 'dark-circular' = 'dark';\r\n  @Input() type = 'square';\r\n\r\n  @Output() change = new EventEmitter<boolean>();\r\n\r\n  private onChange: (value: boolean) => void = () => {};\r\n\r\n  writeValue(value: boolean): void {\r\n    this.checked = value;\r\n  }\r\n\r\n  registerOnChange(fn: (value: boolean) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(_fn: (value: boolean) => void): void {\r\n  }\r\n\r\n  handleChange(checked: boolean): void {\r\n    this.change.emit(checked);\r\n    this.onChange(checked);\r\n  }\r\n}\r\n","<p-inputSwitch\r\n  class=\"alg-switch\"\r\n  [(ngModel)]=\"checked\"\r\n  [ngClass]=\"{\r\n    dark: mode === 'dark',\r\n    circular: mode === 'circular',\r\n    white: mode === 'white',\r\n    'dark-circular': mode === 'dark-circular'\r\n  }\"\r\n  (onChange)=\"handleChange(checked)\"\r\n></p-inputSwitch>\r\n","<ng-container *ngIf=\"parentForm\" [formGroup]=\"parentForm\">\r\n  <textarea\r\n    [formControlName]=\"inputName\"\r\n    pInputTextarea\r\n    rows=\"5\"\r\n    [placeholder]=\"placeholder\"\r\n    [ngClass]=\"{'no-icon': !icon}\"\r\n  >\r\n  </textarea>\r\n  <span class=\"placeholder-icon\" *ngIf=\"icon\">\r\n    <i class=\"fa fa-font\"></i>\r\n  </span>\r\n  <alg-input-error [form]=\"parentForm\" [inputName]=\"inputName\"></alg-input-error>\r\n</ng-container>\r\n","import { Component, Input } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'alg-textarea',\r\n  templateUrl: './textarea.component.html',\r\n  styleUrls: [ './textarea.component.scss' ],\r\n})\r\nexport class TextareaComponent {\r\n  @Input() inputName = ''; // name of the input in the parent form\r\n  @Input() parentForm?: UntypedFormGroup;\r\n\r\n  @Input() icon = '';\r\n  @Input() placeholder = '';\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { PendingChangesService } from '../services/pending-changes-service';\r\n\r\nexport interface PendingChangesComponent {\r\n  /**\r\n   * Whether this component has pending changes\r\n   */\r\n  isDirty(): boolean,\r\n}\r\n\r\n@Injectable()\r\nexport class PendingChangesGuard implements CanDeactivate<PendingChangesComponent> {\r\n\r\n  constructor(\r\n    private confirmationService: ConfirmationService,\r\n    private pendingChangesService: PendingChangesService,\r\n  ) {}\r\n\r\n  canDeactivate(\r\n    component: PendingChangesComponent | null,\r\n    _currentRoute: ActivatedRouteSnapshot,\r\n    _currentState: RouterStateSnapshot,\r\n    _nextState: RouterStateSnapshot\r\n  ): Observable<boolean> {\r\n    const dialogResponse = new Subject<boolean>();\r\n\r\n    // If a component is not defined in router, need to use the PendingChangesService as alternative approach\r\n    const pendingChangesComponent = component || this.pendingChangesService.component;\r\n\r\n    if (!pendingChangesComponent) {\r\n      // The component may still be not set in some specific scenarios.\r\n      // Example: The routing leads to a \"detail\" component but its parent decides not to show it (for instance because there is an error\r\n      //   in the parent). In such a case, when we leave the page, the \"detail\" component is being deactivated while not existing.\r\n      return of(true);\r\n    }\r\n\r\n    if (!pendingChangesComponent.isDirty()) return of(true);\r\n    this.confirmationService.confirm({\r\n      message: $localize`This page has unsaved changes. Do you want to leave this page and lose its changes?`,\r\n      header: $localize`Confirm Navigation`,\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: $localize`Yes, leave page`,\r\n      accept: () => {\r\n        dialogResponse.next(true);\r\n        dialogResponse.complete();\r\n      },\r\n      rejectLabel: $localize`No`,\r\n      reject: () => {\r\n        dialogResponse.next(false);\r\n        dialogResponse.complete();\r\n      },\r\n    });\r\n    return dialogResponse;\r\n  }\r\n\r\n}\r\n","import { map, Observable, ReplaySubject, shareReplay, switchScan } from 'rxjs';\r\nimport { errorState, fetchingState, FetchState, readyState } from './state';\r\nimport { mapStateData, mapToFetchState } from '../operators/state';\r\n\r\nfunction canLoadMorePagedData<T>(list: T[], limit: number): boolean {\r\n  /**\r\n   * If list length is same as limit, it means we can still fetch.\r\n   * For the edge case when the list length is same as limit but there's no more items, it will be\r\n   * solved by itself at next call because the list will then be empty.\r\n   */\r\n  return list.length === limit;\r\n}\r\n\r\ninterface PagerOptions<T> {\r\n  fetch: (pageSize: number, lastElement?: T) => Observable<T[]>,\r\n  pageSize: number,\r\n  /**\r\n   * If an error occurs while loading more elements, we do not want the list to appear as broken.\r\n   * The state will remain ready with old data and this callback will be triggered, allowing to display feedback\r\n   */\r\n  onLoadMoreError: (error: Error) => void,\r\n}\r\n\r\ninterface PagedData<T> {\r\n  list: T[],\r\n  newItems: T[],\r\n}\r\n\r\nexport class DataPager<T> {\r\n  private trigger$ = new ReplaySubject<{ reset: boolean }>(1);\r\n\r\n  private state$ = this.trigger$.pipe(\r\n    switchScan(\r\n      (prev, { reset }): Observable<FetchState<PagedData<T>>> => {\r\n        prev = reset ? fetchingState() : prev;\r\n        const latestElement = prev.data?.list[prev.data.list.length-1];\r\n        return this.options.fetch(this.options.pageSize, latestElement).pipe(\r\n          mapToFetchState(),\r\n          map(state => {\r\n            // Case 1: First fetch\r\n            if (prev.data === undefined) {\r\n              if (state.isReady) return readyState({ list: state.data, newItems: state.data });\r\n              else if (state.error) return errorState(state.error);\r\n              else return fetchingState();\r\n            }\r\n\r\n            // Case 2: Additional fetch -> when loading more items\r\n            // Case 2a: fetching -> pass previous data with previous list\r\n            if (state.isFetching) return fetchingState(prev.data);\r\n            // Case 2b: error -> Mark state as ready with previous data to avoid breaking the ui state but trigger the on error callback\r\n            else if (state.isError) {\r\n              this.options.onLoadMoreError(state.error);\r\n              return readyState(prev.data);\r\n            // Case 2c: ready -> accumulate list and return data enhanced with accumulated list (instead of only the fetch result)\r\n            } else {\r\n              return readyState({ list: [ ...prev.data.list, ...state.data ], newItems: state.data });\r\n            }\r\n          })\r\n        );\r\n      }, fetchingState() as FetchState<PagedData<T>> /* switchScan seed */\r\n    ),\r\n    shareReplay(1),\r\n  );\r\n  list$ = this.state$.pipe(mapStateData(pagedData => pagedData.list));\r\n  canLoadMore$ = this.state$.pipe(\r\n    map(state => state.data === undefined || canLoadMorePagedData(state.data.newItems, this.options.pageSize)),\r\n  );\r\n\r\n  constructor(private options: PagerOptions<T>) {}\r\n\r\n  load(): void {\r\n    this.trigger$.next({ reset: false });\r\n  }\r\n\r\n  reset(): void {\r\n    this.trigger$.next({ reset: true });\r\n  }\r\n\r\n}\r\n","import { switchMap } from './switchMap';\nimport { operate } from '../util/lift';\nexport function switchScan(accumulator, seed) {\n    return operate((source, subscriber) => {\n        let state = seed;\n        switchMap((value, index) => accumulator(state, value, index), (_, innerValue) => ((state = innerValue), innerValue))(source).subscribe(subscriber);\n        return () => {\n            state = null;\n        };\n    });\n}\n","import { NewContentType } from 'src/app/modules/shared-components/components/add-content/add-content.component';\r\nimport { ActivityType, ItemType } from './item-type';\r\n\r\nexport const allowedNewActivityTypes: NewContentType<ActivityType>[] = [\r\n  {\r\n    type: 'Chapter',\r\n    icon: 'fa fa-book',\r\n    title: $localize`Chapter`,\r\n    description: $localize`A new folder which can contain any activities.`,\r\n  },\r\n  {\r\n    type: 'Task',\r\n    icon: 'fa fa-code',\r\n    title: $localize`Task`,\r\n    description: $localize`A new task which users can try to solve.`,\r\n  },\r\n  {\r\n    type: 'Course',\r\n    icon: 'fa fa-book',\r\n    title: $localize`Course`,\r\n    description: $localize`A new course which users can view and learn.`,\r\n  },\r\n];\r\n\r\nconst skillNewType: NewContentType<ItemType> = {\r\n  type: 'Skill',\r\n  icon: 'fa fa-graduation-cap',\r\n  title: $localize`Skill`,\r\n  description: $localize`A new sub-skill.`,\r\n};\r\n\r\nexport function getAllowedNewItemTypes(allowSkills: boolean): NewContentType<ItemType>[] {\r\n  return allowSkills ? [ skillNewType ].concat(allowedNewActivityTypes) : allowedNewActivityTypes;\r\n}\r\n","export const canCloseOverlay = (event: MouseEvent): boolean => {\r\n  const target = event.target;\r\n  const relatedTarget = event.relatedTarget;\r\n  return (target instanceof HTMLElement &&\r\n    relatedTarget instanceof HTMLElement &&\r\n    !relatedTarget.closest('.alg-path-suggestion-overlay'));\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { dateDecoder } from '../helpers/decoders';\r\n\r\nconst activityLogDecoder = pipe(\r\n  D.struct({\r\n    activityType: D.literal('result_started', 'submission', 'result_validated', 'saved_answer', 'current_answer'),\r\n    at: dateDecoder,\r\n    attemptId: D.string,\r\n    item: D.struct({\r\n      id: D.string,\r\n      string: D.struct({\r\n        title: D.string,\r\n      }),\r\n      type: D.literal('Chapter', 'Task', 'Course', 'Skill'),\r\n    }),\r\n    participant: D.struct({\r\n      id: D.string,\r\n      name: D.string,\r\n      type: D.literal('Team', 'User'),\r\n    }),\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      answerId: D.string,\r\n      score: D.number,\r\n      user: pipe(\r\n        D.struct({\r\n          id: D.string,\r\n          login: D.string,\r\n        }),\r\n        D.intersect(\r\n          D.partial({\r\n            firstName: D.nullable(D.string),\r\n            lastName: D.nullable(D.string),\r\n          }),\r\n        ),\r\n      ),\r\n    }),\r\n  ),\r\n);\r\n\r\nexport type ActivityLog = D.TypeOf<typeof activityLogDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActivityLogService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getActivityLog(\r\n    itemId: string,\r\n    watchedGroupId?: string,\r\n  ): Observable<ActivityLog[]> {\r\n    let params = new HttpParams();\r\n    params = params.set('limit', '20');\r\n\r\n    if (watchedGroupId) {\r\n      params = params.set('watched_group_id', watchedGroupId);\r\n    }\r\n\r\n    return this.http\r\n      .get<unknown[]>(`${appConfig.apiUrl}/items/${itemId}/log`, { params: params })\r\n      .pipe(decodeSnakeCase(D.array(activityLogDecoder)));\r\n  }\r\n\r\n  getAllActivityLog(\r\n    watchedGroupId?: string,\r\n  ): Observable<ActivityLog[]> {\r\n    let params = new HttpParams();\r\n    params = params.set('limit', '20');\r\n\r\n    if (watchedGroupId) {\r\n      params = params.set('watched_group_id', watchedGroupId);\r\n    }\r\n\r\n    return this.http\r\n      .get<unknown[]>(`${appConfig.apiUrl}/items/log`, { params: params })\r\n      .pipe(decodeSnakeCase(D.array(activityLogDecoder)));\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { userDecoder as memberDecoder } from 'src/app/modules/group/http-services/get-group-members.service';\r\n\r\nconst descendantParentDecoder = D.struct({\r\n  id: D.string,\r\n  name: D.string,\r\n});\r\n\r\nconst teamDescendantDecoder = pipe(\r\n  D.struct({\r\n    grade: D.number,\r\n    id: D.string,\r\n    members: D.array(memberDecoder),\r\n    name: D.string,\r\n    parents: D.array(descendantParentDecoder),\r\n  }),\r\n);\r\n\r\nexport type TeamDescendants = D.TypeOf<typeof teamDescendantDecoder>;\r\n\r\nconst userDecoder = pipe(\r\n  D.struct({\r\n    grade: D.nullable(D.number),\r\n    login: D.string,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      firstName: D.nullable(D.string),\r\n      lastName: D.nullable(D.string),\r\n    })\r\n  )\r\n);\r\n\r\nconst userDescendantDecoder = pipe(\r\n  D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n    parents: D.array(descendantParentDecoder),\r\n    user: userDecoder,\r\n  }),\r\n);\r\n\r\nexport type UserDescendant = D.TypeOf<typeof userDescendantDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupDescendantsService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getUserDescendants(groupId: string, options: { sort?: string[], limit?: number, fromId?: string }): Observable<UserDescendant[]> {\r\n    let params = new HttpParams();\r\n    if (options.sort && options.sort.length > 0) params = params.set('sort', options.sort.join(','));\r\n    if (options.limit !== undefined) params = params.set('limit', options.limit);\r\n    if (options.fromId !== undefined) params = params.set('from.id', options.fromId);\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/user-descendants`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(userDescendantDecoder)),\r\n      );\r\n  }\r\n\r\n  getTeamDescendants(\r\n    groupId: string,\r\n    sort: string[] = [],\r\n  ): Observable<TeamDescendants[]> {\r\n    let params = new HttpParams();\r\n    if (sort.length > 0) params = params.set('sort', sort.join(','));\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/team-descendants`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(teamDescendantDecoder)),\r\n      );\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Duration } from '../helpers/duration';\r\n\r\n@Pipe({ name: 'toMin' })\r\nexport class DurationToMinPipe implements PipeTransform {\r\n  transform(duration: Duration): number {\r\n    return duration.minutes();\r\n  }\r\n}\r\n\r\n@Pipe({ name: 'duration' })\r\nexport class DurationToReadable implements PipeTransform {\r\n  transform(duration: number): string {\r\n    return Duration.fromSeconds(duration).toReadable();\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ActivityLog } from '../http-services/activity-log.service';\r\n\r\nfunction formatLogAction (type: ActivityLog['activityType'], score?: number): string {\r\n  switch (type) {\r\n    case 'submission': return score === undefined ? $localize`Submission` : $localize`Submission (score: ${ score })`;\r\n    case 'result_started': return $localize`Activity started`;\r\n    case 'result_validated': return $localize`Activity validated`;\r\n    case 'current_answer': return $localize`Current answer`;\r\n    case 'saved_answer': return $localize`Saved answer`;\r\n    default: return type;\r\n  }\r\n}\r\n\r\n@Pipe({ name: 'logActionDisplay' })\r\nexport class LogActionDisplayPipe implements PipeTransform {\r\n  transform = formatLogAction;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ItemType, typeCategoryOfItem } from '../helpers/item-type';\r\nimport { UrlCommand } from '../helpers/url';\r\nimport { rawItemRoute, urlArrayForItemRoute } from '../routing/item-route';\r\n\r\n/**\r\n * Functions using item route should always be preferred to raw item.\r\n * Using raw item means further requests will be required to fetch path and attempt information.\r\n */\r\n@Pipe({ name: 'rawItemLink', pure: true })\r\nexport class RawItemLinkPipe implements PipeTransform {\r\n  transform({ id, type }: {id: string, type: ItemType}, page?: string|string[], answerId?: string): UrlCommand {\r\n    return urlArrayForItemRoute(rawItemRoute(typeCategoryOfItem({ type }), id, answerId), page);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { FormattableUser, formatUser } from '../helpers/user';\r\n\r\n@Pipe({ name: 'userCaption', pure: true })\r\nexport class UserCaptionPipe implements PipeTransform {\r\n  transform(user: FormattableUser): string {\r\n    return formatUser(user);\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Message, MessageService } from 'primeng/api';\r\nimport { SECONDS } from '../helpers/duration';\r\n\r\nconst DISPLAY_DURATION = 5*SECONDS;\r\ntype FeedbackOptions = Omit<Message, 'key' | 'detail' | 'severity'>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ActionFeedbackService implements OnDestroy {\r\n  hasFeedback = false;\r\n\r\n  private subscriptions = [\r\n    this.messageService.clearObserver.subscribe(() => (this.hasFeedback = false)),\r\n    this.messageService.messageObserver.subscribe(() => (this.hasFeedback = true)),\r\n  ];\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n  }\r\n\r\n  error(txt: string, options?: FeedbackOptions): void {\r\n    this.message('error', $localize`Error`, txt, options);\r\n  }\r\n\r\n  unexpectedError(options?: FeedbackOptions): void {\r\n    this.error($localize`The action cannot be executed. If the problem persists, contact us.`, options);\r\n  }\r\n\r\n  partial(txt: string, options?: FeedbackOptions): void {\r\n    this.message('warn', $localize`Partial success`, txt, options);\r\n  }\r\n\r\n  success(txt: string, options?: FeedbackOptions): void {\r\n    this.message('success', $localize`Success`, txt, options);\r\n  }\r\n\r\n  clear(): void {\r\n    this.messageService.clear();\r\n  }\r\n\r\n  private message(severity: 'success'|'info'|'warn'|'error', summary: string, detail: string, options?: FeedbackOptions): void {\r\n    this.messageService.add({ severity, summary, detail, life: DISPLAY_DURATION, ...options });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { PendingChangesComponent } from '../guards/pending-changes-guard';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PendingChangesService {\r\n  private pendingChangesComponent?: PendingChangesComponent;\r\n\r\n  get component(): PendingChangesComponent | undefined {\r\n    return this.pendingChangesComponent;\r\n  }\r\n\r\n  set(component: PendingChangesComponent): void {\r\n    this.pendingChangesComponent = component;\r\n  }\r\n\r\n  clear(): void {\r\n    this.pendingChangesComponent = undefined;\r\n  }\r\n}\r\n","import { combineLatestInit } from '../observable/combineLatest';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\nexport function combineLatest(...args) {\n    const resultSelector = popResultSelector(args);\n    return resultSelector\n        ? pipe(combineLatest(...args), mapOneOrManyArgs(resultSelector))\n        : operate((source, subscriber) => {\n            combineLatestInit([source, ...argsOrArgArray(args)])(subscriber);\n        });\n}\n","import { combineLatest } from './combineLatest';\nexport function combineLatestWith(...otherSources) {\n    return combineLatest(...otherSources);\n}\n","const { isArray } = Array;\nexport function argsOrArgArray(args) {\n    return args.length === 1 && isArray(args[0]) ? args[0] : args;\n}\n","import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ContentChildren, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler, ConnectedOverlayScrollHandler } from 'primeng/dom';\nimport * as i1 from 'primeng/api';\nimport { PrimeTemplate, SharedModule } from 'primeng/api';\nimport * as i3 from 'primeng/ripple';\nimport { RippleModule } from 'primeng/ripple';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { ZIndexUtils } from 'primeng/utils';\n\nclass OverlayPanel {\n    constructor(el, renderer, cd, zone, config, overlayService) {\n        this.el = el;\n        this.renderer = renderer;\n        this.cd = cd;\n        this.zone = zone;\n        this.config = config;\n        this.overlayService = overlayService;\n        this.dismissable = true;\n        this.appendTo = 'body';\n        this.autoZIndex = true;\n        this.baseZIndex = 0;\n        this.focusOnShow = true;\n        this.showTransitionOptions = '.12s cubic-bezier(0, 0, 0.2, 1)';\n        this.hideTransitionOptions = '.1s linear';\n        this.onShow = new EventEmitter();\n        this.onHide = new EventEmitter();\n        this.overlayVisible = false;\n        this.render = false;\n        this.isOverlayAnimationInProgress = false;\n        this.selfClick = false;\n    }\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch (item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                    break;\n                default:\n                    this.contentTemplate = item.template;\n                    break;\n            }\n            this.cd.markForCheck();\n        });\n    }\n    bindDocumentClickListener() {\n        if (!this.documentClickListener && this.dismissable) {\n            this.zone.runOutsideAngular(() => {\n                let documentEvent = DomHandler.isIOS() ? 'touchstart' : 'click';\n                const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n                this.documentClickListener = this.renderer.listen(documentTarget, documentEvent, (event) => {\n                    if (!this.container.contains(event.target) && this.target !== event.target && !this.target.contains(event.target) && !this.selfClick) {\n                        this.zone.run(() => {\n                            this.hide();\n                        });\n                    }\n                    this.selfClick = false;\n                    this.cd.markForCheck();\n                });\n            });\n        }\n    }\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n            this.selfClick = false;\n        }\n    }\n    toggle(event, target) {\n        if (this.isOverlayAnimationInProgress) {\n            return;\n        }\n        if (this.overlayVisible) {\n            if (this.hasTargetChanged(event, target)) {\n                this.destroyCallback = () => {\n                    this.show(null, (target || event.currentTarget || event.target));\n                };\n            }\n            this.hide();\n        }\n        else {\n            this.show(event, target);\n        }\n    }\n    show(event, target) {\n        if (this.isOverlayAnimationInProgress) {\n            return;\n        }\n        this.target = target || event.currentTarget || event.target;\n        this.overlayVisible = true;\n        this.render = true;\n        this.cd.markForCheck();\n    }\n    onOverlayClick(event) {\n        this.overlayService.add({\n            originalEvent: event,\n            target: this.el.nativeElement\n        });\n        this.selfClick = true;\n    }\n    onContentClick() {\n        this.selfClick = true;\n    }\n    hasTargetChanged(event, target) {\n        return this.target != null && this.target !== (target || event.currentTarget || event.target);\n    }\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n    restoreAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n    align() {\n        if (this.autoZIndex) {\n            ZIndexUtils.set('overlay', this.container, this.baseZIndex + this.config.zIndex.overlay);\n        }\n        DomHandler.absolutePosition(this.container, this.target);\n        const containerOffset = DomHandler.getOffset(this.container);\n        const targetOffset = DomHandler.getOffset(this.target);\n        let arrowLeft = 0;\n        if (containerOffset.left < targetOffset.left) {\n            arrowLeft = targetOffset.left - containerOffset.left;\n        }\n        this.container.style.setProperty('--overlayArrowLeft', `${arrowLeft}px`);\n        if (containerOffset.top < targetOffset.top) {\n            DomHandler.addClass(this.container, 'p-overlaypanel-flipped');\n            if (this.showCloseIcon) {\n                this.container.style.marginTop = '30px';\n            }\n        }\n    }\n    onAnimationStart(event) {\n        if (event.toState === 'open') {\n            this.container = event.element;\n            this.onShow.emit(null);\n            this.appendContainer();\n            this.align();\n            this.bindDocumentClickListener();\n            this.bindDocumentResizeListener();\n            this.bindScrollListener();\n            if (this.focusOnShow) {\n                this.focus();\n            }\n            this.overlayEventListener = (e) => {\n                if (this.container && this.container.contains(e.target)) {\n                    this.selfClick = true;\n                }\n            };\n            this.overlaySubscription = this.overlayService.clickObservable.subscribe(this.overlayEventListener);\n        }\n        this.isOverlayAnimationInProgress = true;\n    }\n    onAnimationEnd(event) {\n        switch (event.toState) {\n            case 'void':\n                if (this.destroyCallback) {\n                    this.destroyCallback();\n                    this.destroyCallback = null;\n                }\n                if (this.overlaySubscription) {\n                    this.overlaySubscription.unsubscribe();\n                }\n                break;\n            case 'close':\n                if (this.autoZIndex) {\n                    ZIndexUtils.clear(this.container);\n                }\n                if (this.overlaySubscription) {\n                    this.overlaySubscription.unsubscribe();\n                }\n                this.onContainerDestroy();\n                this.onHide.emit({});\n                this.render = false;\n                break;\n        }\n        this.isOverlayAnimationInProgress = false;\n    }\n    focus() {\n        let focusable = DomHandler.findSingle(this.container, '[autofocus]');\n        if (focusable) {\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => focusable.focus(), 5);\n            });\n        }\n    }\n    hide() {\n        if (this.isOverlayAnimationInProgress) {\n            return;\n        }\n        this.overlayVisible = false;\n        this.cd.markForCheck();\n    }\n    onCloseClick(event) {\n        this.hide();\n        event.preventDefault();\n    }\n    onWindowResize(event) {\n        if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n            this.hide();\n        }\n    }\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                if (this.overlayVisible) {\n                    this.hide();\n                }\n            });\n        }\n        this.scrollHandler.bindScrollListener();\n    }\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n    onContainerDestroy() {\n        if (!this.cd.destroyed) {\n            this.target = null;\n        }\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n    }\n    ngOnDestroy() {\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n        if (this.container && this.autoZIndex) {\n            ZIndexUtils.clear(this.container);\n        }\n        if (!this.cd.destroyed) {\n            this.target = null;\n        }\n        this.destroyCallback = null;\n        if (this.container) {\n            this.restoreAppend();\n            this.onContainerDestroy();\n        }\n        if (this.overlaySubscription) {\n            this.overlaySubscription.unsubscribe();\n        }\n    }\n}\nOverlayPanel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.7\", ngImport: i0, type: OverlayPanel, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i1.PrimeNGConfig }, { token: i1.OverlayService }], target: i0.ɵɵFactoryTarget.Component });\nOverlayPanel.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.7\", type: OverlayPanel, selector: \"p-overlayPanel\", inputs: { dismissable: \"dismissable\", showCloseIcon: \"showCloseIcon\", style: \"style\", styleClass: \"styleClass\", appendTo: \"appendTo\", autoZIndex: \"autoZIndex\", ariaCloseLabel: \"ariaCloseLabel\", baseZIndex: \"baseZIndex\", focusOnShow: \"focusOnShow\", showTransitionOptions: \"showTransitionOptions\", hideTransitionOptions: \"hideTransitionOptions\" }, outputs: { onShow: \"onShow\", onHide: \"onHide\" }, host: { classAttribute: \"p-element\" }, queries: [{ propertyName: \"templates\", predicate: PrimeTemplate }], ngImport: i0, template: `\n        <div *ngIf=\"render\" [ngClass]=\"'p-overlaypanel p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onOverlayClick($event)\"\n            [@animation]=\"{value: (overlayVisible ? 'open': 'close'), params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\"\n                (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\">\n            <div class=\"p-overlaypanel-content\" (click)=\"onContentClick()\" (mousedown)=\"onContentClick()\">\n                <ng-content></ng-content>\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            </div>\n            <button *ngIf=\"showCloseIcon\" type=\"button\" class=\"p-overlaypanel-close p-link\" (click)=\"onCloseClick($event)\" (keydown.enter)=\"hide()\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\n                <span class=\"p-overlaypanel-close-icon pi pi-times\"></span>\n            </button>\n        </div>\n    `, isInline: true, styles: [\".p-overlaypanel{position:absolute;margin-top:10px;top:0;left:0}.p-overlaypanel-flipped{margin-top:0;margin-bottom:10px}.p-overlaypanel-close{display:flex;justify-content:center;align-items:center;overflow:hidden;position:relative}.p-overlaypanel:after,.p-overlaypanel:before{bottom:100%;left:calc(var(--overlayArrowLeft, 0) + 1.25rem);content:\\\" \\\";height:0;width:0;position:absolute;pointer-events:none}.p-overlaypanel:after{border-width:8px;margin-left:-8px}.p-overlaypanel:before{border-width:10px;margin-left:-10px}.p-overlaypanel-shifted:after,.p-overlaypanel-shifted:before{left:auto;right:1.25em;margin-left:auto}.p-overlaypanel-flipped:after,.p-overlaypanel-flipped:before{bottom:auto;top:100%}.p-overlaypanel.p-overlaypanel-flipped:after{border-bottom-color:transparent}.p-overlaypanel.p-overlaypanel-flipped:before{border-bottom-color:transparent}\\n\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"directive\", type: i2.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { kind: \"directive\", type: i3.Ripple, selector: \"[pRipple]\" }], animations: [\n        trigger('animation', [\n            state('void', style({\n                transform: 'scaleY(0.8)',\n                opacity: 0\n            })),\n            state('close', style({\n                opacity: 0\n            })),\n            state('open', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => open', animate('{{showTransitionParams}}')),\n            transition('open => close', animate('{{hideTransitionParams}}')),\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.7\", ngImport: i0, type: OverlayPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'p-overlayPanel', template: `\n        <div *ngIf=\"render\" [ngClass]=\"'p-overlaypanel p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" (click)=\"onOverlayClick($event)\"\n            [@animation]=\"{value: (overlayVisible ? 'open': 'close'), params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\"\n                (@animation.start)=\"onAnimationStart($event)\" (@animation.done)=\"onAnimationEnd($event)\">\n            <div class=\"p-overlaypanel-content\" (click)=\"onContentClick()\" (mousedown)=\"onContentClick()\">\n                <ng-content></ng-content>\n                <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n            </div>\n            <button *ngIf=\"showCloseIcon\" type=\"button\" class=\"p-overlaypanel-close p-link\" (click)=\"onCloseClick($event)\" (keydown.enter)=\"hide()\" [attr.aria-label]=\"ariaCloseLabel\" pRipple>\n                <span class=\"p-overlaypanel-close-icon pi pi-times\"></span>\n            </button>\n        </div>\n    `, animations: [\n                        trigger('animation', [\n                            state('void', style({\n                                transform: 'scaleY(0.8)',\n                                opacity: 0\n                            })),\n                            state('close', style({\n                                opacity: 0\n                            })),\n                            state('open', style({\n                                transform: 'translateY(0)',\n                                opacity: 1\n                            })),\n                            transition('void => open', animate('{{showTransitionParams}}')),\n                            transition('open => close', animate('{{hideTransitionParams}}')),\n                        ])\n                    ], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {\n                        'class': 'p-element'\n                    }, styles: [\".p-overlaypanel{position:absolute;margin-top:10px;top:0;left:0}.p-overlaypanel-flipped{margin-top:0;margin-bottom:10px}.p-overlaypanel-close{display:flex;justify-content:center;align-items:center;overflow:hidden;position:relative}.p-overlaypanel:after,.p-overlaypanel:before{bottom:100%;left:calc(var(--overlayArrowLeft, 0) + 1.25rem);content:\\\" \\\";height:0;width:0;position:absolute;pointer-events:none}.p-overlaypanel:after{border-width:8px;margin-left:-8px}.p-overlaypanel:before{border-width:10px;margin-left:-10px}.p-overlaypanel-shifted:after,.p-overlaypanel-shifted:before{left:auto;right:1.25em;margin-left:auto}.p-overlaypanel-flipped:after,.p-overlaypanel-flipped:before{bottom:auto;top:100%}.p-overlaypanel.p-overlaypanel-flipped:after{border-bottom-color:transparent}.p-overlaypanel.p-overlaypanel-flipped:before{border-bottom-color:transparent}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i1.PrimeNGConfig }, { type: i1.OverlayService }]; }, propDecorators: { dismissable: [{\n                type: Input\n            }], showCloseIcon: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], appendTo: [{\n                type: Input\n            }], autoZIndex: [{\n                type: Input\n            }], ariaCloseLabel: [{\n                type: Input\n            }], baseZIndex: [{\n                type: Input\n            }], focusOnShow: [{\n                type: Input\n            }], showTransitionOptions: [{\n                type: Input\n            }], hideTransitionOptions: [{\n                type: Input\n            }], onShow: [{\n                type: Output\n            }], onHide: [{\n                type: Output\n            }], templates: [{\n                type: ContentChildren,\n                args: [PrimeTemplate]\n            }] } });\nclass OverlayPanelModule {\n}\nOverlayPanelModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.7\", ngImport: i0, type: OverlayPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nOverlayPanelModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.7\", ngImport: i0, type: OverlayPanelModule, declarations: [OverlayPanel], imports: [CommonModule, RippleModule, SharedModule], exports: [OverlayPanel, SharedModule] });\nOverlayPanelModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.7\", ngImport: i0, type: OverlayPanelModule, imports: [CommonModule, RippleModule, SharedModule, SharedModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.7\", ngImport: i0, type: OverlayPanelModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, RippleModule, SharedModule],\n                    exports: [OverlayPanel, SharedModule],\n                    declarations: [OverlayPanel]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { OverlayPanel, OverlayPanelModule };\n"],"names":["typeDecoder","D","manageTypeDecoder","groupDecoder","id","name","description","type","canManage","canWatchMembers","canGrantGroupAccess","ManagedGroupsService","constructor","http","getManagedGroups","this","get","appConfig","pipe","decodeSnakeCase","i0","factory","groupChildDecoder","currentUserIsManager","grade","isOpen","isPublic","currentUserCanGrantGroupAccess","currentUserCanManage","currentUserCanWatchMembers","userCount","GetGroupChildrenService","getGroupChildren","groupId","sort","typesInclude","typesExclude","params","HttpParams","length","set","join","getGroupChildrenWithSubgroupCount","switchMap","groupChildren","of","forkJoin","map","g","subGroupChildren","isEmpty","userDecoder","login","firstName","lastName","memberDecoder","user","action","memberSince","dateDecoder","GetGroupMembersService","getGroupMembers","limit","fromId","undefined","toString","CreateItemService","create","newItem","body","title","language_tag","languageTag","parent","item_id","as_root_of_group_id","asRootOfGroupId","post","successData","response","itemDecoder","requiresExplicitEntry","string","subtitle","bestScore","permissions","itemCorePermDecoder","promptToJoinGroupByCode","textId","validationType","noScore","titleBarVisible","fullScreen","allowsMultipleAttempts","duration","durationDecoder","enteringTimeMin","enteringTimeMax","entryParticipantType","entryFrozenTeams","entryMaxTeamSize","entryMinAdmittedMembersRatio","url","usesApi","watchedGroup","averageScore","GetItemByIdService","watchedGroupId","itemFoundDecoder","SearchItemService","search","searchString","includedTypes","excludedTypes","managerDecoder","requireLockMembershipApprovalUntil","requirePersonalInfoAccessApproval","requireWatchApproval","rootActivityId","rootSkillId","managers","invalidReasonDecoder","isCodeValidDecoder","valid","group","reason","JoinByCodeService","checkCodeValidity","code","joinGroupThroughCode","approvals","assertSuccess","AccessCodeViewComponent","joinByCodeService","actionFeedbackService","confirmationService","EventEmitter","onClickAccess","state","subscribe","error","$localize","next","invalidCodeReasonToString","Error","message","itemData","item","confirm","header","acceptLabel","acceptIcon","rejectLabel","accept","joinGroup","_result","success","groupJoined","emit","err","unexpectedError","HttpErrorResponse","selectors","ctx","defaultFormValues","searchExisting","AddContentComponent","formBuilder","ngOnInit","searchFunction","showSearchUI","subscriptions","push","addContentForm","valueChanges","changes","trimmedInputsValue","trim","existingTitleControl","value","filter","checkLength","debounceTime","mapToFetchState","ngOnDestroy","forEach","sub","unsubscribe","onNewFocus","focused","reset","onExistingFocus","onBlur","addNew","contentAdded","addExisting","s","minInputLength","CollapsibleSectionComponent","onCollapse","collapsible","collapsed","ProgressLevelComponent","ngOnChanges","_changes","totalArray","Array","maximum","keys","ProgressSelectComponent","writeValue","selected","Math","max","values","findIndex","registerOnChange","fn","onChange","registerOnTouched","_fn","defaultValue","onSet","valueChange","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","SwitchFieldComponent","decls","DurationComponent","injector","days","hours","minutes","seconds","maxDuration","limitToTimeMax","MAX_TIME_FORMAT_DURATION","MAX_SECONDS_FORMAT_DURATION","control","parentForm","NgControl","showField","layout","firstChange","validate","isValid","invalidDuration","ms","Duration","getDHM","getHMS","emitValue","change","handleChange","handleDHMChange","handleHMSChange","NG_VALIDATORS","FloatingSaveComponent","onSave","save","onCancel","cancel","FormErrorComponent","form","inputName","ctx_r4","e","InputComponent","onButtonClick","click","clearInput","PageNavigatorComponent","breadcrumbsFromRootDecoder","GetBreadcrumbsFromRootsService","getItemRouteUrl","breadcrumbs","index","path","slice","urlArrayForItemRoute","itemRoute","PathSuggestionComponent","getBreadcrumbsFromRootsService","ReplaySubject","Subject","itemId$","itemId","resetter","refresh$","complete","refresh","SectionHeaderComponent","SectionParagraphComponent","toggleContent","collapse","SectionComponent","SelectionComponent","_simpleChanges","items","itemChanged","ensureDefined","SubSectionComponent","onCloseEvent","close","SwitchComponent","checked","TextareaComponent","PendingChangesGuard","pendingChangesService","canDeactivate","component","_currentRoute","_currentState","_nextState","dialogResponse","pendingChangesComponent","isDirty","icon","reject","DataPager","options","trigger$","accumulator","seed","operate","source","subscriber","_","innerValue","switchScan","prev","latestElement","fetchingState","data","list","fetch","pageSize","isReady","readyState","newItems","errorState","isFetching","isError","onLoadMoreError","shareReplay","state$","mapStateData","pagedData","canLoadMorePagedData","load","allowedNewActivityTypes","skillNewType","allowSkills","concat","canCloseOverlay","event","relatedTarget","target","HTMLElement","closest","activityLogDecoder","activityType","at","attemptId","participant","answerId","score","ActivityLogService","getActivityLog","getAllActivityLog","descendantParentDecoder","teamDescendantDecoder","members","parents","userDescendantDecoder","GetGroupDescendantsService","getUserDescendants","getTeamDescendants","DurationToMinPipe","transform","pure","DurationToReadable","toReadable","LogActionDisplayPipe","formatLogAction","RawItemLinkPipe","page","rawItemRoute","typeCategoryOfItem","UserCaptionPipe","formatUser","DISPLAY_DURATION","SECONDS","ActionFeedbackService","messageService","clearObserver","hasFeedback","messageObserver","subscription","txt","partial","clear","severity","summary","detail","add","life","PendingChangesService","args","resultSelector","popResultSelector","combineLatest","mapOneOrManyArgs","combineLatestInit","argsOrArgArray","otherSources","isArray","r","v","a","OverlayPanel","el","renderer","cd","zone","config","overlayService","dismissable","appendTo","autoZIndex","baseZIndex","focusOnShow","showTransitionOptions","hideTransitionOptions","onShow","onHide","overlayVisible","render","isOverlayAnimationInProgress","selfClick","ngAfterContentInit","templates","getType","contentTemplate","template","markForCheck","bindDocumentClickListener","documentClickListener","runOutsideAngular","documentEvent","DomHandler","listen","nativeElement","ownerDocument","container","contains","run","hide","unbindDocumentClickListener","toggle","hasTargetChanged","destroyCallback","show","currentTarget","onOverlayClick","originalEvent","onContentClick","appendContainer","document","appendChild","restoreAppend","align","ZIndexUtils","zIndex","overlay","containerOffset","targetOffset","arrowLeft","left","style","setProperty","top","showCloseIcon","marginTop","onAnimationStart","toState","element","bindDocumentResizeListener","bindScrollListener","focus","overlayEventListener","overlaySubscription","clickObservable","onAnimationEnd","onContainerDestroy","focusable","setTimeout","onCloseClick","preventDefault","onWindowResize","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","scrollHandler","ConnectedOverlayScrollHandler","unbindScrollListener","destroyed","destroy","ɵfac","i1","ɵcmp","PrimeTemplate","c","dependencies","i2","i3","styles","trigger","opacity","transition","animate","changeDetection","OverlayPanelModule","ɵmod","ɵinj","CommonModule","RippleModule","SharedModule"],"sourceRoot":"webpack:///"}