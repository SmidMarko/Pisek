{"version":3,"file":"585.2334ef94e379848a.js","mappings":"mSASO,MAAMA,GAAuB,GAM9B,YAAqBC,EAAoBC,GAC7C,OAAOC,KAAKC,UAAUH,KAAWE,KAAKC,UAAUF,GAG5C,YAA4BG,GAChC,IAAIC,EAAS,IAAIC,KACjB,GAAmB,GAAfF,EAAKG,OAAa,OAAOF,EAC7B,MAAMG,EAAgBJ,EAAKK,IAAIC,GAAQA,EAAIC,UAAYD,EAAIE,MAAQ,IAAIF,EAAIE,SAC3EP,SAASA,EAAOQ,IAAI,OAAQL,EAAcM,KAAK,MACxCT,4ECbT,MAAMU,IAAyBC,SAC7BC,KAAS,CACPC,OAAQD,KAAU,sBAAuB,wBAAyB,iBAAkB,kBAAmB,kBACvGE,MAAOF,KAAS,CACdG,YAAaH,KAAWA,MACxBI,GAAIJ,KACJK,KAAML,KACNM,KAAMN,KAAU,QAAS,OAAQ,OAAQ,UAAW,QAAS,OAAQ,aAEvEO,YAAaP,KAAWQ,OACxBC,mBAAoBT,OAEtBA,KACEA,KAAU,CACRU,aAAcV,KAAU,gBAAiB,oBAAqB,oCAU7D,IAAMW,GAAb,MAAM,MAAOA,EAEXC,YAAoBC,eAEpBC,gBAAgBC,GACd,OAAOC,KAAKH,KACTI,IAAI,GAAGC,4CAAmD,CAAE9B,OAAQ+B,GAAkBJ,KACtFhB,MACCqB,OAAgBpB,KAAQF,MACxBN,OAAI6B,GAAeA,EAAYC,OAAOC,GAAwC,SAA1BA,EAAWrB,MAAMI,sDAThEK,GAAmBa,wCAAnBb,EAAmBc,QAAnBd,EAAmB,qBAFlB,SAEDA,GAAb,iBCrBO,IAAMe,GAAb,MAAM,MAAOA,EAEXd,YAAoBC,eAEpBc,MAAMC,GACJ,OAAOZ,KAAKH,KAAKgB,OAA+C,GAAGX,6CAAmDU,KACnH7B,MACCP,OAAIsC,OACJtC,OAAKuC,GAAiCA,EAAKC,wDARtCN,GAAiBF,wCAAjBE,EAAiBD,QAAjBC,EAAiB,qBAFhB,SAEDA,GAAb,wHCbEF,uBAOEA,4DAAWA,qBACZA,aAHCA,qDAeEA,cAAmD,QACjDA,WAAaA,QACbA,yBAAaA,QACbA,iBAAmC,UACjCA,YAAoBA,QACpBA,yBACFA,QACAA,8BAEAA,oCATFA,mDAAKA,gEAsBCA,+BAGMA,wCAOAA,wCAOAA,4CAfFA,YACEA,yBAOAA,yBAOAA,yBACFA,yCAhBuDA,iCAElDA,mDAOAA,sFASLA,SACEA,kBAMFA,mCAzBAA,kCAkBAA,iEAlBeA,oCAkBAA,uFAUjBA,qBAMIA,+EAASA,kCACZA,mCA7CTA,cAAI,OAAJA,CAAI,UAE4EA,SAA2BA,UAEzGA,cAAIA,SAA2BA,QAC/BA,cAAIA,yBAA2CA,QAC/CA,cAAI,aAEAA,mCACAA,6CA4BAA,6CAUFA,8DA7CoBA,+DAAwDA,6BAE1EA,6BACAA,iDAGeA,qGAA0H,aAA1HA,CAA0H,yCA6C/IA,cAAI,OAAJA,CAAI,UAEAA,YAAiDA,sCAD/CA,wHA9EVA,qBAMEA,kEAAgBA,2BAGhBA,gCAcAA,kCAqDAA,gCAOFA,qCAhFEA,mCAA0B,gBAA1BA,CAA0B,mDAd9BA,SACEA,8BAUAA,4BAqFFA,6BA9FKA,iCAUAA,mCCGE,IAAMS,GAAb,MAAM,MAAOA,EAUXrB,YAAoBsB,EACAC,EACAC,EACAC,GAHArB,2BACAA,yBACAA,2BACAA,6BAZZA,cAAW,IAAIsB,IACNtB,WAAQ,IAAIuB,IAA2B,GAC/CvB,YAASA,KAAKwB,MAAMzC,MAC3B0C,QAAU3D,KACV4D,OAAqBC,KACrBC,OAAU7B,GAAQC,KAAKkB,oBAAoBpB,gBAAgBC,KAC3D8B,QAAgB,CAAEC,SAAU9B,KAAK+B,SAASC,kBAQ5CC,cACEjC,KAAKwB,MAAMU,WAGbC,aAAaC,GACX,MAAMrC,EJxBJ,YAAkCqC,GACtC,OAAOA,EAAMC,eAAe7D,IAAI8D,IAAS,CAAE3D,MAAO2D,EAAK3D,MAAOD,UAAW4D,EAAKC,OAAS,KIuBxEC,CAAwBJ,GACjCrC,GAAMC,KAAKwB,MAAMiB,KAAK1C,GAG5B2C,kBAAkBN,EAAc7B,GAC9BP,KAAKoB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLC,QAASC,4CAAqDA,CAC9DC,OAAQD,gBAAyBA,CACjCE,KAAM,6BACNC,YAAaH,kBAA2BA,CACxCI,OAAQ,KACNpD,KAAKqD,WAAW9C,IAElB+C,YAAaN,KAAaA,GAI9BK,WAAW9C,GACT,MACMgD,EAAYhD,EAAWrB,MAAMG,KACnCW,KAAKmB,kBAAkBR,MAFPJ,EAAWrB,MAAME,IAG9BoE,UAAU,CACTf,KAAM,KACJzC,KAAKyD,UACLzD,KAAKqB,sBAAsBqC,QAAQV,6BAA2BO,GAEhEI,MAAOC,IACL5D,KAAKqB,sBAAsBsC,MAAMX,oCAA6BO,KAKtEE,UACEzD,KAAK+B,SAASU,qDAvDLxB,GAAwBT,qEAAxBS,EAAwB4C,sGDVXb,2DAAAA,GAiBTA,KAAAA,GACAA,MAAAA,GAEIA,eAAAA,GAGcA,UAAAA,GAoBSA,4DAAAA,GAOAA,0GAAAA,GAUAA,4FAAAA,GAyBJA,uBAAAA,69CA1FxCxC,wDAAeA,uTCeFS,GAAb,iBCNY6C,EAGX,MAHD,OAAYA,QAAM,KAChBA,qBACAA,uBAFUA,EAAZ,IAAYA,GAGX,GAKM,IAAMC,GAAb,MAAM,MAAOA,EAEXnE,YAAoBC,eAEpBmE,oBAAoBC,EAA4BhF,GAC9C,MAAMK,EAAOL,IAAW6E,EAAOI,OAAS,SAAW,SACnD,OAAOC,OACLC,MAAMC,KAAKJ,EAAIK,WAAW9F,IAAI+F,GAC5BvE,KAAKH,KACF2E,KACC,GAAGtE,qBAA2BqE,EAAgB,oBAAoBjF,IAAQ,KAAM,CAC9ElB,OAAQ,CACNqG,UAAWF,EAAgB,GAAG1F,KAAK,QAGxCE,MACCP,OAAIsC,OACJtC,OAAIuC,GAAQ,IAAI2D,IAAIC,OAAOL,QAAQvD,QAM7C6D,qBAAqBX,EAA4BhF,GAC/C,MAAMK,EAAOL,IAAW6E,EAAOI,OAAS,SAAW,SACnD,OAAOC,OACLC,MAAMC,KAAKJ,EAAIK,WAAW9F,IAAI+F,GAC5BvE,KAAKH,KACF2E,KACC,GAAGtE,qBAA2BqE,EAAgB,qBAAqBjF,IAAQ,KAAM,CAC/ElB,OAAQ,CACNqG,UAAWF,EAAgB,GAAG1F,KAAK,QAGxCE,MACCP,OAAIsC,OACJtC,OAAIuC,GAAQ,IAAI2D,IAAIC,OAAOL,QAAQvD,QAM7C8D,wBAAwBC,EAAoB7F,GAC1C,MAAMK,EAAOL,IAAW6E,EAAOI,OAAS,SAAW,SACnD,OAAOC,OACLW,EAAStG,IAAIoC,GACXZ,KAAKH,KACF2E,KAA2C,GAAGtE,6CAAmDU,KAAWtB,IAAQ,MACpHP,MACCP,OAAIsC,uDAjDHiD,GAAqBvD,wCAArBuD,EAAqBtD,QAArBsD,EAAqB,qBAFpB,SAEDA,GAAb,sCCTM,YAA+BgB,EAAwCC,EAAgB/F,GAC3F,MAAMgG,EAAMhG,IAAW6E,SAAgBd,gBAAmBA,CAAGA,eAAmBA,CAEhF,GAAIgC,EAAOE,eAAiBF,EAAOG,cACjCJ,EAAgBrB,QAAQV,8DAAwDiC,OAAhF,GACiC,IAAxBD,EAAOE,aAAoB,CACpC,MAAME,EAAYnG,IAAW6E,SAC3Bd,sEAAoDA,CACpDA,8DAAoDA,CACtD+B,EAAgBpB,MAAMyB,QAGtBL,EAAgBM,QAAQrC,6IADqBkC,gBCTjD,MAAMI,IAAcvG,SAClBC,KAAS,CACP4B,QAAS5B,KACTuG,MAAOvG,OAETA,KACEA,KAAU,CACRwG,UAAWxG,KAAWA,MACtByG,SAAUzG,KAAWA,MACrB0G,MAAO1G,KAAWA,UAKlB2G,GAA6B3G,KAAS,CAC1C4G,GAAI5G,KAAWQ,OACfN,MAAOF,KAAS,CACdI,GAAIJ,KACJK,KAAML,OAERM,KAAMN,KAAU,eAAgB,iBAChC6G,KAAMP,KAGFQ,GAAyB9G,KAAS,CACtCC,OAAQD,KAAU,qBAAsB,uBAAwB,wBAChE4G,GAAIpG,MACJN,MAAOF,KAAS,CACdI,GAAIJ,KACJK,KAAML,KACNG,YAAaH,KAAWA,MACxBM,KAAMN,KAAU,QAAS,OAAQ,OAAQ,UAAW,QAAS,UAAW,UAE1E4B,QAAS5B,KACT+G,aAAc/G,KAAWA,KAAS,CAChCI,GAAIJ,KACJwG,UAAWxG,KAAWA,MACtByG,SAAUzG,KAAWA,MACrBuG,MAAOvG,UAwCJ,IAAMgH,GAAb,MAAM,MAAOA,EAEXpG,YAAoBC,eAEpBoG,wBACErF,EACAsF,GAA4B,EAC5BnG,EAAiB,IAEjB,IAAI3B,EAAS,IAAIC,KACjB,OAAIuC,IACFxC,EAASA,EAAOQ,IAAI,WAAYgC,GAC5BsF,IAAiB9H,EAASA,EAAOQ,IAAI,4BAA6B,OAEpEmB,EAAKzB,OAAS,IAAGF,EAASA,EAAOQ,IAAI,OAAQmB,EAAKlB,KAAK,OACpDmB,KAAKH,KACTI,IAAa,GAAGC,kCAAyC,CAAE9B,OAAQA,IACnEW,MACCqB,OAAgBpB,KAAQ2G,MACxBnH,OAAI2H,GAAmBA,EAAgB3H,IAAI4H,IAAM,CAC/CR,GAAIQ,EAAER,GACN1G,MAAOkH,EAAElH,MACT2G,KAAM,CACJzG,GAAIgH,EAAEP,KAAKjF,QACX2E,MAAOa,EAAEP,KAAKN,MACdC,UAAWY,EAAEP,KAAKL,WAAa,KAC/BC,SAAUW,EAAEP,KAAKJ,UAAY,KAC7BC,MAAOU,EAAEP,KAAKH,OAAS,WAMjCW,oBACEtG,EAAiB,IAEjB,IAAI3B,EAAS,IAAIC,KACjB,OAAI0B,EAAKzB,OAAS,IAAGF,EAASA,EAAOQ,IAAI,OAAQmB,EAAKlB,KAAK,OACpDmB,KAAKH,KACTI,IAAa,GAAGC,4CAAmD,CAAE9B,OAAQA,IAC7EW,MACCqB,OAAgBpB,KAAQ8G,MACxBtH,OAAI8H,GAAoBA,EAAiBhG,OAAOiG,GAAoC,uBAAtBA,EAAWtH,QAAiCT,IAAI4H,IAAM,CAClHR,GAAIQ,EAAER,GACN1G,MAAO,CACLE,GAAIgH,EAAElH,MAAME,GACZC,KAAM+G,EAAElH,MAAMG,KACdF,YAAaiH,EAAElH,MAAMC,YACrBG,KAAM8G,EAAElH,MAAMI,MAEhBuG,KAAMO,EAAEL,gEAlDLC,GAAkBxF,wCAAlBwF,EAAkBvF,QAAlBuF,EAAkB,qBAFjB,SAEDA,GAAb,yRCjEIxF,iCAAcA,wEADhBA,mGAIEA,8CAAcA,+CAAuC,gEADvDA,yDAIEA,+CAAcA,2CAAmC,gEADnDA,0IAIEA,qFACEA,yCAAiC,sEAFrCA,0DAOEA,iCAAcA,kEADhBA,gHAIEA,+CAAcA,iDAAyC,0EADzDA,0DAKEA,4CAAcA,4CAAoC,gEADpDA,0DAIEA,iCAAcA,wEADhBA,0EAIFA,mBAEEA,yDAASA,yBAGTA,gBACFA,0FAWMA,cAAsC,aACeA,sEAASA,kCAC1DA,SACFA,QACAA,yBAEEA,uEAAUA,kCACXA,iDANKA,0DACJA,iCAGAA,2EARRA,kBAA0D,OACrDA,SAAcA,QACjBA,cACEA,wBASFA,oCAXGA,uBAEmBA,8EAV1BA,kBAAmE,YAC7CA,yDAASA,yBAC3BA,mBACEA,gBACFA,QACAA,4BAAoBA,UAEtBA,yBAcFA,gCAd8CA,iEAgB5CA,mBAA+CA,SAAYA,+BAAZA,gDAE7CA,sCACAA,yDAJJA,kBAAiEA,yDAASA,qBACxEA,0BACAA,mBACEA,uBACAA,uBACFA,kCAJ6BA,kCAEvBA,iCACAA,iCC9EF,YAAuBgG,GAC3B,OAAOA,EAAQC,MA2BV,IAAMC,GAAb,MAAM,MAAOA,EAIX9G,cAKSI,aAAwB,GACxBA,eAA+B,GAE/BA,cAAW,WACXA,mBAA4B,GAC5BA,iBAAa,EAEbA,yBAAqB,EACrBA,iBAAa,EAKbA,eAAW,EACXA,cAAU,EACVA,gBAAa,GAEZA,sBAAmB,IAAI2G,MACvB3G,UAAO,IAAI2G,MACX3G,qBAAkB,IAAI2G,MAWhC3G,0BAAsB,EAEtBA,cAAmC,GACnCA,YAAS,EACTA,aAAS,EAET4G,kBAAkBC,GAChB7G,KAAK6G,UAAYA,EACjB7G,KAAK8G,gBAAgBC,KAAK/G,KAAK6G,WAAa,IAG9CG,cACEhH,KAAK8G,gBAAgBC,KAAK/G,KAAK6G,WAAa,IAG9CI,gBACEjH,KAAK8G,gBAAgBC,KAAK/G,KAAK6G,WAAa,IAG9CK,iBACE,MAAMC,EAAcnH,KAAKoH,iBAAmB,GAE5C,UAAWC,KAAOrH,KAAKsH,QACrBtH,KAAKuH,SAASF,EAAI1I,QAAS,EAG7B,UAAW0I,KAAOF,EAChBnH,KAAKuH,SAASF,EAAI1I,QAAS,EAG7BqB,KAAKwH,OAASxH,KAAKsH,QAAQhJ,OAAS6I,EAAY7I,OAGlDmJ,YAAYC,GACN1H,KAAK2H,UACP3H,KAAKkH,iBAITU,cACE5H,KAAK6H,qBAAuB7H,KAAK6H,oBAGnCC,UAKE,GAJA9H,KAAKoH,gBAAkBpH,KAAKsH,QAC5BtH,KAAKwH,OAAS,EACdxH,KAAK+H,QAAU/H,KAAK+H,QAEf/H,KAAK+H,OAAQ,CAChB,MAAMC,EAAuB,GAC7B,UAAWX,KAAOrH,KAAKsH,QACjBtH,KAAKuH,SAASF,EAAI1I,QACpBqJ,EAAOC,KAAKZ,GAEdrH,KAAKuH,SAASF,EAAI1I,QAAS,EAG7BqB,KAAKoH,gBAAkBY,EAEvBhI,KAAKwH,OAASxH,KAAKsH,QAAQhJ,OAAS0B,KAAKoH,gBAAgB9I,OAG3D,UAAW+I,KAAOrH,KAAKsH,QACrBtH,KAAKuH,SAASF,EAAI1I,QAAS,EAE7BqB,KAAKkI,iBAAiBnB,KAAK/G,KAAK+H,QAGlCI,oBAAoBC,GAClBpI,KAAKuH,SAASa,EAAKzJ,QAAUqB,KAAKuH,SAASa,EAAKzJ,OAChD,MAAMqJ,EAAuB,GAC7B,UAAWX,KAAOrH,KAAKsH,SACY,IAA7BtH,KAAKuH,SAASF,EAAI1I,QACpBqJ,EAAOC,KAAKZ,GAIhBrH,KAAKoH,gBAAkBY,EAEvBhI,KAAKwH,OAASxH,KAAKsH,QAAQhJ,OAAS0B,KAAKoH,gBAAgB9I,OAG3D+J,aAAajG,GACXpC,KAAKD,KAAKgH,KAAK3E,GAGjBkG,mBACEtI,KAAK8G,gBAAgBC,KAAK/G,KAAK6G,WAG1B0B,QACLvI,KAAKyG,OAAO+B,sDAlIH9B,8BAAa7C,2oCAVb,CACT4E,KACAC,KACA,CACEC,QAASC,KACTC,WAAYC,GACZC,KAAM,CAAErC,MAEXlG,yDD+BYwC,eAAAA,2qCA/DfxC,uBAeEA,2CAAmBwI,wBAAnBxI,CAA6C,kCAC7BwI,mBADhBxI,CAA6C,gCAE9BwI,iBAFfxI,CAA6C,kCAG5BwI,mBAHjBxI,CAA6C,2CAInBwI,uBAG1BxI,uBAGAA,uBAGAA,uBAGAA,uBAMAA,uBAGAA,uBAIAA,uBAGAA,uBAGFA,QACAA,0BAOAA,yBAsBAA,gCA7EEA,8BAAsB,4BAAtBA,CAAsB,eAAtBA,CAAsB,gDAAtBA,CAAsB,gCAAtBA,CAAsB,wBAAtBA,CAAsB,oBAAtBA,CAAsB,4BAAtBA,CAAsB,sBAAtBA,CAAsB,gCAAtBA,CAAsB,gBAAtBA,CAAsB,qBAmBRA,qFAGAA,mFAGAA,wCAGAA,sCAMAA,wCAGAA,8CAIAA,yCAGAA,8CAObA,0DAIyBA,yDAsBLA,i0JC9CVkG,GAAb,sIC1BIlG,iCAAcA,kDAA0C,sEAD1DA,iEAIAA,yIAuBUA,SACEA,iBAGC,YAEGA,SACAA,yBACFA,UAEJA,kCARIA,0CAA6B,qDAI3BA,iCACYA,2DATpBA,cACEA,cACAA,kCAWFA,kCAXgCA,uDAyB1BA,mBACEA,SACFA,yCADEA,gEAEFA,SACEA,yBACFA,yCADEA,4EAWEA,mBAA4D,OAA5DA,CAA4D,UACtDA,YAAkBA,QAAOA,SAAwBA,2CAAxBA,wDAVnCA,kBAA+D,WAA/DA,CAA+D,aAOzDA,gCACFA,QACAA,0BAMFA,2CARIA,0CAEgCA,+DAQtCA,SACEA,SACFA,yCADEA,gEAEFA,SACEA,SACFA,4DADEA,8DA7BNA,cACEA,YACEA,0BAGAA,kCAGAA,yBAiBAA,kCAGAA,kCAGFA,QACFA,kCA/BgBA,mCACcA,4CAGXA,oCAGoBA,4CAiBpBA,uEA7BrBA,iBAAgE,QAE5DA,8BACFA,QACAA,wBAiCFA,2DArCIA,0BAA0B,yBAETA,0BAECA,+GAoCtBA,kBACEA,iCACAA,mBAAyBA,0DAASA,yBAAlCA,YAEAA,QACAA,mBACAA,kBAA6B,aACoDA,0DAASA,sBACtFA,4BAAiBA,UAEnBA,mBAA+EA,0DAASA,sBACtFA,8BAAiBA,uCAJbA,gFAGAA,0HAnFdA,uBAOEA,4FAAyB,oDACjBA,2BAGRA,2CAgBAA,4CA6CAA,6CAiBFA,iCAvFEA,mCAA2B,oBAA3BA,CAA2B,kBAA3BA,CAA2B,oBAA3BA,CAA2B,wBAA3BA,CAA2B,qDAwF7BA,4BAEAA,mCA7FFA,mBACEA,8BA0FAA,uBAGFA,8BA5FKA,2CAyF6BA,oEASpCA,uBCtGK,IAAMyI,GAAb,MAAM,MAAOA,EALbrJ,cAOWI,aAAwB,GACxBA,cAAgB,GAChBA,WAA+D,WAC/DA,WAAQ,GAEPA,UAAO,IAAI2G,MACX3G,qBAAkB,IAAI2G,MAIhC3G,eAAiB,GACjBA,WAA2B,GAC3BA,gBAAY,EAEZkJ,WACElJ,KAAKmJ,MAAMlB,KAAK,CACdX,QAAStH,KAAKsH,UAIlBG,YAAYC,GACV1H,KAAKoJ,UAAqC,IAAzBpJ,KAAKqJ,SAAS/K,OAGjCgL,WACEtJ,KAAKuJ,iBAAiBzF,UAGxB0F,WACExJ,KAAKuJ,iBAAiBzF,UAGhByF,iBAAiBtK,GACO,IAA1Be,KAAK6G,UAAUvI,QAA+B,UAAf0B,KAAKyJ,QAGxCzJ,KAAK0J,gBAAgB3C,KAAK,CAAEhG,KAAMf,KAAK6G,UAAWvH,KAAML,IACxDe,KAAK6G,UAAY,IAGnB8C,cAEI3J,KAAK6G,UADH7G,KAAK6G,UAAUvI,SAAW0B,KAAKqJ,SAAS/K,OACzB,GAEA0B,KAAKqJ,SAI1BlH,aAAaC,GACX,MAAMwH,EAAWxH,EAAMC,eAAe7D,IAAI8D,IAAwB,IAAfA,EAAKC,MAAe,IAAID,EAAK3D,QAAU2D,EAAK3D,OAC3FiL,GAAU5J,KAAKD,KAAKgH,KAAK6C,iDApDpBX,8BAAuBpF,wWDFVb,yCAAAA,GA4DWA,YAAAA,GAoB6BA,wBAAAA,GAMvCA,UAAAA,GAGAA,SAAAA,GAM6CA,6BAAAA,mzCA9GxExC,mCAOEA,uBAIAA,8BAOAA,2CAkGFA,QAEAA,kEApHEA,uBAAe,iBAAfA,CAAe,yBAKeA,+CAK3BA,iDAAiC,2oICKzByI,GAAb,4CCRIzI,iBAEuB,qBACNA,4DAAUA,+BAAwDA,mCAA9BA,wEAHrDA,6CACGA,4BCQP,MAAMqJ,GAAc,CAAElL,MAAO,aAAcsE,OAAQD,QAAgBA,EAO5D,IAAM8G,GAAb,MAAM,MAAOA,EAuBXlK,YACUmK,EACAC,EACA3I,GAFArB,0BACAA,4BACAA,6BAtBDA,iBAAa,EAEtBA,cAA6B,GAE7BA,aAAwB,CACtB,CAAErB,MAAO,aAAcsE,OAAQD,aAAeA,EAC9C,CAAErE,MAAO,KAAMsE,OAAQD,YAAuBA,GAEvChD,yBAAsB,CAC7B,CAAEiK,MAAOjH,sBAA0BA,CAAEkH,OAAO,GAC5C,CAAED,MAAOjH,uBAAwBA,CAAEkH,OAAO,IAE5ClK,sBAAkB,EAElBA,WAA+D,WAC/DA,iBAAwB,GAEhBA,kBAAe,IAAIsB,IAOzBtB,KAAKmK,aAAapL,MAChB6C,OAAUxD,IACRgM,SACEC,SAAGC,YACHtK,KAAK+J,mBAAmB9D,wBAAwB7H,EAAOwC,QAASxC,EAAO8H,gBAAiB9H,EAAO2B,MAC5FhB,MAAKP,OAAI+L,WAGhB/G,UAAU,CACVf,KAAMgH,IACJzJ,KAAKyJ,MAAQA,EAAMe,IACff,EAAMgB,UACRzK,KAAKqJ,SAAWI,EAAM1I,OAG1B4C,MAAOC,IACL5D,KAAKyJ,MAAQ,mBAKnBhC,YAAYC,GACL1H,KAAK0K,aAAY1K,KAAKsH,QAAU,CAAEuC,IAAcc,OAAO3K,KAAKsH,UACjEtH,KAAKmK,aAAa1H,KAAK,CAAE7B,QAASZ,KAAKY,QAASsF,gBAAiBlG,KAAKkG,gBAAiBnG,KAAMC,KAAK4K,cAGpG3I,cACEjC,KAAKmK,aAAajI,WAIpB2I,kBAAkBzM,GAChB4B,KAAKyJ,MAAQ,aAEb,MAAMqB,EAAa,IAAIpG,IACvBtG,EAAO2C,KAAKgK,QAAQC,IAClB,MAAMC,EAAUD,EAAI9L,MAAME,GAE1B,IAAK4L,EAAInF,KACP,MAAM,IAAIqF,MAAM,8BAGlB,MAAMC,EAAWH,EAAInF,KAAKzG,GAEpB8K,EAAQY,EAAW7K,IAAIgL,GAClBH,EAAWlM,IAAIqM,EAAtBf,EAA+BA,EAAMS,OAAO,CAAEQ,IACrB,CAAEA,MAGjCnL,KAAKgK,qBAAqBhG,oBAAoB8G,EAAY1M,EAAOkB,MAC9DkE,UAAU,CACTf,KAAMuC,IACJhF,KAAKyJ,MAAQ,QACb2B,GAAqBpL,KAAKqB,sBRjC9B,YAAuBN,GAC3B,MAAMsK,EAAM,CAAElG,cAAe,EAAGD,aAAc,GAC9CnE,SAAKgK,QAAQC,IACXK,EAAIlG,eAAiB6F,EAAIM,KACzBD,EAAInG,cAAgBd,MAAMC,KAAK2G,EAAIO,UAChC/M,IAAYiL,GAAU,CAAE,UAAW,aAAc+B,SAAS/B,GAAS,EAAI,GACvEgC,OAAO,CAACC,EAAKL,IAAQK,EAAML,EAAK,KAE9BA,EQyBkDM,CAAa3G,GAAS5G,EAAOkB,MAC9EU,KAAKmK,aAAa1H,KAAK,CAAE7B,QAASZ,KAAKY,QAASsF,gBAAiBlG,KAAKkG,gBAAiBnG,KAAMC,KAAK4K,eAEpGjH,MAAOiI,IAGL,GAFA5L,KAAKyJ,MAAQ,QACbzJ,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvDG,iBAAiBC,GACfhM,KAAKkG,iBAAkB+F,QAAcjM,KAAKkM,oBAAoBF,IAAc9B,MAE5ElK,KAAKsH,QAAUtH,KAAKsH,QAAQhH,OAAO0K,GAAOA,IAAQnB,IAC9C7J,KAAKkG,kBAAiBlG,KAAKsH,QAAU,CAAEuC,IAAcc,OAAO3K,KAAKsH,UAErEtH,KAAKmK,aAAa1H,KAAK,CAAE7B,QAASZ,KAAKY,QAASsF,gBAAiBlG,KAAKkG,gBAAiBnG,KAAMC,KAAK4K,cAGpGuB,QAAQpM,GACF9B,KAAKC,UAAU6B,KAAU9B,KAAKC,UAAU8B,KAAK4K,eAC/C5K,KAAK4K,YAAc7K,EACnBC,KAAKmK,aAAa1H,KAAK,CAAE7B,QAASZ,KAAKY,QAASsF,gBAAiBlG,KAAKkG,gBAAiBnG,KAAMC,KAAK4K,6DAxG3Fd,GAA4BtJ,yDAA5BsJ,EAA4BjG,8JDxBrBb,qBAAAA,4MADpBxC,iCAKEA,gCAAQwI,cAARxI,CAAwB,qCACLwI,yBAEnBxI,2CAQFA,cAdEA,uBAAe,oBAAfA,CAAe,sDCuBJsJ,GAAb,GCTasC,GAAb,MAAM,MAAOA,EAcXxM,YACUmK,EACAC,EACA3I,GAFArB,0BACAA,4BACAA,6BAhBVA,cAA6B,GAEpBA,aAAwB,CAC/B,CAAErB,MAAO,aAAcsE,OAAQD,OAAgBA,EAC/C,CAAErE,MAAO,aAAcsE,OAAQD,MAAeA,EAC9C,CAAErE,MAAO,KAAMsE,OAAQD,YAAuBA,GAGhDhD,WAA+D,WAC/DA,iBAAwB,GAEhBA,kBAAe,IAAIsB,IAOzBtB,KAAKmK,aAAapL,MAChB6C,OAAUxD,IACRgM,SACEC,SAAGC,YACHtK,KAAK+J,mBAAmB1D,oBAAoBjI,EAAO2B,MAChDhB,MAAKP,OAAI+L,WAGhB/G,UAAU,CACVf,KAAMgH,IACJzJ,KAAKyJ,MAAQA,EAAMe,IACff,EAAMgB,UACRzK,KAAKqJ,SAAWI,EAAM1I,OAG1B4C,MAAOC,IACL5D,KAAKyJ,MAAQ,mBAKnBP,WACElJ,KAAKmK,aAAa1H,KAAK,CAAE1C,KAAMC,KAAK4K,cAGtC3I,cACEjC,KAAKmK,aAAajI,WAGpB2I,kBAAkBzM,GAChB4B,KAAKyJ,MAAQ,aACbzJ,KAAKgK,qBAAqBnF,wBAAwBzG,EAAO2C,KAAKvC,IAAI4H,GAAKA,EAAElH,MAAME,IAAKhB,EAAOkB,MACxFkE,UAAU,CACTf,KAAMuC,IACJhF,KAAKyJ,MAAQ,QACb2B,GAAqBpL,KAAKqB,sBTc9B,YAAsCN,GAC1C,MAAO,CACLoE,cAAepE,EAAKzC,OACpB4G,aAAcnE,EAAKT,OAAOmJ,GAASA,EAAMzI,SAAS1C,QSjBK+N,CAA4BrH,GAAS5G,EAAOkB,MAC7FU,KAAKmK,aAAa1H,KAAK,CAAE1C,KAAMC,KAAK4K,eAEtCjH,MAAOiI,IAGL,GAFA5L,KAAKyJ,MAAQ,QACbzJ,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvDO,QAAQpM,GACF9B,KAAKC,UAAU6B,KAAU9B,KAAKC,UAAU8B,KAAK4K,eAC/C5K,KAAK4K,YAAc7K,EACnBC,KAAKmK,aAAa1H,KAAK,CAAE1C,KAAMC,KAAK4K,6DApE7BwB,GAA6B5L,yDAA7B4L,EAA6BvI,2FCftBb,qBAAAA,qGADpBxC,iCAKEA,gCAAQwI,cAARxI,CAAwB,qCACLwI,yBAErBxI,cANEA,uBAAe,oBAAfA,CAAe,4CDcJ4L,GAAb,2DEhBA5L,uBAMIA,2DAAWA,uBACdA,aAFGA,qDAcEA,cAA4B,QAC1BA,WAAaA,QACbA,6BAA2BA,QAC3BA,0BAAmBA,QACnBA,6BAAwCA,QACxCA,8BAA6CA,oCAL/CA,8CAAKA,qDAsBCA,sCACAA,sCASEA,sCACAA,8FAvBRA,cAAI,OAAJA,CAAI,UAEiEA,SAAgBA,UAEnFA,cAAIA,SAAyBA,QAC7BA,cAAIA,SAAmCA,QACvCA,cAAI,aAMAA,wBACAA,wBACFA,UAEFA,eAAI,cAMEA,wBACAA,wBACFA,iDAtBkBA,yDAA6CA,uBAE/DA,kCACAA,4CAGAA,4EAIIA,0CACAA,yCAKAA,oFAIEA,8CACAA,wEAOZA,cAAI,OAAJA,CAAI,UAEAA,YAAyDA,sCADvDA,2EAlDVA,uBAQEA,gCAUAA,kCA8BAA,gCAOFA,8BApDEA,sBAAc,gBAAdA,CAAc,iCCLX,IAAM8L,GAAb,MAAM,MAAOA,EAOX1M,YAAoB2M,8BALpBvM,WAAwC,WACxCA,iBAAwB,GAExBA,UAAgB,GAKhBkJ,WACElJ,KAAKwM,YAGPA,YACExM,KAAKyJ,MAAQ,WACbzJ,KAAKuM,oBAAoBE,mBAAmBjJ,UAAU,CACpDf,KAAM1B,IACJf,KAAKyJ,MAAQ,QACbzJ,KAAKe,KAAOA,GAEd4C,MAAOC,GAAQ5D,KAAKyJ,MAAQ,UAIhCiD,QAAQxC,GACN,OAAQA,OACD,QACH,OAAOlH,QAAgBA,KACpB,OACH,OAAOA,YAAeA,KACnB,OACH,OAAOA,MAAeA,KACnB,UACH,OAAOA,MAAkBA,KACtB,UACH,OAAOA,SAAkBA,KACtB,OACH,OAAOA,WAAeA,SAEtB,OAAOA,OAAgBA,EAI7B2J,aAAazC,GACX,OAAQA,OACD,cACH,OAAOlH,SAAsBA,KAC1B,wBACH,OAAOA,kBAA8BA,SAErC,OAAOA,MAAeA,gDAnDjBsJ,GAAyB9L,sCAAzB8L,EAAyBzI,mGDJZb,sEAAAA,GAgBTA,KAAAA,GACcA,MAAAA,GACdA,eAAAA,GACcA,2BAAAA,GACAA,sCAAAA,GAqCSA,4CAAAA,mpBA7DxCxC,8BASAA,kEARKA,gCAAyB,y5ECOjB8L,GAAb,iBCMO,IAAMM,GAAb,MAAM,MAAOA,EAEXhN,YAAoBC,eAEpBgN,OAAOxN,EAAcC,GAKnB,OAAOU,KAAKH,KACT2E,KAAmC,GAAGtE,oBAL5B,CACXb,KAAMA,EACNC,KAAMA,GAGkE,IACvEP,MACCP,OAAIsC,OACJtC,OAAIsO,GAAYA,EAAS1N,KAI/B2N,YAAYC,EAAkBC,GAC5B,OAAOjN,KAAKH,KACT2E,KAA2B,GAAGtE,qBAA2B8M,eAAsBC,IAAW,KAAM,IAChGlO,MAAKP,OAAI0O,qDApBHN,GAAoBpM,wCAApBoM,EAAoBnM,QAApBmM,EAAoB,qBAFnB,SAEDA,GAAb,6BCCO,IAAMO,GAAb,MAAM,MAAOA,EA8BXvN,YACUwN,EACA/L,EACAgM,GAFArN,4BACAA,6BACAA,mBAhCVA,0BAAoD,CAClD,CACEV,KAAM,QACN4D,KAAM,aACNoK,MAAOtK,QAAgBA,CACvB7D,YAAa,IAEf,CACEG,KAAM,OACN4D,KAAM,aACNoK,MAAOtK,MAAeA,CACtB7D,YAAa,IAEf,CACEG,KAAM,UACN4D,KAAM,cACNoK,MAAOtK,MAAkBA,CACzB7D,YAAa,IAEf,CACEG,KAAM,QACN4D,KAAM,aACNoK,MAAOtK,OAAgBA,CACvB7D,YAAa,KAIjBa,WAAiC,QAQjCuN,SAASrO,GACPc,KAAKyJ,MAAQ,cACbzJ,KAAKoN,qBAAqBP,OAAO3N,EAAMoO,MAAOpO,EAAMI,MAAMkE,UAAU,CAClEf,KAAM+K,IACJxN,KAAKyJ,MAAQ,QACbzJ,KAAKqB,sBAAsBqC,QAAQV,4BAAqCA,EACxEhD,KAAKqN,YAAYI,YAAWC,QAAc,IAAKxO,EAAOE,GAAIoO,MAE5D7J,MAAOiI,IAGL,GAFA5L,KAAKyJ,MAAQ,QACbzJ,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDA/C1CuB,GAAiB3M,2DAAjB2M,EAAiBtJ,gFCf0Bb,4BAAAA,GAMEA,qCAAAA,2KAN1DxC,yBAA4E,uBAGtEA,wCAAgBwI,gBAInBxI,iBALGA,mEAAkD,kCAAlDA,CAAkD,+CDa3C2M,GAAb,uDEfA3M,iBAA6E,YAC3EA,YAAkDA,QAClDA,+BAAyFA,WCSpF,IAAMmN,GAAb,MAAM,MAAOA,EAKX/N,YACUgO,EACAC,GADA7N,sBACAA,qBAJVA,gBAAaA,KAAK6N,cAAcC,WAM9B9N,KAAK6N,cAAcE,UAAU,CAAEC,iBAAiB,IAChDhO,KAAK4N,eAAeK,SAAQC,QAAa,CACvCZ,MAAOtK,aAAoBA,CAC3BmL,YAAa,CACXC,SAAUpL,aAAoBA,CAC9BqL,KAAM,GACNC,gBAAgB,MAKtBrM,cACEjC,KAAK4N,eAAepF,QAGtB+F,gBACEvO,KAAKwO,iBAAiB/K,UACtBzD,KAAK4N,eAAea,mEA1BXd,GAAiBnN,gDAAjBmN,EAAiB9J,6LDDGb,uBAAAA,GAKKA,sBAAAA,GACiCA,WAAAA,GAf5BA,aAAAA,GACGA,+CAAAA,gbAF9CxC,yCAKAA,sCAAyD,iCAIzDA,iBAAsB,mBAElBA,wCACFA,QACAA,kCAIIA,sCAAewI,oBAClBxI,QACDA,yBACEA,mCACFA,UAGFA,kBACEA,0BACFA,oBA1BwCA,6DAObA,qFCIdmN,GAAb,wCCFA,MAAMe,GAAoB1P,KAAS,CACjCI,GAAIJ,KACJK,KAAML,KACNM,KAAMN,KAAU,QAAS,OAAQ,OAAQ,UAAW,QAAS,OAAQ,UAAW,UAY3E,IAAM2P,GAAb,MAAM,MAAOA,EAEX/O,YAAoBC,eAEpB+O,eAAeC,GACb,MAAM/J,EAAW,IAAK+J,EAAMR,KAAMQ,EAAMzP,IAExC,OAAOY,KAAKH,KAAKI,IAAa,GAAGC,qBAA2B4E,EAASjG,KAAK,oBAAoBE,MAC5FqB,OAAgBpB,KAAQ0P,MACxBlQ,OAAI2P,GAAeA,EAAY3P,IAAI,CAACsQ,EAAYC,KAAW,IACtDD,EACHD,OAAOG,QAAWF,EAAYX,EAAYc,MAAM,EAAGF,GAAOvQ,IAAI,EAAGY,QAASA,uDAXrEuP,GAA0BnO,wCAA1BmO,EAA0BlO,QAA1BkO,EAA0B,qBAFzB,SAEDA,GAAb,GCHaO,EAAb,MAAM,MAAOA,EAkBXtP,YACUuP,EACAC,GADApP,2BACAA,kCAlBFA,oBAAiB,IAAIuB,IAA0B,GAC/CvB,cAAW,IAAIsB,IAEvBtB,YAASA,KAAKqP,eAAetQ,MAG3B6C,OAAUiN,IAAS1K,OAAS,CAC1BjF,MAAOc,KAAKmP,oBAAoBlP,IAAI4O,EAAMzP,IAC1C+O,YAAanO,KAAKoP,2BAA2BR,eAAeC,KAC3D9P,MACDP,OAAI,EAAGU,QAAOiP,kBAAmB,CAAEU,QAAO3P,QAAOiP,kBACjDtM,QAAgB,CAAEC,SAAU9B,KAAK+B,cAEnCuN,QAAY,IAQdC,WAAWV,GACT7O,KAAKqP,eAAe5M,KAAKoM,GAI3BW,eACExP,KAAK+B,SAASU,OAGhBR,cACEjC,KAAK+B,SAASG,WACdlC,KAAKqP,eAAenN,yDAlCXgN,GAAe1O,kDAAf0O,EAAezO,QAAfyO,EAAe,YAAfA,GAAb,qICpBE1O,iBACEA,yBACFA,kDACAA,uBAKEA,4DAAWA,qBACZA,aAHCA,qDAIFA,0BAEAA,mCAOIA,cAAI,OAAJA,CAAI,aACqBA,SAAwBA,UAC/CA,cAAI,iCAEAA,SACFA,sCAJqBA,gCAEIA,mDACvBA,wFAVVA,qBAKEA,gCAUFA,mCAbIA,iDAhBNA,SACEA,wBAGAA,8BAOAA,wBAGAA,4BAgBFA,6BA7BkCA,oCAI7BA,iCAMGA,oDAMDA,mDCJA,IAAMiP,GAAb,MAAM,MAAOA,EAeX7P,YACU8P,EACAC,GADA3P,4BACAA,6BAhBFA,cAAW,IAAIsB,IACdtB,YAASA,KAAK0P,qBAAqBE,cAAc7Q,MACxDuB,OAAOuP,QACPjO,OAAUkO,GACR9P,KAAK2P,sBAAsBI,kBAAkBD,EAAajB,MAAMzP,IAAIL,MAClEP,OAAIwR,GAAkB,IACjBA,EAAe1P,OAAO2P,GAAOA,EAAIrP,UAAYkP,EAAajB,MAAMzP,OAChE4Q,EAAe1P,OAAO2P,GAAOA,EAAIrP,UAAYkP,EAAajB,MAAMzP,KACnE6P,MAAM,EAAG,OAGfpN,QAAgB,CAAEC,SAAU9B,KAAK+B,YAQnCE,cACEjC,KAAK+B,SAASG,WAGhBuB,UACEzD,KAAK+B,SAASU,qDAzBLgN,GAA+BjP,kDAA/BiP,EAA+B5L,+FDPlBb,oCAAAA,GAKmCA,2BAAAA,ycAX7DxC,wDAAeA,yoECaFiP,GAAb,gHCLMjP,gCAUEA,qHAAU0P,6BAAV1P,CAA0D,+GAClD0P,+BADR1P,CAA0D,4GAEjD0P,2BAFT1P,CAA0D,mDAGlDA,gCAHRA,CAA0D,qDAIjDA,uCAJTA,CAA0D,wDAK7CA,uDACdA,+CAdCA,0EAAkE,kDAAlEA,CAAkE,qBAAlEA,CAAkE,mPAHtEA,SACEA,wCAiBFA,8BAhBKA,sEAyBPA,mFClBK,IAAM2P,GAAb,MAAM,MAAOA,EAcXvQ,YACUwQ,EACAV,EACAW,GAFArQ,mBACAA,4BACAA,2BAZOA,YAAS,IAAIuB,IAAqB,GAGnDvB,6BAAyBsQ,QAAc,CAAEtQ,KAAK0P,qBAAqBE,cAAe5P,KAAKuQ,SAAUxR,MAC/FP,OAAI,EAAGsR,EAAc5Q,QAAe4Q,GAAgBA,EAAajB,MAAMzP,KAAOF,EAAME,MAGtFY,0BAAuBA,KAAKqQ,oBAAoBG,qBAQhD/I,cACEzH,KAAKyQ,oBAAsBzQ,KAAK0Q,WAAWxR,OAAQyR,SAAwB3Q,KAAK0Q,UAAUxR,YAAS2D,EAE/F7C,KAAK0Q,WACP1Q,KAAKuQ,OAAO9N,KAAKzC,KAAK0Q,UAAUxR,OAIpC+C,cACEjC,KAAKuQ,OAAOrO,WAGd0O,sBACE5Q,KAAKoQ,YAAYS,aAAapO,KAAKqO,mBAGrCC,0BAA0B3O,GACxB,IAAKpC,KAAK0Q,WAAWxR,MAAO,MAAM,IAAIgM,MAAM,sDAC5ClL,KAAK0P,qBAAqBsB,mBAAmBhR,KAAK0Q,UAAU7B,MAAO7O,KAAK0Q,UAAUxR,OAClFc,KAAKiR,uCAAuC7O,GAG9C8O,2BACElR,KAAKmR,IAAIC,OACTpR,KAAK0P,qBAAqB2B,eAG5BJ,uCAAuC7O,GACrCpC,KAAKmR,IAAIG,KAAKlP,GAKdmP,WAAW,KACTvR,KAAKmR,IAAIK,wDAtDFrB,GAAoB3P,8DAApB2P,EAAoBtM,4lBDhBjCrD,iBAAoC,UAApCA,CAAoC,UAApCA,CAAoC,UAApCA,CAAoC,UAItBA,SAA4BA,YAGtCA,kDAmBFA,UAGFA,8BAKEA,kDACFA,+BA/BcA,uFAGKA,yDAwBfA,4BAG6BA,uqKClBpB2P,GAAb,4ICfE3P,gDASEA,2BAEAA,gCAEEA,4BAA6CA,kDAXjDA,uBAKEA,4DAAWA,qBAEXA,yBAGAA,2CAGFA,gDAXEA,mCACAA,uEAAoF,0CAIxEA,4CAAwC,yCAmB9CA,SACEA,cAAI,YAEAA,SACFA,UAEJA,kCAHMA,4DAJRA,cACEA,kCAOFA,wCAPgCA,sEARhCA,cAAI,UAAJA,CAAI,WAAJA,CAAI,iBAGiCA,0DAASA,qBAAWA,cAIzDA,iEANMA,mCAMDA,6DAoBCA,SACEA,qCACFA,yCADEA,6IAEFA,SACEA,mBAIEA,sGAAcA,8DAGdA,SACFA,QACFA,2CAPIA,8CAAuC,gCAKvCA,uEAGJA,SACEA,qCAA4DA,gCAAgCA,QAC9FA,yCADsBA,+CAAwCA,6DAE9DA,SACEA,yBACFA,yCADEA,2EAEFA,SACEA,SACFA,4DADEA,6EAvBNA,iBAAgCA,4EAAcA,mCAC5CA,YACEA,kCAGAA,kCAWAA,kCAGAA,kCAGAA,kCAGFA,QACFA,oCAzBgBA,mCACGA,8CAGAA,mDAWAA,2CAGAA,+DApBrBA,cACEA,wBA2BFA,gCA3BsBA,uDA8BtBA,cAAI,OAAJA,CAAI,UAEAA,YAA8DA,sCAD5DA,8DA3DZA,SACEA,sBACEA,iCAmBAA,iCAoCAA,iCAOFA,QACFA,mCAhE6BA,yCAA8B,uBAA9BA,CAA8B,mDAnB7DA,SACEA,gCAEAA,8BAeAA,iCAkEFA,6BAnF8BA,6CAGzBA,iCAcYA,wEAwEfA,SACEA,kCAA+DA,8DAAcA,2CAAgBA,QAC/FA,sCADuBA,4ECpElB,IAAMiR,GAAb,MAAM,MAAOA,EAwBX7R,YACU8R,6BAtBD1R,qBAAiB,EAKTA,cAAW,IAAIuB,IAAkC,GACjDvB,cAAW,IAAIsB,IACvBtB,YAASA,KAAK2R,SAAS5S,MAC9B6C,OAAWhB,GAAgCZ,KAAK4R,SAAShR,KACzDiB,QAAgB,CAAEC,SAAU9B,KAAK+B,YAElB/B,yBAAsB,IAAI6R,UAAiFhP,GAC5H7C,mBAAeoK,QACbpK,KAAK8R,oBAAoB/S,MAAKgT,QAAa,MAC3C/R,KAAK8R,oBAAoB/S,MAAKuB,OAAO4J,IAAUA,KAC/CnL,MAAK2C,UAAwB4N,QAAY,IAE1BtP,6BAA0BA,KAAKgS,aAAaxO,UAAUzC,IACrEA,EAAOf,KAAKmR,IAAIc,OAAOlR,EAAKqB,MAAOrB,EAAK6B,QAAU5C,KAAKmR,IAAIC,SAO7D3J,cACEzH,KAAK2R,SAASlP,KAAKzC,KAAKY,SAG1BqB,cACEjC,KAAK2R,SAASzP,WACdlC,KAAK+B,SAASG,WACdlC,KAAK8R,oBAAoB5P,WACzBlC,KAAKkS,wBAAwBC,cAG/B1O,UACEzD,KAAK+B,SAASU,OAGRmP,SAAShR,GACf,OAAOZ,KAAK0R,mBAAmBU,kBAAkBxR,GAAS7B,MACxDP,OAAKuC,IAAyB,CAC5BuG,QAAStH,KAAKqS,gBACdC,QAASvR,MAKPsR,gBAqBN,MAAO/K,CAnBL,CACE3I,MAAO,eACPsE,OAAQD,cAAiBA,EAE3B,CACErE,MAAO,oBACPsE,OAAQD,SAAkBA,EAE5B,CACErE,MAAO,YACPsE,OAAQD,MAAkCA,CAC1CuP,UAAWvS,KAAKwS,gBAElB,CACE7T,MAAO,KACPsE,OAAQD,YAAeA,GAIZ1C,OAAO+G,IAAQA,EAAIkL,UAAU/T,IAAI6I,IAAQ,CACtD1I,MAAO0I,EAAI1I,MACXsE,OAAQoE,EAAIpE,UAIhBwP,aAAarQ,EAAcsQ,EAAgB3D,GACzC,MAAM4D,EAAY3S,KAAK4S,YAAY3S,IAAI8O,GACvC,IAAK4D,EACH,MAAM,IAAIzH,MAAM,mCAElBlL,KAAK8R,oBAAoBrP,KAAK,CAAEL,QAAOsQ,SAAQ9P,OAAQ+P,EAAUE,gBAGnEC,aAAa1Q,EAAmBzD,GAChB,sBAAVA,IAAiCoU,QAAgB3Q,IACnDpC,KAAKgT,eAITA,eACEhT,KAAK8R,oBAAoBrP,UAAKI,iDA9FrB4O,GAAqBjR,sCAArBiR,EAAqB5N,4SDbyCb,uDAAAA,GAI1DA,wDAAAA,GAgEMA,qDAAAA,+wBA9EvBxC,kDAsFAA,8BAIEA,iCAGFA,+BA7FeA,kCA0FEA,uPCnEJiR,GAAb,0BCrBIjR,oBAEAA,gCAEEA,oBAEAA,kDARNA,SACEA,aACEA,iCAGAA,2CAKFA,QAEAA,iBAAoB,gBAKhBA,2DAAWA,wBAEZA,UAELA,2CAnBmBA,kDAAgC,cAgB7CA,uDCPC,IAAMyS,GAAb,MAAM,MAAOA,EAKXrT,YACUuB,EACAE,GADArB,yBACAA,6BANAA,WAAQ,IAAI2G,MAUtBtD,aACE,IAAKrD,KAAKd,MACR,MAAM,IAAIgM,MAAM,4BAGlBlL,KAAKmB,kBAAkBR,MAAMX,KAAKd,MAAME,IAAIoE,UAAU,CACpDf,KAAM,KACJzC,KAAKqB,sBAAsBqC,QAAQV,mBAA4BA,EAC/DhD,KAAKW,MAAMoG,QAEbpD,MAAOiI,IAEL,GADA5L,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDAvB1CqH,GAAmBzS,+CAAnByS,EAAmBpP,mIDKRb,kBAAAA,GAd4CA,sDAAAA,GAI3CA,yIAAAA,uMANzBxC,sCAAeA,kKCWFyS,GAAb,6BCTIzS,aAA2CA,SAAuBA,+BAAvBA,gGAI7CA,yBACEA,gCACFA,+BADsBA,+EAGtBA,yBAA0H,wBACvFA,0DAASA,qBAAWA,mCAApCA,2DAXrBA,SACEA,yBACEA,sBACAA,2CACFA,QAEAA,gCAIAA,gCAGFA,yCAXQA,2CAA0B,cAIkCA,0DAIUA,+DCDvE,IAAM0S,GAAb,MAAM,MAAOA,EAMXtT,YAAoBuT,iBALVnT,0BAAuB,IAAI2G,MAC3B3G,eAAY,IAAI2G,MAM1ByM,UACMpT,KAAKd,OAAOmU,SACdrT,KAAKsT,qBAAqBvM,QAG5B/G,KAAKuT,UAAUxM,OACV/G,KAAKmT,OAAOK,SAAS,CAAE,gEAdnBN,GAAsB1S,sCAAtB0S,EAAsBrP,4LDRiBb,iBAAAA,GAKKA,YAAAA,GAIEA,kBAAAA,GAP7BA,kCAAAA,kUAH9BxC,sCAAeA,qhECSF0S,GAAb,GCNO,IAAKO,EAKX,MALD,OAAYA,QAAU,KACpBA,gBACAA,sBACAA,gBACAA,gBAJUA,EAAZ,IAAYA,GAKX,GAWM,IAAMC,GAAb,MAAM,MAAOA,EA0DX9T,cAtDUI,YAAS,IAAI2G,MAEvB3G,WAAgB,CAAEV,KAAMmU,EAAWE,MAAOC,gBAAgB,GAE1D5T,4BAAyB,EACzBA,wBAAqB,EAEZA,qBAAsD,CAC7D,CACEiK,MAAOjH,iBAA+BA,CACtCkH,OAAO,GAET,CACED,MAAOjH,sBAA0BA,CACjCkH,OAAO,IAIFlK,+BAAkF,CACzF,CACEkD,KAAM,cACN+G,MAAOjH,YAAgBA,CACvBkH,MAAOuJ,EAAWI,OAEpB,CACE3Q,KAAM,aACN+G,MAAOjH,cAAgBA,CACvBkH,MAAOuJ,EAAWE,QAIb3T,+BAAkF,CACzF,CACEkD,KAAM,cACN+G,MAAOjH,cAAqBA,CAC5BkH,MAAOuJ,EAAWK,QAEpB,CACE5Q,KAAM,iBACN+G,MAAOjH,UAAmBA,CAC1BkH,MAAOuJ,EAAWM,UAEpB,CACE7Q,KAAM,cACN+G,MAAOjH,YAAgBA,CACvBkH,MAAOuJ,EAAWI,OAEpB,CACE3Q,KAAM,aACN+G,MAAOjH,cAAgBA,CACvBkH,MAAOuJ,EAAWE,QAMtBzK,WACMlJ,KAAKgU,cACPhU,KAAKiU,UAAUjU,KAAKgU,cAIjBC,UAAU3T,GACfN,KAAKkK,MAAQ5J,EACbN,KAAKkU,uBAAyBlU,KAAKmU,gBAAgBC,UAAUC,GAAkBA,EAAenK,QAAUlK,KAAKkK,MAAM0J,gBAEnH5T,KAAKsU,mBAAqBC,KAAKC,IAAI,GADfxU,KAAKkK,MAAM0J,eAAiB5T,KAAKyU,0BAA4BzU,KAAK0U,2BACpCN,UAAUO,GAAcA,EAAWzK,QAAUlK,KAAKkK,MAAM5K,OAG5GsV,oBAAoB7F,GAClB,MAAM8F,EAAc7U,KAAKkK,MAAM0J,eAAiB5T,KAAKyU,0BAA4BzU,KAAK0U,0BACtF1U,KAAKsU,mBAAqBvF,EAC1B/O,KAAKkK,MAAM5K,MAAO2M,QAAc4I,EAAY9F,IAAQ7E,MACpDlK,KAAK8U,OAAO/N,KAAK/G,KAAKkK,OAGxB6K,wBAAwBhG,GACtB/O,KAAKkK,MAAM0J,gBAAiB3H,QAAcjM,KAAKmU,gBAAgBpF,IAAQ7E,MACvElK,KAAKkU,uBAAyBnF,EAE9B,MAAM8F,EAAc7U,KAAKkK,MAAM0J,eAAiB5T,KAAKyU,0BAA4BzU,KAAK0U,0BACtF1U,KAAKsU,mBAAqBO,EAAYT,UAAUO,GAAcA,EAAWzK,SAClD,UAApBlK,KAAKkK,MAAM5K,KAAmB,QAAU,UAC3CU,KAAKkK,MAAM5K,MAAO2M,QAAc4I,EAAY7U,KAAKsU,qBAAqBpK,MAEtElK,KAAK8U,OAAO/N,KAAK/G,KAAKkK,qDAzFbwJ,8BAA+B7P,wRCnB5CrD,iBAA4B,qBAIxBA,kCAAUwI,+BACXxI,QACDA,2BAIEA,kCAAUwI,2BACXxI,iBATCA,0CAAyB,qCAKzBA,uGAAsF,gpFDY7EkT,GAAb,GEZasB,GAAb,MAAM,MAAOA,8EAA0BnR,wFCPFb,yDAAAA,gEAArCxC,0BAA0EA,wEDO7DwU,GAAb,6BEGO,IAAMC,GAAb,MAAM,MAAOA,EAEXrV,YAAoBC,eAEpBqV,YAAY9V,EAAY+V,GACtB,OAAOnV,KAAKH,KACTuV,IAA0B,GAAGlV,qBAA2Bd,IAAM+V,GAC9DpW,MACCP,OAAI0O,qDARC+H,GAAmBzU,wCAAnByU,EAAmBxU,QAAnBwU,EAAmB,qBAFlB,SAEDA,GAAb,GCIaI,GAAb,MAAM,MAAOA,EAEXzV,YAAoBC,eAEpByV,cAAclW,GACZ,OAAOY,KAAKH,KACT2E,KAAkD,GAAGtE,qBAA2Bd,SAAW,KAAM,IACjGL,MACCP,OAAI+W,IACF,MAAMC,EAAQD,EAAgCC,KAC9C,IAAKA,EAAM,MAAM,IAAItK,MAAM,+CAC3B,OAAOsK,KAKfC,WAAWrW,GACT,OAAOY,KAAKH,KACTgB,OAA6B,GAAGX,qBAA2Bd,UAC3DL,MACCP,OAAI0O,qDApBCmI,GAAkB7U,wCAAlB6U,EAAkB5U,QAAlB4U,EAAkB,qBAFjB,SAEDA,GAAb,wFCZE7U,kBAIEA,yDAASA,yBAKTA,eACFA,gCAPEA,qFAQFA,kBAGEA,yDAASA,wBAKTA,eACFA,qDCfK,IAAMkV,GAAb,MAAM,MAAOA,EALb9V,cAMWI,kBAAc,EACdA,iBAAa,EACbA,UAAO,MAENA,aAAU,IAAI2G,MACd3G,YAAS,IAAI2G,MAEvBgP,cACE3V,KAAKyD,QAAQsD,OAGf0O,aACEzV,KAAK4V,OAAO7O,qDAbH2O,8BAAkB7R,oMDAHb,gEAAAA,GAUAA,mCAAAA,ofAjB5BxC,iBAA4B,YACgDA,SAAQA,QAClFA,yBAWAA,yBAUFA,eAtBqBA,oEAAuDA,uBAEvEA,qCAWAA,8hHCPQkV,GAAb,6DCPAlV,wCAUMA,+BAAuFA,gCACvFA,+BAA4GA,gCAC5GA,+BAAkHA,mCAEhHA,qGAGAA,kHAAOA,wEAAPA,oCAEEA,kEAA0IA,yJAN9IA,SACEA,2BAIAA,4CAGFA,0CAPkCA,iEAAiD,yCAQnFA,+CAEAA,gJACAA,uBAIEA,4DAAWA,6BAGZA,iCAFCA,0DArBJA,iBACEA,yBACAA,yBACAA,yBACAA,kCASAA,0BAGAA,8BAQFA,8BAvBuBA,gDACAA,gDACAA,oDACNA,8HASUA,4EAStBA,0FAuBDA,kBAAiG,wBAK7FA,yGAGDA,QACDA,uBAGEA,4DAAWA,kCAA4BqV,uDAKxCrV,8CAZCA,qDAQAA,0KAAgI,wEAhCxIA,kBAAmD,WAAnDA,CAAmD,aAE/CA,YAA6BA,QAC7BA,6BAIEA,2DAAWA,4BAAXA,CAA6B,oDACnBA,wBACXA,UAEHA,kBAA+B,aAC7BA,YAAiCA,QACjCA,4BAGEA,2DAAUA,iCACXA,QAEDA,yBAmBFA,kCAlCIA,oCAAmB,iBAAnBA,CAAmB,iBAUnBA,8CAA6B,yCAKGA,kFCpCnC,IAAMsV,GAAb,MAAM,MAAOA,EAgCXlW,YACUmW,EACAC,EACA3U,GAFArB,2BACAA,0BACAA,6BAhCAA,qBAAkB,IAAI2G,MAIhC3G,iBAAa,EAEbA,yBAAsB,CACpB,CACEiK,MAAOjH,UAAmBA,CAC1BkH,MAAO,WACP+L,QAASjT,8BAAuCA,CAAGA,4BAA+DA,EAEpH,CACEiH,MAAOjH,aAAsBA,CAC7BkH,MAAO,cACP+L,QAASjT,qCAA8CA,CAAGA,4BAA+DA,EAE3H,CACEiH,MAAOjH,QAAiBA,CACxBkH,MAAO,SACP+L,QAASjT,iDAA4EA,CACnFA,4BAA+DA,GAGrEhD,8BAA2BA,KAAKkW,oBAAoB9B,UAAU,EAAGlK,WAAsB,WAAVA,GAC7ElK,gCAA6B,EAC7BA,qBAAkBgD,iDAA4EA,CAC5FA,4BAA+DA,CAQjEyE,YAAY0N,GACNA,EAAQjW,QAAUc,KAAKd,QAAOc,KAAKmW,cAAWtT,GAC9CsS,EAAQjW,OAASc,KAAKd,QACxBc,KAAKmW,UAAWA,SAASnW,KAAKd,OAK1BkX,EAHoClX,MAAMmX,eAAqCC,cAAcC,iBAC9FpB,EAAQjW,MAAMsX,cAAoCF,cAAcC,iBAGjEvW,KAAKyW,yBAA2BzW,KAAKd,MAAMoX,cAAcI,WACzD1W,KAAK2W,2BAA6B3W,KAAK4W,8BAA8B5W,KAAKd,MAAMoX,gBAOtFO,kBACE,IAAK7W,KAAKd,MAAO,OAGjBc,KAAK8W,YAAa,EAElB,MAAMlW,EAAUZ,KAAKd,MAAME,GACrB2X,EAAY/W,KAAKd,MAAM8X,cAE7BhX,KAAKgW,mBAAmBV,cAAc1U,GACnC7B,MACC6C,OAAU,IAEO,OAAdmV,GAAqB1M,aAAGxH,GAAa7C,KAAK+V,oBAAoBb,YAAYtU,EAAS,CAAEqW,gBAAiB,SAG1GzT,UAAU,CACTf,KAAM,KACJzC,KAAKqB,sBAAsBqC,QAAQV,6CAAwCA,EAC3EhD,KAAK8W,YAAa,EAClB9W,KAAKkX,gBAAgBnQ,QAEvBpD,MAAOiI,IAGL,GAFA5L,KAAK8W,YAAa,EAClB9W,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvDuL,mBAAmBC,GACjB,IAAKpX,KAAKd,QAAUc,KAAKmW,SAAU,MAAM,IAAIjL,MAAM,2DACnD,GAAIlL,KAAKmW,SAASkB,cAAe,MAAM,IAAInM,MAAM,mDACjD,MAAMoM,EAAkB,IAAIC,KAAaH,GACrCpX,KAAKd,MAAMoX,cAAcC,iBAAmBe,EAAgBf,iBAGhEvW,KAAK8W,YAAa,EAGlB9W,KAAK+V,oBAAoBb,YAAYlV,KAAKd,MAAME,GAAI,CAClDoY,cAAeF,EAAgBf,eAC/BU,gBAAiB,OAChBzT,UAAU,CACXf,KAAM,KACJzC,KAAKqB,sBAAsBqC,QAAQV,wCAAwCA,EAC3EhD,KAAK8W,YAAa,EAClB9W,KAAKkX,gBAAgBnQ,QAEvBpD,MAAOiI,IAGL,GAFA5L,KAAK8W,YAAa,EAClB9W,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,MAKrD6J,aACE,IAAKzV,KAAKd,MAAO,MAAM,IAAIgM,MAAM,8CAGjClL,KAAK8W,YAAa,EAElB,MAAMlW,EAAUZ,KAAKd,MAAME,GACrB2X,EAAY/W,KAAKd,MAAM8X,cAE7BhX,KAAKgW,mBAAmBP,WAAW7U,GAChC7B,MACC6C,OAAU,IAEO,OAAdmV,GAAqB1M,aAAGxH,GAAa7C,KAAK+V,oBAAoBb,YAAYtU,EAAS,CAAEqW,gBAAiB,SAG1GzT,UAAU,CACTf,KAAM,KACJzC,KAAKqB,sBAAsBqC,QAAQV,qFAA+DA,EAClGhD,KAAK8W,YAAa,EAClB9W,KAAKkX,gBAAgBnQ,QAEvBpD,MAAOiI,IAGL,GAFA5L,KAAK8W,YAAa,EAClB9W,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvD6L,mBAAmBlQ,GACjB,MAAMmQ,EAAc1X,KAAKkW,oBAAoB3O,IAAW2C,MACpC,aAAhBwN,GAA4B1X,KAAKmX,mBAAmBI,oBACpC,gBAAhBG,GAA+B1X,KAAKmX,mBAAmBI,sBAE3DvX,KAAK2W,2BAA6BpP,EAG5BqP,8BAA8BN,GACpC,OAAuCtW,KAAKkW,oBAAoB9B,UAA5DkC,GAAcqB,aAAwD,EAAGzN,WAAsB,gBAAVA,EACrFoM,GAAcsB,WAAsD,EAAG1N,WAAsB,aAAVA,EAC7C,EAAGA,WAAsB,WAAVA,iDAzJhD4L,GAAwBtV,yDAAxBsV,EAAwBjS,+LDfjBb,8BAAAA,GAIiBA,mGAAAA,GAmBXA,iBAAAA,GAhBoCA,8CAAAA,GACAA,kFAAAA,GACIA,wDAAAA,GAE2CA,uIAE5E,GAGQA,gEAA8B,GAGuBA,iDAC7D,GAcAA,MAAAA,GAUAA,aAAAA,2nCA/CjCxC,wBACAA,mCAIC,UAJDA,CAIC,YAEGA,WAA4FA,QAE5FA,wBA0BAA,yBAyCFA,iBA5EIA,2BAIJA,iCAK2BA,kCA0BDA,q5HCjBfsV,GAAb,GCXO,IAAK+B,EAKX,MALD,OAAYA,QAAgB,KAC1BA,uBACAA,qBACAA,uCACAA,2BAJUA,EAAZ,IAAYA,GAKX,GAKM,IAAMC,GAAb,MAAM,MAAOA,EAEXlY,YAAoBC,eAEpBkY,kBACEnX,EACAoX,GAEA,OAAOhY,KAAKH,KACT2E,KACC,GAAGtE,qBAA2BU,gBAC9B,CAAEoX,OAAQA,GAAU,IACrBjZ,MACCP,OAAIsC,OACJtC,OAAI,SAAUuC,GACZ,OAAO,IAAI2D,IACTC,OAAOL,QAAQvD,GAAMvC,IACnB,EAAGsE,EAAKoH,MACN,OAAQA,OACD,UACH,MAAO,CAAEpH,EAAK+U,EAAiBI,SAAxB,IACJ,YACH,MAAO,CAAEnV,EAAK+U,EAAiBK,gBAAxB,IACJ,YACH,MAAO,CAAEpV,EAAK+U,EAAiBM,UAAxB,IACJ,YACA,UACH,MAAO,CAAErV,EAAK+U,EAAiB3M,OAAxB,QAEP,MAAM,IAAIA,MAAM,sBAAsBpI,oCAAsC7E,KAAKC,UAAUgM,4DA7BlG4N,GAA6BtX,wCAA7BsX,EAA6BrX,QAA7BqX,EAA6B,qBAF5B,SAEDA,GAAb,6BCTO,IAAMM,GAAb,MAAM,MAAOA,EASXxY,cAPSI,UAAqC,OAErCA,YAAS,GACTA,eAAW,EAEpBA,UAAmB,GAInByH,YAAYC,GACV1H,KAAKqY,KAAO,CAAC,CACXC,SAAUtY,KAAKV,KACfiZ,QAASvY,KAAKuY,QACdC,OAAQxY,KAAKwY,uDAfNJ,8BAAgBvU,+NCR7BrD,6BAAsCA,sBAAc,8CDQvC4X,GAAb,yBEFI5X,8BACEA,8CAUFA,kDACEA,2BAD4CA,qBAAqB,oBCKhE,IAAMiY,GAAb,MAAM,MAAOA,EAWX7Y,YACU8Y,EACArX,EACAsX,GAFA3Y,qCACAA,6BACAA,mBAXAA,qBAAkB,IAAI2G,MAEhC3G,gBAAaA,KAAK2Y,YAAYzZ,MAAM,CAAE8Y,OAAQ,KAC9ChY,WAA0B,QAE1BA,cAAsB,GAUtBkJ,WACElJ,KAAK4Y,aAAe5Y,KAAK6Y,WAAW5Y,IAAI,WAAW6Y,aAAatV,UAAWsR,GAAmB9U,KAAK+Y,iBAAiBjE,IAGtH7S,cACEjC,KAAK4Y,cAAczG,cAGrB6G,SAASC,GACHjZ,KAAKyJ,QAAUwP,IACA,YAAfjZ,KAAKyJ,OAAqBzJ,KAAK6Y,WAAWK,SAC7B,YAAbD,GAAwBjZ,KAAK6Y,WAAWM,UAC5CnZ,KAAKyJ,MAAQwP,GAGfF,iBAAiBK,GACf,GAAmB,YAAfpZ,KAAKyJ,MAAqB,OAC9BzJ,KAAKgZ,SAAS,SAEd,MAAMhB,EAASoB,EAASC,MAAM,KAAK/Y,OAAOiF,GAASA,EAAMjH,OAAS,GAE5C,IAAlB0Z,EAAO1Z,OACT0B,KAAKgZ,SAAS,SACLhB,EAAO1Z,QAAU,KAC1B0B,KAAKgZ,SAAS,YAIVM,gBAAgBxM,GAEtB,MAAMyM,EAA2BnV,MAAMC,KAAKyI,EAASxI,WAAWhE,OAAOkZ,GAAKA,EAAE,KAAO3B,WAA0BrZ,IAAIgb,GAAKA,EAAE,IACpHC,EAA2BrV,MAAMC,KAAKyI,EAASxI,WAAWhE,OAAOkZ,GAAKA,EAAE,KAAO3B,kBAAiCrZ,IAAIgb,GAAKA,EAAE,IAC3HE,EAA0BtV,MAAMC,KAAKyI,EAASxI,WAAWhE,OAAOkZ,GAAKA,EAAE,KAAO3B,YAA2BrZ,IAAIgb,GAAKA,EAAE,IACpHG,EAA2BvV,MAAMC,KAAKyI,EAASxI,WAAWhE,OAAOkZ,GAAKA,EAAE,KAAO3B,SAAwBrZ,IAAIgb,GAAKA,EAAE,IAEpHD,EAAejb,OAAS,GAC1B0B,KAAK4Z,SAAS3R,KAAK,CACjB3I,KAAM,UACNiZ,QAASvV,gEAAkE1E,CAC3Eka,OAAQ,GAAGe,EAAe1a,KAAK,UAG/B4a,EAAenb,OAAS,GAC1B0B,KAAK4Z,SAAS3R,KAAK,CACjB3I,KAAM,OACNiZ,QAASvV,4EAAuE1E,CAChFka,OAAQ,GAAGiB,EAAe5a,KAAK,UAG/B6a,EAAcpb,OAAS,GACzB0B,KAAK4Z,SAAS3R,KAAK,CACjB3I,KAAM,QACNiZ,QAASvV,sEAA4D1E,CACrEka,OAAQ,GAAGkB,EAAc7a,KAAK,UAG9B8a,EAAerb,OAAS,GAC1B0B,KAAK4Z,SAAS3R,KAAK,CACjB3I,KAAM,QACNiZ,QAASvV,wEAAwE1E,CACjFka,OAAQ,GAAGmB,EAAe9a,KAAK,UAKrCgb,kBACE,IAAK7Z,KAAKd,OAAwB,UAAfc,KAAKyJ,MAAmB,OAG3CzJ,KAAK4Z,SAAW,GAGhB,MAAME,EAAU9Z,KAAK6Y,WAAW5Y,IAAI,UACpC,IAAK6Z,EAAS,OAEd,MAAM9B,EAAU8B,EAAQ5P,MAAiBmP,MAAM,KAC5C7a,IAAI+G,GAASA,EAAMwU,QACnBzZ,OAAO,SAAUiF,EAAOwJ,EAAOiL,GAC9B,OAAOA,EAAKC,QAAQ1U,KAAWwJ,GAAmB,KAAVxJ,IAI5CvF,KAAKgZ,SAAS,WAEdhZ,KAAK0Y,8BAA8BX,kBAAkB/X,KAAKd,MAAME,GAAI4Y,GAAQxU,UAAU,CACpFf,KAAM4I,IACJrL,KAAKsZ,gBAAgBjO,GAGrByO,EAAQI,SAAS,IAEjBla,KAAKgZ,SAAS,UAEhBrV,MAAOiI,IAGL,GAFA5L,KAAKgZ,SAAS,SACdhZ,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDAlH1C6M,GAAyBjY,2DAAzBiY,EAAyB5U,kKDtB0Bb,0BAAAA,GACnDA,+EAAAA,GAE4FA,mCAAAA,GAG1BA,kEAAAA,GAKvDA,SAAAA,6ZAXxBxC,mCAAmG,UACjGA,WAAoDA,QACpDA,iBACEA,0BAGAA,gCAIAA,sBAGEA,kCAAWwI,sBAEZxI,QAEDA,gCAGFA,iBApB4EA,wBAG5DA,0CAGAA,4CAQZA,6CAG+BA,k8ECKxBiY,GAAb,GCVa0B,GAAb,MAAM,MAAOA,EAEXva,YAAoBC,eAEpBua,YAAYxZ,EAAiByZ,GAC3B,MAAMC,GAAa,IAAIjc,MAAaO,IAAI,WAAYyb,EAAQxb,KAAK,MACjE,OAAOmB,KAAKH,KAAKgB,OAAiD,GAAGX,qBAA2BU,YAAmB,CACjHxC,OAAQkc,IACPvb,MACDP,OAAIsC,OACJtC,OAAIuC,GAAQ,IAAI2D,IAAIC,OAAOL,QAAQvD,oDAV5BoZ,GAAiB3Z,wCAAjB2Z,EAAiB1Z,QAAjB0Z,EAAiB,qBAFhB,SAEDA,GAAb,6DCJM,YAAuBpZ,GAC3B,MAAO,CACLoE,cAAepE,EAAKzC,OACpB4G,aAAcnE,EAAKT,OAAOmJ,GAASA,EAAM/F,SAASpF,OAClDic,UAAWxZ,EAAKyZ,KAAK/Q,KAAWA,EAAMgR,YAAczX,4BAAqCA,MAAGH,GAOzF,IAAM6X,GAAb,MAAM,MAAOA,EACX9a,YAAoBC,eAGpB+V,OAAOxW,GACL,OAAOY,KAAKH,KAAKgB,OAA6B,GAAGX,qBAA2Bd,KAG9Eub,YAAY1W,GACV,OAAOE,OACLF,EAAIzF,IAAIY,GAAMY,KAAK4V,OAAOxW,GAAIL,MAAK6b,OAAW,EAAGjX,YAAY0G,QAAG1G,OAChE5E,MACAP,OAAImN,mDAZG+O,GAAkBla,wCAAlBka,EAAkBja,QAAlBia,EAAkB,qBAFjB,SAEDA,GAAb,GCPaG,GAAb,MAAM,MAAOA,EACXjb,YAAoBC,eAGpB+V,OAAOkF,EAAuBC,GAC5B,OAAO/a,KAAKH,KAAKgB,OAA6B,GAAGX,qBAA2B4a,eAA2BC,KAGzGJ,YAAYG,EAAuB7W,GACjC,OAAOE,OACLF,EAAIzF,IAAIY,GAAMY,KAAK4V,OAAOkF,EAAe1b,GAAIL,MAAK6b,OAAW,EAAGjX,YAAY0G,QAAG1G,OAC/E5E,MACAP,OAAImN,mDAZGkP,GAAqBra,wCAArBqa,EAAqBpa,QAArBoa,EAAqB,qBAFpB,SAEDA,GAAb,wFCTEra,uBAMEA,4DAAWA,uBACZA,aAFCA,oDAmBMA,2CAEEA,iBAAuD,YAEnDA,SACAA,yBACFA,0CAJEA,iCAEAA,iCACYA,2DAGhBA,cAA0B,YAEtBA,SACFA,0CADEA,4DATNA,SACEA,wBAMAA,uBAKFA,kCAXqCA,kCAM9BA,8DATTA,cACEA,wBACAA,kCAaFA,mDAdoBA,yHACYA,sDAFhCA,kDAAKA,iEAwBHA,iBACEA,8BACFA,wCADoCA,qDAK9BA,SACEA,qCAIEA,gCACFA,QACFA,yCAJIA,gDAEAA,qEANNA,SACEA,iCAQFA,yCARiBA,yDASjBA,SACEA,qCAIEA,SACFA,QACFA,yCAJIA,gDAEAA,0DAIFA,SACEA,yBACFA,yCADEA,oFAFJA,SACEA,iCAGFA,yCAHiBA,gEAIjBA,SACEA,SACFA,4DADEA,8DA1BNA,cACEA,YACEA,kCAUAA,kCAQAA,kCAKAA,kCAGFA,QACFA,kCA5BgBA,mCACGA,4CAUAA,sCAQAA,yEAxBrBA,cACEA,wBAGAA,wBA8BFA,2CAjCoBA,yHAGEA,sEAkCtBA,cAA2C,UAA3CA,CAA2C,WAA3CA,CAA2C,eAOnCA,0DAASA,2BAEVA,4CADCA,mEARRA,+DAAKA,6EAgBLA,cAAI,OAAJA,CAAI,UAEAA,YAA8GA,sCAD5GA,6EAMNA,kBACEA,iCACAA,mBAAyBA,+EAASA,2DAAlCA,YAEAA,QACAA,mBACAA,kBAA6B,aACnBA,2DAASA,wCACfA,4BAA+EA,QAC/EA,iBACFA,oDAHmCA,+FAC8CA,4GATvFA,yGAhGFA,uBAMEA,kEAAgBA,0BAAhBA,CAAqC,uGAMrCA,gCAmBAA,gCA0CAA,iCAgBAA,iCAOAA,uBAeFA,qDA7GEA,2BAAmB,iEAAnBA,CAAmB,gBAAnBA,CAAmB,wDAAnBA,CAAmB,yBA8FeA,oJA5GxCA,SAEEA,8BASAA,2CAkHFA,wCA1HKA,iCAAqB,eCiB1B,YAAuCqG,GACrC,OAAOA,EAAUrI,IAAI+I,GAAYA,EAASlI,MAAMR,KAAK,MASvD,MAAMmc,GAAyB,CAC7B,CAAErc,MAAO,aAAcsE,OAAQD,KAAeA,CAAEiY,UAAU,GAC1D,CAAEtc,MAAO,eAAgBsE,OAAQD,eAAuBA,CAAEiY,UAAU,IAGhEC,GAA0B,CAC9B,CAAEvc,MAAO,OAAQsE,OAAQD,KAAeA,CAAEiY,UAAU,GACpD,CAAEtc,MAAO,OAAQsE,OAAQD,MAAeA,EACxC,CAAErE,MAAO,YAAasE,OAAQD,uBAAqBA,GAG/CmY,GAAiC,CACrC,CAAExc,MAAO,OAAQsE,OAAQD,KAAeA,CAAEiY,UAAU,GACpD,CAAEtc,MAAO,YAAasE,OAAQD,uBAAqBA,GAG/CoY,GAAmC,CACvC,CAAEzc,MAAO,aAAcsE,OAAQD,KAAeA,EAC9C,CAAErE,MAAO,eAAgBsE,OAAQD,qBAA0BA,GAGvDqY,GAAmC,CACvC,CAAE1c,MAAO,OAAQsE,OAAQD,KAAeA,CAAEiY,UAAU,GACpD,CAAEtc,MAAO,eAAgBsE,OAAQD,qBAA0BA,EAC3D,CAAErE,MAAO,UAAWsE,OAAQD,WAAoBA,GAa3C,IAAMsY,GAAb,MAAM,MAAOA,EA2BX1b,YACU2b,EACAC,EACAC,EACAC,EACAra,EACAsa,EACAva,EACAwa,GAPA5b,8BACAA,+BACAA,kCACAA,yBACAA,6BACAA,6BACAA,2BACAA,0BAhCAA,kBAAe,IAAI2G,MAE7B3G,mBAAwB,CAAEV,KAAMmU,QAAkBG,gBAAgB,GAElE5T,iBAAwB,GACxBA,mBAAwBA,KAAK6b,cAE7B7b,eAA8D,GAE9DA,aAAoB,GACpBA,eAAY,IAAI8b,KAAU,CACxBC,MAAO,CAACC,EAAUC,IAAuCjc,KAAKkc,QAAQF,EAAUC,GAChFD,SAzBiB,GA0BjBG,gBAAiB,KACfnc,KAAKqB,sBAAsBsC,MAAMX,iEAA0EA,KAG/GhD,WAAuCA,KAAKoc,UAAUC,MAKtDrc,wBAAqB,IAAIuB,IAazBU,cACEjC,KAAKsc,mBAAmBpa,WAG1BuF,YAAYC,IACL1H,KAAK0Q,YAEV1Q,KAAKuc,cAAgB,IAAKvc,KAAK6b,eAC/B7b,KAAKsH,QAAUtH,KAAKwc,WAAWxc,KAAKuc,eACpCvc,KAAK4K,YAAc,GACnB5K,KAAKyG,OAAO+B,QACZxI,KAAKyc,aAGPA,YACEzc,KAAKoc,UAAU7T,QACfvI,KAAKoc,UAAUM,OAGjBC,gBACE3c,KAAKoc,UAAUM,OAGjBR,QAAQF,EAAkBC,GACxB,IAAKjc,KAAK0Q,UAAW,MAAM,IAAIxF,MAAM,4CACrC,MAAM2D,EAAQ7O,KAAK0Q,UAAU7B,MAE7B,OAAQ7O,KAAKuc,cAAcjd,WACpBmU,SACH,OAAOzT,KAAKwb,wBAAwBoB,kCAClC/N,EAAMzP,GACNY,KAAK4K,YACL,GACA,CAAE,OAAQ,UAAW,SACrB7L,MAAKP,OAAIqe,GAAYA,EAASre,IAAIse,IAAU,IACzCA,EACHjO,OAAOG,QAAW8N,EAAO,IAAKjO,EAAMR,KAAMQ,EAAMzP,UAP3C,KASJqU,WACH,OAAOzT,KAAKwb,wBAAwBoB,kCAAkC/N,EAAMzP,GAAIY,KAAK4K,YAAa,CAAE,YACjG7L,MAAKP,OAAIqe,GAAYA,EAASre,IAAIse,IAAU,IACxCA,EACHjO,OAAOG,QAAW8N,EAAO,IAAKjO,EAAMR,KAAMQ,EAAMzP,UAH7C,KAKJqU,QACH,OAAKzT,KAAKuc,cAAc3I,eAUf5T,KAAKwb,wBAAwBoB,kCAAkC/N,EAAMzP,GAAIY,KAAK4K,YAAa,CAAE,SACjG7L,MAAKP,OAAIqe,GAAYA,EAASre,IAAIse,IAAU,IACxCA,EACHjO,OAAOG,QAAW8N,EAAO,IAAKjO,EAAMR,KAAMQ,EAAMzP,UAZ7CY,KAAKyb,2BAA2BsB,mBAAmBlO,EAAMzP,GAAIY,KAAK4K,aACtE7L,MAAKP,OAAIwe,GAAmBA,EAAgBxe,IAAIye,IAAmB,CAClE7d,GAAI6d,EAAe7d,GACnBC,KAAM4d,EAAe5d,KACrB6d,aAAcD,EAAeE,QAAQ3e,IAAI4e,GAAUA,EAAO/d,MAAMR,KAAK,MACrEwe,QAASJ,EAAeI,QAAQ7e,IAAI8e,GAAUA,EAAO/X,OAAO1G,KAAK,MACjEgQ,OAAOnB,QAAc,CAAEtO,GAAI6d,EAAe7d,GAAIme,QAAQ,SANnD,KAeN9J,QACH,OAAIzT,KAAKuc,cAAc3I,eACd5T,KAAKub,uBAAuBiC,gBACjC3O,EAAMzP,GACNY,KAAK4K,YAjHI,GAmHRqR,GAAgC7c,IACjCL,MACAP,OAAI6e,GAAWA,EAAQ7e,IAAI8e,IAAW,IACjCA,EACHzO,OAAOG,QAAW,CAAE5P,GAAIke,EAAOle,GAAIme,QAAQ,GAAQ,IAAK1O,EAAMR,KAAMQ,EAAMzP,UAGvEY,KAAKyb,2BAA2BgC,mBAAmB5O,EAAMzP,GAAI,CAClEW,KAAMC,KAAK4K,YACX8S,MAAO1B,EACP2B,OAAS1B,GAAgC7c,KACxCL,MAAKP,OAAIof,GAAmBA,EAAgBpf,IAAIqf,IAAmB,CACpEze,GAAIye,EAAeze,GACnBmG,MAAOsY,EAAehY,KAAKN,MAC3BM,KAAMgY,EAAehY,KACrBqX,aAAcW,EAAeV,QAAQ3e,IAAI4e,GAAUA,EAAO/d,MAAMR,KAAK,MACrEgQ,OAAOnB,QAAc,CAAEtO,GAAIye,EAAeze,GAAIme,QAAQ,UAMhEpb,aAAaC,GACX,IAAKpC,KAAK0Q,UAAW,OAErB,MAAM9G,EAAWxH,EAAMC,eAAe7D,IAAI8D,IAAwB,IAAfA,EAAKC,MAAe,IAAID,EAAK3D,QAAU2D,EAAK3D,OAE3FiL,GAAY3L,KAAKC,UAAU0L,KAAc3L,KAAKC,UAAU8B,KAAK4K,eAC/D5K,KAAK4K,YAAchB,EACnB5J,KAAKyc,aAITqB,eAAexd,IACRN,KAAK0Q,WAENpQ,IAAWN,KAAKuc,gBAClBvc,KAAKuc,cAAgB,IAAKjc,GAC1BN,KAAKsH,QAAUtH,KAAKwc,WAAWlc,GAC/BN,KAAKyG,OAAO+B,QACZxI,KAAK4K,YAAc,GACnB5K,KAAKyc,aAITxI,UAAU3T,GACRN,KAAK+d,mBAAmB9J,UAAU3T,GAClCN,KAAK8d,eAAexd,GAGtBqJ,YAAYqU,GAERhe,KAAK6G,UADH7G,KAAK6G,UAAUvI,SAAW0f,EAAK1f,OAChB,GAEA0f,EAIrBC,cACEje,KAAK6G,UAAY,GAGnBuT,YAAYxZ,GACV,GAA8B,IAA1BZ,KAAK6G,UAAUvI,OACjB,MAAM,IAAI4M,MAAM,uCAGlB,MAAMgT,EAAoBle,KAAK6G,UAAUrI,IAAI8e,GAAUA,EAAOle,IAE9DY,KAAKsc,mBAAmB7Z,MAAK,GAC7BzC,KAAK0b,kBAAkBtB,YAAYxZ,EAASsd,GACzC1a,UAAU,CACTf,KAAMuC,KC9OR,YAA+BD,EAAwCC,GACvEA,EAAOE,eAAiBF,EAAOG,cACjCJ,EAAgBrB,QAAQV,0EAA2DkC,EAClD,IAA5BkB,EAAWlB,aAChBH,EAAgBpB,MAAMX,4EAAgDA,EAEtE+B,EAAgBM,QACdrC,qJAA+HkC,GDwO3HkG,CAAqBpL,KAAKqB,sBJ3N9B,YAAuBN,GAM3B,MALY,CACVoE,cAAepE,EAAKuK,KACpBpG,aAAcd,MAAMC,KAAKtD,EAAKwK,UAC3B/M,IAAYiL,GAAU,CAAE,UAAW,aAAc+B,SAAS/B,GAAS,EAAI,GACvEgC,OAAO,CAACC,EAAKL,IAAQK,EAAML,EAAK,IIsNoBM,CAAa3G,IAC9DhF,KAAKyG,OAAO+B,QACZxI,KAAKie,cACLje,KAAKyc,YACLzc,KAAKsc,mBAAmB7Z,MAAK,IAE/BkB,MAAOiI,IAGL,GAFA5L,KAAKsc,mBAAmB7Z,MAAK,GAC7BzC,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvDuS,cAAc/b,GACZpC,KAAKoB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLI,KAAM,6BACNH,QAASC,kH,CAETG,YAAaH,KAAcA,CAC3Bqb,WAAY,cACZ/a,YAAaN,KAAaA,CAC1BI,OAAQ,IAAMpD,KAAKse,4BAIvBC,kBAAkBnc,EAAcxB,GAC9BZ,KAAKoB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLI,KAAM,6BACNH,QAASC,kM,CAETG,YAAaH,KAAcA,CAC3Bqb,WAAY,cACZ/a,YAAaN,KAAaA,CAC1BI,OAAQ,IAAMpD,KAAKse,wBAAwB1d,KAI/C0d,wBAAwB1d,GACtB,GAA8B,IAA1BZ,KAAK6G,UAAUvI,OACjB,MAAM,IAAI4M,MAAM,sCAGlB,MAAMsT,EAAmBxe,KAAK6G,UAAUrI,IAAIU,GAASA,EAAME,IAE3DY,KAAKsc,mBAAmB7Z,MAAK,IACZ7B,EACfZ,KAAK2b,sBAAsBhB,YAAY/Z,EAAS4d,GAAoBxe,KAAK4b,mBAAmBjB,YAAY6D,IAEjGhb,UAAU,CACjBf,KAAMqK,KEpSN,YAA2C/H,EAAwCC,GACnFA,EAAOE,eAAiBF,EAAOG,cACjCJ,EAAgBrB,QAAQV,mDAA4DkC,EACnD,IAA5BkB,EAAWlB,aAChBH,EAAgBpB,MAAMX,0CAAmDA,CAAG,GAAGgC,EAAOuV,WAAa,MAEnGxV,EAAgBM,QACdrC,8H,CACqB,GAAGgC,EAAOuV,WAAa,OF6R1CkE,CAAiCze,KAAKqB,sBAAuByL,GAC7D9M,KAAKyG,OAAO+B,QACZxI,KAAKie,cACLje,KAAKyc,YACLzc,KAAKsc,mBAAmB7Z,MAAK,GAC7BzC,KAAK0e,aAAa3X,QAEpBpD,MAAOiI,IAGL,GAFA5L,KAAKsc,mBAAmB7Z,MAAK,GAC7BzC,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKrD+S,SAASvc,GACP,GAA8B,IAA1BpC,KAAK6G,UAAUvI,SAAiB0B,KAAK0Q,UACvC,MAAM,IAAIxF,MAAM,oDAGlB,MAAMtK,EAAUZ,KAAK0Q,UAAUxR,MAAME,GAEL,UAA5BY,KAAKuc,cAAcjd,KAKIU,KAAK6G,UAAoD2T,KAAKoE,IAAMA,EAAEC,SAG/F7e,KAAKue,kBAAkBnc,EAAOxB,GAIhCZ,KAAKoB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLI,KAAM,wBACNH,QAAmC,IAA1B/C,KAAK6G,UAAUvI,OACtB0E,uCAAgDA,CAChDA,8DAAuEA,CACzEG,YAAaH,KAAcA,CAC3Bqb,WAAY,cACZ/a,YAAaN,KAAaA,CAC1BI,OAAQ,KAENmO,WAAW,KACTvR,KAAKme,cAAc/b,IAClB,MAEL0c,OAAQ,KACNvN,WAAW,KACTvR,KAAKue,kBAAkBnc,EAAOxB,IAC7B,QA9BLZ,KAAKoa,YAAYxZ,GAmCb4b,WAAWlc,GACjB,OAAQA,EAAOhB,WACRmU,SAAmB,OAAOyH,QAC1BzH,WAAqB,OAAO0H,QAC5B1H,QAAkB,OAAOzT,KAAKuc,cAAc3I,eAAiBuH,GAAuBE,QACpF5H,QAAkB,OAAOzT,KAAKuc,cAAc3I,eAAiBoH,GAAeI,kDAxS1EE,GAAmB9a,mHAAnB8a,EAAmBzX,uUD9DNb,iDAAAA,GAuFQA,WAAAA,GAYQA,8FAAAA,GAOsCA,wBAAAA,GAMvDA,yBAAAA,4nCAtHzBxC,4CAAiDA,kCAAUwI,sBAAuDxI,QAClHA,yDADmFA,sCACpEA,8hFCmEF8a,GAAb,GG5DA,MAAMyD,GAAmB/f,KAAS,CAChCI,GAAIJ,KACJK,KAAML,KACNG,YAAaH,KAAWA,MACxBM,KAAMN,KAAU,QAAS,OAAQ,OAAQ,UAAW,QAAS,OAAQ,OAAQ,aAS/E,YAAiBE,GACf,MAAsB,SAAfA,EAAMI,KAMR,IAAM0f,GAAb,MAAM,MAAOA,EAEXpf,YAAoBC,eAEpBof,OACEC,EACAxB,EAAQ,GAER,MAAMtf,EAAS,IAAIC,KAAW,CAAE8gB,WAAY,CAAEF,OAAQC,EAAcxB,MAAOA,EAAM0B,cACjF,OAAOpf,KAAKH,KAAKI,IACf,GAAGC,2CACH,CAAE9B,OAAQA,IACVW,MACAqB,OAAgBpB,KAAQ+f,MACxBvgB,OAAI6gB,GAAUA,EAAO/e,OAAOgf,MAIhCC,wBACEL,EACAxB,EAAQ,GAER,MAAMtf,EAAS,IAAIC,KAAW,CAAE8gB,WAAY,CAAEF,OAAQC,EAAcxB,MAAOA,EAAM0B,cACjF,OAAOpf,KAAKH,KAAKI,IACf,GAAGC,uCACH,CAAE9B,OAAQA,IACVW,MACAqB,OAAgBpB,KAAQ+f,MACxBvgB,OAAI6gB,GAAUA,EAAO/e,OAAOgf,oDA5BrBN,GAAkBxe,wCAAlBwe,EAAkBve,QAAlBue,EAAkB,qBAFjB,SAEDA,GAAb,kBCdO,IAAMQ,GAAb,MAAM,MAAOA,EAgDX5f,YACU6f,6BA9CDzf,cAAU,EAETA,cAAW,IAAI2G,MAEzB3G,iBAIM,GAENA,0BAAoD,CAClD,CACEV,KAAM,QACN4D,KAAM,aACNoK,MAAOtK,QAAgBA,CACvB7D,YAAa,IAEf,CACEG,KAAM,OACN4D,KAAM,aACNoK,MAAOtK,MAAeA,CACtB7D,YAAa,IAEf,CACEG,KAAM,UACN4D,KAAM,cACNoK,MAAOtK,MAAkBA,CACzB7D,YAAa,IAEf,CACEG,KAAM,QACN4D,KAAM,aACNoK,MAAOtK,OAAgBA,CACvB7D,YAAa,KAIjBa,oBAAkBkK,GAChBlK,KAAKyf,mBAAmBF,wBAAwBrV,GAAOnL,MAAKP,OAAI6gB,GAAUA,EAAO7gB,IAAIU,IAAU,CAC7FE,GAAIF,EAAME,GACVE,KAAMJ,EAAMI,KACZgO,MAAOpO,EAAMG,KACbF,YAAaD,EAAMC,iBAOvBoO,SAASrO,GACPc,KAAK0f,SAAS3Y,KAAK7H,iDArDVsgB,GAAoBhf,oCAApBgf,EAAoB3b,yJCdqBb,0BAAAA,4IAAtDxC,6BAAqE,uBAIjEA,wCAAgBwI,gBAEjBxI,iBAJCA,mEAAkD,kCAAlDA,CAAkD,kDDYzCgf,GAAb,oEEVMhf,+BAGIA,8DAAYA,uBACfA,iCAFGA,mFAINA,oCAAmDA,oEAAmBA,8BACtEA,iCADwBA,kGAGxBA,oCAAmDA,oEAAmBA,8BACtEA,iCADwBA,kGAZ1BA,SACEA,yBAAuE,yBAChBA,iEAAgBA,+BAAqBA,QAC1FA,sCAKFA,QACAA,2CAGAA,2CAEFA,iCAZiCA,wCAExBA,yHAKoFA,0EAGAA,iGAI3FA,6DAjBJA,SACEA,iCAeAA,2CAGFA,yCAlBiBA,mEAAiD,eCsB3D,IAAMmf,GAAb,MAAM,MAAOA,EAcX/f,YACUwN,EACA/L,GADArB,4BACAA,6BAZAA,0BAAuB,IAAI2G,MAC3B3G,gBAAa,IAAI2G,MACjB3G,kBAAe,IAAI2G,MAM7B3G,WAAiC,QAOjCyH,cACEzH,KAAK4f,qBAAuB5f,KAAK0Q,WAAYC,SAAwB3Q,KAAK0Q,UAAUxR,YAAS2D,EAG/Fgd,mBACE7f,KAAKsT,qBAAqBvM,OAG5B2Y,SAASxgB,GACP,IAAKc,KAAK0Q,UAAW,MAAMxF,MAAM,iDAEjClL,KAAKyJ,MAAQ,eAEbtF,OAAS,CACP2W,eAAezQ,QAAGrK,KAAK0Q,UAAUxR,MAAME,IACvC2b,aAAc7b,EAAME,IAAKiL,QAAGnL,EAAME,IAAMY,KAAKoN,qBAAqBP,OAAO3N,EAAMoO,MAAOpO,EAAMI,QAC3FP,MAAK6C,OAAUqC,GAAOjE,KAAKoN,qBAAqBL,YAAY9I,EAAI6W,cAAe7W,EAAI8W,gBAAgBvX,UAAU,CAC9Gf,KAAMqd,IACJ9f,KAAKqB,sBAAsBqC,QAAQV,8BAAkDA,EACrFhD,KAAK+f,YAAY9L,UAAU,CAAEL,gBAAgB,EAAMtU,KAAMmU,WACzDzT,KAAKyJ,MAAQ,QACbzJ,KAAKggB,WAAWjZ,QAElBpD,MAAOiI,IAGL,GAFA5L,KAAKyJ,MAAQ,QACbzJ,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDA7C1C+T,GAAyBnf,+CAAzBmf,EAAyB9b,iVDrBgBb,sBAAAA,uSAFtDxC,sCAAeA,6iECuBFmf,GAAb,kBCZM,YAA6BM,GACjC,MAAwB,sBAAjBA,EAASzV,IAGZ,YAAwByV,GAC5B,MAAwB,iBAAjBA,EAASzV,IAGZ,YAA0B0V,GAC9B,MAA0B,UAAnBA,EAAU5gB,KCJZ,IAAM6gB,GAAb,MAAM,MAAOA,EAEXvgB,YAAoBC,eAGpBqV,YAAYtU,EAAiBuU,GAC3B,OAAOnV,KAAKH,KAAKuV,IAA0B,GAAGlV,qBAA2BU,IAAWuU,GAASpW,MAC3FP,OAAI0O,qDAPGiT,GAAkB3f,wCAAlB2f,EAAkB1f,QAAlB0f,EAAkB,qBAFjB,SAEDA,GAAb,+HCbI3f,kEAEAA,uBAOEA,4DAAWA,qBACZA,aAHCA,uEAQEA,SACEA,aAAGA,yEAA6DA,QAChEA,6BAGEA,kEAAgBA,8BAEjBA,QACHA,iCALIA,kEAAiD,6EAOrDA,kBAAqD,aAEjDA,SACFA,QACAA,mBAAqBA,0DAASA,sBAC5BA,4BAAiBA,QACjBA,gBACFA,wCALEA,2DAUFA,mGAFFA,kBAEEA,uBACAA,mBAGCA,SAAmBA,QACpBA,mBAAqBA,0DAASA,sBAC5BA,4BAAiBA,QACjBA,gBACFA,wCARuBA,oCAErBA,yCAA8B,qCAE/BA,uDA7BPA,SAAoC,KAGhCA,iCAUAA,wBAUAA,wBAaFA,qCAnCcA,sCAEGA,6CAUQA,8CAUAA,8EAtC/BA,SACEA,yBAEEA,gCAEAA,8BAUAA,iCAsCFA,QACFA,6BAnDgCA,oCAGzBA,iCASYA,kCCWZ,IAAM4f,GAAb,MAAM,MAAOA,EA6CXxgB,YACUygB,EACAC,GADAtgB,0BACAA,yBA7CDA,yBAAsBugB,KAEdvgB,sBAAmB,IAAIuB,IAKhCvB,cAAW,IAAIsB,IACdtB,YAASA,KAAKwgB,iBAAiBzhB,MACtC2C,UACAE,OAAUb,IAGR,GAFIA,EAAK0f,eAAezgB,KAAK0gB,SAAS3f,EAAKkf,WAEtCU,GAAmB5f,EAAKkf,UAC3B,OAAO5V,QAAG,CACRG,IAAKzJ,EAAKkf,SAASzV,IAAKpL,QAAIyD,EAAWwL,KAAM,KAC7ChP,KAAMuhB,GAAc7f,EAAKkf,UAAYlf,EAAKkf,SAAS5gB,UAAOwD,IAI9D,MAAMzD,EAAK2B,EAAKkf,SAAS7gB,GAIzB,YAHoCyD,IAAvB9B,EAAKkf,SAAS5gB,MAAqBgL,QAAGtJ,EAAKkf,SAAS5gB,MAC/DW,KAAKqgB,mBAAmBpgB,IAAIb,GAAIL,MAAKP,OAAI4J,GAAQA,EAAKyY,OAAOvT,SAEnDvO,MACVP,OAAIa,IAAS,CAAEmL,IAAK,oBAAqBpL,GAAIA,EAAIC,OAAMgP,MAAMyS,UAAqBC,SAAa,WAAY3hB,QAC3Gwb,OAAWhP,IACT,IAAIoV,SAAqBpV,GAAM,OAAOvB,QAAG,CACvCG,IAAK,oBAAqBnL,KAAM2D,kDAAkDA,CAAEqL,KAAM,OAE5F,MAAMzC,QAIZ/J,QAAgB,CAAEC,SAAU9B,KAAK+B,YAG3B/B,cAAqE,OAE7EA,oBAAkBkK,GAChBlK,KAAKsgB,kBAAkBrB,OAAO/U,EAAO,CAAE,UAAW,SAAU,SACzDnL,MAAKP,OAAIyiB,GAASA,EAAM3gB,OAAO4gB,MAOpCjf,cACEjC,KAAK+B,SAASG,WAGhBif,WAAWC,GACTphB,KAAKwgB,iBAAiB/d,KAAK,CAAEwd,SAAUmB,EAAcX,eAAe,IAGtEY,iBAAiBC,GACfthB,KAAK0gB,SAAWY,EAGlBC,kBAAkBC,IAGlB7C,WACE3e,KAAKwgB,iBAAiB/d,KAAK,CACzBwd,SAAU,CAAEzV,IAAK,eAAiBiW,eAAe,IAGrDgB,gBAAgBxB,GACdjgB,KAAKwgB,iBAAiB/d,KAAK,CACzBwd,cAA0Bpd,IAAhBod,EAAS7gB,GACjB,CAAEoL,IAAK,oBAAqBpL,GAAI6gB,EAAS7gB,GAAIC,KAAM4gB,EAAS3S,OAC5D,CAAE9C,IAAK,eAAgBnL,KAAM4gB,EAAS3S,MAAOoU,aAAczB,EAAS3gB,MACtEmhB,eAAe,IAInBhd,UACEzD,KAAK+B,SAASU,qDAhFL2d,GAA2B5f,kDAA3B4f,EAA2Bvc,wDAR3B,CACT,CACE8E,QAASgZ,KACTC,aAAaC,SAAW,IAAMzB,GAC9B0B,OAAO,MAEVC,wDDvB8B/e,yBAAAA,GAQLA,qEAAAA,GAe4BA,iBAAAA,GASjCA,WAAAA,GAaAA,WAAAA,kvBA9CvBxC,wDAAeA,4sFC0BF4f,GAAb,GClBa4B,GAAb,MAAM,MAAOA,EAEXpiB,YAAoBC,eAGpBgB,OAAOD,GACL,OAAOZ,KAAKH,KAAKgB,OAA6B,GAAGX,qBAA2BU,KAAW7B,MACrFP,OAAI0O,qDAPG8U,GAAkBxhB,wCAAlBwhB,EAAkBvhB,QAAlBuhB,EAAkB,YAAlBA,GAAb,yBCNExhB,gDAWAA,6BAEAA,kDACAA,uBAMEA,4DAAWA,qBACZA,aAHCA,uEApBJA,iBAEEA,iDAEAA,oBAKIA,yDAASA,4CAEZA,QAEDA,yBAGAA,8BAQFA,yCAtB6BA,sEAQvBA,wGAGwBA,yCAIzBA,kCCDE,IAAMyhB,GAAb,MAAM,MAAOA,EAeXriB,YACUyB,EACAD,EACAoa,EACA0G,EACA/O,GAJAnT,6BACAA,2BACAA,+BACAA,0BACAA,cAjBAA,kBAAe,IAAI2G,MAE7B3G,yBAAsB,IAAIsB,IAETtB,SAAM,IAAIuB,IAAsB,GACzCvB,cAAW,IAAIsB,IACdtB,YAASA,KAAKmiB,IAAIpjB,MACzB2C,UACAE,OAAUxC,GAAMY,KAAKoiB,kBAAkBhjB,KACvCyC,QAAgB,CAAEC,SAAU9B,KAAK+B,YAWnC0F,cACMzH,KAAKd,OACPc,KAAKmiB,IAAI1f,KAAKzC,KAAKd,MAAME,IAI7B6C,cACEjC,KAAKmiB,IAAIjgB,WACTlC,KAAK+B,SAASG,WAGhBkgB,kBAAkBxhB,GAChB,OAAOZ,KAAKwb,wBAAwB6G,iBAAiBzhB,GAAS7B,MAC5DP,OAAK8jB,GAA6BA,EAAWhkB,OAAS,IAI1DikB,iBACOviB,KAAKd,OAIVc,KAAKoB,oBAAoBuB,QAAQ,CAC/BI,QAASC,uEAAmE3D,CAC5E4D,OAAQD,gBAAyBA,CACjCE,KAAM,6BACNC,YAAaH,WAAoBA,CACjCI,OAAQ,KACNpD,KAAKwiB,eAEPlf,YAAaN,KAAaA,GAI9Bwf,cACE,IAAKxiB,KAAKd,MACR,OAGF,MAAME,EAAKY,KAAKd,MAAME,GAChBmE,EAAYvD,KAAKd,MAAMG,KAE7BW,KAAKyiB,oBAAoBhgB,MAAK,GAC9BzC,KAAKkiB,mBAAmBrhB,OAAOzB,GAC5BoE,UAAU,CACTf,KAAM,KACJzC,KAAKyiB,oBAAoBhgB,MAAK,GAC9BzC,KAAKqB,sBAAsBqC,QAAQV,gCAA8BO,EACjEvD,KAAK0iB,aAAa3b,OAClB/G,KAAK2iB,sBAEPhf,MAAOC,IACL5D,KAAKyiB,oBAAoBhgB,MAAK,GAC9BzC,KAAKqB,sBAAsBsC,MAAMX,+CAA8BO,KAKvEof,qBACO3iB,KAAKmT,OAAOK,SAAS,CAAE,iBAG9B/P,UACEzD,KAAK+B,SAASU,qDAtFLwf,GAA0BzhB,mFAA1ByhB,EAA0Bpe,0KDRfb,mBAAAA,GAWEA,oCAAAA,GAN4CA,uCAAAA,ifAbtExC,+CAAwBA,qpECgBXyhB,GAAb,yBCfEzhB,gEAEAA,uBAMEA,4DAAWA,0BACZA,aAHCA,uEAMAA,kBAAwJ,kBAAxJA,CAAwJ,UAAxJA,CAAwJ,UAAxJA,CAAwJ,WAIhJA,YAAgBA,UAElBA,kBACEA,wBACFA,UAEFA,iBAAmB,UAAnBA,CAAmB,YAEfA,aAAuBA,UAEzBA,mBACEA,4BACFA,YAGJA,uCAEAA,mBAAmC,iCACaA,iEAAgBA,wBAAcA,oDAtBpDA,+BAOTA,yCAQGA,yCAOOA,yEAI7BA,gCAGEA,yDAAQA,iBAARA,CAAe,qDACLA,uBACXA,iCAHCA,4DAMAA,kDAnCJA,SACEA,0BA0BAA,sCAOAA,2CAGFA,wDApCuDA,qFAA+E,cA2BjIA,oEAxCPA,SACEA,gCAEAA,8BASAA,iCAsCFA,6BAjDgBA,oCAGXA,iCAQYA,kCCYV,IAAMoiB,GAAb,MAAM,MAAOA,EAaXhjB,YACUwQ,EACAyS,EACAC,EACAzhB,EACAsX,EACAoK,EACAC,EACAC,GAPAjjB,mBACAA,6BACAA,uBACAA,6BACAA,mBACAA,0BACAA,yBACAA,6BApBVA,eAAYA,KAAK2Y,YAAYzZ,MAAM,CAEjCG,KAAM,CAAE,GAAI,CAAE6jB,cAAqBA,eAAqB,KACxD/jB,YAAa,CAAE,GAAI,IACnBiiB,aAAc,CAAE,GAAI,MAItBphB,YAASA,KAAK8iB,gBAAgBK,OAAOpkB,MAAKqkB,QAAa3Z,IAASkH,SAAwBlH,EAAMvK,SAc5Fc,KAAK4Y,aAAe5Y,KAAKmjB,OACtBpkB,MAAKskB,WACL7f,UAAU4E,IACTpI,KAAKsjB,gBAAkBlb,EACvBpI,KAAKujB,cAAcnb,KAIzBc,WACElJ,KAAKijB,sBAAsBrkB,IAAIoB,MAGjCiC,cACEjC,KAAKoQ,YAAYoT,cACjBxjB,KAAK4Y,cAAczG,cACnBnS,KAAKijB,sBAAsBza,QAG7Bib,UACE,OAAOzjB,KAAK0jB,UAAUC,MAGxBC,OACE,IAAK5jB,KAAKsjB,gBAAiB,OAE3B,GAAItjB,KAAK0jB,UAAUG,QAEjB,YADA7jB,KAAKqB,sBAAsBsC,MAAMX,iGAAkFA,EAGrHhD,KAAK0jB,UAAUvK,UAEf,MAAM/Z,EAAKY,KAAKsjB,gBAAgBlkB,GAC1BC,EAAOW,KAAK0jB,UAAUzjB,IAAI,SAASiK,MACnC/K,EAAca,KAAK0jB,UAAUzjB,IAAI,gBAAgBiK,MAEjDkX,EAAephB,KAAK0jB,UAAUzjB,IAAI,iBAAiBiK,OACjC0W,GAAcQ,GACpCphB,KAAKgjB,kBAAkBnW,OAAO,CAC5BS,MAAO8T,EAAa/hB,KACpBC,KAAM8hB,EAAaM,aACnBoC,YAAa,KACbC,gBAAiB/jB,KAAKsjB,gBAAgBlkB,MALYiL,QAAGsW,GAAmBS,GAAgBA,EAAahiB,GAAK,OAQ/FL,MACbilB,QAAUC,GAAkBjkB,KAAK+iB,mBAAmB7N,YAAY9V,EAAI,CAClEC,OACAF,YAA6B,KAAhBA,EAAqB,KAAOA,EACzC+kB,iBAAkBD,MAEpBzgB,UAAU,CACVf,KAAM,KACJzC,KAAK8iB,gBAAgBtT,eACrBxP,KAAKmkB,aACLnkB,KAAKqB,sBAAsBqC,QAAQV,qCAAsCA,GAE3EW,MAAOiI,IAGL,GAFA5L,KAAK0jB,UAAUxK,SACflZ,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKrDuY,aACEnkB,KAAK6iB,sBAAsBpU,qBAG7B2V,YACMpkB,KAAKsjB,iBAAiBtjB,KAAKujB,cAAcvjB,KAAKsjB,iBAG5CC,cAAcrkB,GAMpBc,KAAK0jB,UAAUnb,MAAM,CACnBlJ,KAAMH,EAAMG,KACZF,YAAaD,EAAMC,YACnBiiB,aAP4C,OAAzBliB,EAAM+kB,eACzB,CAAEzZ,IAAK,eACP,CAAEA,IAAK,oBAAqBpL,GAAIF,EAAM+kB,kBAOxCjkB,KAAK0jB,UAAUxK,SAGjBmL,eACErkB,KAAK8iB,gBAAgBtT,6DA9GZoT,GAAkBpiB,mHAAlBoiB,EAAkB/e,uFDlBLb,+BAAAA,GAQ4BA,wBAAAA,GAG9BA,KAAAA,GAQAA,aAAAA,GAsBeA,yDAAAA,6rBA/CvCxC,wDAAeA,kyBCwBFoiB,GAAb,0BCfIpiB,gBAAyKA,aAACA,gCAC1KA,2BAGMA,gEAERA,6BAEAA,mJAjBFA,SAEEA,eAEEA,qEAASA,4BAETA,kBAAQA,SAAeA,UAEzBA,kBACEA,yBACAA,yBAIFA,QACAA,yBAGFA,iEAZYA,uBAGDA,+LAEJA,kKAIeA,2ECHf,IAAM8jB,GAAb,MAAM,MAAOA,EAKX1kB,YAAoByN,sBAFpBrN,qBAVwB,EAcxBukB,cAAcnc,GACZpI,KAAKqN,YAAYI,YAAWC,QAAc,CAAEtO,GAAIgJ,EAAKhJ,GAAIme,QAAQ,mDARxD+G,GAAmB9jB,sCAAnB8jB,EAAmBzgB,yGDC3Bb,OAAAA,GAE8EA,gCAC/E,iKAhBJxC,yDACqBA,kXCWR8jB,GAAb,0BCVI9jB,4BAEAA,mCAEAA,4BACiBA,6BAEjBA,sCAFgDA,4GAMhDA,4BAEAA,mCAEAA,4BACkBA,6BAElBA,sCAFiDA,8GAIjDA,4BACkBA,6BAElBA,sCAFiDA,sFCf9C,IAAMgkB,GAAb,MAAM,MAAOA,EAGX5kB,6DAHW4kB,8BAAuB3gB,mHDNmBb,mCAAAA,GAIIA,oGAC2C,GAM/CA,oCAAAA,GAIEA,gGAC6C,GAI3CA,8FAC6C,mJAvBxGxC,iBACEA,WACEA,wBAIAA,wBAIFA,QAEAA,WACEA,wBAIAA,wBAKAA,wBAIFA,QACFA,eA1BgBA,4EACUA,wCAIAA,4CAMVA,6EACUA,wCAIAA,0CAKAA,msFCdbgkB,GAAb,GCAO,MAAMC,IAAiB1lB,SAC5BC,KAAS,CACPI,GAAIJ,KACJK,KAAML,KACN0lB,UAAW1lB,KAAU,OAAQ,cAAe,yBAC5C2lB,oBAAqB3lB,KACrB4lB,gBAAiB5lB,OAEnBA,KACEA,KAAU,CACRuG,MAAOvG,KACPwG,UAAWxG,KAAWA,MACtByG,SAAUzG,KAAWA,UAUpB,IAAM6lB,GAAb,MAAM,MAAOA,EAEXjlB,YAAoBC,eAEpBilB,iBACElkB,EACAmkB,GAMA,IAAI3mB,EAAS,IAAIC,KACjB,OAAI0mB,GAAShlB,OAAM3B,EAASA,EAAOQ,IAAI,OAAQmmB,EAAQhlB,KAAKlB,KAAK,YAC1CgE,IAAnBkiB,GAASrH,QAAqBtf,EAASA,EAAOQ,IAAI,QAASmmB,EAAQrH,aAC/C7a,IAApBkiB,GAASpH,SAAsBvf,EAASA,EAAOQ,IAAI,UAAWmmB,EAAQpH,SAEnE3d,KAAKH,KACTI,IAAa,GAAGC,qBAA2BU,aAAoB,CAAExC,OAAQA,IAAUW,MAClFqB,OAAgBpB,KAAQylB,oDAnBnBI,GAAuBrkB,wCAAvBqkB,EAAuBpkB,QAAvBokB,EAAuB,qBAFtB,SAEDA,GAAb,6BCjBM,YAAuB9jB,GAC3B,MAAO,CACLoE,cAAepE,EAAKzC,OACpB4G,aAAcnE,EAAKT,OAAOoD,GAAWA,GAASpF,QAO3C,IAAM0mB,GAAb,MAAM,MAAOA,EACXplB,YAAoBC,eAGpB+V,OAAOhV,EAAiBqkB,GACtB,OAAOjlB,KAAKH,KACTgB,OAA6B,GAAGX,qBAA2BU,cAAoBqkB,KAC/ElmB,MACCP,OAAI0O,OAIVyN,YAAYG,EAAuB7W,EAAeihB,GAChD,OAAO9a,WACFnG,EAAIzF,IAAIY,GAAMY,KAAK4V,OAAOkF,EAAe1b,GAAIL,MAC9CP,OAAI,KAAM,IACVoc,OAAW,KAAMvQ,SAAG,OAEtBtL,KCvCC,YAAgBomB,EAAaC,GAChC,OAAOC,SAAQC,QAAcH,EAAaC,EAAMG,UAAUjnB,QAAU,GAAG,GAAO,IDuC5EmN,CAA2B,CAAC+Z,EAAiB9hB,IAC3C,IAAK8hB,EAAiB9hB,GAAW,KAEnC9B,OAAU4jB,GACPN,EACCM,EAAgBhL,KAAKiL,IAAmBA,IACtCpb,QAAG,IAAKmb,GAAiB,IAAWxlB,KAAK4V,OAAOkF,EAAeoK,GAAcnmB,MAC3EP,OAAI,KAAM,IACVoc,OAAW,KAAMvQ,SAAG,KACpB7L,OAAIkF,GAAW,IAAK8hB,EAAiB9hB,MAEvC2G,QAAGmb,KAETzmB,MACAP,OAAImN,mDAjCGqZ,GAAyBxkB,wCAAzBwkB,EAAyBvkB,QAAzBukB,EAAyB,qBAFxB,SAEDA,GAAb,4BERO,IAAMU,GAAb,MAAM,MAAOA,EAEX9lB,YAAoBC,eAEpB8lB,OACE/kB,EACAqkB,EACAW,GAEA,OAAO5lB,KAAKH,KAAKuV,IAA0B,GAAGlV,qBAA2BU,cAAoBqkB,IAAa,CACxGY,WAAYD,EAAQlB,UACpBoB,uBAAwBF,EAAQjB,oBAChCoB,kBAAmBH,EAAQhB,gEAZpBc,GAA0BllB,wCAA1BklB,EAA0BjlB,QAA1BilB,EAA0B,qBAFzB,SAEDA,GAAb,0EC0BgBllB,4BAA6DA,mCANjEA,kCAKEA,4CAGFA,6CANEA,wCAAgC,uCAkB9BA,+BAEAA,gCAJJA,+BACEA,4CAKAA,cANgBA,sDAkBdA,4BAEAA,gCAJJA,+BACEA,4CAKAA,cANgBA,sDAetBA,SACEA,0BACFA,kDAGEA,uBAIEA,4DAAWA,qBACZA,QACDA,uBAIEA,4DAAWA,sBAEZA,iCADCA,mFApGZA,SACEA,sBACIA,uFAMFA,oBAAU,UAAVA,CAAU,YAGNA,eACFA,QACEA,6BAEFA,QACEA,kBAA2BA,yDAASA,qBACpCA,iBACFA,YAIFA,kBAA8B,YAA9BA,CAA8B,QAE1BA,aAEAA,QAEFA,oBAAyB,iCAMrBA,6CAWFA,QAEAA,uCAKEA,6CASAA,QAEFA,uCAKEA,6CASAA,cAKNA,qBAAU,aAENA,mCAIAA,6CAeFA,YAGNA,4CAxGMA,oCAAqB,WAArBA,CAAqB,eAArBA,CAAqB,eAarBA,gDAAOwlB,eAAPxlB,SAaMA,mCAEFA,iCAkBAA,iCAgBAA,iCAoBaA,oCAAkB,eCnElC,IAAMylB,GAAb,MAAM,MAAOA,EAkCXrmB,YACUsmB,EACAC,EACA9kB,EACA+kB,EACAhlB,GAJApB,sBACAA,kCACAA,6BACAA,UACAA,2BAlCAA,WAAQ,IAAI2G,MAEtB3G,2BAA2F,CACzF,CACEkK,MAAO,OACPD,MAAOjH,eAAoBA,CAC3BqjB,QAASrjB,sBAA+BA,EAE1C,CACEkH,MAAO,cACPD,MAAOjH,YAAqBA,CAC5BqjB,QAASrjB,+CAAwDA,EAEnE,CACEkH,MAAO,wBACPD,MAAOjH,mBAAgCA,CACvCqjB,QAASrjB,yDAAkEA,GAK/EhD,iBAAa,EAEbA,UAAOA,KAAKomB,GAAGlnB,MAAM,CACnBwlB,UAAW,CAAE,QACbC,oBAAqB,EAAE,GACvBC,gBAAiB,EAAE,KAWrBnd,cACMzH,KAAKsmB,UACPtmB,KAAKumB,KAAKhe,MAAM,CACdmc,UAAW1kB,KAAKsmB,QAAQ5B,UACxBC,oBAAqB3kB,KAAKsmB,QAAQ3B,oBAClCC,gBAAiB5kB,KAAKsmB,QAAQ1B,iBAC7B,CAAE4B,WAAW,IAEhBxmB,KAAKymB,YAAczmB,KAAKsmB,QAAQ/gB,OAAQmhB,QAAW,CACjDnhB,MAAOvF,KAAKsmB,QAAQ/gB,MACpBC,UAAWxF,KAAKsmB,QAAQ9gB,UACxBC,SAAUzF,KAAKsmB,QAAQ7gB,WACpBzF,KAAKsmB,QAAQjnB,MAItBsnB,UACE3mB,KAAK4mB,MAAM7f,KAAK,CAAE8f,SAAS,IAG7Bvd,WACE,IAAKtJ,KAAKsmB,QACR,MAAM,IAAIpb,MAAM,mCAGlB,MAAM4b,EAAgB9mB,KAAKkmB,eAAea,SAAS7c,OAAOtJ,QAE1D,IAAKkmB,EACH,MAAM,IAAI5b,MAAM,sCAGlB,MAAM8b,EAAiBhnB,KAAKumB,KAAKtmB,IAAI,cAAciK,MAE/ClK,KAAKsmB,QAAQlnB,KAAO0nB,GAAiB9mB,KAAKsmB,QAAQlnB,KAAO0nB,GAC/B,0BAA3B9mB,KAAKsmB,QAAQ5B,WAA6D,0BAAnBsC,EACxDhnB,KAAK2lB,SAIP3lB,KAAKoB,oBAAoBuB,QAAQ,CAC/BI,QAASC,mK,CAETC,OAAQD,gBAAyBA,CACjCE,KAAM,6BACNC,YAAaH,0BAAmCA,CAChDikB,uBAAwB,kBACxB7jB,OAAQ,KACNpD,KAAK2lB,UAEPriB,YAAaN,KAAaA,GAI9B2iB,SACE,IAAK3lB,KAAKsmB,UAAYtmB,KAAKd,MACzB,MAAM,IAAIgM,MAAM,6CAGlB,MAAMgc,EAAoD,CACxDxC,UAAW1kB,KAAKumB,KAAKtmB,IAAI,cAAciK,MACvCya,oBAAqB3kB,KAAKumB,KAAKtmB,IAAI,wBAAwBiK,MAC3D0a,gBAAiB5kB,KAAKumB,KAAKtmB,IAAI,oBAAoBiK,OAGrDlK,KAAKmnB,YAAa,EAClBnnB,KAAKmmB,2BAA2BR,OAAO3lB,KAAKd,MAAME,GAAIY,KAAKsmB,QAAQlnB,GAAI8nB,GAAoB1jB,UAAU,CACnGf,KAAM,KACJzC,KAAKmnB,YAAa,EAClBnnB,KAAKqB,sBAAsBqC,QAAQV,qCAA8CA,EACjFhD,KAAK4mB,MAAM7f,KAAK,CAAE8f,SAAS,KAE7BljB,MAAO,KACL3D,KAAKmnB,YAAa,EAClBnnB,KAAKqB,sBAAsBsC,MAAMX,6BAAsCA,mDAnHlEijB,GAAgCzlB,kFAAhCylB,EAAgCpiB,oNDJLb,4EACW,GAUnCA,iIAAAA,GAOcA,kBAAAA,GAkBAA,kBAAAA,GAgBAA,mBAAAA,GAxBHA,oDAAAA,GAcMA,8DAAAA,GAgBNA,2DAAAA,GAoBGA,SAAAA,GAMAA,aAAAA,m/BAjG9BxC,wCAAeA,o2HCiBFylB,GAAb,kBCPO,IAAMmB,GAAb,MAAM,MAAOA,EACXxnB,YAAoBC,eAGpBI,IAAIsF,GACF,OAAOvF,KAAKH,KACTI,IAAa,GAAGC,6BAAmCqF,KACnDxG,MAAKqB,OAAgBkF,qDAPf8hB,GAAqB5mB,wCAArB4mB,EAAqB3mB,QAArB2mB,EAAqB,qBAFpB,SAEDA,GAAb,GCHA,MAAMC,GAAoD,CACxD1C,qBAAqB,EACrBD,UAAW,OACXE,iBAAiB,GAMZ,IAAM0C,GAAb,MAAM,MAAOA,EACX1nB,YAAoBC,eAGpBgN,OACEjM,EACAqkB,EACAW,EAAyCyB,IAEzC,OAAOrnB,KAAKH,KAAK2E,KAA8B,GAAGtE,qBAA2BU,cAAoBqkB,IAAa,CAC5GY,WAAYD,EAAQlB,UACpBoB,uBAAwBF,EAAQjB,oBAChCoB,kBAAmBH,EAAQhB,gEAZpB0C,GAAyB9mB,wCAAzB8mB,EAAyB7mB,QAAzB6mB,EAAyB,qBAFxB,SAEDA,GAAb,GCDaC,GAAb,MAAM,MAAOA,EAUX3nB,YACU4nB,EACAC,EACApmB,GAFArB,6BACAA,iCACAA,6BAXAA,WAAQ,IAAI2G,MAKtB3G,WAAuC,QACvCA,WAAQ,GAQR0nB,UACE,IAAK1nB,KAAK2nB,SACR,MAAM,IAAIzc,MAAM,+BAGlB,GAAIlL,KAAK2nB,SAASnN,KAAK8L,GAAWA,EAAQ/gB,QAAUvF,KAAKuF,OAEvD,YADAvF,KAAKqB,sBAAsBsC,MAAMX,+CAAwDA,EAI3F,IAAKhD,KAAK0Q,UACR,MAAM,IAAIxF,MAAM,iCAGlB,MAAMtK,EAAUZ,KAAK0Q,UAAUxR,MAAME,GAErCY,KAAKyJ,MAAQ,UACbzJ,KAAKwnB,sBAAsBvnB,IAAID,KAAKuF,OAAOxG,MACzC6C,OAAUiE,GAAQ7F,KAAKynB,0BAA0B5a,OAAOjM,EAASiF,EAAKjF,WACtE4C,UAAU,CACVf,KAAM,KACJzC,KAAKyJ,MAAQ,QACbzJ,KAAKqB,sBAAsBqC,QAAQV,gBAAyBA,EAC5DhD,KAAKuF,MAAQ,GACbvF,KAAK4nB,MAAM7gB,QAEbpD,MAAOA,IAGL,GAFA3D,KAAKyJ,MAAQ,SAEToe,SAAoBlkB,GACtB3D,KAAKqB,sBAAsBsC,MAAMX,gEAAyEA,OAA1G,IACSge,SAAqBrd,GAC9B3D,KAAKqB,sBAAsBsC,MAAMX,6BAAsCA,OAAvE,GAEAhD,KAAKqB,sBAAsBwK,oBACrBlI,aAAiBmI,MAAoB,MAAMnI,mDAnD9C4jB,GAAwB/mB,yDAAxB+mB,EAAwB1jB,qKCf6Bb,eAAAA,GAIyBA,iBAAAA,GASnEA,SAAAA,mSAbxBxC,mCAAiF,UAAjFA,CAAiF,aAK3EA,qDAHFA,QAMAA,kBACEA,eACFA,QACAA,sBAKEA,kCAAWwI,cACZxI,mBAZCA,kCAAmB,gCAUnBA,6zGDAO+mB,GAAb,yBEdE/mB,kEAEAA,uBAIEA,4DAAWA,uBACZA,aAFCA,oDAoBQA,2CADFA,iBACEA,wBACAA,iBAA8B,WAA9BA,CAA8B,YAE1BA,YAEAA,YAGJA,iBAA8B,WAA9BA,CAA8B,YAE1BA,YAEAA,YAGJA,kBAA0C,YAA1CA,CAA0C,aAEtCA,aAEAA,YAGJA,kBAA0C,YAA1CA,CAA0C,aAEtCA,aAEAA,YAGJA,kBACFA,+BA9BoBA,qKAwClBA,iBACEA,8BACFA,wCADoCA,iDAsBhCA,sCACAA,sCASAA,sCACAA,yDAIFA,qBAKEA,8EAASA,wCAEVA,uFA9CLA,iBACEA,wBAGAA,iBAIC,+BAIGA,gCACFA,UAEFA,iBACEA,SACFA,QACAA,iBAA0C,cAMtCA,wBACAA,wBACFA,UAEFA,kBAA0C,cAMtCA,wBACAA,wBACFA,UAEFA,kBACEA,6BAQFA,4DA/CEA,0BAA0B,yBACVA,0IASdA,2CAEAA,qDAIFA,0CAIEA,oFAIIA,8CACAA,6CAKJA,4EAIIA,0CACAA,yCAUHA,oLAOPA,cAA2C,UAA3CA,CAA2C,WAA3CA,CAA2C,eAOnCA,0DAASA,2BAEVA,4CARDA,4BAOEA,mEARRA,+DAAKA,4FAgBLA,kBACEA,iCACAA,mBAAyBA,0EAASA,0BAAlCA,YAEAA,QACAA,mBACAA,kBAA6B,aACrBA,2DAASA,uBACfA,4BAAiBA,QACfA,gBACFA,oDAHiCA,0GARvCA,sFAxHFA,uBAMEA,4FAMAA,6CAmCAA,8CAyDAA,4CAgBAA,uBAeFA,8DAnIEA,mDAAiD,SAAjDA,CAAiD,wBAAjDA,CAAiD,cAAjDA,CAAiD,iBAoHnCA,kKAkBdA,8BAEAA,kDAGJA,oCAIEA,0DAASA,qBACVA,gDAHCA,+BAAuB,yCAnJ3BA,SACEA,yBACEA,6BAyIAA,2CAKFA,QACAA,0CAMFA,mDAlJOA,kCAA2B,cA6I7BA,oLA5JPA,SACEA,gCAEAA,8BAOAA,iCAyJAA,2CAIEA,0DAASA,yCACVA,QACHA,yCAxK8BA,6CAGzBA,iCAMYA,8BA0JbA,0DAAyC,iDAAzCA,CAAyC,4BChJtC,IAAMsnB,GAAb,MAAM,MAAOA,EA2BXloB,YACUmoB,EACAC,EACA3mB,EACAyhB,EACAmF,EACA7mB,GALApB,+BACAA,iCACAA,6BACAA,uBACAA,mBACAA,2BA7BVA,eAAuB,GACvBA,wBAAoB,EACpBA,oCAAgC,EAGvBA,eAAY,IAAI8b,KAAU,CACjCC,MAAO,CAACC,EAAUkM,KAChB,IAAKloB,KAAK0Q,UAAW,MAAM,IAAIxF,MAAM,cACrC,OAAOlL,KAAK+nB,wBAAwBjD,iBAAiB9kB,KAAK0Q,UAAUxR,MAAME,GAAI,CAAEse,MAAO1B,EAAU2B,OAAQuK,GAAe9oB,MAE1H4c,SArBkB,GAsBlBG,gBAAiB,KACfnc,KAAKqB,sBAAsBsC,MAAMX,iEAA0EA,KAItGhD,YAASA,KAAKoc,UAAUC,MAAMtd,MACrCqkB,QAAauE,GAAYA,EAASnpB,IAAI8nB,IAAY,IAC7CA,EACH6B,gBAAiBnoB,KAAKooB,gBAAgB9B,QAa1C7e,YAAY0N,GACNnV,KAAK0Q,YACNyE,EAAQzE,WAAW2F,eAAyCnX,MAAME,KAAOY,KAAK0Q,WAAWxR,MAAME,GAC5FY,KAAKwM,YACLxM,KAAKqoB,iBAILD,gBAAgB9B,GACtB,OAAQA,EAAQ5B,eACT,OACH,OAAO1hB,eAAoBA,KACxB,cACH,OAAOA,SAAsBA,KAC1B,wBACH,OAAOA,mBAAgCA,EAI7CwJ,YACExM,KAAKoc,UAAU7T,QACfvI,KAAKqoB,gBAEPA,gBACE,IAAKroB,KAAK0Q,UAAW,MAAM,IAAIxF,MAAM,cACrClL,KAAKoc,UAAUM,OAGjB/S,YAAYge,GAKV3nB,KAAK6G,UAJD7G,KAAK6G,UAAUvI,SAAWqpB,EAASrpB,OAItBqpB,EAHE,GAMrBhJ,SAASvc,GACP,GAA8B,IAA1BpC,KAAK6G,UAAUvI,OACjB,OAGF,MAAMwoB,EAAgB9mB,KAAKioB,YAAYlB,SAASuB,YAAY1nB,QAE5D,IAAKkmB,EACH,MAAM,IAAI5b,MAAM,sCAGdlL,KAAK6G,UAAU2T,KAAK8L,GAAWA,EAAQlnB,KAAO0nB,GAChD9mB,KAAKoB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLI,KAAM,6BACNH,QAASC,wI,CAETG,YAAaH,wCAAiDA,CAC9DikB,uBAAwB,kBACxB5I,WAAY,cACZ/a,YAAaN,KAAaA,CAC1BI,OAAQ,IAAMpD,KAAK4V,WAMvB5V,KAAK4V,SAGPA,SACE,IAAK5V,KAAK0Q,UACR,MAAM,IAAIxF,MAAM,gCAGlB,MAAM4b,EAAgB9mB,KAAKioB,YAAYlB,SAASuB,YAAY1nB,QAE5D,IAAKkmB,EACH,MAAM,IAAI5b,MAAM,sCAGlB,MAAMtK,EAAUZ,KAAK0Q,UAAUxR,MAAME,GAC/B8lB,EAAellB,KAAK6G,UAAU0hB,KAAKjC,GAAWA,EAAQlnB,KAAO0nB,IAAgB1nB,GAEnFY,KAAKwoB,mBAAoB,EAEzBxoB,KAAKgoB,0BAA0BrN,YAC7B/Z,EACAZ,KAAK6G,UAAUvG,OAAOgmB,GAAWA,EAAQlnB,KAAO8lB,GAAc1mB,IAAI8nB,GAAWA,EAAQlnB,IACrF8lB,GAEC1hB,UAAU,CACTf,KAAMuC,KC9IR,YAAkDD,EAAwCC,GAC1FA,EAAOE,eAAiBF,EAAOG,cACjCJ,EAAgBrB,QAAQV,qDAA8DkC,EACrD,IAA5BkB,EAAWlB,aAChBH,EAAgBpB,MAAMX,oEAAqDA,CAAG,GAAGgC,EAAOuV,WAAa,MAErGxV,EAAgBM,QACdrC,+J,CACqB,GAAGgC,EAAOuV,WAAa,ODuIxCkO,CAAwCzoB,KAAKqB,sBAAuB2D,GACpEhF,KAAKwoB,mBAAoB,EAErBxjB,EAAOE,aAAe,IACxBlF,KAAK6G,UAAY,GACjB7G,KAAKwM,cAGT7I,MAAOiI,IAGL,GAFA5L,KAAKwoB,mBAAoB,EACzBxoB,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvD8c,0BAA0BpC,GACxBtmB,KAAK2oB,+BAAgC,EACrC3oB,KAAK4oB,cAAgBtC,EAGvBuC,2BAA2BzmB,GACzBpC,KAAK2oB,+BAAgC,EACrC3oB,KAAK4oB,mBAAgB/lB,EAEjBT,EAAMykB,UACR7mB,KAAKwM,YACLxM,KAAK8iB,gBAAgBtT,gBAIzBsZ,UACE9oB,KAAKwM,0DA9JIsb,GAAyBtnB,yFAAzBsnB,EAAyBjkB,yJDfZb,uDAAAA,GAM4BA,4BAAAA,GAkBGA,OAAAA,GAOAA,iBAAAA,GAOAA,0BAAAA,GAOAA,6BAAAA,GAyErBA,WAAAA,GAYsCA,wBAAAA,GAMjDA,WAAAA,GASiBA,yCAAAA,m0DAtJ1CxC,wDAAeA,+qLCoBFsnB,GAAb,4BEpBAtnB,yDACEA,uDAKAA,4BAA6EA,SCGxE,IAAMuoB,GAAb,MAAM,MAAOA,8EAAsBllB,kHDHOb,yDAAAA,4IAN1CxC,2CAKAA,kEAHGA,2MAAoG,glECO1FuoB,GAAb,kBCAA,MAAMC,IAA0BjqB,SAC9BkqB,MACAjqB,KAAYkqB,OACZlqB,KAAYmqB,QAGRC,GAA4BpqB,KAAS,CACzCE,MAAOF,KAAS,CACdI,GAAIJ,KACJK,KAAML,OAERoJ,KAAMpJ,KAAS,CACbI,GAAIJ,KACJ8kB,YAAa9kB,KACbqqB,sBAAuBrqB,KACvBsO,MAAOtO,KAAWA,QAEpBsqB,YAAaN,GACbO,YAAavqB,KAAS,CACpBI,GAAIJ,KACJK,KAAML,SAUH,IAAMwqB,GAAb,MAAM,MAAOA,EACX5pB,YAAoBC,eAGpBI,IAAIb,EAAYqqB,EAAc,GAC5B,MAAMnP,GAAa,IAAIjc,MAAaO,IAAI,cAAe6qB,GACvD,OAAOzpB,KAAKH,KAAKI,IAAa,GAAGC,qBAA4Bd,wBAA2B,CACtFhB,OAAQkc,IACPvb,MACDqB,OAAgBpB,KAAQoqB,oDATjBI,GAAyBhpB,wCAAzBgpB,EAAyB/oB,QAAzB+oB,EAAyB,qBAFxB,SAEDA,GAAb,GCrCA,MAAME,GAAsB,CAC1BC,KAAM3mB,MAAeA,CACrB6Z,SAAU7Z,SAAmBA,CAC7B4mB,IAAK5mB,MAAcA,CACnB6mB,eAAgB7mB,gBAAyBA,CACzC8mB,MAAO9mB,OAAgBA,CACvB+mB,QAAS/mB,SAAkBA,CAC3BgnB,yBAA0BhnB,0BAAmCA,CAC7DinB,SAAUjnB,UAAmBA,CAC7BknB,oBAAqBlnB,qBAA8BA,CACnDmnB,KAAMnnB,MAAeA,CACrBgC,OAAQhC,cAAiBA,CACzBonB,OAAQpnB,YAAiBA,CACzBqnB,kBAAmBrnB,mBAA4BA,EAI1C,IAAMsnB,GAAb,MAAM,MAAOA,EACX1qB,eAEA2qB,UAAUrgB,GACR,OAAOwf,GAAoBxf,IAAUlH,YAAqBA,+CAJjDsnB,6DAA0BE,UAA1BF,GAAb,6BCnBA9pB,SACEA,gBAAqB,SAArBA,CAAqB,WAEIA,2CAA4DA,UAEnFA,gBAAyB,WACFA,2CAAuEA,UAE9FA,iBAAyB,YACFA,2BAA8DA,UAErFA,iBAAyB,YACFA,2BAAsDA,YAGjFA,8BAZ2BA,iEAGAA,4EAGAA,sFAGAA,gFCJpB,IAAMiqB,GAAb,MAAM,MAAOA,8EAAyB5mB,wLDRtCrD,wCAAeA,knFCQFiqB,GAAb,0BCLMjqB,iBACEA,yBACFA,kDAEAA,wBAKEA,4DAAWA,qBACZA,aAHCA,wDAMAA,SACEA,kBAAkB,SAEdA,gBACAA,kBAAQA,qBAAiCA,QAAgBA,SAAyCA,YAGxGA,oCAH+DA,mEAM7DA,2BAA0CA,mCAX9CA,SACEA,iCASAA,4CAGFA,8CAZiBA,8BAA8B,yCAdjDA,SACEA,wBAIAA,8BAQAA,iCAcFA,6BA1BwBA,oCAKnBA,iCAOYA,yDAsBfA,iBACEA,yBACFA,kDAEAA,wBAKEA,4DAAWA,gCACZA,aAHCA,qGAaIA,SAEIA,4BAAmBA,QACnBA,qCAIEA,SACFA,QACJA,wCAJMA,qEAEAA,mEAIJA,4BAA8BA,mCAjBlCA,kBAAyE,SAEvEA,gBACAA,kBACEA,SACFA,QACAA,iCAUAA,4CAGFA,QACAA,oCACFA,wDAjBMA,sCAGCA,wHAAkG,cAahFA,uEArBzBA,SACEA,yBAsBFA,oCAtBkDA,yDAyBhDA,2BAAiDA,mCA3BrDA,SACEA,iCAyBAA,4CAGFA,8CA5BiBA,uCAAuC,yCAd1DA,SACEA,wBAIAA,+BAQAA,iCA8BFA,6BA1CwBA,oCAKnBA,iCAOYA,4DAjDrBA,SACEA,oCACEA,kDA4BFA,QAEAA,yBAIEA,kDA4CFA,QACFA,8BAhFEA,yDACiBA,uDAkCAA,6EAgDjBA,4BAA6FA,SCvExF,IAAMkqB,GAAb,MAAM,MAAOA,EAsBX9qB,YACUygB,EACAsK,GADA3qB,0BACAA,iCArBOA,YAAS,IAAIuB,IAAqB,GAE3CvB,cAAW,IAAIsB,IACvBtB,wBAAqBA,KAAKuQ,OAAOxR,MAC/B6C,OAAU,EAAGqiB,oBACNA,EAGEjkB,KAAKqgB,mBAAmBpgB,IAAIgkB,IAF1B5Z,QAAG,QAIdxI,QAAgB,CAAEC,SAAU9B,KAAK+B,YAG3B/B,yBAAsB,IAAIsB,IAClCtB,sBAAmBA,KAAKuQ,OAAOxR,MAC7B6C,OAAU1C,GAASc,KAAK2qB,0BAA0B1qB,IAAIf,EAAME,MAC5DyC,QAAgB,CAAEC,SAAU9B,KAAK4qB,uBASnCnjB,cACMzH,KAAKd,OACPc,KAAKuQ,OAAO9N,KAAKzC,KAAKd,OAI1B+C,cACEjC,KAAKuQ,OAAOrO,WACZlC,KAAK+B,SAASG,WAGhBuB,UACEzD,KAAK+B,SAASU,OAGhBooB,qBACE7qB,KAAK4qB,oBAAoBnoB,qDA5ChBioB,GAAoBlqB,gDAApBkqB,EAAoB7mB,2IDZmBb,gDAAuB,GAiCrDA,oDAAAA,GAzBQA,wCAAAA,GAWWA,gBAAAA,GAMrBA,kCAAAA,GAiBUA,kCAAAA,GAgBHA,UAAAA,GASFA,qBAAAA,GAQLA,yCAAAA,GAQmBA,0DAAAA,iwBApFvCxC,iCAmFAA,kEAnFeA,wEAA6C,s2ECa/CkqB,GAAb,6ICVIlqB,2CACAA,0DAAkBA,oDAClBA,kEAEIA,gDAEJA,4DAGIA,2DA4DFA,iCAGEA,yEAAwBA,mCAAxBA,CAAiD,wDACpCA,wBACdA,qCAHCA,2DAIFA,oCAAmFA,yEAAwBA,mCAAxBA,CAAiD,yDAAeA,uBAAhEA,CAAiD,2DAA6CA,wBAAcA,sCAArIA,oDAC1DA,4DAAiDA,oDACjDA,yDAAgDA,wCAChDA,uKA/EJA,SACEA,wBACAA,sDACAA,8CAIAA,wCAOAA,iBAAyL,UAAzLA,CAAyL,WAErLA,aASAA,QACAA,iCASAA,QACAA,iCASAA,QACAA,iCASAA,QACAA,iCASAA,YAIJA,mBACEA,yCAMAA,4CACAA,wCACAA,uCACAA,oCACFA,QAEFA,uHAjFQA,oCACsCA,uEAEvCA,+EAKAA,2FAKAA,8IAOCA,oCAHAA,yBAAmB,wCAanBA,oCAJAA,+DAAmE,0BAcnEA,oCAJAA,iGAAuG,2BAcrGA,oCAJAA,yEAAwE,yBAc1EA,oCAJAA,oEAAqE,2BActEA,0HAKqBA,+CACHA,+CACFA,+CACFA,sEAKrBA,8CASEA,qBAEAA,gCAEEA,qBAAqDA,kDAXzDA,wBAKEA,4DAAWA,oCAEXA,kCAGAA,4CAGFA,gDAVEA,gDAIeA,4CAAwC,yCA/F3DA,SAEEA,mCAoFAA,gCAEAA,8BAeFA,6BArGiBA,sDAoFDA,6CAGXA,kCC1EE,IAAMsqB,GAAb,MAAM,MAAOA,EAoBXlrB,YACUkjB,EACAjV,EACAgV,GAFA7iB,uBACAA,qBACAA,6BArBVA,YAASA,KAAK8iB,gBAAgBK,OAAOpkB,MAAKqkB,QAAa3Z,IAAU,IAC5DA,EACHvK,OAAOyR,SAAwBlH,EAAMvK,WAEvCc,gBAAaA,KAAK6N,cAAcC,WAUhC2V,UACE,QAASzjB,KAAK+qB,WAAWtH,UAS3BU,aACEnkB,KAAK6iB,sBAAsBpU,qBAG7Buc,yBACEhrB,KAAK8iB,gBAAgBtT,eACrBxP,KAAKmkB,2DAhCI2G,GAAqBtqB,yDAArBsqB,EAAqBjnB,ucDUzBb,iBAAAA,GAUAA,eAAAA,GAUAA,YAAAA,GAUAA,UAAAA,GAUAA,iBAAAA,GA8ByEA,gDAAAA,GAIzDA,oCAAAA,+lCAnGzBxC,wDAAeA,0OCeFsqB,GAAb,kBCPA,MAIMG,GAAmBjsB,KAJFA,MAQjBksB,GAA2BlsB,KAAS,CACxCqP,KAAM4c,KAMD,IAAME,GAAb,MAAM,MAAOA,EAEXvrB,YAAoBC,eAEpBurB,aAAaxqB,GACX,OAAOZ,KAAKH,KAAKI,IAAa,GAAGC,qBAA2BU,oBAA0B7B,MACpFqB,OAAgB8qB,KAEhB1sB,OAAI6sB,GAAOA,EAAIhd,KAAKY,MAAM,GAAE,mDARrBkc,GAAmB3qB,wCAAnB2qB,EAAmB1qB,QAAnB0qB,EAAmB,qBAFlB,SAEDA,GAAb,GCTA,MAAMG,GAAuBtoB,SAAiBA,CAWvC,IAAMuoB,GAAb,MAAM,MAAOA,EAKX3rB,YACU4rB,EACA5d,EACAwC,EACAvC,EACAiV,EACAzV,EACA+d,GANAprB,sBACAA,sBACAA,mBACAA,qBACAA,uBACAA,mBACAA,oBAVFA,mBAAgC,GAChCA,oBAAgB,EAWtBA,KAAK6N,cAAcE,UAAU,CAAEC,iBAAiB,IAGhDhO,KAAKwrB,eAAeC,SAASjoB,UAAUpF,GAAU4B,KAAK0rB,kBAAkBttB,IAGxE4B,KAAK2rB,cAAc1jB,KACjBjI,KAAK8iB,gBAAgBK,OAAOpkB,MAC1BskB,WACA7kB,OAAI,EAAGU,QAAO2P,QAAOV,kBAA6Byd,QAAU,CAC1D/c,MAAOA,EACPV,YAAa,CACXC,SAAUkd,GACVjd,KAAMF,EAAY3P,IAAIsQ,IAAe,CACnCxB,MAAOwB,EAAWzP,KAClBoO,WAAY,IAAezN,KAAKqN,YAAYwe,IAAI/c,EAAWD,UAE7DP,eAAgBH,EAAY7P,OAAS,GAEvCgP,MAAOpO,EAAMG,SAEfmE,UAAUsoB,GAAK9rB,KAAK4N,eAAeK,QAAQ6d,IAE7C9rB,KAAKoQ,YAAYS,aAAa9R,MAC5BuB,OAAOrB,GAAU,CAAE6R,kBAAyBA,kBAAyBtF,SAASvM,KAC9E8sB,QAAkB/rB,KAAK4N,eAAeoe,SAASjtB,MAAKuB,OAAO2rB,SAC3DzoB,UAAU,EAAGvE,EAAQ8qB,MACrB/pB,KAAKqN,YAAYI,WAAWsc,EAAQlb,MAAO,CAAEqd,KAAM,CAAEjtB,IAAW6R,kBAA0B,OAAS,gBAKzG7O,cACEjC,KAAK4N,eAAepF,QACpBxI,KAAK2rB,cAAc5gB,QAAQohB,GAAKA,EAAEha,eAG5BuZ,kBAAkBttB,GACxB,MAAMyQ,GAAQud,QAAqBhuB,GAEnC,IAAIiuB,QAAkBxd,GAAtB,CACE,IAAKA,EAAMzP,GAAI,MAAM,IAAI8L,MAAM,gDAC/B,GAAIlL,KAAKssB,cAAe,MAAM,IAAIphB,MAAM,yBACnClL,KAAKusB,wBAAwB1d,EAAMzP,SAI1CY,KAAKssB,eAAgB,EACrBtsB,KAAK4N,eAAeK,SAAQ2d,QAAU,CACpC/c,QACAV,YAAa,CAAEC,SAAUkd,GAAsBjd,KAAM,GAAIC,gBAAgB,MAE3EtO,KAAK8iB,gBAAgBvT,WAAWV,GAG1B0d,wBAAwB3rB,GAC9BZ,KAAKorB,aAAaA,aAAaxqB,GAAS4C,UAAU,CAChDf,KAAM4L,IACJrO,KAAKssB,eAAgB,EACrBtsB,KAAKqN,YAAYI,YAAWuB,QAAW,CAAE5P,GAAIwB,EAAS2c,QAAQ,GAASlP,GAAO,CAAEme,UAAW,CAAEC,YAAY,MAE3G9oB,MAAO,KACL3D,KAAKqN,YAAYI,YAAWuB,QAAW,CAAE5P,GAAIwB,EAAS2c,QAAQ,GAAS,IAAK,CAAEiP,UAAW,CAAEC,YAAY,sDA5ElGlB,GAAkB/qB,uGAAlB+qB,EAAkB1nB,gDAFlB,CAAEqL,KAAiB6S,2CCvBhCvhB,gDDyBa+qB,GAAb,gFEzBA/qB,SACEA,iBAAsB,UAAtBA,CAAsB,WAElBA,WAEAA,QACAA,sBAIEA,gEAASA,+BACVA,YAILA,iBAAsB,kBAAtBA,CAAsB,SAAtBA,CAAsB,SAAtBA,CAAsB,aAIdA,aAAmDA,QACnDA,oBAAuCA,UAAuBA,UAEhEA,iBAA+B,aAC7BA,aAAwDA,QACxDA,oBAAuCA,UAA2BA,UAEpEA,iBAA+B,aAC7BA,aAAuDA,QACvDA,oBAAuCA,UAA0BA,UAEnEA,iBAA+B,aAC7BA,aAAwDA,QACxDA,oBAAuCA,UAA2BA,UAEpEA,iBAA+B,aAC7BA,aAAwDA,QACxDA,oBAAuCA,UAA2BA,UAEpEA,iBAA+B,aAC7BA,aAAoDA,QACpDA,oBAAuCA,UAAqBA,UAE9DA,iBAA+B,aAC7BA,aAAyDA,QACzDA,oBAAuCA,UAA6BA,UAEtEA,iBAA+B,aAC7BA,aAA+DA,QAC/DA,oBAAuCA,UAAyBA,gBAMxEA,kBAAsB,oBAAtBA,CAAsB,UAAtBA,CAAsB,UAAtBA,CAAsB,aAIdA,aAAwDA,QACxDA,oBAAuCA,UAAuBA,UAEhEA,iBAA+B,aAC7BA,aAAwEA,QACxEA,oBAAuCA,UAAgCA,gBAM/EA,kBAAsB,oBAAtBA,CAAsB,UAAtBA,CAAsB,UAAtBA,CAAsB,aAIdA,aAA2DA,QAC3DA,oBAAuCA,UAAuBA,gBAKxEA,+BA3DiDA,yBAIAA,4BAIAA,2BAIAA,4BAIAA,4BAIAA,sBAIAA,8BAIAA,0BAWAA,wBAIAA,iCAWAA,yBC9D1C,IAAMksB,GAAb,MAAM,MAAOA,EAGX9sB,YACU+sB,EACAtrB,EACAurB,GAFA5sB,0BACAA,6BACAA,gBALVA,kBAAeA,KAAK2sB,mBAAmBE,aAQvCC,SAASC,GACP,MAAMC,EAAUC,OAAOL,SAASM,OAASltB,KAAK4sB,SAASO,mBAAmB,uBAC1EF,OAAOG,KACL,GAAIltB,sCAA8C6sB,kBAAwBM,UAAUL,UACpFnqB,EACA,8BAGF,MAAMyqB,EAAmB,KACvBttB,KAAK2sB,mBAAmBlpB,UAAUD,UAAU,CAC1CG,MAAOiI,IAEL,GADA5L,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAGnDqhB,OAAOM,oBAAoB,iBAAkBD,IAG/CL,OAAOO,iBAAiB,iBAAkBF,iDA3BjCZ,GAAoBlsB,4DAApBksB,EAAoB7oB,kHDTiBb,gFAAAA,GAKxBA,QAAAA,GAQSA,sBAAAA,GAGqBA,OAAAA,GAIAA,YAAAA,GAIAA,WAAAA,GAIAA,YAAAA,GAIAA,YAAAA,GAIAA,QAAAA,GAIAA,aAAAA,GAIAA,mBAAAA,GAQrBA,oBAAAA,GAGqBA,YAAAA,IAIAA,4BAAAA,IAQrBA,qBAAAA,IAGqBA,eAAAA,kcAzExDxC,0DAAeA,iRCYFksB,GAAb,6DCNIlsB,iBACEA,eACAA,eAAmFA,SAAkBA,iCAA7DA,4CAA2CA,0DAGrFA,iBACEA,SACFA,+BADEA,kFAIJA,iCAMEA,yDAAQA,gCAARA,CAA8B,oDACrBA,sCADTA,CAA8B,wDAEjBA,uDACdA,iCAPCA,yBAAsB,wEAAtBA,CAAsB,kDAAtBA,CAAsB,iDAlB1BA,iBAA0C,QAA1CA,CAA0C,WAGpCA,gCACFA,QAEAA,wBAKAA,wBAGFA,QAEAA,uCAUFA,8BAvBMA,0CAGqCA,sCAKUA,uCAMhDA,2BCLE,IAAMitB,GAAb,MAAM,MAAOA,EAQX7tB,YACU8P,EACAU,GADApQ,4BACAA,mBANVA,4BAAyBA,KAAK0P,qBAAqBE,cAAc7Q,MAC/DP,OAAIsR,MAAmBA,GAAgBA,EAAajB,MAAMzP,KAAOY,KAAK6F,MAAMjF,WAS9EgQ,sBACE5Q,KAAKoQ,YAAYS,aAAapO,KAAKqO,mBAGrCC,4BACE/Q,KAAK0P,qBAAqBge,kBAAkB1tB,KAAK6O,MAAO7O,KAAK6F,MAG/DqL,2BACElR,KAAK0P,qBAAqB2B,6DAvBjBoc,GAAmBjtB,kDAAnBitB,EAAmB5pB,srBDZhCrD,6BAA8BA,mKCYjBitB,GAAb,sECZAjtB,SACEA,iBAAsB,kBAAtBA,CAAsB,SAAtBA,CAAsB,SAAtBA,CAAsB,YAIdA,WAA+DA,QAC/DA,kBAAuC,2BAKjCA,+DAAcA,2BACjBA,kBAMbA,+BATgBA,gDAA2C,wBCEpD,IAAMmtB,GAAb,MAAM,MAAOA,EAGX/tB,YACU+sB,EACAtrB,EACAusB,GAFA5tB,0BACAA,6BACAA,qBALVA,kBAAeA,KAAK2sB,mBAAmBE,aAQvCgB,aAAazrB,GACXpC,KAAK2lB,OAAO,CAAEmI,iBAAkB1rB,IAGlCujB,OAAOxQ,GACLnV,KAAK2sB,mBAAmBoB,kBAAkB5Y,GAAS3R,UAAU,CAC3Df,KAAM,KACJzC,KAAKqB,sBAAsBqC,QAAQV,qCAAsCA,EAErEmS,EAAQ2Y,kBACV9tB,KAAK4tB,cAAcngB,WAAW0H,EAAQ2Y,mBAG1CnqB,MAAOiI,IAEL,GADA5L,KAAKqB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDAxB1C+hB,GAAyBntB,4DAAzBmtB,EAAyB9pB,wFDTHb,mBAAAA,GAGqBA,mBAAAA,4SALxDxC,wDAAeA,6ECWFmtB,GAAb,mECTEntB,gEAEAA,uBAMEA,4DAAWA,qBACZA,aAHCA,uDAOAA,wDAAiBA,0BAAwB,4JAEzCA,iBAA8K,WAC5KA,WASAA,QACAA,iEAUAA,QACAA,oEAUAA,kFA1BIA,oCAHAA,yBAAmB,wCAanBA,oCAHAA,sCAAgC,uCAAhCA,CAAgC,gHAchCA,oCAHAA,iCAA2B,uCAA3BA,CAA2B,wIAa7BA,kBAAgF,oBAE5EA,iCAIFA,+CAHMA,6EAAgG,gDAJ1GA,SACEA,0CAQFA,+BARyBA,gFAWvBA,SACEA,4BACFA,mCAHFA,SACEA,mDAGFA,iEAHiBA,8EAAiE,sCAMhFA,SACEA,iCACFA,mCAHFA,SACEA,mDAGFA,iEAHiBA,8EAAiE,sCAMhFA,kBACEA,wBACFA,mCA3BJA,SACEA,iCAWAA,iCAMAA,iCAMAA,4CAKFA,6BA5BiBA,sCAWAA,2CAMAA,iEAzDnBA,SAEEA,qDAEAA,6EAmCAA,kDA8BFA,mDAnEwEA,sEAEhDA,mKAmCPA,6EApDnBA,SAEEA,gCAEAA,8BASAA,kCAsEFA,6BAjFgBA,oCAGXA,iCAQYA,kCCOV,IAAMwtB,GAAb,MAAM,MAAOA,EA2CXpuB,YACUiP,EACAsE,EACA8a,EACAtB,EACA/e,EACAC,EACAR,EACA+B,GAPApP,aACAA,cACAA,sBACAA,0BACAA,sBACAA,qBACAA,mBACAA,kCA/CFA,cAAW,IAAIsB,IACNtB,gBAAaA,KAAK6O,MAAM4c,SAAS1sB,MAChDP,OAAIJ,IACF,MAAQgB,KAAIiP,SAAS+d,QAAqBhuB,GAC1C,IAAKgB,EAAI,MAAM,IAAI8L,MAAM,sCACzB,MAAMhM,EAAQ,CAAEE,KAAIme,QAAQ,GAC5B,OAAOlP,GAAOW,QAAW9P,EAAOmP,IAAQX,QAAcxO,MAIjDc,YAASA,KAAKkuB,WAAWnvB,MAChC6C,OAAUiN,GAAS7O,KAAKiuB,eAAeE,SAAStf,EAAMzP,IAAIL,MAAKP,OAAIqH,IAAS,CAAEgJ,MAAOA,EAAOhJ,KAAMA,QAClGhE,QAAgB,CAAEC,SAAU9B,KAAK+B,YACjCqsB,WAGOpuB,yBAAsBA,KAAK2sB,mBAAmBE,aAAa9tB,MAClEsvB,QAAM,IACN7vB,OAAI8vB,GAAeA,EAAY1tB,UAGxBZ,gBAAaA,KAAK6N,cAAcC,WAEjC9N,UAAOA,KAAKmT,OAAOob,OAAOxvB,MAChCuB,OAAO8B,GAASA,aAAiBosB,OACjChwB,OAAI,IAAMwB,KAAKmT,OAAO0Y,MACtBpqB,QAAUzB,KAAKmT,OAAO0Y,MACtBnqB,UAEO1B,kBAAsEA,KAAKyuB,KAAK1vB,MACvFP,OAAIqtB,GAAO7rB,KAAK0uB,gBAAgB7C,KAGjB7rB,kBAAeA,KAAKkuB,WAAWnvB,MAC9C6C,OAAUiN,IAAU8f,QAAa9f,GAAS7O,KAAKoP,2BAA2BR,eAAeC,IAASxE,aAAGxH,KAerG7C,KAAK6N,cAAcE,UAAU,CAAEC,iBAAiB,IAGlD9E,WACElJ,KAAK4Y,cAAetI,QAAc,CAChCtQ,KAAKkuB,WACLluB,KAAK4uB,aAAa7vB,MAAKP,OAAIstB,GAAK9rB,KAAK6uB,UAAU/C,KAC/C9rB,KAAKmjB,OAAOpkB,MAAKskB,WACjBrjB,KAAK8uB,aAAa/vB,MAAK6b,OAAW,KAAMvQ,aAAGxH,OAE1C9D,MACCP,OAAI,EAAGuwB,EAAkBC,EAAkBjuB,EAAMoN,MAAkB8gB,SAAY,CAC7E3hB,OAAOoZ,QAAW3lB,EAAK8E,MACvBsI,YAAa,CACXC,SAAUpL,OAAgBA,CAC1BqL,KAAM,KACAF,GAAac,MAAM,GAAE,IAAO,IAAIzQ,IAAI0wB,IAAM,CAAE5hB,MAAO4hB,EAAE7vB,KAAMoO,WAAYzN,KAAKqN,YAAYwe,IAAIqD,EAAErgB,UAClG,CAAEvB,OAAOoZ,QAAW3lB,EAAK8E,MAAO4H,WAAYzN,KAAKqN,YAAYwe,IAAIkD,IACjE,CAAEzhB,MAAO0hB,IAEX1gB,eAAgBH,EAAcA,EAAY7P,OAAS,OAGvDkF,UAAUyrB,IACVjvB,KAAK4N,eAAeK,QAAQghB,KAIlChtB,cACEjC,KAAK4N,eAAepF,QACpBxI,KAAK4Y,cAAczG,cACnBnS,KAAK+B,SAASG,WAGhBuB,UACEzD,KAAK+B,SAASU,OAMRosB,UAAU3C,GAChB,OAAQA,OACD,WAAY,OAAOlpB,YAAmBA,KACtC,gBAAiB,OAAOA,eAAwBA,KAChD,WAAY,OAAOA,eAAmBA,EAIvC0rB,gBAAgB7C,GACtB,OAAIA,EAAIsD,SAAS,kBACR,gBACEtD,EAAIsD,SAAS,aACf,WAEF,yDA5GEnB,GAAaxtB,qHAAbwtB,EAAanqB,0ODbAb,mCAAAA,GAkBnBA,YAAAA,GAWAA,iBAAAA,GAWAA,iBAAAA,GAQ0DA,YAAAA,GAuBtBA,2CAAAA,6vBA9E3CxC,wDAAeA,gKCoBFwtB,GAAb,kBCZA,MAAMoB,GAAiB,CACrB,CACE/gB,KAAM,OACNghB,UAAW1hB,IAEb,CACEU,KAAM,YACNghB,UAAWrB,GACXnR,SAAU,CACR,CACExO,KAAM,gBACNwO,SAAU,IAEZ,CACExO,KAAM,WACNwO,SAAU,MAIhB,CACExO,KAAM,YACNghB,UAAW9D,GACX1O,SAAU,CACR,CACExO,KAAM,UACNghB,UAAWvE,GACXwE,cAAe,CAAEC,MACjB1S,SAAU,CACR,CACExO,KAAM,GACNwO,SAAU,IAEZ,CACExO,KAAM,UACNwO,SAAU,IAEZ,CACExO,KAAM,WACNwO,SAAU,IAEZ,CACExO,KAAM,WACNihB,cAAe,CAAEC,MACjB1S,SAAU,IAEZ,CACExO,KAAM,SACNwO,SAAU,SAYf,IAAM2S,GAAb,MAAM,MAAOA,4GAHAC,cAAsBL,IACtBK,QAEAD,GAAb,GCgDaE,GAAb,MAAM,MAAOA,6GANA,CACTH,KACAvN,IACD2N,SAjBCC,KACAJ,GACAK,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,QAWSV,GAAb","sources":["./src/app/shared/helpers/sort-options.ts","./src/app/core/http-services/joined-groups.service.ts","./src/app/core/http-services/group-leave.service.ts","./src/app/modules/group/components/joined-group-list/joined-group-list.component.html","./src/app/modules/group/components/joined-group-list/joined-group-list.component.ts","./src/app/modules/group/http-services/request-actions.service.ts","./src/app/modules/group/components/pending-request/pending-request-response-handling.ts","./src/app/modules/group/http-services/get-requests.service.ts","./src/app/modules/shared-components/components/grid/grid.component.html","./src/app/modules/shared-components/components/grid/grid.component.ts","./src/app/modules/group/components/pending-request/pending-request.component.html","./src/app/modules/group/components/pending-request/pending-request.component.ts","./src/app/modules/group/components/pending-join-requests/pending-join-requests.component.html","./src/app/modules/group/components/pending-join-requests/pending-join-requests.component.ts","./src/app/modules/group/components/user-group-invitations/user-group-invitations.component.ts","./src/app/modules/group/components/user-group-invitations/user-group-invitations.component.html","./src/app/modules/group/components/managed-group-list/managed-group-list.component.html","./src/app/modules/group/components/managed-group-list/managed-group-list.component.ts","./src/app/modules/group/http-services/group-creation.service.ts","./src/app/modules/group/components/add-group/add-group.component.ts","./src/app/modules/group/components/add-group/add-group.component.html","./src/app/modules/group/pages/my-groups/my-groups.component.html","./src/app/modules/group/pages/my-groups/my-groups.component.ts","./src/app/modules/group/http-services/get-group-breadcrumbs.service.ts","./src/app/modules/group/services/group-datasource.service.ts","./src/app/modules/group/components/suggestion-of-activities/suggestion-of-activities.component.html","./src/app/modules/group/components/suggestion-of-activities/suggestion-of-activities.component.ts","./src/app/modules/group/components/group-header/group-header.component.html","./src/app/modules/group/components/group-header/group-header.component.ts","./src/app/modules/group/components/group-log-view/group-log-view.component.html","./src/app/modules/group/components/group-log-view/group-log-view.component.ts","./src/app/modules/group/components/group-leave/group-leave.component.html","./src/app/modules/group/components/group-leave/group-leave.component.ts","./src/app/modules/group/pages/group-overview/group-overview.component.html","./src/app/modules/group/pages/group-overview/group-overview.component.ts","./src/app/modules/group/components/group-composition-filter/group-composition-filter.component.ts","./src/app/modules/group/components/group-composition-filter/group-composition-filter.component.html","./src/app/modules/group/components/group-no-permission/group-no-permission.component.ts","./src/app/modules/group/components/group-no-permission/group-no-permission.component.html","./src/app/modules/group/http-services/group-actions.service.ts","./src/app/modules/group/http-services/code-actions.service.ts","./src/app/modules/shared-components/components/code-token/code-token.component.html","./src/app/modules/shared-components/components/code-token/code-token.component.ts","./src/app/modules/group/components/group-join-by-code/group-join-by-code.component.html","./src/app/modules/group/components/group-join-by-code/group-join-by-code.component.ts","./src/app/modules/group/http-services/create-group-invitations.service.ts","./src/app/modules/shared-components/components/message/message.component.ts","./src/app/modules/shared-components/components/message/message.component.html","./src/app/modules/group/components/group-invite-users/group-invite-users.component.html","./src/app/modules/group/components/group-invite-users/group-invite-users.component.ts","./src/app/modules/group/http-services/group-users.service.ts","./src/app/modules/group/http-services/remove-group.service.ts","./src/app/modules/group/http-services/remove-subgroup.service.ts","./src/app/modules/group/components/member-list/member-list.component.html","./src/app/modules/group/components/member-list/member-list.component.ts","./src/app/modules/group/components/member-list/user-removal-response-handling.ts","./src/app/modules/group/components/member-list/group-removal-response-handling.ts","./src/app/modules/group/http-services/search-group.service.ts","./src/app/modules/group/components/add-sub-group/add-sub-group.component.ts","./src/app/modules/group/components/add-sub-group/add-sub-group.component.html","./src/app/modules/group/pages/group-composition/group-composition.component.html","./src/app/modules/group/pages/group-composition/group-composition.component.ts","./src/app/modules/group/components/associated-activity/associated-activity-types.ts","./src/app/modules/group/http-services/group-update.service.ts","./src/app/modules/group/components/associated-activity/associated-activity.component.html","./src/app/modules/group/components/associated-activity/associated-activity.component.ts","./src/app/modules/group/services/group-delete.service.ts","./src/app/modules/group/components/group-remove-button/group-remove-button.component.html","./src/app/modules/group/components/group-remove-button/group-remove-button.component.ts","./src/app/modules/group/pages/group-edit/group-edit.component.html","./src/app/modules/group/pages/group-edit/group-edit.component.ts","./src/app/modules/group/components/group-links/group-links.component.html","./src/app/modules/group/components/group-links/group-links.component.ts","./src/app/modules/group/components/group-indicator/group-indicator.component.html","./src/app/modules/group/components/group-indicator/group-indicator.component.ts","./src/app/modules/group/http-services/get-group-managers.service.ts","./src/app/modules/group/http-services/remove-group-manager.service.ts","./node_modules/rxjs/dist/esm/internal/operators/reduce.js","./src/app/modules/group/http-services/update-group-managers.service.ts","./src/app/modules/group/components/manager-permission-dialog/manager-permission-dialog.component.html","./src/app/modules/group/components/manager-permission-dialog/manager-permission-dialog.component.ts","./src/app/core/http-services/get-user-by-login.service.ts","./src/app/modules/group/http-services/group-create-manager.service.ts","./src/app/modules/group/components/group-manager-add/group-manager-add.component.ts","./src/app/modules/group/components/group-manager-add/group-manager-add.component.html","./src/app/modules/group/components/group-manager-list/group-manager-list.component.html","./src/app/modules/group/components/group-manager-list/group-manager-list.component.ts","./src/app/modules/group/components/group-manager-list/group-manager-removal-response-handling.ts","./src/app/modules/group/pages/group-managers/group-managers.component.html","./src/app/modules/group/pages/group-managers/group-managers.component.ts","./src/app/modules/group/http-services/granted-permissions.service.ts","./src/app/shared/pipes/groupPermissionCaption.ts","./src/app/modules/group/components/group-permissions/group-permissions.component.html","./src/app/modules/group/components/group-permissions/group-permissions.component.ts","./src/app/modules/group/pages/group-access/group-access.component.html","./src/app/modules/group/pages/group-access/group-access.component.ts","./src/app/modules/group/pages/group-details/group-details.component.html","./src/app/modules/group/pages/group-details/group-details.component.ts","./src/app/modules/group/http-services/get-group-path.service.ts","./src/app/modules/group/pages/group-by-id/group-by-id.component.ts","./src/app/modules/group/pages/group-by-id/group-by-id.component.html","./src/app/modules/group/pages/current-user/current-user.component.html","./src/app/modules/group/pages/current-user/current-user.component.ts","./src/app/modules/group/components/user-header/user-header.component.html","./src/app/modules/group/components/user-header/user-header.component.ts","./src/app/modules/group/pages/platform-settings/platform-settings.component.html","./src/app/modules/group/pages/platform-settings/platform-settings.component.ts","./src/app/modules/group/pages/user/user.component.html","./src/app/modules/group/pages/user/user.component.ts","./src/app/modules/group/group-routing.module.ts","./src/app/modules/group/group.module.ts"],"sourcesContent":["import { HttpParams } from '@angular/common/http';\r\nimport { SortEvent } from 'primeng/api';\r\n\r\nexport interface SortOption {\r\n  field: string,\r\n  ascending: boolean,\r\n}\r\nexport type SortOptions = readonly SortOption[];\r\n\r\nexport const NO_SORT: SortOptions = [];\r\n\r\nexport function multisortEventToOptions(event: SortEvent): SortOptions|undefined {\r\n  return event.multiSortMeta?.map(meta => ({ field: meta.field, ascending: meta.order >= 0 }));\r\n}\r\n\r\nexport function sortEquals(sort1: SortOptions, sort2: SortOptions): boolean {\r\n  return JSON.stringify(sort1) === JSON.stringify(sort2);\r\n}\r\n\r\nexport function sortOptionsToHTTP(opts: SortOptions): HttpParams {\r\n  let params = new HttpParams();\r\n  if (opts.length == 0) return params;\r\n  const apiFormatOpts = opts.map(opt => (opt.ascending ? opt.field : `-${opt.field}`));\r\n  params = params.set('sort', apiFormatOpts.join(','));\r\n  return params;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { SortOptions, sortOptionsToHTTP } from 'src/app/shared/helpers/sort-options';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { dateDecoder } from 'src/app/shared/helpers/decoders';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { map } from 'rxjs/operators';\r\n\r\nconst groupMembershipDecoder = pipe(\r\n  D.struct({\r\n    action: D.literal('invitation_accepted', 'join_request_accepted', 'joined_by_code', 'joined_by_badge', 'added_directly'),\r\n    group: D.struct({\r\n      description: D.nullable(D.string),\r\n      id: D.string,\r\n      name: D.string,\r\n      type: D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'Base', 'Session'),\r\n    }),\r\n    memberSince: D.nullable(dateDecoder),\r\n    isMembershipLocked: D.boolean,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      canLeaveTeam: D.literal('free_to_leave', 'frozen_membership', 'would_break_entry_conditions'),\r\n    })\r\n  ),\r\n);\r\n\r\nexport type GroupMembership = D.TypeOf<typeof groupMembershipDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JoinedGroupsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getJoinedGroups(sort: SortOptions): Observable<GroupMembership[]> {\r\n    return this.http\r\n      .get(`${appConfig.apiUrl}/current-user/group-memberships`, { params: sortOptionsToHTTP(sort) })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(groupMembershipDecoder)),\r\n        map(memberships => memberships.filter(membership => membership.group.type !== 'Base')),\r\n      );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\n\r\ninterface LeaveGroupResponseData {\r\n  changed: boolean,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupLeaveService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  leave(groupId: string): Observable<boolean> {\r\n    return this.http.delete<ActionResponse<LeaveGroupResponseData>>(`${appConfig.apiUrl}/current-user/group-memberships/${groupId}`)\r\n      .pipe(\r\n        map(successData),\r\n        map((data: LeaveGroupResponseData) => data.changed)\r\n      );\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    i18n-message message=\"Error while loading the group you joined\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n\r\n  <p-table\r\n    *ngIf=\"!state.isError\"\r\n    class=\"alg-table --joined-group-list\"\r\n    [value]=\"state.data || []\"\r\n    [customSort]=\"true\"\r\n    sortMode=\"multiple\"\r\n    (sortFunction)=\"onCustomSort($event)\"\r\n    [loading]=\"state.isFetching\"\r\n  >\r\n    <ng-template pTemplate=\"header\" let-columns>\r\n      <tr *ngIf=\"state.isReady && state.data.length > 0\">\r\n        <th i18n>Name</th>\r\n        <th i18n>Type</th>\r\n        <th pSortableColumn=\"member_since\">\r\n          <span i18n>Joined On</span>\r\n          <p-sortIcon field=\"member_since\"></p-sortIcon>\r\n        </th>\r\n        <th class=\"th-action\" i18n>\r\n          Action\r\n        </th>\r\n      </tr>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"body\" let-membership>\r\n      <tr>\r\n        <td>\r\n          <a class=\"alg-link\" routerLink=\"../by-id/{{ membership.group.id }}/details\">{{ membership.group.name }}</a>\r\n        </td>\r\n        <td>{{ membership.group.type }}</td>\r\n        <td>{{ membership.memberSince | date:'short' }}</td>\r\n        <td>\r\n          <div class=\"actions\">\r\n            <ng-container *ngIf=\"membership.isMembershipLocked || (membership.group.type === 'Team' && membership.canLeaveTeam !== 'free_to_leave'); then cannotLeaveActions else canLeaveActions\"></ng-container>\r\n            <ng-template #cannotLeaveActions>\r\n                <ng-container *ngIf=\"membership.group.type === 'Team'\" [ngSwitch]=\"membership.canLeaveTeam\">\r\n                  <div\r\n                    *ngSwitchCase=\"'frozen_membership'\"\r\n                    i18n-pTooltip pTooltip=\"This team membership is now frozen and cannot be modified.\"\r\n                    tooltipPosition=\"left\"\r\n                    tooltipEvent=\"hover\"\r\n                    class=\"fa fa-lock\"\r\n                  ></div>\r\n                  <div\r\n                    *ngSwitchCase=\"'would_break_entry_conditions'\"\r\n                    i18n-pTooltip pTooltip=\"You cannot leave this team as it would break entry condition to some content your team participating to.\"\r\n                    tooltipPosition=\"left\"\r\n                    tooltipEvent=\"hover\"\r\n                    class=\"fa fa-lock\"\r\n                  ></div>\r\n                  <div *ngSwitchDefault class=\"fa fa-lock\"></div>\r\n                </ng-container>\r\n\r\n                <ng-container *ngIf=\"membership.group.type !== 'Team'\">\r\n                  <div\r\n                    i18n-pTooltip pTooltip=\"You cannot leave the group for the moment. Contact the group manager for more information.\"\r\n                    tooltipPosition=\"left\"\r\n                    tooltipEvent=\"hover\"\r\n                    class=\"fa fa-lock\"\r\n                  ></div>\r\n                </ng-container>\r\n            </ng-template>\r\n            <ng-template #canLeaveActions>\r\n              <button\r\n                  pButton\r\n                  pRipple\r\n                  type=\"button\"\r\n                  icon=\"fa fa-sign-out-alt\"\r\n                  class=\"p-button-rounded p-button-outlined\"\r\n                  (click)=\"onGroupLeaveClick($event, membership)\"\r\n              ></button>\r\n            </ng-template>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"emptymessage\" let-columns>\r\n      <tr>\r\n        <td [attr.colspan]=\"columns?.length\">\r\n          <p class=\"empty-message\" i18n>This list is empty.</p>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </p-table>\r\n\r\n</ng-container>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { ConfirmationService, SortEvent } from 'primeng/api';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, startWith, switchMap } from 'rxjs/operators';\r\nimport { GroupMembership, JoinedGroupsService } from 'src/app/core/http-services/joined-groups.service';\r\nimport { NO_SORT, sortEquals, multisortEventToOptions, SortOptions } from 'src/app/shared/helpers/sort-options';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\nimport { GroupLeaveService } from 'src/app/core/http-services/group-leave.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\n\r\n@Component({\r\n  selector: 'alg-joined-group-list',\r\n  templateUrl: './joined-group-list.component.html',\r\n  styleUrls: [ './joined-group-list.component.scss' ]\r\n})\r\nexport class JoinedGroupListComponent implements OnDestroy {\r\n  private refresh$ = new Subject<void>();\r\n  private readonly sort$ = new ReplaySubject<SortOptions>(1);\r\n  readonly state$ = this.sort$.pipe(\r\n    startWith(NO_SORT),\r\n    distinctUntilChanged(sortEquals),\r\n    switchMap(sort => this.joinedGroupsService.getJoinedGroups(sort)),\r\n    mapToFetchState({ resetter: this.refresh$.asObservable() }),\r\n  );\r\n\r\n  constructor(private joinedGroupsService: JoinedGroupsService,\r\n              private groupLeaveService: GroupLeaveService,\r\n              private confirmationService: ConfirmationService,\r\n              private actionFeedbackService: ActionFeedbackService) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.sort$.complete();\r\n  }\r\n\r\n  onCustomSort(event: SortEvent): void {\r\n    const sort = multisortEventToOptions(event);\r\n    if (sort) this.sort$.next(sort);\r\n  }\r\n\r\n  onGroupLeaveClick(event: Event, membership: GroupMembership): void {\r\n    this.confirmationService.confirm({\r\n      target: event.target || undefined,\r\n      key: 'commonPopup',\r\n      message: $localize`Are you sure you want to leave this group?`,\r\n      header: $localize`Confirm Action`,\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: $localize`Yes, leave group`,\r\n      accept: () => {\r\n        this.leaveGroup(membership);\r\n      },\r\n      rejectLabel: $localize`No`,\r\n    });\r\n  }\r\n\r\n  leaveGroup(membership: GroupMembership): void {\r\n    const groupId = membership.group.id;\r\n    const groupName = membership.group.name;\r\n    this.groupLeaveService.leave(groupId)\r\n      .subscribe({\r\n        next: () => {\r\n          this.refresh();\r\n          this.actionFeedbackService.success($localize`You have left \"${groupName}\"`);\r\n        },\r\n        error: _err => {\r\n          this.actionFeedbackService.error($localize`Failed to leave \"${groupName}\"`);\r\n        }\r\n      });\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { forkJoin, Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\ntype Status = 'invalid'|'success'|'unchanged'|'not_found';\r\n\r\nexport enum Action {\r\n  Accept,\r\n  Reject,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RequestActionsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  processJoinRequests(ids: Map<string, string[]>, action: Action): Observable<Map<string, Status>[]> {\r\n    const type = action === Action.Accept ? 'accept' : 'reject';\r\n    return forkJoin(\r\n      Array.from(ids.entries()).map(groupMembersIds =>\r\n        this.http\r\n          .post<ActionResponse<{[user: string]: Status}>>(\r\n            `${appConfig.apiUrl}/groups/${groupMembersIds[0]}/join-requests/${type}`, null, {\r\n              params: {\r\n                group_ids: groupMembersIds[1].join(','),\r\n              },\r\n            })\r\n          .pipe(\r\n            map(successData),\r\n            map(data => new Map(Object.entries(data)))\r\n          )\r\n      )\r\n    );\r\n  }\r\n\r\n  processLeaveRequests(ids: Map<string, string[]>, action: Action): Observable<Map<string, Status>[]> {\r\n    const type = action === Action.Accept ? 'accept' : 'reject';\r\n    return forkJoin(\r\n      Array.from(ids.entries()).map(groupMembersIds =>\r\n        this.http\r\n          .post<ActionResponse<{[user: string]: Status}>>(\r\n            `${appConfig.apiUrl}/groups/${groupMembersIds[0]}/leave-requests/${type}`, null, {\r\n              params: {\r\n                group_ids: groupMembersIds[1].join(','),\r\n              },\r\n            })\r\n          .pipe(\r\n            map(successData),\r\n            map(data => new Map(Object.entries(data)))\r\n          )\r\n      )\r\n    );\r\n  }\r\n\r\n  processGroupInvitations(groupIds: string[], action: Action): Observable<{ changed: boolean }[]> {\r\n    const type = action === Action.Accept ? 'accept' : 'reject';\r\n    return forkJoin(\r\n      groupIds.map(groupId =>\r\n        this.http\r\n          .post<ActionResponse<{ changed: boolean }>>(`${appConfig.apiUrl}/current-user/group-invitations/${groupId}/${type}`, null)\r\n          .pipe(\r\n            map(successData),\r\n          )\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport function parseResults(data: Map<string, Status>[]): { countRequests: number, countSuccess: number } {\r\n  const res = { countRequests: 0, countSuccess: 0 };\r\n  data.forEach(elm => {\r\n    res.countRequests += elm.size;\r\n    res.countSuccess += Array.from(elm.values())\r\n      .map<number>(state => ([ 'success', 'unchanged' ].includes(state) ? 1 : 0))\r\n      .reduce((acc, res) => acc + res, 0);\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function parseGroupInvitationResults(data: { changed: boolean }[]): { countRequests: number, countSuccess: number } {\r\n  return {\r\n    countRequests: data.length,\r\n    countSuccess: data.filter(state => state.changed).length,\r\n  };\r\n}\r\n","import { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { Action } from '../../http-services/request-actions.service';\r\n\r\nexport interface Result {\r\n  countRequests: number,\r\n  countSuccess: number,\r\n}\r\n\r\nexport function displayResponseToast(feedbackService: ActionFeedbackService, result: Result, action: Action): void {\r\n  const msg = action === Action.Accept ? $localize`accepted` : $localize`declined`;\r\n\r\n  if (result.countSuccess === result.countRequests) {\r\n    feedbackService.success($localize`${result.countSuccess} request(s) have been ${msg}`);\r\n  } else if (result.countSuccess === 0) {\r\n    const detailMsg = action === Action.Accept ?\r\n      $localize`Unable to accept the selected request(s).` :\r\n      $localize`Unable to reject the selected request(s).`;\r\n    feedbackService.error(detailMsg);\r\n  } else {\r\n    const errCnt = result.countRequests - result.countSuccess;\r\n    feedbackService.partial($localize`${result.countSuccess} request(s) have been ${msg}, ${errCnt} could not be executed`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { map } from 'rxjs/operators';\r\nimport { pipe } from 'fp-ts/function';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\nimport { dateDecoder } from '../../../shared/helpers/decoders';\r\n\r\nconst userDecoder = pipe(\r\n  D.struct({\r\n    groupId: D.string,\r\n    login: D.string,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      firstName: D.nullable(D.string),\r\n      lastName: D.nullable(D.string),\r\n      grade: D.nullable(D.number),\r\n    }),\r\n  ),\r\n);\r\n\r\nconst groupPendingRequestDecoder = D.struct({\r\n  at: D.nullable(dateDecoder),\r\n  group: D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n  }),\r\n  type: D.literal('join_request', 'leave_request'),\r\n  user: userDecoder,\r\n});\r\n\r\nconst groupInvitationDecoder = D.struct({\r\n  action: D.literal('invitation_created', 'join_request_created', 'join_request_refused'),\r\n  at: dateDecoder,\r\n  group: D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n    description: D.nullable(D.string),\r\n    type: D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'Session', 'Base'),\r\n  }),\r\n  groupId: D.string,\r\n  invitingUser: D.nullable(D.struct({\r\n    id: D.string,\r\n    firstName: D.nullable(D.string),\r\n    lastName: D.nullable(D.string),\r\n    login: D.string,\r\n  })),\r\n});\r\n\r\nexport interface PendingRequest {\r\n  at: Date|null,\r\n  user: null | {\r\n    id: string,\r\n    login: string,\r\n    firstName: string|null,\r\n    lastName: string|null,\r\n  },\r\n  group: {\r\n    id: string,\r\n    name: string,\r\n  },\r\n}\r\n\r\nexport interface GroupPendingRequest extends PendingRequest {\r\n  user: {\r\n    id: string,\r\n    login: string,\r\n    firstName: string|null,\r\n    lastName: string|null,\r\n    grade: number|null,\r\n  },\r\n}\r\n\r\nexport interface GroupInvitation extends PendingRequest {\r\n  group: {\r\n    id: string,\r\n    name: string,\r\n    description: string|null,\r\n    type: 'Class' | 'Team' | 'Club' | 'Friends' | 'Other' | 'Session' | 'Base',\r\n  },\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetRequestsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getGroupPendingRequests(\r\n    groupId?: string,\r\n    includeSubgroup : boolean = false,\r\n    sort: string[] = [],\r\n  ): Observable<GroupPendingRequest[]> {\r\n    let params = new HttpParams();\r\n    if (groupId) {\r\n      params = params.set('group_id', groupId);\r\n      if (includeSubgroup) params = params.set('include_descendant_groups', '1');\r\n    }\r\n    if (sort.length > 0) params = params.set('sort', sort.join(','));\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/user-requests`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(groupPendingRequestDecoder)),\r\n        map(pendingRequests => pendingRequests.map(r => ({\r\n          at: r.at,\r\n          group: r.group,\r\n          user: {\r\n            id: r.user.groupId,\r\n            login: r.user.login,\r\n            firstName: r.user.firstName || null,\r\n            lastName: r.user.lastName || null,\r\n            grade: r.user.grade || null,\r\n          }\r\n        })))\r\n      );\r\n  }\r\n\r\n  getGroupInvitations(\r\n    sort: string[] = [],\r\n  ): Observable<GroupInvitation[]> {\r\n    let params = new HttpParams();\r\n    if (sort.length > 0) params = params.set('sort', sort.join(','));\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/current-user/group-invitations`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(groupInvitationDecoder)),\r\n        map(groupInvitations => groupInvitations.filter(invitation => invitation.action === 'invitation_created').map(r => ({\r\n          at: r.at,\r\n          group: {\r\n            id: r.group.id,\r\n            name: r.group.name,\r\n            description: r.group.description,\r\n            type: r.group.type,\r\n          },\r\n          user: r.invitingUser,\r\n        }))),\r\n      );\r\n  }\r\n}\r\n","<p-table\r\n  #table\r\n  class=\"alg-table --grid\"\r\n  [ngClass]=\"tableStyle\"\r\n  [columns]=\"selectedColumns!\"\r\n  [value]=\"data!\"\r\n  [scrollable]=\"scrollWhenExpanded || scrollable\"\r\n  [selectionMode]=\"selectionMode!\"\r\n  [selection]=\"selection!\"\r\n  [dataKey]=\"dataKey!\"\r\n  [frozenWidth]=\"frozenWidth!\"\r\n  [sortMode]=\"sortMode\"\r\n  [multiSortMeta]=\"multiSortMeta\"\r\n  [customSort]=\"true\"\r\n  [loading]=\"loading\"\r\n  (selectionChange)=\"onSelectionChange($event)\"\r\n  (sortFunction)=\"sortFunction($event)\"\r\n  (onRowSelect)=\"onRowSelect()\"\r\n  (onRowUnselect)=\"onRowUnselect()\"\r\n  (onHeaderCheckboxToggle)=\"onHeaderCheckbox()\"\r\n>\r\n  <!-- <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container> -->\r\n  <ng-template *ngIf=\"frozenHeaderTemplate && frozenWidth && frozenWidth.length > 0\" pTemplate=\"frozenheader\">\r\n    <ng-container [ngTemplateOutlet]=\"frozenHeaderTemplate\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"frozenBodyTemplate && frozenWidth && frozenWidth.length > 0\" pTemplate=\"frozenbody\" let-rowIndex=\"rowIndex\">\r\n    <ng-container [ngTemplateOutlet]=\"frozenBodyTemplate\" [ngTemplateOutletContext]=\"{ $implicit: rowIndex }\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"headerTemplate\" pTemplate=\"header\" let-columns>\r\n    <ng-container [ngTemplateOutlet]=\"headerTemplate\" [ngTemplateOutletContext]=\"{ $implicit: columns }\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"bodyTemplate\" pTemplate=\"body\" let-rowData let-expanded=\"expanded\" let-columns=\"columns\" let-rowIndex=\"rowIndex\">\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"bodyTemplate\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: rowData, columns: columns, rowIndex: rowIndex, expanded: expanded }\"\r\n    ></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"footerTemplate\" pTemplate=\"footer\">\r\n    <ng-container [ngTemplateOutlet]=\"footerTemplate\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"rowExpansionTemplate\" pTemplate=\"rowexpansion\" let-rowData>\r\n    <ng-container [ngTemplateOutlet]=\"rowExpansionTemplate\" [ngTemplateOutletContext]=\"{ $implicit: rowData, columns: columns }\">\r\n    </ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"summaryTemplate\" pTemplate=\"summary\">\r\n    <ng-container [ngTemplateOutlet]=\"summaryTemplate\" [ngTemplateOutletContext]=\"{ $implicit: table }\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"emptymessageTemplate\" pTemplate=\"emptymessage\">\r\n    <ng-container [ngTemplateOutlet]=\"emptymessageTemplate\"></ng-container>\r\n  </ng-template>\r\n</p-table>\r\n<span\r\n  class=\"toggle-gear\"\r\n  (click)=\"showColumns()\"\r\n  *ngIf=\"!showColumnSelection && showGear\"\r\n>\r\n  <i class=\"fa fa-cog\"></i>\r\n</span>\r\n<div class=\"select-column\" *ngIf=\"showColumnSelection && showGear\">\r\n  <div class=\"header\" (click)=\"showColumns()\">\r\n    <span class=\"fold-icon\">\r\n      <i class=\"fa fa-caret-up\"></i>\r\n    </span>\r\n    <span i18n>Customize</span>\r\n  </div>\r\n  <div class=\"column-group\" *ngFor=\"let group of groupInfo\">\r\n    <p>{{group.name}}</p>\r\n    <ul>\r\n      <li *ngFor=\"let col of group.columns\">\r\n        <span [ngClass]=\"{ checked: selected[col.field] }\" (click)=\"handleColumnChanges(col)\">\r\n          {{ col.header }}\r\n        </span>\r\n        <alg-switch\r\n          [checked]=\"!!selected[col.field]\"\r\n          (change)=\"handleColumnChanges(col)\"\r\n        ></alg-switch>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n<div class=\"show-all\" *ngIf=\"showGear && (toShow > 0 || expand)\" (click)=\"showAll()\">\r\n  <span class=\"missing-title\" *ngIf=\"toShow > 0\">{{ toShow }}</span>\r\n  <span class=\"show-icon\">\r\n    <i *ngIf=\"!expand\" class=\"fa fa-caret-right\"></i>\r\n    <i *ngIf=\"expand\" class=\"fa fa-caret-left\"></i>\r\n  </span>\r\n</div>\r\n","import { Component, Input, OnChanges, SimpleChanges, ContentChild, ViewChild, Output, EventEmitter, TemplateRef } from '@angular/core';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { Table, TableService } from 'primeng/table';\r\nimport { SortEvent } from 'primeng/api/sortevent';\r\nimport { SortMeta } from 'primeng/api/sortmeta';\r\n\r\nexport function tableFactory(wrapper: GridComponent): Table|undefined {\r\n  return wrapper.table;\r\n}\r\n\r\nexport interface GridColumn {\r\n  field: string,\r\n  header: string,\r\n}\r\n\r\nexport interface GridColumnGroup {\r\n  columns: GridColumn[],\r\n  name?: string,\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-grid',\r\n  templateUrl: './grid.component.html',\r\n  styleUrls: [ './grid.component.scss' ],\r\n  providers: [\r\n    DomHandler,\r\n    TableService, // from old imports\r\n    {\r\n      provide: Table, // providing table class\r\n      useFactory: tableFactory, // using new function\r\n      deps: [ GridComponent ], // new function depends on your wrapper\r\n    },\r\n  ],\r\n})\r\nexport class GridComponent implements OnChanges {\r\n\r\n  @Input() selection?: any[];\r\n\r\n  constructor() {}\r\n  @ViewChild('table', { static: true }) table?: Table;\r\n\r\n  @Input() data?: any[];\r\n  @Input() selectedColumns?: GridColumn[];\r\n  @Input() columns: GridColumn[] = [];\r\n  @Input() groupInfo: GridColumnGroup[] = [];\r\n\r\n  @Input() sortMode = 'multiple';\r\n  @Input() multiSortMeta: SortMeta[] = [];\r\n  @Input() customSort = true;\r\n\r\n  @Input() scrollWhenExpanded = false;\r\n  @Input() scrollable = false;\r\n\r\n  @Input() selectionMode?: string;\r\n  @Input() dataKey?: string;\r\n  @Input() frozenWidth?: string;\r\n  @Input() showGear = true;\r\n  @Input() loading = false;\r\n  @Input() tableStyle = '';\r\n\r\n  @Output() expandWholeWidth = new EventEmitter<boolean>();\r\n  @Output() sort = new EventEmitter<SortEvent>();\r\n  @Output() selectionChange = new EventEmitter<any[]>();\r\n\r\n  @ContentChild('headerTemplate') headerTemplate?: TemplateRef<any>;\r\n  @ContentChild('bodyTemplate') bodyTemplate?: TemplateRef<any>;\r\n  @ContentChild('footerTemplate') footerTemplate?: TemplateRef<any>;\r\n  @ContentChild('summaryTemplate') summaryTemplate?: TemplateRef<any>;\r\n  @ContentChild('rowExpansionTemplate') rowExpansionTemplate?: TemplateRef<any>;\r\n  @ContentChild('frozenHeaderTemplate') frozenHeaderTemplate?: TemplateRef<any>;\r\n  @ContentChild('frozenBodyTemplate') frozenBodyTemplate?: TemplateRef<any>;\r\n  @ContentChild('emptymessageTemplate') emptymessageTemplate?: TemplateRef<any>;\r\n\r\n  showColumnSelection = false;\r\n\r\n  selected: {[k: string]: boolean} = {};\r\n  toShow = 0;\r\n  expand = false;\r\n\r\n  onSelectionChange(selection: any[]): void {\r\n    this.selection = selection;\r\n    this.selectionChange.emit(this.selection ?? []);\r\n  }\r\n\r\n  onRowSelect(): void {\r\n    this.selectionChange.emit(this.selection ?? []);\r\n  }\r\n\r\n  onRowUnselect(): void {\r\n    this.selectionChange.emit(this.selection ?? []);\r\n  }\r\n\r\n  detectSelected(): void {\r\n    const selectedCol = this.selectedColumns ?? [];\r\n\r\n    for (const col of this.columns) {\r\n      this.selected[col.field] = false;\r\n    }\r\n\r\n    for (const col of selectedCol) {\r\n      this.selected[col.field] = true;\r\n    }\r\n\r\n    this.toShow = this.columns.length - selectedCol.length;\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (this.showGear) {\r\n      this.detectSelected();\r\n    }\r\n  }\r\n\r\n  showColumns(): void {\r\n    this.showColumnSelection = !this.showColumnSelection;\r\n  }\r\n\r\n  showAll(): void {\r\n    this.selectedColumns = this.columns;\r\n    this.toShow = 0;\r\n    this.expand = !this.expand;\r\n\r\n    if (!this.expand) {\r\n      const newSel: GridColumn[] = [];\r\n      for (const col of this.columns) {\r\n        if (this.selected[col.field]) {\r\n          newSel.push(col);\r\n        }\r\n        this.selected[col.field] = true;\r\n      }\r\n\r\n      this.selectedColumns = newSel;\r\n\r\n      this.toShow = this.columns.length - this.selectedColumns.length;\r\n    }\r\n\r\n    for (const col of this.columns) {\r\n      this.selected[col.field] = true;\r\n    }\r\n    this.expandWholeWidth.emit(this.expand);\r\n  }\r\n\r\n  handleColumnChanges(item: GridColumn): void {\r\n    this.selected[item.field] = !this.selected[item.field];\r\n    const newSel: GridColumn[] = [];\r\n    for (const col of this.columns) {\r\n      if (this.selected[col.field] === true) {\r\n        newSel.push(col);\r\n      }\r\n    }\r\n\r\n    this.selectedColumns = newSel;\r\n\r\n    this.toShow = this.columns.length - this.selectedColumns.length;\r\n  }\r\n\r\n  sortFunction(event: SortEvent): void {\r\n    this.sort.emit(event);\r\n  }\r\n\r\n  onHeaderCheckbox(): void {\r\n    this.selectionChange.emit(this.selection);\r\n  }\r\n\r\n  public reset(): void {\r\n    this.table?.clear();\r\n  }\r\n\r\n}\r\n","<alg-section-paragraph\r\n  icon=\"fa fa-check\"\r\n  [label]=\"label\"\r\n  [collapsible]=\"true\"\r\n  [collapsed]=\"collapsed\"\r\n>\r\n\r\n  <ng-template #headerTemplate *ngIf=\"sectionHeaderTemplate\">\r\n    <ng-container [ngTemplateOutlet]=\"sectionHeaderTemplate\" [ngTemplateOutletContext]=\"{ $implicit: state }\"></ng-container>\r\n  </ng-template>\r\n\r\n  <alg-error\r\n    *ngIf=\"state === 'fetchingError'; else noFetchingError\"\r\n    class=\"dark\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    i18n-message message=\"Error while loading the pending requests.\"\r\n  ></alg-error>\r\n\r\n  <ng-template #noFetchingError>\r\n    <div class=\"pending-request-container\" #noError>\r\n      <alg-grid\r\n        *ngIf=\"requests.length > 0\"\r\n        [selectedColumns]=\"columns\"\r\n        [columns]=\"columns\"\r\n        [data]=\"requests\"\r\n        [groupInfo]=\"panel\"\r\n        tableStyle=\"--pending-request\"\r\n        [(selection)]=\"selection\"\r\n        (sort)=\"onCustomSort($event)\"\r\n        [loading]=\"state !== 'ready'\"\r\n      >\r\n        <ng-template #headerTemplate let-columns>\r\n          <tr>\r\n            <th></th>\r\n            <ng-container *ngFor=\"let col of columns\">\r\n              <th\r\n                [pSortableColumn]=\"col.field\"\r\n                [ngClass]=\"{'small-column' : ['at', 'group.name'].includes(col.field)}\"\r\n              >\r\n                <div class=\"header-container\">\r\n                  {{ col.header }}\r\n                  <p-sortIcon [field]=\"col.field\"></p-sortIcon>\r\n                </div>\r\n              </th>\r\n            </ng-container>\r\n          </tr>\r\n        </ng-template>\r\n        <ng-template\r\n          #bodyTemplate\r\n          let-rowData\r\n          let-columns=\"columns\"\r\n          let-rowIndex=\"rowIndex\"\r\n        >\r\n          <tr [pSelectableRow]=\"rowData\" [pSelectableRowIndex]=\"rowIndex\">\r\n            <td>\r\n              <p-tableCheckbox [value]=\"rowData\"></p-tableCheckbox>\r\n            </td>\r\n            <td *ngFor=\"let col of columns\">\r\n              <ng-container [ngSwitch]=\"col.field\">\r\n                <span class=\"group-name\" *ngSwitchCase=\"'group.name'\">\r\n                  {{ rowData.group.name }}\r\n                </span>\r\n                <ng-container *ngSwitchCase=\"'at'\">\r\n                  {{ rowData.at | date: \"d/MM/y\" }}\r\n                </ng-container>\r\n                <div class=\"grid-user-info-field\" *ngSwitchCase=\"'user.login'\">\r\n                  <!-- <img\r\n                    src=\"{{ rowData.user.image }}\"\r\n                    style=\"width: 7rem; height: 7rem;\"\r\n                  /> -->\r\n                  <div class=\"user-info\">\r\n                    <span class=\"user-info-name\">\r\n                      {{ rowData.user | userCaption }}\r\n                    </span>\r\n                    <span class=\"user-info-activity\" *ngIf=\"rowData.user.grade\">\r\n                      <em><span i18n>Grade: </span>{{ rowData.user.grade }}</em>\r\n                    </span>\r\n                    <!-- <div class=\"user-info-content\">\r\n                      {{ rowData.user.content }}\r\n                    </div> -->\r\n                  </div>\r\n                </div>\r\n                <ng-container *ngSwitchCase=\"'group.type'\">\r\n                  {{ rowData.group.type }}\r\n                </ng-container>\r\n                <ng-container *ngSwitchDefault>\r\n                  {{ rowData[col.field] }}\r\n                </ng-container>\r\n              </ng-container>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n        <ng-template #summaryTemplate let-table>\r\n          <div class=\"summary\">\r\n            <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\r\n            <span class=\"select-all\" (click)=\"onSelectAll()\" i18n>\r\n              Select all\r\n            </span>\r\n            <span class=\"filler\"></span>\r\n            <div class=\"summary-actions\">\r\n              <span [ngClass]=\"{disabled: selection.length === 0 || this.state !== 'ready'}\" (click)=\"onAccept()\">\r\n                <span i18n>Accept</span>\r\n              </span>\r\n              <span [ngClass]=\"{disabled: selection.length === 0 || this.state !== 'ready'}\" (click)=\"onReject()\">\r\n                <span i18n>Reject</span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </alg-grid>\r\n      <p class=\"no-pending-requests\" *ngIf=\"requests.length === 0\" i18n>\r\n        No pending requests\r\n      </p>\r\n    </div>\r\n  </ng-template>\r\n\r\n</alg-section-paragraph>\r\n\r\n<ng-template #loading>\r\n  <alg-loading></alg-loading>\r\n</ng-template>\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ContentChild, TemplateRef, Output, EventEmitter\r\n} from '@angular/core';\r\nimport { SortEvent } from 'primeng/api/sortevent';\r\nimport { GridColumn, GridColumnGroup } from '../../../shared-components/components/grid/grid.component';\r\nimport { Action } from 'src/app/modules/group/http-services/request-actions.service';\r\n\r\n@Component({\r\n  selector: 'alg-pending-request',\r\n  templateUrl: './pending-request.component.html',\r\n  styleUrls: [ './pending-request.component.scss' ],\r\n})\r\nexport class PendingRequestComponent<T> implements OnInit, OnChanges {\r\n\r\n  @Input() columns: GridColumn[] = [];\r\n  @Input() requests: T[] = [];\r\n  @Input() state: 'fetching' | 'processing' | 'ready' | 'fetchingError' = 'fetching';\r\n  @Input() label = '';\r\n\r\n  @Output() sort = new EventEmitter<string[]>();\r\n  @Output() processRequests = new EventEmitter<{ data: T[], type: Action }>();\r\n\r\n  @ContentChild('sectionHeaderTemplate') sectionHeaderTemplate?: TemplateRef<any>;\r\n\r\n  selection: T[] = [];\r\n  panel: GridColumnGroup[] = [];\r\n  collapsed = true;\r\n\r\n  ngOnInit(): void {\r\n    this.panel.push({\r\n      columns: this.columns,\r\n    });\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    this.collapsed = this.requests.length === 0;\r\n  }\r\n\r\n  onAccept(): void {\r\n    this.onAcceptOrReject(Action.Accept);\r\n  }\r\n\r\n  onReject(): void {\r\n    this.onAcceptOrReject(Action.Reject);\r\n  }\r\n\r\n  private onAcceptOrReject(action: Action): void {\r\n    if (this.selection.length === 0 || this.state !== 'ready') {\r\n      return;\r\n    }\r\n    this.processRequests.emit({ data: this.selection, type: action });\r\n    this.selection = [];\r\n  }\r\n\r\n  onSelectAll(): void {\r\n    if (this.selection.length === this.requests.length) {\r\n      this.selection = [];\r\n    } else {\r\n      this.selection = this.requests;\r\n    }\r\n  }\r\n\r\n  onCustomSort(event: SortEvent): void {\r\n    const sortMeta = event.multiSortMeta?.map(meta => (meta.order === -1 ? `-${meta.field}` : meta.field));\r\n    if (sortMeta) this.sort.emit(sortMeta);\r\n  }\r\n}\r\n","<alg-pending-request\r\n  i18n-label label=\"Pending requests\"\r\n  [state]=\"state\"\r\n  [columns]=\"columns\"\r\n  [requests]=\"requests\"\r\n  (sort)=\"onFetch($event)\"\r\n  (processRequests)=\"onProcessRequests($event)\"\r\n>\r\n  <ng-template #sectionHeaderTemplate>\r\n    <div\r\n      *ngIf=\"showSwitch\"\r\n      class=\"group-switch\">\r\n      <alg-selection (change)=\"onSubgroupSwitch($event)\" [items]=\"subgroupSwitchItems\"></alg-selection>\r\n    </div>\r\n  </ng-template>\r\n\r\n</alg-pending-request>\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { GetRequestsService, PendingRequest } from '../../http-services/get-requests.service';\r\nimport { Action, parseResults, RequestActionsService } from '../../http-services/request-actions.service';\r\nimport { GridColumn } from '../../../shared-components/components/grid/grid.component';\r\nimport { merge, of, Subject } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { fetchingState, readyState } from 'src/app/shared/helpers/state';\r\nimport { displayResponseToast } from 'src/app/modules/group/components/pending-request/pending-request-response-handling';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { ensureDefined } from 'src/app/shared/helpers/assert';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nconst groupColumn = { field: 'group.name', header: $localize`GROUP` };\r\n\r\n@Component({\r\n  selector: 'alg-pending-join-requests',\r\n  templateUrl: './pending-join-requests.component.html',\r\n  styleUrls: [ './pending-join-requests.component.scss' ],\r\n})\r\nexport class PendingJoinRequestsComponent implements OnChanges, OnDestroy {\r\n\r\n  // if groupId is undefined, pending join requests from all managed group will be used.\r\n  @Input() groupId?: string;\r\n  @Input() showSwitch = true;\r\n\r\n  requests: PendingRequest[] = [];\r\n\r\n  columns: GridColumn[] = [\r\n    { field: 'user.login', header: $localize`USER` },\r\n    { field: 'at', header: $localize`REQUESTED ON` },\r\n  ];\r\n  readonly subgroupSwitchItems = [\r\n    { label: $localize`This group only`, value: false },\r\n    { label: $localize`All subgroups`, value: true }\r\n  ];\r\n  includeSubgroup = false;\r\n\r\n  state: 'fetching' | 'processing' | 'ready' | 'fetchingError' = 'fetching';\r\n  currentSort: string[] = [];\r\n\r\n  private dataFetching = new Subject<{ groupId?: string, includeSubgroup: boolean, sort: string[] }>();\r\n\r\n  constructor(\r\n    private getRequestsService: GetRequestsService,\r\n    private requestActionService: RequestActionsService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {\r\n    this.dataFetching.pipe(\r\n      switchMap(params =>\r\n        merge(\r\n          of(fetchingState()),\r\n          this.getRequestsService.getGroupPendingRequests(params.groupId, params.includeSubgroup, params.sort)\r\n            .pipe(map(readyState))\r\n        )\r\n      )\r\n    ).subscribe({\r\n      next: state => {\r\n        this.state = state.tag;\r\n        if (state.isReady) {\r\n          this.requests = state.data;\r\n        }\r\n      },\r\n      error: _err => {\r\n        this.state = 'fetchingError';\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (!this.showSwitch) this.columns = [ groupColumn ].concat(this.columns);\r\n    this.dataFetching.next({ groupId: this.groupId, includeSubgroup: this.includeSubgroup, sort: this.currentSort });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dataFetching.complete();\r\n  }\r\n\r\n\r\n  onProcessRequests(params: { data: PendingRequest[], type: Action }): void {\r\n    this.state = 'processing';\r\n\r\n    const requestMap = new Map<string, string[]>();\r\n    params.data.forEach(elm => {\r\n      const groupID = elm.group.id;\r\n\r\n      if (!elm.user) {\r\n        throw new Error('Unexpected: Missed user ID');\r\n      }\r\n\r\n      const memberID = elm.user.id;\r\n\r\n      const value = requestMap.get(groupID);\r\n      if (value) requestMap.set(groupID, value.concat([ memberID ]));\r\n      else requestMap.set(groupID, [ memberID ]);\r\n    });\r\n\r\n    this.requestActionService.processJoinRequests(requestMap, params.type)\r\n      .subscribe({\r\n        next: result => {\r\n          this.state = 'ready';\r\n          displayResponseToast(this.actionFeedbackService, parseResults(result), params.type);\r\n          this.dataFetching.next({ groupId: this.groupId, includeSubgroup: this.includeSubgroup, sort: this.currentSort });\r\n        },\r\n        error: err => {\r\n          this.state = 'ready';\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n  }\r\n\r\n  onSubgroupSwitch(selectedIdx: number): void {\r\n    this.includeSubgroup = ensureDefined(this.subgroupSwitchItems[selectedIdx]).value;\r\n\r\n    this.columns = this.columns.filter(elm => elm !== groupColumn);\r\n    if (this.includeSubgroup) this.columns = [ groupColumn ].concat(this.columns);\r\n\r\n    this.dataFetching.next({ groupId: this.groupId, includeSubgroup: this.includeSubgroup, sort: this.currentSort });\r\n  }\r\n\r\n  onFetch(sort: string[]): void {\r\n    if (JSON.stringify(sort) !== JSON.stringify(this.currentSort)) {\r\n      this.currentSort = sort;\r\n      this.dataFetching.next({ groupId: this.groupId, includeSubgroup: this.includeSubgroup, sort: this.currentSort });\r\n    }\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { merge, of, Subject } from 'rxjs';\r\nimport { switchMap, map } from 'rxjs/operators';\r\nimport { GridColumn } from 'src/app/modules/shared-components/components/grid/grid.component';\r\nimport { displayResponseToast } from 'src/app/modules/group/components/pending-request/pending-request-response-handling';\r\nimport { fetchingState, readyState } from 'src/app/shared/helpers/state';\r\nimport { GetRequestsService, PendingRequest } from '../../http-services/get-requests.service';\r\nimport { Action, parseGroupInvitationResults, RequestActionsService } from '../../http-services/request-actions.service';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'alg-user-group-invitations',\r\n  templateUrl: './user-group-invitations.component.html',\r\n  styleUrls: [ './user-group-invitations.component.scss' ]\r\n})\r\nexport class UserGroupInvitationsComponent implements OnDestroy, OnInit {\r\n  requests: PendingRequest[] = [];\r\n\r\n  readonly columns: GridColumn[] = [\r\n    { field: 'group.name', header: $localize`TITLE` },\r\n    { field: 'group.type', header: $localize`TYPE` },\r\n    { field: 'at', header: $localize`REQUESTED ON` },\r\n  ];\r\n\r\n  state: 'fetching' | 'processing' | 'ready' | 'fetchingError' = 'fetching';\r\n  currentSort: string[] = [];\r\n\r\n  private dataFetching = new Subject<{ sort: string[] }>();\r\n\r\n  constructor(\r\n    private getRequestsService: GetRequestsService,\r\n    private requestActionService: RequestActionsService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {\r\n    this.dataFetching.pipe(\r\n      switchMap(params =>\r\n        merge(\r\n          of(fetchingState()),\r\n          this.getRequestsService.getGroupInvitations(params.sort)\r\n            .pipe(map(readyState))\r\n        )\r\n      )\r\n    ).subscribe({\r\n      next: state => {\r\n        this.state = state.tag;\r\n        if (state.isReady) {\r\n          this.requests = state.data;\r\n        }\r\n      },\r\n      error: _err => {\r\n        this.state = 'fetchingError';\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.dataFetching.next({ sort: this.currentSort });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dataFetching.complete();\r\n  }\r\n\r\n  onProcessRequests(params: { data: PendingRequest[], type: Action }): void {\r\n    this.state = 'processing';\r\n    this.requestActionService.processGroupInvitations(params.data.map(r => r.group.id), params.type)\r\n      .subscribe({\r\n        next: result => {\r\n          this.state = 'ready';\r\n          displayResponseToast(this.actionFeedbackService, parseGroupInvitationResults(result), params.type);\r\n          this.dataFetching.next({ sort: this.currentSort });\r\n        },\r\n        error: err => {\r\n          this.state = 'ready';\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n  }\r\n\r\n  onFetch(sort: string[]): void {\r\n    if (JSON.stringify(sort) !== JSON.stringify(this.currentSort)) {\r\n      this.currentSort = sort;\r\n      this.dataFetching.next({ sort: this.currentSort });\r\n    }\r\n  }\r\n}\r\n","<alg-pending-request\r\n  i18n-label label=\"Pending invitations\"\r\n  [state]=\"state\"\r\n  [columns]=\"columns\"\r\n  [requests]=\"requests\"\r\n  (sort)=\"onFetch($event)\"\r\n  (processRequests)=\"onProcessRequests($event)\"\r\n>\r\n</alg-pending-request>\r\n","<alg-error\r\n    *ngIf=\"state === 'error'; else noError\"\r\n    class=\"dark\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    i18n-message message=\"Error while loading the group you manage\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"fetchData()\"\r\n></alg-error>\r\n\r\n<ng-template #noError>\r\n  <p-table\r\n    #table\r\n    class=\"alg-table --managed-group-list\"\r\n    [value]=\"data\"\r\n    [customSort]=\"true\"\r\n    sortMode=\"multiple\"\r\n    [loading]=\"state === 'fetching'\"\r\n  >\r\n    <ng-template pTemplate=\"header\" let-columns>\r\n      <tr *ngIf=\"data.length > 0\">\r\n        <th i18n>Name</th>\r\n        <th class=\"small\" i18n>Type</th>\r\n        <th i18n>Can Manage</th>\r\n        <th class=\"small\" i18n>Can Watch Members</th>\r\n        <th class=\"small\" i18n>Can Grant Group Access</th>\r\n      </tr>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"body\" let-group>\r\n      <tr>\r\n        <td>\r\n          <a class=\"alg-link\" routerLink=\"../by-id/{{ group.id }}/details\">{{ group.name }}</a>\r\n        </td>\r\n        <td>{{ getType(group.type) }}</td>\r\n        <td>{{ getCanManage(group.canManage) }}</td>\r\n        <td>\r\n          <span class=\"table-icon\"\r\n            [ngClass]=\"{\r\n            locked: group.canWatchMembers,\r\n            unlocked: !group.canWatchMembers\r\n          }\">\r\n            <i *ngIf=\"!group.canWatchMembers\" class=\"fa fa-times\"></i>\r\n            <i *ngIf=\"group.canWatchMembers\" class=\"fa fa-check\"></i>\r\n          </span>\r\n        </td>\r\n        <td>\r\n          <span class=\"table-icon\"\r\n                [ngClass]=\"{\r\n                locked: group.canGrantGroupAccess,\r\n                unlocked: !group.canGrantGroupAccess\r\n              }\">\r\n              <i *ngIf=\"!group.canGrantGroupAccess\" class=\"fa fa-times\"></i>\r\n              <i *ngIf=\"group.canGrantGroupAccess\" class=\"fa fa-check\"></i>\r\n            </span>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"emptymessage\" let-columns>\r\n      <tr>\r\n        <td [attr.colspan]=\"columns?.length\">\r\n          <p class=\"empty-message\" i18n>You do not manage any group</p>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </p-table>\r\n</ng-template>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Group, GroupType, ManagedGroupsService, ManageType } from '../../../../core/http-services/managed-groups.service';\r\n\r\n@Component({\r\n  selector: 'alg-managed-group-list',\r\n  templateUrl: './managed-group-list.component.html',\r\n  styleUrls: [ './managed-group-list.component.scss' ],\r\n})\r\nexport class ManagedGroupListComponent implements OnInit {\r\n\r\n  state: 'error' | 'ready' | 'fetching' = 'fetching';\r\n  currentSort: string[] = [];\r\n\r\n  data: Group[] = [];\r\n\r\n  constructor(private managedGroupService: ManagedGroupsService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData(): void {\r\n    this.state = 'fetching';\r\n    this.managedGroupService.getManagedGroups().subscribe({\r\n      next: data => {\r\n        this.state = 'ready';\r\n        this.data = data;\r\n      },\r\n      error: _err => this.state = 'error',\r\n    });\r\n  }\r\n\r\n  getType(value: GroupType): string {\r\n    switch (value) {\r\n      case 'Class':\r\n        return $localize`Class`;\r\n      case 'Base':\r\n        return $localize`Base`;\r\n      case 'Club':\r\n        return $localize`Club`;\r\n      case 'Friends':\r\n        return $localize`Friends`;\r\n      case 'Session':\r\n        return $localize`Session`;\r\n      case 'Team':\r\n        return $localize`Team`;\r\n      default:\r\n        return $localize`Other`;\r\n    }\r\n  }\r\n\r\n  getCanManage(value: ManageType): string {\r\n    switch (value) {\r\n      case 'memberships':\r\n        return $localize`Memberships`;\r\n      case 'memberships_and_group':\r\n        return $localize`Memberships & Group`;\r\n      default:\r\n        return $localize`None`;\r\n    }\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ActionResponse, assertSuccess, SimpleActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\n\r\ninterface NewGroupData {\r\n  id: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupCreationService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  create(name: string, type: 'Class'|'Team'|'Club'|'Friends'|'Other'|'Session'): Observable<string> {\r\n    const body = {\r\n      name: name,\r\n      type: type\r\n    };\r\n    return this.http\r\n      .post<ActionResponse<NewGroupData>>(`${appConfig.apiUrl}/groups`, body, {})\r\n      .pipe(\r\n        map(successData),\r\n        map(response => response.id),\r\n      );\r\n  }\r\n\r\n  addSubgroup(parentId: string, childId: string): Observable<void> {\r\n    return this.http\r\n      .post<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${parentId}/relations/${childId}`, null, {})\r\n      .pipe(map(assertSuccess));\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { AddedContent, NewContentType } from 'src/app/modules/shared-components/components/add-content/add-content.component';\r\nimport { GroupCreationService } from '../../http-services/group-creation.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { GroupRouter } from 'src/app/shared/routing/group-router';\r\nimport { rawGroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\ntype GroupType = 'Class'|'Team'|'Club'|'Friends'|'Other'|'Session';\r\n\r\n@Component({\r\n  selector: 'alg-add-group',\r\n  templateUrl: 'add-group.component.html',\r\n  styleUrls: [ 'add-group.component.scss' ],\r\n})\r\nexport class AddGroupComponent {\r\n  allowedNewGroupTypes: NewContentType<GroupType>[] = [\r\n    {\r\n      type: 'Class',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Class`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Club',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Club`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Friends',\r\n      icon: 'fa fa-users',\r\n      title: $localize`Friends`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Other',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Other`,\r\n      description: '',\r\n    },\r\n  ];\r\n\r\n  state: 'addingGroup' | 'ready' = 'ready';\r\n\r\n  constructor(\r\n    private groupCreationService: GroupCreationService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private groupRouter: GroupRouter,\r\n  ) {}\r\n\r\n  addChild(group: AddedContent<GroupType>): void {\r\n    this.state = 'addingGroup';\r\n    this.groupCreationService.create(group.title, group.type).subscribe({\r\n      next: createdId => {\r\n        this.state = 'ready';\r\n        this.actionFeedbackService.success($localize`Group successfully created`);\r\n        this.groupRouter.navigateTo(rawGroupRoute({ ...group, id: createdId }));\r\n      },\r\n      error: err => {\r\n        this.state = 'ready';\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n}\r\n","<alg-section icon=\"fa fa-sign-in-alt\" i18n-label label=\"Create a new group\">\r\n  <alg-add-content\r\n      [allowedTypesForNewContent]=\"allowedNewGroupTypes\"\r\n      (contentAdded)=\"addChild($event)\"\r\n      [loading]=\"state === 'addingGroup'\"\r\n      [showSearchUI]=\"false\"\r\n      i18n-inputCreatePlaceholder inputCreatePlaceholder=\"Enter a title to create a new group\"\r\n  ></alg-add-content>\r\n</alg-section>\r\n","<div class=\"alg-page-header my-groups\" *ngIf=\"!(fullFrame$ | async)?.active\">\r\n  <span class=\"alg-page-header-title\" i18n>My groups</span>\r\n  <span class=\"alg-page-header-subtitle\" i18n>All the groups you have joined and you manage</span>\r\n</div>\r\n\r\n<alg-user-group-invitations></alg-user-group-invitations>\r\n\r\n<alg-pending-join-requests [showSwitch]=\"false\"></alg-pending-join-requests>\r\n\r\n<div class=\"bg-white\">\r\n  <alg-section i18n-label label=\"The groups you joined\" icon=\"fa fa-users\">\r\n    <alg-joined-group-list #joinedGroupList></alg-joined-group-list>\r\n  </alg-section>\r\n  <alg-access-code-view\r\n      sectionStyleClass=\"no-rounded-borders\"\r\n      i18n-sectionLabel sectionLabel=\"Join a group by code\"\r\n      i18n-buttonLabel=\"Button label for joining a group\" buttonLabel=\"Join\"\r\n      (groupJoined)=\"onGroupJoined()\"\r\n  ></alg-access-code-view>\r\n  <alg-section label=\"The groups you manage\" icon=\"fa fa-users\">\r\n    <alg-managed-group-list></alg-managed-group-list>\r\n  </alg-section>\r\n</div>\r\n\r\n<div class=\"bg-section\">\r\n  <alg-add-group></alg-add-group>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnDestroy, ViewChild } from '@angular/core';\r\nimport { myGroupsInfo } from 'src/app/shared/models/content/group-info';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\nimport { JoinedGroupListComponent } from '../../components/joined-group-list/joined-group-list.component';\r\nimport { LayoutService } from '../../../../shared/services/layout.service';\r\n\r\n@Component({\r\n  selector: 'alg-my-groups',\r\n  templateUrl: './my-groups.component.html',\r\n  styleUrls: [ './my-groups.component.scss' ]\r\n})\r\nexport class MyGroupsComponent implements OnDestroy {\r\n  @ViewChild('joinedGroupList') joinedGroupList?: JoinedGroupListComponent;\r\n\r\n  fullFrame$ = this.layoutService.fullFrame$;\r\n\r\n  constructor(\r\n    private currentContent: CurrentContentService,\r\n    private layoutService: LayoutService,\r\n  ) {\r\n    this.layoutService.configure({ fullFrameActive: false });\r\n    this.currentContent.replace(myGroupsInfo({\r\n      title: $localize`My groups`,\r\n      breadcrumbs: {\r\n        category: $localize`My groups`,\r\n        path: [],\r\n        currentPageIdx: -1\r\n      }\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.currentContent.clear();\r\n  }\r\n\r\n  onGroupJoined(): void {\r\n    this.joinedGroupList?.refresh();\r\n    this.currentContent.forceNavMenuReload();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { groupRoute, GroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\n\r\nconst breadcrumbDecoder = D.struct({\r\n  id: D.string,\r\n  name: D.string,\r\n  type: D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'User', 'Session', 'Base'),\r\n});\r\n\r\ntype Breadcrumb = D.TypeOf<typeof breadcrumbDecoder>;\r\n\r\nexport interface GroupBreadcrumb extends Breadcrumb {\r\n  route: GroupRoute,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupBreadcrumbsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getBreadcrumbs(route: GroupRoute): Observable<GroupBreadcrumb[]> {\r\n    const groupIds = [ ...route.path, route.id ];\r\n\r\n    return this.http.get<unknown>(`${appConfig.apiUrl}/groups/${groupIds.join('/')}/breadcrumbs`).pipe(\r\n      decodeSnakeCase(D.array(breadcrumbDecoder)),\r\n      map(breadcrumbs => breadcrumbs.map((breadcrumb, index) => ({\r\n        ...breadcrumb,\r\n        route: groupRoute(breadcrumb, breadcrumbs.slice(0, index).map(({ id }) => id)),\r\n      }))),\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { forkJoin, ReplaySubject, Subject } from 'rxjs';\r\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\nimport { GroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { GetGroupBreadcrumbsService, GroupBreadcrumb } from '../http-services/get-group-breadcrumbs.service';\r\nimport { GetGroupByIdService, Group } from '../http-services/get-group-by-id.service';\r\n\r\nexport interface GroupData {\r\n  route: GroupRoute,\r\n  group: Group,\r\n  breadcrumbs: GroupBreadcrumb[],\r\n}\r\n\r\n/**\r\n * A datasource which allows fetching a group using a proper state and sharing it among several components.\r\n * The only interactions with this class are:\r\n * - trigger actions by calling public functions\r\n * - listen state change by listening the state\r\n */\r\n@Injectable()\r\nexport class GroupDataSource implements OnDestroy {\r\n\r\n  private fetchOperation = new ReplaySubject<GroupRoute>(1); // trigger item fetching\r\n  private refresh$ = new Subject<void>();\r\n\r\n  state$ = this.fetchOperation.pipe(\r\n    // switchMap does cancel the previous ongoing processing if a new one comes\r\n    // on new fetch operation to be done: set \"fetching\" state and fetch the data which will result in a ready or error state\r\n    switchMap(route => forkJoin({\r\n      group: this.getGroupByIdService.get(route.id),\r\n      breadcrumbs: this.getGroupBreadcrumbsService.getBreadcrumbs(route),\r\n    }).pipe(\r\n      map(({ group, breadcrumbs }) => ({ route, group, breadcrumbs })),\r\n      mapToFetchState({ resetter: this.refresh$ }),\r\n    )),\r\n    shareReplay(1),\r\n  );\r\n\r\n  constructor(\r\n    private getGroupByIdService: GetGroupByIdService,\r\n    private getGroupBreadcrumbsService: GetGroupBreadcrumbsService,\r\n  ) {}\r\n\r\n  fetchGroup(route: GroupRoute): void {\r\n    this.fetchOperation.next(route);\r\n  }\r\n\r\n  // If (and only if) a group is currently fetched (so we are not currently loading or in error), refetch it.\r\n  refetchGroup(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n    this.fetchOperation.complete();\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <div class=\"spinner-container\" *ngIf=\"state.isFetching\">\r\n    <alg-loading size=\"small\"></alg-loading>\r\n  </div>\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    i18n-message message=\"Error while loading the activities\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n  <div *ngIf=\"state.isReady && state.data.length === 0\" i18n>\r\n    There are no activities\r\n  </div>\r\n  <p-table\r\n      class=\"alg-table --overlay-panel\"\r\n      [value]=\"state.data\"\r\n      *ngIf=\"state.isReady && state.data.length > 0\"\r\n  >\r\n    <ng-template pTemplate=\"body\" let-item>\r\n      <tr>\r\n        <td><span class=\"type\">{{ item.activity.type }}</span></td>\r\n        <td>\r\n          <a class=\"alg-link dots\" [routerLink]=\"item.activity | rawItemLink\">\r\n            {{ item.activity.string.title }} ({{ item.name }})\r\n          </a>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </p-table>\r\n</ng-container>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { ItemNavigationService } from '../../../../core/http-services/item-navigation.service';\r\nimport { switchMap, filter, map } from 'rxjs/operators';\r\nimport { isNotNull } from '../../../../shared/helpers/null-undefined-predicates';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { Subject } from 'rxjs';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\n\r\n@Component({\r\n  selector: 'alg-suggestion-of-activities',\r\n  templateUrl: './suggestion-of-activities.component.html',\r\n  styleUrls: [ './suggestion-of-activities.component.scss' ],\r\n})\r\nexport class SuggestionOfActivitiesComponent implements OnDestroy {\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.groupWatchingService.watchedGroup$.pipe(\r\n    filter(isNotNull),\r\n    switchMap(watchedGroup =>\r\n      this.itemNavigationService.getRootActivities(watchedGroup.route.id).pipe(\r\n        map(rootActivities => [\r\n          ...rootActivities.filter(act => act.groupId === watchedGroup.route.id),\r\n          ...rootActivities.filter(act => act.groupId !== watchedGroup.route.id),\r\n        ].slice(0, 4))\r\n      )\r\n    ),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private groupWatchingService: GroupWatchingService,\r\n    private itemNavigationService: ItemNavigationService) {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n}\r\n","<div class=\"group-header-container\">\r\n  <div class=\"group-header unfolded\">\r\n    <div class=\"user-info\">\r\n      <div class=\"user-name\">\r\n        <span>{{ groupData?.group?.name }}</span>\r\n      </div>\r\n    </div>\r\n    <ng-container *ngIf=\"navigationNeighbors$ | async as navigationNeighbors\">\r\n      <alg-page-navigator\r\n        *ngIf=\"!!groupWithManagement\"\r\n        [allowWatching]=\"!!groupWithManagement.currentUserCanWatchMembers\"\r\n        [isWatched]=\"!!(isCurrentGroupWatched$ | async)\"\r\n        [allowFullScreen]=\"false\"\r\n        [navigationMode]=\"{\r\n          parent: !!navigationNeighbors?.isReady && !!navigationNeighbors?.data?.parent,\r\n          left: !!navigationNeighbors?.isReady && !!navigationNeighbors?.data?.previous,\r\n          right: !!navigationNeighbors?.isReady && !!navigationNeighbors?.data?.next\r\n        }\"\r\n        (parent)=\"navigationNeighbors?.data?.parent?.navigateTo()\"\r\n        (left)=\"navigationNeighbors?.data?.previous?.navigateTo()\"\r\n        (right)=\"navigationNeighbors?.data?.next?.navigateTo()\"\r\n        (edit)=\"onEditButtonClicked()\"\r\n        (watch)=\"onStartWatchButtonClicked($event)\"\r\n        (stopWatch)=\"onStopWatchButtonClicked()\"\r\n      ></alg-page-navigator>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<p-overlayPanel\r\n    #op\r\n    [style]=\"{ width: '450px' }\"\r\n    appendTo=\"body\"\r\n>\r\n  <alg-suggestion-of-activities *ngIf=\"op.overlayVisible\"></alg-suggestion-of-activities>\r\n</p-overlayPanel>\r\n","import { Component, Input, OnChanges, OnDestroy, ViewChild } from '@angular/core';\r\nimport { ModeAction, ModeService } from 'src/app/shared/services/mode.service';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { withManagementAdditions, ManagementAdditions } from '../../helpers/group-management';\r\nimport { map } from 'rxjs/operators';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\nimport { ReplaySubject, combineLatest } from 'rxjs';\r\nimport { GroupNavTreeService } from '../../../../core/services/navigation/group-nav-tree.service';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-header',\r\n  templateUrl: './group-header.component.html',\r\n  styleUrls: [ './group-header.component.scss' ],\r\n})\r\nexport class GroupHeaderComponent implements OnChanges, OnDestroy {\r\n  @Input() groupData?: GroupData;\r\n\r\n  @ViewChild('op') op?: OverlayPanel;\r\n\r\n  private readonly group$ = new ReplaySubject<Group>(1);\r\n\r\n  groupWithManagement?: Group & ManagementAdditions;\r\n  isCurrentGroupWatched$ = combineLatest([ this.groupWatchingService.watchedGroup$, this.group$ ]).pipe(\r\n    map(([ watchedGroup, group ]) => !!(watchedGroup && watchedGroup.route.id === group.id)),\r\n  );\r\n\r\n  navigationNeighbors$ = this.groupNavTreeService.navigationNeighbors$;\r\n\r\n  constructor(\r\n    private modeService: ModeService,\r\n    private groupWatchingService: GroupWatchingService,\r\n    private groupNavTreeService: GroupNavTreeService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    this.groupWithManagement = this.groupData?.group ? withManagementAdditions(this.groupData.group) : undefined;\r\n\r\n    if (this.groupData) {\r\n      this.group$.next(this.groupData.group);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.group$.complete();\r\n  }\r\n\r\n  onEditButtonClicked(): void {\r\n    this.modeService.modeActions$.next(ModeAction.StartEditing);\r\n  }\r\n\r\n  onStartWatchButtonClicked(event: Event): void {\r\n    if (!this.groupData?.group) throw new Error(\"unexpected group not set in 'onWatchButtonClicked'\");\r\n    this.groupWatchingService.startGroupWatching(this.groupData.route, this.groupData.group);\r\n    this.openSuggestionOfActivitiesOverlayPanel(event);\r\n  }\r\n\r\n  onStopWatchButtonClicked(): void {\r\n    this.op?.hide();\r\n    this.groupWatchingService.stopWatching();\r\n  }\r\n\r\n  openSuggestionOfActivitiesOverlayPanel(event: Event): void {\r\n    this.op?.show(event);\r\n\r\n    // Align method needs to be called because top banner of observing group\r\n    // changes position of the page and as result we have a bug with wrong tooltip positioning.\r\n    // Async function/wrapper setTimeout - guarantees to call align method after position of page changed\r\n    setTimeout(() => {\r\n      this.op?.align();\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-loading size=\"medium\" *ngIf=\"state.isFetching && !state.data\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    [class.dark]=\"$any(state).error.status !== 403\"\r\n    [icon]=\"$any(state).error.status !== 403 ? 'fa fa-exclamation-triangle' : undefined\"\r\n    [showRefreshButton]=\"$any(state).error.status !== 403\"\r\n    (refresh)=\"refresh()\"\r\n  >\r\n    <span i18n *ngIf=\"$any(state).error.status === 403; else unknownError\">\r\n      You are not allowed to see activities of this user.\r\n    </span>\r\n    <ng-template #unknownError>\r\n      <span i18n>Unable to load the recent activity</span>\r\n    </ng-template>\r\n  </alg-error>\r\n\r\n  <ng-container *ngIf=\"state.data\">\r\n    <p-table class=\"alg-table\" [columns]=\"state.data.columns\" [value]=\"state.data.rowData\" [loading]=\"state.isFetching\">\r\n      <ng-template pTemplate=\"header\" let-rowData let-columns>\r\n        <tr>\r\n          <th [colSpan]=\"columns.length\">\r\n            <div class=\"header-container header-refresh\">\r\n              <p-button icon=\"pi pi-refresh\" (click)=\"refresh()\"></p-button>\r\n            </div>\r\n          </th>\r\n        </tr>\r\n        <tr *ngIf=\"rowData.length > 0\">\r\n          <ng-container *ngFor=\"let col of columns\">\r\n            <th>\r\n              <div class=\"header-container\">\r\n                {{ col.header }}\r\n              </div>\r\n            </th>\r\n          </ng-container>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template\r\n          pTemplate=\"body\"\r\n          let-rowData\r\n          let-columns=\"columns\"\r\n          let-index=\"rowIndex\"\r\n      >\r\n        <tr>\r\n          <td *ngFor=\"let col of columns\" (mouseleave)=\"onMouseLeave($event, col.field)\">\r\n            <ng-container [ngSwitch]=\"col.field\">\r\n              <ng-container *ngSwitchCase=\"'activityType'\">\r\n                {{ rowData.activityType | logActionDisplay : rowData.score }}\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'item.string.title'\">\r\n                <a\r\n                  class=\"alg-link\"\r\n                  [ngClass]=\"{'disabled': !rowData.item}\"\r\n                  [routerLink]=\"rowData.item | rawItemLink\"\r\n                  (mouseenter)=\"onMouseEnter($event, rowData.item.id, index)\"\r\n                  #contentRef\r\n                >\r\n                  {{ rowData.item.string.title }}\r\n                </a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'item.user'\">\r\n                <a class=\"alg-link\" [routerLink]=\"rowData.user | groupLink\">{{ rowData.user | userCaption }}</a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'at'\">\r\n                {{ rowData.at | date:'short' }}\r\n              </ng-container>\r\n              <ng-container *ngSwitchDefault>\r\n                {{ rowData[col.field] }}\r\n              </ng-container>\r\n            </ng-container>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"emptymessage\" let-columns>\r\n        <tr>\r\n          <td [attr.colspan]=\"columns.length\">\r\n            <span i18n>There is no progress to report for this group/user.</span>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </p-table>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<p-overlayPanel\r\n    styleClass=\"alg-path-suggestion-overlay\"\r\n    #op\r\n>\r\n  <ng-container *ngIf=\"op.overlayVisible\">\r\n    <alg-path-suggestion [itemId]=\"(showOverlay$ | async)?.itemId\" (mouseleave)=\"closeOverlay()\"></alg-path-suggestion>\r\n  </ng-container>\r\n</p-overlayPanel>\r\n","import { Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject, debounceTime, merge, Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, shareReplay, switchMap } from 'rxjs/operators';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { ActivityLog, ActivityLogService } from '../../../../shared/http-services/activity-log.service';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { canCloseOverlay } from '../../../../shared/helpers/overlay';\r\n\r\ninterface Column {\r\n  field: string,\r\n  header: string,\r\n}\r\n\r\ninterface Data {\r\n  columns: Column[],\r\n  rowData: ActivityLog[],\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-group-log-view',\r\n  templateUrl: './group-log-view.component.html',\r\n  styleUrls: [ './group-log-view.component.scss' ],\r\n})\r\nexport class GroupLogViewComponent implements OnChanges, OnDestroy {\r\n\r\n  @Input() groupId?: string;\r\n  @Input() showUserColumn = true;\r\n\r\n  @ViewChild('op') op?: OverlayPanel;\r\n  @ViewChildren('contentRef') contentRef?: QueryList<ElementRef<HTMLElement>>;\r\n\r\n  private readonly groupId$ = new ReplaySubject<string | undefined>(1);\r\n  private readonly refresh$ = new Subject<void>();\r\n  readonly state$ = this.groupId$.pipe(\r\n    switchMap((groupId: string | undefined) => this.getData$(groupId)),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n  private readonly showOverlaySubject$ = new BehaviorSubject<{ event: Event, itemId: string, target: HTMLElement }|undefined>(undefined);\r\n  showOverlay$ = merge(\r\n    this.showOverlaySubject$.pipe(debounceTime(750)),\r\n    this.showOverlaySubject$.pipe(filter(value => !value)), // this allows to close the overlay immediately and not after debounce delay\r\n  ).pipe(distinctUntilChanged(), shareReplay(1));\r\n\r\n  private readonly showOverlaySubscription = this.showOverlay$.subscribe(data => {\r\n    data ? this.op?.toggle(data.event, data.target) : this.op?.hide();\r\n  });\r\n\r\n  constructor(\r\n    private activityLogService: ActivityLogService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    this.groupId$.next(this.groupId);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.groupId$.complete();\r\n    this.refresh$.complete();\r\n    this.showOverlaySubject$.complete();\r\n    this.showOverlaySubscription.unsubscribe();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  private getData$(groupId?: string): Observable<Data> {\r\n    return this.activityLogService.getAllActivityLog(groupId).pipe(\r\n      map((data: ActivityLog[]) => ({\r\n        columns: this.getLogColumns(),\r\n        rowData: data\r\n      }))\r\n    );\r\n  }\r\n\r\n  private getLogColumns(): Column[] {\r\n    const columns = [\r\n      {\r\n        field: 'activityType',\r\n        header: $localize`Action`,\r\n      },\r\n      {\r\n        field: 'item.string.title',\r\n        header: $localize`Content`,\r\n      },\r\n      {\r\n        field: 'item.user',\r\n        header: $localize`:User column label:User`,\r\n        disabled: !this.showUserColumn,\r\n      },\r\n      {\r\n        field: 'at',\r\n        header: $localize`Time`,\r\n      }\r\n    ];\r\n\r\n    return columns.filter(col => !col.disabled).map(col => ({\r\n      field: col.field,\r\n      header: col.header,\r\n    }));\r\n  }\r\n\r\n  onMouseEnter(event: Event, itemId: string, index: number): void {\r\n    const targetRef = this.contentRef?.get(index);\r\n    if (!targetRef) {\r\n      throw new Error('Unexpected: Target is not found');\r\n    }\r\n    this.showOverlaySubject$.next({ event, itemId, target: targetRef.nativeElement });\r\n  }\r\n\r\n  onMouseLeave(event: MouseEvent, field: string): void {\r\n    if (field === 'item.string.title' && canCloseOverlay(event)) {\r\n      this.closeOverlay();\r\n    }\r\n  }\r\n\r\n  closeOverlay(): void {\r\n    this.showOverlaySubject$.next(undefined);\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"group\">\r\n  <p>\r\n    <ng-container *ngIf=\"group.isMembershipLocked; else allow\" i18n>\r\n      You are currently not allowed to leave this group.\r\n    </ng-container>\r\n    <ng-template #allow>\r\n      <ng-container i18n>\r\n        You can freely leave this group. Note that you may lose access to content if this group was granting some permissions to its members.\r\n      </ng-container>\r\n    </ng-template>\r\n  </p>\r\n\r\n  <div class=\"button\">\r\n    <p-button\r\n      styleClass=\"alg-button p-button-rounded-full\"\r\n      icon=\"fa fa-times\"\r\n      i18n-label label=\"Leave this group\"\r\n      (onClick)=\"leaveGroup()\"\r\n      [disabled]=\"group.isMembershipLocked\"\r\n    ></p-button>\r\n  </div>\r\n</ng-container>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GroupLeaveService } from '../../../../core/http-services/group-leave.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-leave',\r\n  templateUrl: './group-leave.component.html',\r\n  styleUrls: [ './group-leave.component.scss' ],\r\n})\r\nexport class GroupLeaveComponent {\r\n  @Output() leave = new EventEmitter<void>();\r\n\r\n  @Input() group?: Group;\r\n\r\n  constructor(\r\n    private groupLeaveService: GroupLeaveService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {\r\n  }\r\n\r\n  leaveGroup(): void {\r\n    if (!this.group) {\r\n      throw new Error('Unexpected: missed group');\r\n    }\r\n\r\n    this.groupLeaveService.leave(this.group.id).subscribe({\r\n      next: () => {\r\n        this.actionFeedbackService.success($localize`You've left group`);\r\n        this.leave.emit();\r\n      },\r\n      error: err => {\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      },\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"group\">\r\n  <alg-section icon=\"fa fa-users\" i18n-label label=\"Presentation\">\r\n    <p *ngIf=\"group.description ; else noDesc\">{{ group.description }}</p>\r\n    <ng-template #noDesc i18n>This group has no description</ng-template>\r\n  </alg-section>\r\n\r\n  <alg-section icon=\"fa fa-chart-line\" i18n-label label=\"Progress\" *ngIf=\"group.currentUserCanWatchMembers\">\r\n    <alg-group-log-view [groupId]=\"group.id\"></alg-group-log-view>\r\n  </alg-section>\r\n\r\n  <alg-section icon=\"fa fa-sign-out-alt\" i18n-label label=\"Leave the group?\" *ngIf=\"group.currentUserMembership !== 'none'\">\r\n    <alg-group-leave [group]=\"group\" (leave)=\"onLeave()\"></alg-group-leave>\r\n  </alg-section>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'alg-group-overview',\r\n  templateUrl: './group-overview.component.html',\r\n  styleUrls: [ './group-overview.component.scss' ],\r\n})\r\nexport class GroupOverviewComponent {\r\n  @Output() groupRefreshRequired = new EventEmitter<void>();\r\n  @Output() leftGroup = new EventEmitter<void>();\r\n\r\n  @Input() group?: Group;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  onLeave(): void {\r\n    if (this.group?.isPublic) {\r\n      this.groupRefreshRequired.emit();\r\n      return;\r\n    }\r\n    this.leftGroup.emit();\r\n    void this.router.navigate([ '/groups/mine' ]);\r\n  }\r\n\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ensureDefined } from 'src/app/shared/helpers/assert';\r\n\r\nexport enum TypeFilter {\r\n  Groups = 'groups',\r\n  Sessions = 'sessions',\r\n  Teams = 'teams',\r\n  Users = 'users',\r\n}\r\nexport interface Filter {\r\n  directChildren: boolean,\r\n  type: TypeFilter,\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-group-composition-filter',\r\n  templateUrl: './group-composition-filter.component.html',\r\n  styleUrls: [ './group-composition-filter.component.scss' ]\r\n})\r\nexport class GroupCompositionFilterComponent implements OnInit{\r\n\r\n  @Input() defaultValue?: Filter;\r\n\r\n  @Output() change = new EventEmitter<Filter>();\r\n\r\n  value: Filter = { type: TypeFilter.Users, directChildren: true };\r\n\r\n  selectedChildrenFilter = 0;\r\n  selectedTypeFilter = 0;\r\n\r\n  readonly childrenFilters: { label:string, value: boolean }[] = [\r\n    {\r\n      label: $localize`Direct Children Only`,\r\n      value: true,\r\n    },\r\n    {\r\n      label: $localize`All Descendants`,\r\n      value: false,\r\n    },\r\n  ];\r\n\r\n  readonly allDescendantsTypeFilters: { icon: string, label: string, value: TypeFilter }[] = [\r\n    {\r\n      icon: 'fa fa-users',\r\n      label: $localize`teams`,\r\n      value: TypeFilter.Teams\r\n    },\r\n    {\r\n      icon: 'fa fa-user',\r\n      label: $localize`users`,\r\n      value: TypeFilter.Users\r\n    },\r\n  ];\r\n\r\n  readonly directChildrenTypeFilters: { icon: string, label: string, value: TypeFilter }[] = [\r\n    {\r\n      icon: 'fa fa-users',\r\n      label: $localize`sub-groups`,\r\n      value: TypeFilter.Groups\r\n    },\r\n    {\r\n      icon: 'fa fa-calendar',\r\n      label: $localize`sessions`,\r\n      value: TypeFilter.Sessions\r\n    },\r\n    {\r\n      icon: 'fa fa-users',\r\n      label: $localize`teams`,\r\n      value: TypeFilter.Teams\r\n    },\r\n    {\r\n      icon: 'fa fa-user',\r\n      label: $localize`users`,\r\n      value: TypeFilter.Users\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.defaultValue) {\r\n      this.setFilter(this.defaultValue);\r\n    }\r\n  }\r\n\r\n  public setFilter(filter: Filter): void {\r\n    this.value = filter;\r\n    this.selectedChildrenFilter = this.childrenFilters.findIndex(childrenFilter => childrenFilter.value === this.value.directChildren);\r\n    const typeFilters = this.value.directChildren ? this.directChildrenTypeFilters : this.allDescendantsTypeFilters;\r\n    this.selectedTypeFilter = Math.max(0, typeFilters.findIndex(typeFilter => typeFilter.value === this.value.type));\r\n  }\r\n\r\n  onTypeFilterChanged(index: number): void {\r\n    const typeFilters = this.value.directChildren ? this.directChildrenTypeFilters : this.allDescendantsTypeFilters;\r\n    this.selectedTypeFilter = index;\r\n    this.value.type = ensureDefined(typeFilters[index]).value;\r\n    this.change.emit(this.value);\r\n  }\r\n\r\n  onChildrenFilterChanged(index: number): void {\r\n    this.value.directChildren = ensureDefined(this.childrenFilters[index]).value;\r\n    this.selectedChildrenFilter = index;\r\n\r\n    const typeFilters = this.value.directChildren ? this.directChildrenTypeFilters : this.allDescendantsTypeFilters;\r\n    this.selectedTypeFilter = typeFilters.findIndex(typeFilter => typeFilter.value ===\r\n      (this.value.type === 'teams' ? 'teams' : 'users'));\r\n    this.value.type = ensureDefined(typeFilters[this.selectedTypeFilter]).value;\r\n\r\n    this.change.emit(this.value);\r\n  }\r\n}\r\n","<div class=\"selection-tool\">\r\n  <alg-selection style=\"margin: 10px;\"\r\n    [items]=\"childrenFilters\"\r\n    [selected]=\"selectedChildrenFilter\"\r\n    (change)=\"onChildrenFilterChanged($event)\"\r\n  ></alg-selection>\r\n  <alg-selection\r\n    [items]=\"value.directChildren ? directChildrenTypeFilters : allDescendantsTypeFilters\"\r\n    [selected]=\"selectedTypeFilter\"\r\n    type=\"square\"\r\n    (change)=\"onTypeFilterChanged($event)\"\r\n  ></alg-selection>\r\n</div>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-group-no-permission',\r\n  templateUrl: './group-no-permission.component.html',\r\n  styleUrls: [ './group-no-permission.component.scss' ]\r\n})\r\nexport class GroupNoPermissionComponent {\r\n\r\n}\r\n","<p class=\"error alg-error-text\" i18n>You are not allowed to see this page.</p>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { SimpleActionResponse, assertSuccess } from 'src/app/shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupActionsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  updateGroup(id: string, changes: object): Observable<void> {\r\n    return this.http\r\n      .put<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${id}`, changes)\r\n      .pipe(\r\n        map(assertSuccess)\r\n      );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { SimpleActionResponse, assertSuccess } from 'src/app/shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\nexport interface NewCodeSuccessResponse {\r\n  code: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CodeActionsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createNewCode(id: string): Observable<string> {\r\n    return this.http\r\n      .post<NewCodeSuccessResponse|SimpleActionResponse>(`${appConfig.apiUrl}/groups/${id}/code`, null, {})\r\n      .pipe(\r\n        map(resp => {\r\n          const code = (resp as NewCodeSuccessResponse).code;\r\n          if (!code) throw new Error('The backend has returned an error (no code)');\r\n          return code;\r\n        })\r\n      );\r\n  }\r\n\r\n  removeCode(id: string): Observable<void> {\r\n    return this.http\r\n      .delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${id}/code`)\r\n      .pipe(\r\n        map(assertSuccess),\r\n      );\r\n  }\r\n\r\n}\r\n","<div class=\"code-generator\">\r\n  <span class=\"code\" [ngClass]=\"{'no-button': !showRefresh && !showRemove}\">{{code}}</span>\r\n  <span\r\n    *ngIf=\"showRefresh\"\r\n    class=\"refresh\"\r\n    [ngClass]=\"{'no-remove': !showRemove}\"\r\n    (click)=\"refreshCode()\"\r\n    i18n-pTooltip pTooltip=\"Generate a new code and reset expiration\"\r\n    tooltipPosition=\"top\"\r\n    tooltipEvent=\"hover\"\r\n  >\r\n    <i class=\"fa fa-redo\"></i>\r\n  </span>\r\n  <span\r\n    *ngIf=\"showRemove\"\r\n    class=\"remove\"\r\n    (click)=\"removeCode()\"\r\n    i18n-pTooltip pTooltip=\"Disable code access\"\r\n    tooltipPosition=\"top\"\r\n    tooltipEvent=\"hover\"\r\n  >\r\n    <i class=\"fa fa-times \"></i>\r\n  </span>\r\n</div>\r\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-code-token',\r\n  templateUrl: './code-token.component.html',\r\n  styleUrls: [ './code-token.component.scss' ],\r\n})\r\nexport class CodeTokenComponent {\r\n  @Input() showRefresh = true;\r\n  @Input() showRemove = false;\r\n  @Input() code = '...';\r\n\r\n  @Output() refresh = new EventEmitter<void>();\r\n  @Output() remove = new EventEmitter<void>();\r\n\r\n  refreshCode(): void {\r\n    this.refresh.emit();\r\n  }\r\n\r\n  removeCode(): void {\r\n    this.remove.emit();\r\n  }\r\n}\r\n","<div *ngIf=\"processing\" class=\"block-ui\"></div>\r\n<alg-section-paragraph\r\n  icon=\"fa fa-user-plus\"\r\n  i18n-label label=\"Let user join using a code\"\r\n  [collapsible]=\"true\"\r\n>\r\n  <div class=\"invitation-code\">\r\n    <span class=\"content-title\" i18n>Let users access this group using a password you send them.</span>\r\n\r\n    <div class=\"code-state\" *ngIf=\"codeInfo\">\r\n      <span class=\"label\" *ngIf=\"codeInfo.hasCodeNotSet\" i18n>There is currently no code set.</span>\r\n      <span class=\"label\" *ngIf=\"codeInfo.hasCodeUnused\" i18n>This code has not been used yet (or usage resetted).</span>\r\n      <span class=\"label\" *ngIf=\"codeInfo.hasUnexpiringCode\" i18n>This code can be used multiple times without expiring.</span>\r\n      <ng-container *ngIf=\"codeInfo.hasCodeInUse && codeInfo.durationSinceFirstCodeUse && codeInfo.durationBeforeCodeExpiration\">\r\n        <span class=\"label green\" i18n *ngIf=\"codeInfo.durationSinceFirstCodeUse.ms > 0; else disabledUntil\">\r\n          This code has been activated {{ codeInfo.durationSinceFirstCodeUse | toMin | number:'1.0-0' }} minutes ago,\r\n          it will be disabled in {{ codeInfo.durationBeforeCodeExpiration | toMin | number:'1.0-0' }} minutes.\r\n        </span>\r\n        <ng-template #disabledUntil>\r\n          <span class=\"label green\" i18n>This code will be disabled in {{ codeInfo.durationBeforeCodeExpiration | toMin | number:'1.0-0' }} minutes.</span>\r\n        </ng-template>\r\n      </ng-container>\r\n      <span class=\"label red\" *ngIf=\"!codeInfo.hasCodeNotSet && codeInfo.hasCodeExpired\" i18n>\r\n        This code has expired on {{ codeInfo.codeExpiration | date:'medium' }}\r\n      </span>\r\n      <p-button\r\n        i18n-label label=\"Generate a code\"\r\n        icon=\"fa fa-plus\"\r\n        styleClass=\"alg-button p-button-rounded\"\r\n        (onClick)=\"generateNewCode()\"\r\n        [disabled]=\"processing\"\r\n        *ngIf=\"codeInfo.hasCodeNotSet\"\r\n      ></p-button>\r\n    </div>\r\n\r\n    <div class=\"code-info\" *ngIf=\"group && group.code\">\r\n      <div class=\"code-show\">\r\n        <span class=\"label\" i18n>Code</span>\r\n        <alg-code-token\r\n          [code]=\"group.code\"\r\n          [showRefresh]=\"true\"\r\n          [showRemove]=\"true\"\r\n          (refresh)=\"generateNewCode()\"\r\n          (remove)=\"removeCode()\"\r\n        ></alg-code-token>\r\n      </div>\r\n      <div class=\"validity-selector\">\r\n        <span class=\"label\" i18n>Validity</span>\r\n        <alg-selection\r\n          [items]=\"codeLifetimeOptions\"\r\n          [selected]=\"selectedCodeLifetimeOption\"\r\n          (change)=\"changeCodeLifetime($event)\"\r\n        ></alg-selection>\r\n\r\n        <div class=\"duration-form-group\" *ngIf=\"selectedCodeLifetimeOption === customCodeLifetimeOption\">\r\n          <alg-duration\r\n            class=\"alg-duration\"\r\n            ngDefaultControl\r\n            layout=\"DHM\"\r\n            [(ngModel)]=\"codeLifetimeControlValue\"\r\n            #control=\"ngModel\"\r\n            required\r\n          ></alg-duration>\r\n          <p-button\r\n            icon=\"fa fa-check\"\r\n            styleClass=\"alg-button submit-duration-button\"\r\n            (onClick)=\"codeLifetimeControlValue && submitCodeLifetime(codeLifetimeControlValue.ms)\"\r\n            [disabled]=\"processing || !codeLifetimeControlValue || !control.dirty || codeLifetimeControlValue.ms === group.codeLifetime?.ms\"\r\n            [pTooltip]=\"durationTooltip\"\r\n            tooltipPosition=\"right\"\r\n            tooltipEvent=\"hover\"\r\n          ></p-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n</alg-section-paragraph>\r\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { Duration } from '../../../../shared/helpers/duration';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { codeInfo, CodeInfo } from '../../helpers/group-code';\r\nimport { GroupActionsService } from '../../http-services/group-actions.service';\r\nimport { CodeActionsService } from '../../http-services/code-actions.service';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { of } from 'rxjs';\r\nimport { CodeLifetime } from '../../helpers/code-lifetime';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'alg-group-join-by-code',\r\n  templateUrl: './group-join-by-code.component.html',\r\n  styleUrls: [ './group-join-by-code.component.scss' ],\r\n})\r\n\r\nexport class GroupJoinByCodeComponent implements OnChanges {\r\n\r\n  @Input() group?: Group;\r\n  @Output() refreshRequired = new EventEmitter<void>();\r\n\r\n  codeInfo?: CodeInfo;\r\n  codeLifetimeControlValue?: Duration;\r\n  processing = false;\r\n\r\n  codeLifetimeOptions = [\r\n    {\r\n      label: $localize`Infinite`,\r\n      value: 'infinite',\r\n      tooltip: $localize`This code will never expire ` + $localize`:@@resetCurrentExpiration:(reset current expiration)`,\r\n    },\r\n    {\r\n      label: $localize`Usable once`,\r\n      value: 'usable_once',\r\n      tooltip: $localize`This code will be usable only once ` + $localize`:@@resetCurrentExpiration:(reset current expiration)`,\r\n    },\r\n    {\r\n      label: $localize`Custom`,\r\n      value: 'custom',\r\n      tooltip: $localize`:@@expireDuration:This code will expire after the given duration ` +\r\n        $localize`:@@resetCurrentExpiration:(reset current expiration)`,\r\n    },\r\n  ];\r\n  customCodeLifetimeOption = this.codeLifetimeOptions.findIndex(({ value }) => value === 'custom');\r\n  selectedCodeLifetimeOption = 0;\r\n  durationTooltip = $localize`:@@expireDuration:This code will expire after the given duration ` +\r\n    $localize`:@@resetCurrentExpiration:(reset current expiration)`;\r\n\r\n  constructor(\r\n    private groupActionsService: GroupActionsService,\r\n    private codeActionsService: CodeActionsService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.group && !this.group) this.codeInfo = undefined;\r\n    if (changes.group && this.group) {\r\n      this.codeInfo = codeInfo(this.group);\r\n\r\n      const codeLifetimeHasChanged = (changes.group.previousValue as Group | undefined)?.codeLifetime?.valueInSeconds !==\r\n        (changes.group.currentValue as Group | undefined)?.codeLifetime?.valueInSeconds;\r\n\r\n      if (codeLifetimeHasChanged) {\r\n        this.codeLifetimeControlValue = this.group.codeLifetime?.asDuration;\r\n        this.selectedCodeLifetimeOption = this.getSelectedCodeLifetimeOption(this.group.codeLifetime);\r\n      }\r\n    }\r\n  }\r\n\r\n  /* events */\r\n\r\n  generateNewCode(): void {\r\n    if (!this.group) return;\r\n\r\n    // disable UI\r\n    this.processing = true;\r\n\r\n    const groupId = this.group.id;\r\n    const expiresAt = this.group.codeExpiresAt;\r\n    // call code refresh service, then group refresh data\r\n    this.codeActionsService.createNewCode(groupId)\r\n      .pipe(\r\n        switchMap(() =>\r\n        // if a code expiration was defined, reset it to null\r\n          (expiresAt === null ? of(undefined) : this.groupActionsService.updateGroup(groupId, { code_expires_at: null }))\r\n        ),\r\n      )\r\n      .subscribe({\r\n        next: () => {\r\n          this.actionFeedbackService.success($localize`A new code has been generated`);\r\n          this.processing = false;\r\n          this.refreshRequired.emit();\r\n        },\r\n        error: err => {\r\n          this.processing = false;\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        },\r\n      });\r\n  }\r\n\r\n  submitCodeLifetime(ms: number): void {\r\n    if (!this.group || !this.codeInfo) throw new Error('cannot submit new code lifetime when group is undefined');\r\n    if (this.codeInfo.hasCodeNotSet) throw new Error('cannot submit code lifetime when no code is set');\r\n    const newCodeLifetime = new CodeLifetime(ms);\r\n    if (this.group.codeLifetime?.valueInSeconds === newCodeLifetime.valueInSeconds) return;\r\n\r\n    // disable UI\r\n    this.processing = true;\r\n\r\n    // call code refresh service, then group refresh data\r\n    this.groupActionsService.updateGroup(this.group.id, {\r\n      code_lifetime: newCodeLifetime.valueInSeconds,\r\n      code_expires_at: null,\r\n    }).subscribe({\r\n      next: () => {\r\n        this.actionFeedbackService.success($localize`The validity has been changed`);\r\n        this.processing = false;\r\n        this.refreshRequired.emit();\r\n      },\r\n      error: err => {\r\n        this.processing = false;\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      },\r\n    });\r\n  }\r\n\r\n  removeCode(): void {\r\n    if (!this.group) throw new Error('cannot remove code when group is undefined');\r\n\r\n    // disable UI\r\n    this.processing = true;\r\n\r\n    const groupId = this.group.id;\r\n    const expiresAt = this.group.codeExpiresAt;\r\n    // call code refresh service, then group refresh data\r\n    this.codeActionsService.removeCode(groupId)\r\n      .pipe(\r\n        switchMap(() =>\r\n          // if a code expiration was defined, reset it to null\r\n          (expiresAt === null ? of(undefined) : this.groupActionsService.updateGroup(groupId, { code_expires_at: null }))\r\n        ),\r\n      )\r\n      .subscribe({\r\n        next: () => {\r\n          this.actionFeedbackService.success($localize`Users will not be able to join with the former code.`);\r\n          this.processing = false;\r\n          this.refreshRequired.emit();\r\n        },\r\n        error: err => {\r\n          this.processing = false;\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        },\r\n      });\r\n  }\r\n\r\n  changeCodeLifetime(selected: number): void {\r\n    const optionValue = this.codeLifetimeOptions[selected]?.value;\r\n    if (optionValue === 'infinite') this.submitCodeLifetime(CodeLifetime.infiniteValue);\r\n    if (optionValue === 'usable_once') this.submitCodeLifetime(CodeLifetime.usableOnceValue);\r\n\r\n    this.selectedCodeLifetimeOption = selected;\r\n  }\r\n\r\n  private getSelectedCodeLifetimeOption(codeLifetime?: CodeLifetime): number {\r\n    if (codeLifetime?.isUsableOnce) return this.codeLifetimeOptions.findIndex(({ value }) => value === 'usable_once');\r\n    if (codeLifetime?.isInfinite) return this.codeLifetimeOptions.findIndex(({ value }) => value === 'infinite');\r\n    return this.codeLifetimeOptions.findIndex(({ value }) => value === 'custom');\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\nexport enum InvitationResult {\r\n  Success,\r\n  Error,\r\n  AlreadyInvited,\r\n  NotFound,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CreateGroupInvitationsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createInvitations(\r\n    groupId: string,\r\n    logins : string[]\r\n  ) : Observable<Map<string, InvitationResult>> {\r\n    return this.http\r\n      .post<ActionResponse<Object>>(\r\n        `${appConfig.apiUrl}/groups/${groupId}/invitations`,\r\n        { logins: logins }, {})\r\n      .pipe(\r\n        map(successData),\r\n        map(function (data: Object): Map<string, InvitationResult> {\r\n          return new Map<string, InvitationResult>(\r\n            Object.entries(data).map(\r\n              ([ key, value ]) => {\r\n                switch (value) {\r\n                  case 'success':\r\n                    return [ key, InvitationResult.Success ];\r\n                  case 'unchanged':\r\n                    return [ key, InvitationResult.AlreadyInvited ];\r\n                  case 'not_found':\r\n                    return [ key, InvitationResult.NotFound ];\r\n                  case 'cycle':\r\n                  case 'invalid':\r\n                    return [ key, InvitationResult.Error ];\r\n                  default:\r\n                    throw new Error(`Invitation of user ${key} returned an unexpected result (${JSON.stringify(value)})`);\r\n                }\r\n              }));\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\r\nimport { Message } from 'primeng/api';\r\n\r\n@Component({\r\n  selector: 'alg-message',\r\n  templateUrl: './message.component.html',\r\n  styleUrls: [ './message.component.scss' ]\r\n})\r\nexport class MessageComponent implements OnChanges {\r\n\r\n  @Input() type: 'success' | 'info' | 'error' = 'info';\r\n  @Input() summary?: string;\r\n  @Input() detail = '';\r\n  @Input() closable = true;\r\n\r\n  msgs : Message[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    this.msgs = [{\r\n      severity: this.type,\r\n      summary: this.summary,\r\n      detail: this.detail\r\n    }];\r\n  }\r\n}\r\n","<p-messages styleClass=\"alg-messages\" [value]=\"msgs\" [closable]=\"closable\"></p-messages>\r\n","<alg-section-paragraph icon=\"fa fa-user-plus\" i18n-label label=\"Invite users\" [collapsible]=\"true\">\r\n  <span i18n>Add users name list, separated by commas.</span>\r\n  <div class=\"invite-users\">\r\n    <alg-textarea [parentForm]=\"inviteForm\" inputName=\"logins\" icon=\"show\" i18n-placeholder placeholder=\"login_1, login_2...\">\r\n    </alg-textarea>\r\n\r\n    <alg-message *ngIf=\"state === 'too_many'\" type=\"error\" i18n-detail detail=\"You cannot invite more than 100 users at once\"\r\n      [closable]=\"false\">\r\n    </alg-message>\r\n\r\n    <p-button\r\n      i18n-label label=\"Invite\"\r\n      styleClass=\"p-button-rounded\"\r\n      (onClick)=\"onInviteClicked()\"\r\n      [disabled]=\"state !== 'ready'\"\r\n    ></p-button>\r\n\r\n    <alg-message *ngFor=\"let message of messages\" [type]=\"message.type\" [detail]=\"message.detail\"\r\n      summary={{message.summary}}></alg-message>\r\n\r\n  </div>\r\n</alg-section-paragraph>\r\n","import { Component, Input, Output, EventEmitter, OnDestroy, OnInit } from '@angular/core';\r\nimport { CreateGroupInvitationsService, InvitationResult } from '../../http-services/create-group-invitations.service';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { UntypedFormBuilder } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\ninterface Message\r\n{\r\n  type: 'success' | 'info' | 'error',\r\n  summary?: string,\r\n  detail: string,\r\n}\r\n\r\ntype GroupInviteState = 'empty'|'too_many'|'loading'|'ready';\r\n\r\n@Component({\r\n  selector: 'alg-group-invite-users',\r\n  templateUrl: './group-invite-users.component.html',\r\n  styleUrls: [ './group-invite-users.component.scss' ],\r\n})\r\nexport class GroupInviteUsersComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() group?: Group;\r\n  @Output() refreshRequired = new EventEmitter<void>();\r\n\r\n  inviteForm = this.formBuilder.group({ logins: '' });\r\n  state: GroupInviteState = 'empty';\r\n\r\n  messages: Message[] = [];\r\n  subscription?: Subscription;\r\n\r\n  constructor(\r\n    private createGroupInvitationsService: CreateGroupInvitationsService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private formBuilder: UntypedFormBuilder,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = this.inviteForm.get('logins')?.valueChanges.subscribe((change: string) => this.loginListChanged(change));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription?.unsubscribe();\r\n  }\r\n\r\n  setState(newState: GroupInviteState): void {\r\n    if (this.state === newState) return;\r\n    if (this.state === 'loading') this.inviteForm.enable(); // enable the form only if the previous state was disabled\r\n    if (newState === 'loading') this.inviteForm.disable();\r\n    this.state = newState;\r\n  }\r\n\r\n  loginListChanged(newValue: string): void {\r\n    if (this.state === 'loading') return;\r\n    this.setState('ready');\r\n\r\n    const logins = newValue.split(',').filter(login => login.length > 0);\r\n\r\n    if (logins.length === 0) {\r\n      this.setState('empty');\r\n    } else if (logins.length >= 100) {\r\n      this.setState('too_many');\r\n    }\r\n  }\r\n\r\n  private displayResponse(response: Map<string, InvitationResult>): void {\r\n\r\n    const successInvites: string[] = Array.from(response.entries()).filter(e => e[1] === InvitationResult.Success).map(e => e[0]);\r\n    const alreadyInvited: string[] = Array.from(response.entries()).filter(e => e[1] === InvitationResult.AlreadyInvited).map(e => e[0]);\r\n    const notFoundUsers: string[] = Array.from(response.entries()).filter(e => e[1] === InvitationResult.NotFound).map(e => e[0]);\r\n    const invalidInvites: string[] = Array.from(response.entries()).filter(e => e[1] === InvitationResult.Error).map(e => e[0]);\r\n\r\n    if (successInvites.length > 0)\r\n      this.messages.push({\r\n        type: 'success',\r\n        summary: $localize`${successInvites.length} user(s) invited successfully: `,\r\n        detail: `${successInvites.join(', ')}`,\r\n      });\r\n\r\n    if (alreadyInvited.length > 0)\r\n      this.messages.push({\r\n        type: 'info',\r\n        summary: $localize`${alreadyInvited.length} user(s) have already been invited: `,\r\n        detail: `${alreadyInvited.join(', ')}`,\r\n      });\r\n\r\n    if (notFoundUsers.length > 0)\r\n      this.messages.push({\r\n        type: 'error',\r\n        summary: $localize`${notFoundUsers.length} user login(s) not found: `,\r\n        detail: `${notFoundUsers.join(', ')}`,\r\n      });\r\n\r\n    if (invalidInvites.length > 0)\r\n      this.messages.push({\r\n        type: 'error',\r\n        summary: $localize`${invalidInvites.length} user login(s) could not be invited: `,\r\n        detail: `${invalidInvites.join(', ')}`,\r\n      });\r\n  }\r\n\r\n  /* events */\r\n  onInviteClicked(): void {\r\n    if (!this.group || this.state !== 'ready') return;\r\n\r\n    // clear the messages\r\n    this.messages = [];\r\n\r\n    // remove empty logins and duplicates\r\n    const control = this.inviteForm.get('logins');\r\n    if (!control) return;\r\n\r\n    const logins = (control.value as string).split(',')\r\n      .map(login => login.trim())\r\n      .filter(function (login, index, self) {\r\n        return self.indexOf(login) === index && login !== '';\r\n      });\r\n\r\n    // disable UI\r\n    this.setState('loading');\r\n\r\n    this.createGroupInvitationsService.createInvitations(this.group.id, logins).subscribe({\r\n      next: res => {\r\n        this.displayResponse(res);\r\n\r\n        // Clear the textarea\r\n        control.setValue('');\r\n\r\n        this.setState('empty');\r\n      },\r\n      error: err => {\r\n        this.setState('ready');\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\n\r\ntype Status = 'invalid'|'success'|'unchanged'|'not_found';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupUsersService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  removeUsers(groupId: string, usersId: string[]): Observable<Map<string, Status>> {\r\n    const httpParams = new HttpParams().set('user_ids', usersId.join(','));\r\n    return this.http.delete<ActionResponse<{[user: string]: Status}>>(`${appConfig.apiUrl}/groups/${groupId}/members`, {\r\n      params: httpParams\r\n    }).pipe(\r\n      map(successData),\r\n      map(data => new Map(Object.entries(data)))\r\n    );\r\n  }\r\n}\r\n\r\nexport function parseResults(data: Map<string, Status>): { countRequests: number, countSuccess: number } {\r\n  const res = {\r\n    countRequests: data.size,\r\n    countSuccess: Array.from(data.values())\r\n      .map<number>(state => ([ 'success', 'unchanged' ].includes(state) ? 1 : 0))\r\n      .reduce((acc, res) => acc + res, 0) };\r\n  return res;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Result } from '../components/member-list/group-removal-response-handling';\r\n\r\nexport function parseResults(data: SimpleActionResponse[]): Result {\r\n  return {\r\n    countRequests: data.length,\r\n    countSuccess: data.filter(state => state.success).length,\r\n    errorText: data.some(state => !!state.error_text) ? $localize`The group(s) must be empty` : undefined,\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RemoveGroupService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  remove(id: string): Observable<SimpleActionResponse> {\r\n    return this.http.delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${id}`);\r\n  }\r\n\r\n  removeBatch(ids: string[]): Observable<Result> {\r\n    return forkJoin(\r\n      ids.map(id => this.remove(id).pipe(catchError(({ error }) => of(error))))\r\n    ).pipe(\r\n      map(parseResults),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { parseResults } from './remove-group.service';\r\nimport { Result } from '../components/member-list/group-removal-response-handling';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RemoveSubgroupService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  remove(parentGroupId: string, childGroupId: string): Observable<SimpleActionResponse> {\r\n    return this.http.delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${parentGroupId}/relations/${childGroupId}`);\r\n  }\r\n\r\n  removeBatch(parentGroupId: string, ids: string[]): Observable<Result> {\r\n    return forkJoin(\r\n      ids.map(id => this.remove(parentGroupId, id).pipe(catchError(({ error }) => of(error))))\r\n    ).pipe(\r\n      map(parseResults)\r\n    );\r\n  }\r\n}\r\n","<alg-group-composition-filter #compositionFilter (change)=\"onFilterChange($event)\" [defaultValue]=\"defaultFilter\"></alg-group-composition-filter>\r\n<ng-container *ngIf=\"rows$ | async as state\">\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError; else noError\"\r\n    class=\"error dark\"\r\n    i18n-message message=\"Error while loading the group members\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"fetchRows()\"\r\n  ></alg-error>\r\n\r\n  <ng-template #noError>\r\n    <p-table #table\r\n      class=\"alg-table --member-list\"\r\n      [columns]=\"columns\"\r\n      [value]=\"state?.data ?? []\"\r\n      [customSort]=\"true\"\r\n      sortMode=\"multiple\"\r\n      (sortFunction)=\"onCustomSort($event)\"\r\n      [loading]=\"(removalInProgress$ | async) || state.isFetching\"\r\n      [(selection)]=\"selection\"\r\n      selectionMode=\"multiple\"\r\n      dataKey=\"id\"\r\n    >\r\n      <ng-template pTemplate=\"header\" let-columns>\r\n        <tr *ngIf=\"state.data && state.data.length > 0\">\r\n          <th class=\"thin\" *ngIf=\"groupData?.group?.currentUserCanManage !== 'none'\"></th>\r\n          <ng-container *ngFor=\"let col of columns\">\r\n            <th [pSortableColumn]=\"col.field\" *ngIf=\"col.sortable\">\r\n              <div class=\"header-container\">\r\n                {{ col.header }}\r\n                <p-sortIcon [field]=\"col.field\"></p-sortIcon>\r\n              </div>\r\n            </th>\r\n            <th *ngIf=\"!col.sortable\">\r\n              <div class=\"header-container\">\r\n                {{ col.header }}\r\n              </div>\r\n            </th>\r\n          </ng-container>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template\r\n        pTemplate=\"body\"\r\n        let-rowData\r\n        let-columns=\"columns\"\r\n      >\r\n        <tr>\r\n          <td class=\"thin\" *ngIf=\"groupData?.group?.currentUserCanManage !== 'none'\">\r\n            <p-tableCheckbox class=\"p-chkbox\" [value]=\"rowData\"></p-tableCheckbox>\r\n          </td>\r\n          <td *ngFor=\"let col of columns\">\r\n            <ng-container [ngSwitch]=\"col.field\">\r\n              <ng-container *ngSwitchCase=\"'user.login'\">\r\n                <ng-container *ngIf=\"rowData.user\">\r\n                  <a\r\n                    class=\"alg-link\"\r\n                    [routerLink]=\"rowData.route | groupLink\"\r\n                  >\r\n                    {{ rowData.user | userCaption }}\r\n                  </a>\r\n                </ng-container>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'name'\">\r\n                <a\r\n                  class=\"alg-link\"\r\n                  [routerLink]=\"rowData.route | groupLink\"\r\n                >\r\n                  {{ rowData.name }}\r\n                </a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'member_since'\">\r\n                <ng-container *ngIf=\"rowData.memberSince\">\r\n                  {{ rowData.memberSince | date:'short' }}\r\n                </ng-container>\r\n              </ng-container>\r\n              <ng-container *ngSwitchDefault>\r\n                {{ rowData[col.field] }}\r\n              </ng-container>\r\n            </ng-container>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"footer\">\r\n        <tr *ngIf=\"datapager.canLoadMore$ | async\">\r\n          <td colspan=\"3\">\r\n            <div class=\"text-center\">\r\n              <button\r\n                pButton\r\n                class=\"p-button-rounded\"\r\n                i18n-label label=\"Load more\"\r\n                (click)=\"fetchMoreRows()\"\r\n                [disabled]=\"state.isFetching\"\r\n              ></button>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"emptymessage\" let-columns>\r\n        <tr>\r\n          <td [attr.colspan]=\"columns.length\">\r\n            <p class=\"empty-message\" i18n>This list is empty. Check below the different ways to add members or sub-groups.</p>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"summary\" *ngIf=\"groupData?.group?.currentUserCanManage !== 'none'\">\r\n        <div class=\"summary\">\r\n          <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\r\n          <span class=\"select-all\" (click)=\"onSelectAll(state.data ?? [])\" i18n>\r\n            Select all\r\n          </span>\r\n          <span class=\"filler\"></span>\r\n          <div class=\"summary-actions\">\r\n              <span (click)=\"onRemove($event)\" [class.disabled]=\"(removalInProgress$ | async) || !state.isReady || selection.length === 0\">\r\n              <span i18n>{{ currentFilter.type === 'users' ? 'Remove': 'Remove from group' }}</span>\r\n              <i class=\"fa fa-trash-alt\"></i>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </p-table>\r\n  </ng-template>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { ConfirmationService, SortEvent } from 'primeng/api';\r\nimport { Table } from 'primeng/table';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GetGroupDescendantsService } from 'src/app/shared/http-services/get-group-descendants.service';\r\nimport { groupRoute, rawGroupRoute, RawGroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { GetGroupChildrenService, GroupChild } from '../../http-services/get-group-children.service';\r\nimport { GetGroupMembersService, Member } from '../../http-services/get-group-members.service';\r\nimport { GroupUsersService, parseResults } from '../../http-services/group-users.service';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\nimport { Filter, GroupCompositionFilterComponent, TypeFilter } from '../group-composition-filter/group-composition-filter.component';\r\nimport { displayResponseToast } from './user-removal-response-handling';\r\nimport { displayGroupRemovalResponseToast } from './group-removal-response-handling';\r\nimport { RemoveSubgroupService } from '../../http-services/remove-subgroup.service';\r\nimport { RemoveGroupService } from '../../http-services/remove-group.service';\r\nimport { FetchState } from 'src/app/shared/helpers/state';\r\nimport { DataPager } from 'src/app/shared/helpers/data-pager';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nfunction getSelectedGroupChildCaptions(selection: GroupChild[]): string {\r\n  return selection.map(selected => selected.name).join(', ');\r\n}\r\n\r\ninterface Column {\r\n  sortable?: boolean,\r\n  field: string,\r\n  header: string,\r\n}\r\n\r\nconst usersColumns: Column[] = [\r\n  { field: 'user.login', header: $localize`Name`, sortable: true },\r\n  { field: 'member_since', header: $localize`Member Since`, sortable: true },\r\n];\r\n\r\nconst groupsColumns: Column[] = [\r\n  { field: 'name', header: $localize`Name`, sortable: true },\r\n  { field: 'type', header: $localize`Type` },\r\n  { field: 'userCount', header: $localize`User Count` },\r\n];\r\n\r\nconst nameUserCountColumns: Column[] = [\r\n  { field: 'name', header: $localize`Name`, sortable: true },\r\n  { field: 'userCount', header: $localize`User Count` },\r\n];\r\n\r\nconst descendantUsersColumns: Column[] = [\r\n  { field: 'user.login', header: $localize`Name` },\r\n  { field: 'parentGroups', header: $localize`Parent group(s)` },\r\n];\r\n\r\nconst descendantTeamsColumns: Column[] = [\r\n  { field: 'name', header: $localize`Name`, sortable: true },\r\n  { field: 'parentGroups', header: $localize`Parent group(s)` },\r\n  { field: 'members', header: $localize`Member(s)` },\r\n];\r\n\r\nconst membersLimit = 25;\r\n\r\ntype Row = (Member|GroupChild|{ login: string, parentGroups: string }|{ name: string, parentGroups: string, members: string }) &\r\n { route: RawGroupRoute };\r\n\r\n@Component({\r\n  selector: 'alg-member-list',\r\n  templateUrl: './member-list.component.html',\r\n  styleUrls: [ './member-list.component.scss' ]\r\n})\r\nexport class MemberListComponent implements OnChanges, OnDestroy {\r\n\r\n  @Input() groupData? : GroupData;\r\n  @Output() removedGroup = new EventEmitter<void>();\r\n\r\n  defaultFilter: Filter = { type: TypeFilter.Users, directChildren: true };\r\n\r\n  currentSort: string[] = [];\r\n  currentFilter: Filter = this.defaultFilter;\r\n\r\n  selection: (Member | (GroupChild & { isEmpty: boolean }))[] = [];\r\n\r\n  columns: Column[] = [];\r\n  datapager = new DataPager({\r\n    fetch: (pageSize, latestRow?: Row): Observable<Row[]> => this.getRows(pageSize, latestRow),\r\n    pageSize: membersLimit,\r\n    onLoadMoreError: (): void => {\r\n      this.actionFeedbackService.error($localize`Could not load more members, are you connected to the internet?`);\r\n    },\r\n  });\r\n  rows$: Observable<FetchState<Row[]>> = this.datapager.list$;\r\n\r\n  @ViewChild('table') private table?: Table;\r\n  @ViewChild('compositionFilter') private compositionFilter?: GroupCompositionFilterComponent;\r\n\r\n  removalInProgress$ = new ReplaySubject<boolean>();\r\n\r\n  constructor(\r\n    private getGroupMembersService: GetGroupMembersService,\r\n    private getGroupChildrenService: GetGroupChildrenService,\r\n    private getGroupDescendantsService: GetGroupDescendantsService,\r\n    private groupUsersService: GroupUsersService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private removeSubgroupService: RemoveSubgroupService,\r\n    private confirmationService: ConfirmationService,\r\n    private removeGroupService: RemoveGroupService,\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.removalInProgress$.complete();\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (!this.groupData) return;\r\n\r\n    this.currentFilter = { ...this.defaultFilter };\r\n    this.columns = this.getColumns(this.currentFilter);\r\n    this.currentSort = [];\r\n    this.table?.clear();\r\n    this.fetchRows();\r\n  }\r\n\r\n  fetchRows(): void {\r\n    this.datapager.reset();\r\n    this.datapager.load();\r\n  }\r\n\r\n  fetchMoreRows(): void {\r\n    this.datapager.load();\r\n  }\r\n\r\n  getRows(pageSize: number, latestRow?: Row): Observable<Row[]> {\r\n    if (!this.groupData) throw new Error('group data must be defined to fetch data');\r\n    const route = this.groupData.route;\r\n\r\n    switch (this.currentFilter.type) {\r\n      case TypeFilter.Groups:\r\n        return this.getGroupChildrenService.getGroupChildrenWithSubgroupCount(\r\n          route.id,\r\n          this.currentSort,\r\n          [],\r\n          [ 'Team', 'Session', 'User' ],\r\n        ).pipe(map(children => children.map(child => ({\r\n          ...child,\r\n          route: groupRoute(child, [ ...route.path, route.id ]),\r\n        }))));\r\n      case TypeFilter.Sessions:\r\n        return this.getGroupChildrenService.getGroupChildrenWithSubgroupCount(route.id, this.currentSort, [ 'Session' ])\r\n          .pipe(map(children => children.map(child => ({\r\n            ...child,\r\n            route: groupRoute(child, [ ...route.path, route.id ]),\r\n          }))));\r\n      case TypeFilter.Teams:\r\n        if (!this.currentFilter.directChildren) {\r\n          return this.getGroupDescendantsService.getTeamDescendants(route.id, this.currentSort)\r\n            .pipe(map(descendantTeams => descendantTeams.map(descendantTeam => ({\r\n              id: descendantTeam.id,\r\n              name: descendantTeam.name,\r\n              parentGroups: descendantTeam.parents.map(parent => parent.name).join(', '),\r\n              members: descendantTeam.members.map(member => member.login).join(', '),\r\n              route: rawGroupRoute({ id: descendantTeam.id, isUser: false }),\r\n            }))));\r\n        } else {\r\n          return this.getGroupChildrenService.getGroupChildrenWithSubgroupCount(route.id, this.currentSort, [ 'Team' ])\r\n            .pipe(map(children => children.map(child => ({\r\n              ...child,\r\n              route: groupRoute(child, [ ...route.path, route.id ]),\r\n            }))));\r\n        }\r\n      case TypeFilter.Users:\r\n        if (this.currentFilter.directChildren) {\r\n          return this.getGroupMembersService.getGroupMembers(\r\n            route.id,\r\n            this.currentSort,\r\n            membersLimit,\r\n            (latestRow as Member|undefined)?.id,\r\n          ).pipe(\r\n            map(members => members.map(member => ({\r\n              ...member,\r\n              route: groupRoute({ id: member.id, isUser: true }, [ ...route.path, route.id ]),\r\n            }))));\r\n        } else {\r\n          return this.getGroupDescendantsService.getUserDescendants(route.id, {\r\n            sort: this.currentSort,\r\n            limit: pageSize,\r\n            fromId: (latestRow as Member|undefined)?.id,\r\n          }).pipe(map(descendantUsers => descendantUsers.map(descendantUser => ({\r\n            id: descendantUser.id,\r\n            login: descendantUser.user.login,\r\n            user: descendantUser.user,\r\n            parentGroups: descendantUser.parents.map(parent => parent.name).join(', '),\r\n            route: rawGroupRoute({ id: descendantUser.id, isUser: true }),\r\n          }))));\r\n        }\r\n    }\r\n  }\r\n\r\n  onCustomSort(event: SortEvent): void {\r\n    if (!this.groupData) return;\r\n\r\n    const sortMeta = event.multiSortMeta?.map(meta => (meta.order === -1 ? `-${meta.field}` : meta.field));\r\n\r\n    if (sortMeta && JSON.stringify(sortMeta) !== JSON.stringify(this.currentSort)) {\r\n      this.currentSort = sortMeta;\r\n      this.fetchRows();\r\n    }\r\n  }\r\n\r\n  onFilterChange(filter: Filter): void {\r\n    if (!this.groupData) return;\r\n\r\n    if (filter !== this.currentFilter) {\r\n      this.currentFilter = { ...filter };\r\n      this.columns = this.getColumns(filter);\r\n      this.table?.clear();\r\n      this.currentSort = [];\r\n      this.fetchRows();\r\n    }\r\n  }\r\n\r\n  setFilter(filter: Filter): void {\r\n    this.compositionFilter?.setFilter(filter);\r\n    this.onFilterChange(filter);\r\n  }\r\n\r\n  onSelectAll(rows: Row[]): void {\r\n    if (this.selection.length === rows.length) {\r\n      this.selection = [];\r\n    } else {\r\n      this.selection = rows as (Member | (GroupChild & { isEmpty: boolean }))[];\r\n    }\r\n  }\r\n\r\n  unselectAll(): void {\r\n    this.selection = [];\r\n  }\r\n\r\n  removeUsers(groupId: string): void {\r\n    if (this.selection.length === 0) {\r\n      throw new Error('Unexpected: Missed selected members');\r\n    }\r\n\r\n    const selectedMemberIds = this.selection.map(member => member.id);\r\n\r\n    this.removalInProgress$.next(true);\r\n    this.groupUsersService.removeUsers(groupId, selectedMemberIds)\r\n      .subscribe({\r\n        next: result => {\r\n          displayResponseToast(this.actionFeedbackService, parseResults(result));\r\n          this.table?.clear();\r\n          this.unselectAll();\r\n          this.fetchRows();\r\n          this.removalInProgress$.next(false);\r\n        },\r\n        error: err => {\r\n          this.removalInProgress$.next(false);\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n  }\r\n\r\n  onRemoveGroup(event: Event): void {\r\n    this.confirmationService.confirm({\r\n      target: event.target || undefined,\r\n      key: 'commonPopup',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      message: $localize`Are you sure you want to permanently delete ${getSelectedGroupChildCaptions(this.selection as GroupChild[])}?\r\n       This operation cannot be undone.`,\r\n      acceptLabel: $localize`Yes`,\r\n      acceptIcon: 'fa fa-check',\r\n      rejectLabel: $localize`No`,\r\n      accept: () => this.removeGroupsOrSubgroups(),\r\n    });\r\n  }\r\n\r\n  onRemoveSubgroups(event: Event, groupId: string): void {\r\n    this.confirmationService.confirm({\r\n      target: event.target || undefined,\r\n      key: 'commonPopup',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      message: $localize`By removing ${getSelectedGroupChildCaptions(this.selection as GroupChild[])} from the group, you may loose\r\n       manager access to them (if no explicit permission or through other parent group). Are you sure you want to proceed?`,\r\n      acceptLabel: $localize`Yes`,\r\n      acceptIcon: 'fa fa-check',\r\n      rejectLabel: $localize`No`,\r\n      accept: () => this.removeGroupsOrSubgroups(groupId),\r\n    });\r\n  }\r\n\r\n  removeGroupsOrSubgroups(groupId?: string): void {\r\n    if (this.selection.length === 0) {\r\n      throw new Error('Unexpected: Missed selected groups');\r\n    }\r\n\r\n    const selectedGroupIds = this.selection.map(group => group.id);\r\n\r\n    this.removalInProgress$.next(true);\r\n    const request$ = groupId ?\r\n      this.removeSubgroupService.removeBatch(groupId, selectedGroupIds) : this.removeGroupService.removeBatch(selectedGroupIds);\r\n\r\n    request$.subscribe({\r\n      next: response => {\r\n        displayGroupRemovalResponseToast(this.actionFeedbackService, response);\r\n        this.table?.clear();\r\n        this.unselectAll();\r\n        this.fetchRows();\r\n        this.removalInProgress$.next(false);\r\n        this.removedGroup.emit();\r\n      },\r\n      error: err => {\r\n        this.removalInProgress$.next(false);\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n  onRemove(event: Event): void {\r\n    if (this.selection.length === 0 || !this.groupData) {\r\n      throw new Error('Unexpected: Missed group data or selected models');\r\n    }\r\n\r\n    const groupId = this.groupData.group.id;\r\n\r\n    if (this.currentFilter.type === 'users') {\r\n      this.removeUsers(groupId);\r\n      return;\r\n    }\r\n\r\n    const isSubgroupsEmpty = !(this.selection as (GroupChild & { isEmpty: boolean })[]).some(g => !g.isEmpty);\r\n\r\n    if (!isSubgroupsEmpty) {\r\n      this.onRemoveSubgroups(event, groupId);\r\n      return;\r\n    }\r\n\r\n    this.confirmationService.confirm({\r\n      target: event.target || undefined,\r\n      key: 'commonPopup',\r\n      icon: 'pi pi-question-circle',\r\n      message: this.selection.length === 1 ?\r\n        $localize`Do you also want to delete the group?` :\r\n        $localize`These groups are all empty. Do you also want to delete them?`,\r\n      acceptLabel: $localize`Yes`,\r\n      acceptIcon: 'fa fa-check',\r\n      rejectLabel: $localize`No`,\r\n      accept: () => {\r\n        // ISSUE: https://github.com/primefaces/primeng/issues/10589\r\n        setTimeout(() => {\r\n          this.onRemoveGroup(event);\r\n        }, 250);\r\n      },\r\n      reject: () => {\r\n        setTimeout(() => {\r\n          this.onRemoveSubgroups(event, groupId);\r\n        }, 250);\r\n      }\r\n    });\r\n  }\r\n\r\n  private getColumns(filter: Filter): Column[] {\r\n    switch (filter.type) {\r\n      case TypeFilter.Groups: return groupsColumns;\r\n      case TypeFilter.Sessions: return nameUserCountColumns;\r\n      case TypeFilter.Teams: return this.currentFilter.directChildren ? nameUserCountColumns : descendantTeamsColumns;\r\n      case TypeFilter.Users: return this.currentFilter.directChildren ? usersColumns : descendantUsersColumns;\r\n    }\r\n  }\r\n}\r\n","import { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\n\r\nexport interface Result {\r\n  countRequests: number,\r\n  countSuccess: number,\r\n}\r\n\r\nexport function displayResponseToast(feedbackService: ActionFeedbackService, result: Result): void {\r\n  if (result.countSuccess === result.countRequests) {\r\n    feedbackService.success($localize`${result.countSuccess} user(s) have been removed`);\r\n  } else if (result.countSuccess === 0) {\r\n    feedbackService.error($localize`Unable to remove the selected user(s)`);\r\n  } else {\r\n    feedbackService.partial(\r\n      $localize`${result.countSuccess} user(s) have been removed, ${result.countRequests - result.countSuccess} could not be removed`\r\n    );\r\n  }\r\n}\r\n","import { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\n\r\nexport interface Result {\r\n  countRequests: number,\r\n  countSuccess: number,\r\n  errorText?: string,\r\n}\r\n\r\nexport function displayGroupRemovalResponseToast(feedbackService: ActionFeedbackService, result: Result): void {\r\n  if (result.countSuccess === result.countRequests) {\r\n    feedbackService.success($localize`${result.countSuccess} group(s) have been removed`);\r\n  } else if (result.countSuccess === 0) {\r\n    feedbackService.error($localize`Unable to remove the selected group(s). ` + `${result.errorText || ''}`);\r\n  } else {\r\n    feedbackService.partial(\r\n      $localize`${result.countSuccess} group(s) have been removed, ${result.countRequests - result.countSuccess} could\r\n       not be removed. ` + `${result.errorText || ''}`\r\n    );\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\n\r\nconst groupInfoDecoder = D.struct({\r\n  id: D.string,\r\n  name: D.string,\r\n  description: D.nullable(D.string),\r\n  type: D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'User', 'Base', 'Session'),\r\n});\r\n\r\nexport type Group = D.TypeOf<typeof groupInfoDecoder>;\r\n\r\nexport interface GroupFound extends Group {\r\n  type: 'Class'|'Team'|'Club'|'Friends'|'Other',\r\n}\r\n\r\nfunction notBase(group: Group): group is GroupFound {\r\n  return group.type !== 'Base';\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchGroupService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  search(\r\n    searchString: string,\r\n    limit = 5,\r\n  ): Observable<GroupFound[]> {\r\n    const params = new HttpParams({ fromObject: { search: searchString, limit: limit.toString() } });\r\n    return this.http.get<Group[]>(\r\n      `${appConfig.apiUrl}/current-user/available-groups`,\r\n      { params: params },\r\n    ).pipe(\r\n      decodeSnakeCase(D.array(groupInfoDecoder)),\r\n      map(groups => groups.filter(notBase)),\r\n    );\r\n  }\r\n\r\n  searchPossibleSubgroups(\r\n    searchString: string,\r\n    limit = 5,\r\n  ): Observable<GroupFound[]> {\r\n    const params = new HttpParams({ fromObject: { search: searchString, limit: limit.toString() } });\r\n    return this.http.get<Group[]>(\r\n      `${appConfig.apiUrl}/groups/possible-subgroups`,\r\n      { params: params },\r\n    ).pipe(\r\n      decodeSnakeCase(D.array(groupInfoDecoder)),\r\n      map(groups => groups.filter(notBase))\r\n    );\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AddedContent, NewContentType } from 'src/app/modules/shared-components/components/add-content/add-content.component';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { SearchGroupService } from '../../http-services/search-group.service';\r\n\r\ntype GroupType = 'Class'|'Team'|'Club'|'Friends'|'Other';\r\n\r\n@Component({\r\n  selector: 'alg-add-sub-group',\r\n  templateUrl: './add-sub-group.component.html',\r\n  styleUrls: [ './add-sub-group.component.scss' ]\r\n})\r\nexport class AddSubGroupComponent {\r\n\r\n  @Input() group?: Group;\r\n  @Input() loading = false;\r\n\r\n  @Output() addGroup = new EventEmitter<AddedContent<GroupType>>();\r\n\r\n  groupsFound: {\r\n    type: GroupType,\r\n    title: string,\r\n    description: string|null,\r\n  }[] = [];\r\n\r\n  allowedNewGroupTypes: NewContentType<GroupType>[] = [\r\n    {\r\n      type: 'Class',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Class`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Club',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Club`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Friends',\r\n      icon: 'fa fa-users',\r\n      title: $localize`Friends`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Other',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Other`,\r\n      description: '',\r\n    },\r\n  ];\r\n\r\n  searchFunction = (value: string): Observable<AddedContent<GroupType>[]> =>\r\n    this.searchGroupService.searchPossibleSubgroups(value).pipe(map(groups => groups.map(group => ({\r\n      id: group.id,\r\n      type: group.type,\r\n      title: group.name,\r\n      description: group.description,\r\n    }))));\r\n\r\n  constructor(\r\n    private searchGroupService: SearchGroupService,\r\n  ) {}\r\n\r\n  addChild(group: AddedContent<GroupType>): void {\r\n    this.addGroup.emit(group);\r\n  }\r\n}\r\n","<alg-sub-section icon=\"sign-in-alt\" i18n-label label=\"Add subgroups\">\r\n  <alg-add-content\r\n    [allowedTypesForNewContent]=\"allowedNewGroupTypes\"\r\n    [searchFunction]=\"searchFunction\"\r\n    (contentAdded)=\"addChild($event)\"\r\n    [loading]=\"loading\"\r\n  ></alg-add-content>\r\n</alg-sub-section>\r\n","<ng-container *ngIf=\"groupWithPermissions\">\r\n  <ng-container *ngIf=\"groupWithPermissions.isCurrentUserManager; else noPermission\">\r\n    <alg-section icon=\"fa fa-users\" i18n-label label=\"Current Composition\">\r\n      <alg-member-list #memberList [groupData]=\"groupData\" (removedGroup)=\"removedGroup.emit()\"></alg-member-list>\r\n      <alg-add-sub-group\r\n          *ngIf=\"groupData?.group?.currentUserCanManage !== 'none'\"\r\n          [loading]=\"state === 'addingGroup'\"\r\n          (addGroup)=\"addGroup($event)\"\r\n      ></alg-add-sub-group>\r\n    </alg-section>\r\n    <alg-group-join-by-code [group]=\"groupData?.group\" (refreshRequired)=\"refreshGroupInfo()\" *ngIf=\"groupWithPermissions.canCurrentUserManageMembers\">\r\n    </alg-group-join-by-code>\r\n\r\n    <alg-group-invite-users [group]=\"groupData?.group\" (refreshRequired)=\"refreshGroupInfo()\" *ngIf=\"groupWithPermissions.canCurrentUserManageMembers\">\r\n    </alg-group-invite-users>\r\n  </ng-container>\r\n  <ng-template #noPermission>\r\n    <alg-group-no-permission></alg-group-no-permission>\r\n  </ng-template>\r\n</ng-container>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { TypeFilter } from '../../components/group-composition-filter/group-composition-filter.component';\r\nimport { MemberListComponent } from '../../components/member-list/member-list.component';\r\nimport { ManagementAdditions, withManagementAdditions } from '../../helpers/group-management';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { GroupCreationService } from '../../http-services/group-creation.service';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\n\r\nexport interface GroupChildData {\r\n  id?: string,\r\n  title: string,\r\n  type: 'Class'|'Team'|'Club'|'Friends'|'Other',\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-group-composition',\r\n  templateUrl: './group-composition.component.html',\r\n  styleUrls: [ './group-composition.component.scss' ]\r\n})\r\nexport class GroupCompositionComponent implements OnChanges {\r\n\r\n  @Input() groupData?: GroupData;\r\n\r\n  @Output() groupRefreshRequired = new EventEmitter<void>();\r\n  @Output() addedGroup = new EventEmitter<void>();\r\n  @Output() removedGroup = new EventEmitter<void>();\r\n\r\n  groupWithPermissions?: Group & ManagementAdditions;\r\n\r\n  @ViewChild('memberList') private memberList?: MemberListComponent;\r\n\r\n  state: 'addingGroup' | 'ready' = 'ready';\r\n\r\n  constructor(\r\n    private groupCreationService: GroupCreationService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    this.groupWithPermissions = this.groupData ? withManagementAdditions(this.groupData.group) : undefined;\r\n  }\r\n\r\n  refreshGroupInfo(): void {\r\n    this.groupRefreshRequired.emit();\r\n  }\r\n\r\n  addGroup(group: GroupChildData): void {\r\n    if (!this.groupData) throw Error('Tried to add a subgroup to an undefined group');\r\n\r\n    this.state = 'addingGroup';\r\n\r\n    forkJoin({\r\n      parentGroupId: of(this.groupData.group.id),\r\n      childGroupId: group.id ? of(group.id) : this.groupCreationService.create(group.title, group.type),\r\n    }).pipe(switchMap(ids => this.groupCreationService.addSubgroup(ids.parentGroupId, ids.childGroupId))).subscribe({\r\n      next: _ => {\r\n        this.actionFeedbackService.success($localize`Group successfully added as child group`);\r\n        this.memberList?.setFilter({ directChildren: true, type: TypeFilter.Groups });\r\n        this.state = 'ready';\r\n        this.addedGroup.emit();\r\n      },\r\n      error: err => {\r\n        this.state = 'ready';\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { ItemFound } from 'src/app/modules/item/http-services/search-item.service';\r\nimport { ActivityType, ItemType } from 'src/app/shared/helpers/item-type';\r\n\r\ntype ActivityId = string;\r\n\r\nexport interface NoActivity { tag: 'no-activity' }\r\n\r\nexport interface NewActivity { tag: 'new-activity', name: string, activityType: ActivityType }\r\n\r\nexport interface ExistingActivity { tag: 'existing-activity', id: ActivityId }\r\n\r\nexport function isExistingActivity(activity: NoActivity|NewActivity|ExistingActivity): activity is ExistingActivity {\r\n  return activity.tag === 'existing-activity';\r\n}\r\n\r\nexport function isNewActivity(activity: NoActivity|NewActivity|ExistingActivity): activity is NewActivity {\r\n  return activity.tag === 'new-activity';\r\n}\r\n\r\nexport function isActivityFound(itemFound: ItemFound<ItemType>): itemFound is ItemFound<ActivityType> {\r\n  return itemFound.type !== 'Skill';\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { assertSuccess, SimpleActionResponse } from 'src/app/shared/http-services/action-response';\r\n\r\nexport interface GroupChanges {\r\n  name?: string,\r\n  description?: string|null,\r\n  root_activity_id?: string|null,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupUpdateService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  updateGroup(groupId: string, changes: GroupChanges) : Observable<void> {\r\n    return this.http.put<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${groupId}`, changes).pipe(\r\n      map(assertSuccess),\r\n    );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-section i18n-label label=\"Associated Activity\" icon=\"fa fa-book\" styleClass=\"associated-activity\">\r\n\r\n    <alg-loading size=\"medium\" *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n    <alg-error\r\n      *ngIf=\"state.isError\"\r\n      class=\"dark\"\r\n      icon=\"fa fa-exclamation-triangle\"\r\n      i18n-message message=\"Error while loading the root activity\"\r\n      [showRefreshButton]=\"true\"\r\n      refreshButtonType=\"refresh\"\r\n      (refresh)=\"refresh()\"\r\n    ></alg-error>\r\n\r\n    <ng-container *ngIf=\"state.isReady\">\r\n      <ng-container [ngSwitch]=\"state.data.tag\">\r\n\r\n        <ng-container *ngSwitchCase=\"'no-activity'\">\r\n          <p>There are currently no activities associated with this group.</p>\r\n          <alg-add-content\r\n            [allowedTypesForNewContent]=\"allowedNewItemTypes\"\r\n            [searchFunction]=\"searchFunction\"\r\n            (contentAdded)=\"setRootActivity($event)\"\r\n            i18n-selectExistingText selectExistingText=\"Select\"\r\n          ></alg-add-content>\r\n        </ng-container>\r\n\r\n        <div class=\"activity\" *ngSwitchCase=\"'new-activity'\">\r\n          <span class=\"activity-name\">\r\n            {{state.data.name}}\r\n          </span>\r\n          <span class=\"remove\" (click)=\"onRemove()\">\r\n            <span i18n>Remove</span>\r\n            <i class=\"fa fa-trash-alt\"></i>\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"activity\" *ngSwitchCase=\"'existing-activity'\">\r\n          <!--When rootActivity is an existing activity, rootActivityData is not null-->\r\n          <i class=\"fa fa-lock\" *ngIf=\"!state.data.path\"></i>\r\n          <span class=\"activity-name\"\r\n            [routerLink]=\"state.data.path\"\r\n            [ngClass]=\"{clickable: !!state.data.path}\"\r\n          >{{state.data.name}}</span>\r\n          <span class=\"remove\" (click)=\"onRemove()\">\r\n            <span i18n>Remove</span>\r\n            <i class=\"fa fa-trash-alt\"></i>\r\n          </span>\r\n        </div>\r\n\r\n      </ng-container>\r\n    </ng-container>\r\n  </alg-section>\r\n</ng-container>\r\n","import { Component, forwardRef, OnDestroy } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Observable, of, ReplaySubject, Subject } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport { GetItemByIdService } from 'src/app/modules/item/http-services/get-item-by-id.service';\r\nimport { rawItemRoute, urlArrayForItemRoute } from 'src/app/shared/routing/item-route';\r\nimport { SearchItemService } from 'src/app/modules/item/http-services/search-item.service';\r\nimport { AddedContent } from 'src/app/modules/shared-components/components/add-content/add-content.component';\r\nimport { ActivityType } from 'src/app/shared/helpers/item-type';\r\nimport { allowedNewActivityTypes } from 'src/app/shared/helpers/new-item-types';\r\nimport { NoActivity, NewActivity, ExistingActivity, isActivityFound, isExistingActivity, isNewActivity } from './associated-activity-types';\r\nimport { errorIsHTTPForbidden } from 'src/app/shared/helpers/errors';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\n\r\n@Component({\r\n  selector: 'alg-associated-activity',\r\n  templateUrl: './associated-activity.component.html',\r\n  styleUrls: [ './associated-activity.component.scss' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => AssociatedActivityComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class AssociatedActivityComponent implements ControlValueAccessor, OnDestroy {\r\n\r\n  readonly allowedNewItemTypes = allowedNewActivityTypes;\r\n\r\n  private readonly activityChanges$ = new ReplaySubject<{\r\n    activity: NoActivity|NewActivity|(ExistingActivity&{ name?: string }),\r\n    triggerChange: boolean,\r\n  }>();\r\n\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.activityChanges$.pipe(\r\n    distinctUntilChanged(),\r\n    switchMap(data => {\r\n      if (data.triggerChange) this.onChange(data.activity);\r\n\r\n      if (!isExistingActivity(data.activity)) {\r\n        return of({\r\n          tag: data.activity.tag, id: undefined, path: null,\r\n          name: isNewActivity(data.activity) ? data.activity.name : undefined\r\n        });\r\n      }\r\n\r\n      const id = data.activity.id;\r\n      const name = data.activity.name !== undefined ? of(data.activity.name) :\r\n        this.getItemByIdService.get(id).pipe(map(item => item.string.title));\r\n\r\n      return name.pipe(\r\n        map(name => ({ tag: 'existing-activity', id: id, name, path: urlArrayForItemRoute(rawItemRoute('activity', id)) })),\r\n        catchError(err => {\r\n          if (errorIsHTTPForbidden(err)) return of({\r\n            tag: 'existing-activity', name: $localize`You don't have access to this activity.`, path: null\r\n          });\r\n          throw err;\r\n        })\r\n      );\r\n    }),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  private onChange: (value: NoActivity|NewActivity|ExistingActivity) => void = () => {};\r\n\r\n  searchFunction = (value: string): Observable<AddedContent<ActivityType>[]> =>\r\n    this.searchItemService.search(value, [ 'Chapter', 'Course', 'Task' ])\r\n      .pipe(map(items => items.filter(isActivityFound)));\r\n\r\n  constructor(\r\n    private getItemByIdService: GetItemByIdService,\r\n    private searchItemService: SearchItemService,\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  writeValue(rootActivity: NoActivity|NewActivity|ExistingActivity): void {\r\n    this.activityChanges$.next({ activity: rootActivity, triggerChange: false });\r\n  }\r\n\r\n  registerOnChange(fn: (value: NoActivity|NewActivity|ExistingActivity) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(_fn: () => void): void {\r\n  }\r\n\r\n  onRemove(): void {\r\n    this.activityChanges$.next({\r\n      activity: { tag: 'no-activity' }, triggerChange: true });\r\n  }\r\n\r\n  setRootActivity(activity: AddedContent<ActivityType>): void {\r\n    this.activityChanges$.next({\r\n      activity: activity.id !== undefined ?\r\n        { tag: 'existing-activity', id: activity.id, name: activity.title } :\r\n        { tag: 'new-activity', name: activity.title, activityType: activity.type },\r\n      triggerChange: true\r\n    });\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { assertSuccess, SimpleActionResponse } from '../../../shared/http-services/action-response';\r\n\r\n@Injectable()\r\nexport class GroupDeleteService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  delete(groupId: string): Observable<void> {\r\n    return this.http.delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${groupId}`).pipe(\r\n      map(assertSuccess),\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"container\" *ngIf=\"state$ | async as state\">\r\n\r\n  <alg-loading size=\"small\" *ngIf=\"state.isFetching || (deletionInProgress$ | async)\"></alg-loading>\r\n\r\n  <button\r\n      pButton\r\n      type=\"button\"\r\n      class=\"alg-button p-button-rounded p-button-danger\"\r\n      i18n-label label=\"Delete this group\"\r\n      (click)=\"onDeleteGroup()\"\r\n      [disabled]=\"(state.isReady && state.data) || state.isFetching || state.isError || (deletionInProgress$ | async)\"\r\n  ></button>\r\n\r\n  <span class=\"has-children\" *ngIf=\"state.isReady && state.data\" i18n>\r\n    Only an empty group can be deleted.\r\n  </span>\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"warning small\"\r\n    i18n-message message=\"Error while loading the group info\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { GetGroupChildrenService, GroupChild } from '../../http-services/get-group-children.service';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { GroupDeleteService } from '../../services/group-delete.service';\r\nimport { Router } from '@angular/router';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\n\r\n@Component({\r\n  selector: 'alg-group-remove-button',\r\n  templateUrl: './group-remove-button.component.html',\r\n  styleUrls: [ './group-remove-button.component.scss' ]\r\n})\r\nexport class GroupRemoveButtonComponent implements OnChanges, OnDestroy {\r\n  @Input() group?: Group;\r\n\r\n  @Output() groupDeleted = new EventEmitter<void>();\r\n\r\n  deletionInProgress$ = new Subject<boolean>();\r\n\r\n  private readonly id$ = new ReplaySubject<string>(1);\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.id$.pipe(\r\n    distinctUntilChanged(),\r\n    switchMap(id => this.hasGroupChildren$(id)),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private confirmationService: ConfirmationService,\r\n    private getGroupChildrenService: GetGroupChildrenService,\r\n    private groupDeleteService: GroupDeleteService,\r\n    private router: Router,\r\n  ) { }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.group) {\r\n      this.id$.next(this.group.id);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.id$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  hasGroupChildren$(groupId: string): Observable<boolean> {\r\n    return this.getGroupChildrenService.getGroupChildren(groupId).pipe(\r\n      map((groupChild: GroupChild[]) => groupChild.length > 0)\r\n    );\r\n  }\r\n\r\n  onDeleteGroup(): void {\r\n    if (!this.group) {\r\n      return;\r\n    }\r\n\r\n    this.confirmationService.confirm({\r\n      message: $localize`Are you sure you want to delete the group \"${ this.group.name }\"`,\r\n      header: $localize`Confirm Action`,\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: $localize`Delete it`,\r\n      accept: () => {\r\n        this.deleteGroup();\r\n      },\r\n      rejectLabel: $localize`No`,\r\n    });\r\n  }\r\n\r\n  deleteGroup(): void {\r\n    if (!this.group) {\r\n      return;\r\n    }\r\n\r\n    const id = this.group.id;\r\n    const groupName = this.group.name;\r\n\r\n    this.deletionInProgress$.next(true);\r\n    this.groupDeleteService.delete(id)\r\n      .subscribe({\r\n        next: () => {\r\n          this.deletionInProgress$.next(false);\r\n          this.actionFeedbackService.success($localize`You have deleted \"${groupName}\"`);\r\n          this.groupDeleted.emit();\r\n          this.navigateToMyGroups();\r\n        },\r\n        error: _err => {\r\n          this.deletionInProgress$.next(false);\r\n          this.actionFeedbackService.error($localize`Failed to delete \"${groupName}\"`);\r\n        }\r\n      });\r\n  }\r\n\r\n  navigateToMyGroups(): void {\r\n    void this.router.navigate([ '/groups/mine' ]);\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    i18n-message message=\"Error while loading the group\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refreshGroup()\"\r\n  ></alg-error>\r\n\r\n  <ng-container *ngIf=\"state.isReady\">\r\n    <form class=\"group-edition\" [formGroup]=\"groupForm\" *ngIf=\"state.data.isCurrentUserManager && state.data.canCurrentUserManageGroup; else notAuthorized\">\r\n      <alg-section icon=\"fa fa-cog\" i18n-label label=\"Group information\">\r\n        <div class=\"field\">\r\n          <div class=\"field-name\">\r\n            <label i18n>Name</label>\r\n          </div>\r\n          <div class=\"field-value\">\r\n            <alg-input [parentForm]=\"groupForm\" name=\"name\" size=\"large\"></alg-input>\r\n          </div>\r\n        </div>\r\n        <div class=\"field\">\r\n          <div class=\"field-name\">\r\n            <label i18n>Description</label>\r\n          </div>\r\n          <div class=\"field-value\">\r\n            <alg-textarea [parentForm]=\"groupForm\" inputName=\"description\" size=\"large\"></alg-textarea>\r\n          </div>\r\n        </div>\r\n      </alg-section>\r\n      <alg-associated-activity formControlName=\"rootActivity\"></alg-associated-activity>\r\n\r\n      <div class=\"remove-button-section\">\r\n        <alg-group-remove-button [group]=\"state.data\" (groupDeleted)=\"refreshNav()\"></alg-group-remove-button>\r\n      </div>\r\n    </form>\r\n\r\n    <alg-floating-save\r\n      *ngIf=\"groupForm.dirty\"\r\n      [saving]=\"groupForm.disabled\"\r\n      (save)=\"save()\"\r\n      (cancel)=\"resetForm()\"\r\n    ></alg-floating-save>\r\n\r\n    <ng-template #notAuthorized>\r\n      <alg-error i18n-message message=\"You do not have the permissions to edit this content.\"></alg-error>\r\n    </ng-template>\r\n  </ng-container>\r\n</ng-container>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, Validators } from '@angular/forms';\r\nimport { mapStateData, readyData } from 'src/app/shared/operators/state';\r\nimport { ModeService } from 'src/app/shared/services/mode.service';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { concatMap } from 'rxjs/operators';\r\nimport { CreateItemService } from 'src/app/modules/item/http-services/create-item.service';\r\nimport { PendingChangesComponent } from 'src/app/shared/guards/pending-changes-guard';\r\nimport { NoActivity, NewActivity, ExistingActivity,\r\n  isNewActivity, isExistingActivity } from '../../components/associated-activity/associated-activity-types';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { GroupUpdateService } from '../../http-services/group-update.service';\r\nimport { GroupDataSource } from '../../services/group-datasource.service';\r\nimport { withManagementAdditions } from '../../helpers/group-management';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { PendingChangesService } from '../../../../shared/services/pending-changes-service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-edit',\r\n  templateUrl: './group-edit.component.html',\r\n  styleUrls: [ './group-edit.component.scss' ]\r\n})\r\nexport class GroupEditComponent implements OnInit, OnDestroy, PendingChangesComponent {\r\n  groupForm = this.formBuilder.group({\r\n    // eslint-disable-next-line @typescript-eslint/unbound-method\r\n    name: [ '', [ Validators.required, Validators.minLength(3) ] ],\r\n    description: [ '', [] ],\r\n    rootActivity: [ '', [] ],\r\n  });\r\n  initialFormData?: Group;\r\n\r\n  state$ = this.groupDataSource.state$.pipe(mapStateData(state => withManagementAdditions(state.group)));\r\n\r\n  subscription?: Subscription;\r\n\r\n  constructor(\r\n    private modeService: ModeService,\r\n    private currentContentService: CurrentContentService,\r\n    private groupDataSource: GroupDataSource,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private formBuilder: UntypedFormBuilder,\r\n    private groupUpdateService: GroupUpdateService,\r\n    private createItemService: CreateItemService,\r\n    private pendingChangesService: PendingChangesService\r\n  ) {\r\n    this.subscription = this.state$\r\n      .pipe(readyData())\r\n      .subscribe(item => {\r\n        this.initialFormData = item;\r\n        this.resetFormWith(item);\r\n      });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.pendingChangesService.set(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.modeService.stopEditing();\r\n    this.subscription?.unsubscribe();\r\n    this.pendingChangesService.clear();\r\n  }\r\n\r\n  isDirty(): boolean {\r\n    return this.groupForm.dirty;\r\n  }\r\n\r\n  save(): void {\r\n    if (!this.initialFormData) return;\r\n\r\n    if (this.groupForm.invalid) {\r\n      this.actionFeedbackService.error($localize`You need to solve all the errors displayed in the form to save changes.`);\r\n      return;\r\n    }\r\n    this.groupForm.disable();\r\n\r\n    const id = this.initialFormData.id;\r\n    const name = this.groupForm.get('name')?.value as string;\r\n    const description = this.groupForm.get('description')?.value as string;\r\n\r\n    const rootActivity = this.groupForm.get('rootActivity')?.value as NoActivity|NewActivity|ExistingActivity;\r\n    const rootActivityId = !isNewActivity(rootActivity) ? of(isExistingActivity(rootActivity) ? rootActivity.id : null) :\r\n      this.createItemService.create({\r\n        title: rootActivity.name,\r\n        type: rootActivity.activityType,\r\n        languageTag: 'en',// FIXME\r\n        asRootOfGroupId: this.initialFormData.id,\r\n      });\r\n\r\n    rootActivityId.pipe(\r\n      concatMap(rootActivityId => this.groupUpdateService.updateGroup(id, {\r\n        name,\r\n        description: description === '' ? null : description,\r\n        root_activity_id: rootActivityId\r\n      }))\r\n    ).subscribe({\r\n      next: () => {\r\n        this.groupDataSource.refetchGroup(); // will re-enable the form\r\n        this.refreshNav();\r\n        this.actionFeedbackService.success($localize`Changes successfully saved.`);\r\n      },\r\n      error: err => {\r\n        this.groupForm.enable();\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n  refreshNav(): void {\r\n    this.currentContentService.forceNavMenuReload();\r\n  }\r\n\r\n  resetForm(): void {\r\n    if (this.initialFormData) this.resetFormWith(this.initialFormData);\r\n  }\r\n\r\n  private resetFormWith(group: Group): void {\r\n\r\n    const rootActivity = group.rootActivityId === null ?\r\n      { tag: 'no-activity' } :\r\n      { tag: 'existing-activity', id: group.rootActivityId };\r\n\r\n    this.groupForm.reset({\r\n      name: group.name,\r\n      description: group.description,\r\n      rootActivity: rootActivity,\r\n    });\r\n    this.groupForm.enable();\r\n  }\r\n\r\n  refreshGroup(): void {\r\n    this.groupDataSource.refetchGroup();\r\n  }\r\n}\r\n","<ng-container\r\n    *ngFor=\"let item of items | slice : 0 : (items || []).length > maxItemsDisplay ? maxItemsDisplay - 1 : maxItemsDisplay; let i = index; last as isLast;\">\r\n  <a\r\n    class=\"alg-link base-color\"\r\n    (click)=\"onButtonClick(item)\"\r\n  >\r\n    <strong>{{ item.name }}</strong>\r\n  </a>\r\n  <span class=\"separator\">\r\n    <span *ngIf=\"(items || []).length > maxItemsDisplay && !isLast || (items || []).length === 1 || (items || []).length <= maxItemsDisplay && i < (items || []).length - 2\">,</span>\r\n    <span\r\n      *ngIf=\"(items || []).length <= maxItemsDisplay && i >= (items || []).length - 2 && !isLast || (items || []).length > maxItemsDisplay && isLast\"\r\n      i18n\r\n    >, and</span>\r\n  </span>\r\n  <span class=\"more\" *ngIf=\"(items || []).length > maxItemsDisplay && isLast\" i18n>\r\n    {{ (items || []).length - maxItemsDisplay + 1 }} more\r\n  </span>\r\n</ng-container>\r\n","import { Component, Input } from '@angular/core';\r\nimport { rawGroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { GroupRouter } from 'src/app/shared/routing/group-router';\r\nimport { GroupShortInfo } from '../../http-services/get-group-by-id.service';\r\n\r\nconst MAX_ITEMS_DISPLAY = 4;\r\n\r\n@Component({\r\n  selector: 'alg-group-links',\r\n  templateUrl: './group-links.component.html',\r\n  styleUrls: [ './group-links.component.scss' ]\r\n})\r\nexport class GroupLinksComponent {\r\n  @Input() items?: GroupShortInfo[];\r\n\r\n  maxItemsDisplay = MAX_ITEMS_DISPLAY;\r\n\r\n  constructor(private groupRouter: GroupRouter) { }\r\n\r\n  onButtonClick(item: GroupShortInfo): void {\r\n    this.groupRouter.navigateTo(rawGroupRoute({ id: item.id, isUser: false }));\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <ng-container [ngSwitch]=\"group?.currentUserMembership\">\r\n    <div class=\"content\" *ngSwitchCase=\"'direct'\" i18n>\r\n      You are a member of this group.\r\n    </div>\r\n\r\n    <div class=\"content\" *ngSwitchCase=\"'descendant'\" i18n>\r\n      As a member of <alg-group-links class=\"links\" [items]=\"group?.descendantsCurrentUserIsMemberOf\"></alg-group-links>\r\n      you are a member of this group.\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container [ngSwitch]=\"group?.currentUserManagership\">\r\n    <div class=\"content\" *ngSwitchCase=\"'direct'\" i18n>\r\n      You are a manager of this group.\r\n    </div>\r\n\r\n    <div class=\"content\" *ngSwitchCase=\"'ancestor'\" i18n>\r\n      As a manager of <alg-group-links class=\"links\" [items]=\"group?.ancestorsCurrentUserIsManagerOf\"></alg-group-links>\r\n      you can manage this group.\r\n    </div>\r\n\r\n    <div class=\"content\" *ngSwitchCase=\"'descendant'\" i18n>\r\n      As a manager of <alg-group-links class=\"links\" [items]=\"group?.descendantsCurrentUserIsManagerOf\"></alg-group-links>\r\n      you can view this group.\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-indicator',\r\n  templateUrl: './group-indicator.component.html',\r\n  styleUrls: [ './group-indicator.component.scss' ]\r\n})\r\nexport class GroupIndicatorComponent {\r\n  @Input() group?: Group;\r\n\r\n  constructor() { }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\n\r\nexport const managerDecoder = pipe(\r\n  D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n    canManage: D.literal('none', 'memberships', 'memberships_and_group'),\r\n    canGrantGroupAccess: D.boolean,\r\n    canWatchMembers: D.boolean,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      login: D.string,\r\n      firstName: D.nullable(D.string),\r\n      lastName: D.nullable(D.string),\r\n    }),\r\n  )\r\n);\r\n\r\nexport type Manager = D.TypeOf<typeof managerDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupManagersService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getGroupManagers(\r\n    groupId: string,\r\n    options?: {\r\n      sort?: string[],\r\n      limit?: number,\r\n      fromId?: string,\r\n    },\r\n  ): Observable<Manager[]> {\r\n    let params = new HttpParams();\r\n    if (options?.sort) params = params.set('sort', options.sort.join(','));\r\n    if (options?.limit !== undefined) params = params.set('limit', options.limit);\r\n    if (options?.fromId !== undefined) params = params.set('from.id', options.fromId);\r\n\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/managers`, { params: params }).pipe(\r\n        decodeSnakeCase(D.array(managerDecoder)),\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { merge, Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { assertSuccess, SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { reduce, map, switchMap, catchError } from 'rxjs/operators';\r\n\r\nexport interface Result {\r\n  countRequests: number,\r\n  countSuccess: number,\r\n  errorText?: string,\r\n}\r\n\r\nexport function parseResults(data: boolean[]): Result {\r\n  return {\r\n    countRequests: data.length,\r\n    countSuccess: data.filter(success => success).length,\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RemoveGroupManagerService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  remove(groupId: string, managerId: string): Observable<void> {\r\n    return this.http\r\n      .delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${groupId}/managers/${managerId}`)\r\n      .pipe(\r\n        map(assertSuccess),\r\n      );\r\n  }\r\n\r\n  removeBatch(parentGroupId: string, ids: string[], ownManagerId?: string): Observable<Result> {\r\n    return merge(\r\n      ...ids.map(id => this.remove(parentGroupId, id).pipe(\r\n        map(() => true),\r\n        catchError(() => of(false))),\r\n      ),\r\n    ).pipe(\r\n      reduce<boolean, boolean[]>((removedManagers, success) =>\r\n        [ ...removedManagers, success ], []\r\n      ),\r\n      switchMap(removedManagers =>\r\n        (ownManagerId ?\r\n          removedManagers.some(removedManager => !removedManager) ?\r\n            of([ ...removedManagers, false ]) : this.remove(parentGroupId, ownManagerId).pipe(\r\n              map(() => true),\r\n              catchError(() => of(false)),\r\n              map(success => [ ...removedManagers, success ]),\r\n            )\r\n          : of(removedManagers))\r\n      ),\r\n    ).pipe(\r\n      map(parseResults),\r\n    );\r\n  }\r\n}\r\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { SimpleActionResponse } from '../../../shared/http-services/action-response';\r\n\r\nexport interface GroupManagerPermissionChanges {\r\n  canManage?: 'none'|'memberships'|'memberships_and_group',\r\n  canGrantGroupAccess?: boolean,\r\n  canWatchMembers?: boolean,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UpdateGroupManagersService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  update(\r\n    groupId: string,\r\n    managerId: string,\r\n    payload: GroupManagerPermissionChanges\r\n  ): Observable<SimpleActionResponse> {\r\n    return this.http.put<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${groupId}/managers/${managerId}`, {\r\n      can_manage: payload.canManage,\r\n      can_grant_group_access: payload.canGrantGroupAccess,\r\n      can_watch_members: payload.canWatchMembers,\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"userCaption\">\r\n  <p-dialog\r\n      [(visible)]=\"visible\"\r\n      [modal]=\"true\"\r\n      [draggable]=\"false\"\r\n      [closable]=\"false\"\r\n      styleClass=\"alg-permissions-edit-dialog\">\r\n\r\n    <p-header>\r\n      <div class=\"dialog-header\">\r\n      <span class=\"dialog-handler\">\r\n        <i class=\"fa fa-lock\"></i>\r\n      </span>\r\n        <span class=\"dialog-title\" i18n>\r\n        {{ group?.name }}: manager access given to {{ userCaption }}\r\n      </span>\r\n        <span class=\"dialog-close\" (click)=\"onClose()\">\r\n        <img src=\"assets/images/close.svg\" alt=\"close\">\r\n      </span>\r\n      </div>\r\n    </p-header>\r\n\r\n    <div class=\"dialog-container\">\r\n      <div class=\"dialog-content\">\r\n        <p i18n>\r\n          This panel lets you select what you allow the selected user or group of users to do on the current group and its descendants.\r\n        </p>\r\n\r\n      <form [formGroup]=\"form\">\r\n        <alg-collapsible-section\r\n          [collapsible]=\"false\"\r\n          i18n-header header=\"Management level\"\r\n          icon=\"fa fa-users-cog\"\r\n        >\r\n          <ng-template #content let-collapsed>\r\n            <alg-progress-select\r\n              formControlName=\"canManage\"\r\n              [values]=\"managementLevelValues\"\r\n              [collapsed]=\"collapsed\"\r\n            >\r\n              <ng-template #description>\r\n                <span i18n>The permissions that the user(s) has on this group</span>\r\n              </ng-template>\r\n            </alg-progress-select>\r\n          </ng-template>\r\n        </alg-collapsible-section>\r\n\r\n        <alg-collapsible-section\r\n          [collapsible]=\"false\"\r\n          i18n-header header=\"Can grant access\"\r\n          icon=\"fa fa-key\"\r\n        >\r\n          <ng-template #content let-collapsed>\r\n            <alg-switch-field [collapsed]=\"collapsed\" formControlName=\"canGrantGroupAccess\">\r\n              <ng-template #label>\r\n                <span label i18n>\r\n                  User(s) can give and revoke members access to some content\r\n                </span>\r\n                </ng-template>\r\n              </alg-switch-field>\r\n            </ng-template>\r\n          </alg-collapsible-section>\r\n\r\n        <alg-collapsible-section\r\n          [collapsible]=\"false\"\r\n          i18n-header header=\"Can watch members\"\r\n          icon=\"fa fa-binoculars\"\r\n        >\r\n          <ng-template #content let-collapsed>\r\n            <alg-switch-field [collapsed]=\"collapsed\" formControlName=\"canWatchMembers\">\r\n              <ng-template #label>\r\n                <span i18n>\r\n                  User(s) can watch the members' activity on some content\r\n                </span>\r\n                </ng-template>\r\n              </alg-switch-field>\r\n            </ng-template>\r\n          </alg-collapsible-section>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <p-footer>\r\n      <div class=\"footer\">\r\n        <ng-container *ngIf=\"isUpdating; else buttons\">\r\n          <alg-loading size=\"medium\"></alg-loading>\r\n        </ng-container>\r\n\r\n        <ng-template #buttons>\r\n          <p-button\r\n            icon=\"fa fa-times\"\r\n            i18n-label label=\"Cancel\"\r\n            styleClass=\"alg-button p-button-rounded p-button-danger\"\r\n            (onClick)=\"onClose()\"\r\n          ></p-button>\r\n          <p-button\r\n            icon=\"fa fa-check\"\r\n            i18n-label label=\"Save\"\r\n            styleClass=\"alg-button p-button-rounded\"\r\n            (onClick)=\"onAccept()\"\r\n            [disabled]=\"!form.dirty\"\r\n          ></p-button>\r\n        </ng-template>\r\n      </div>\r\n    </p-footer>\r\n  </p-dialog>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { Manager } from '../../http-services/get-group-managers.service';\r\nimport { ProgressSelectValue } from\r\n  '../../../shared-components/components/collapsible-section/progress-select/progress-select.component';\r\nimport { GroupManagerPermissionChanges, UpdateGroupManagersService } from '../../http-services/update-group-managers.service';\r\nimport { formatUser } from '../../../../shared/helpers/user';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { UntypedFormBuilder } from '@angular/forms';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { UserSessionService } from '../../../../shared/services/user-session.service';\r\n\r\n@Component({\r\n  selector: 'alg-manager-permission-dialog',\r\n  templateUrl: './manager-permission-dialog.component.html',\r\n  styleUrls: [ './manager-permission-dialog.component.scss' ],\r\n})\r\nexport class ManagerPermissionDialogComponent implements OnChanges {\r\n  @Input() visible?: boolean;\r\n  @Input() group?: Group;\r\n  @Input() manager?: Manager;\r\n\r\n  @Output() close = new EventEmitter<{ updated: boolean }>();\r\n\r\n  managementLevelValues: ProgressSelectValue<GroupManagerPermissionChanges['canManage']>[] = [\r\n    {\r\n      value: 'none',\r\n      label: $localize`Read-only`,\r\n      comment: $localize`Can list the members`\r\n    },\r\n    {\r\n      value: 'memberships',\r\n      label: $localize`Membership`,\r\n      comment: $localize`Can manage (add, remove, invite, ...) members`\r\n    },\r\n    {\r\n      value: 'memberships_and_group',\r\n      label: $localize`Memberships and group`,\r\n      comment: $localize`Can manage members, managers, and change group settings`\r\n    },\r\n  ];\r\n\r\n  userCaption?: string;\r\n  isUpdating = false;\r\n\r\n  form = this.fb.group({\r\n    canManage: [ 'none' ],\r\n    canGrantGroupAccess: [ false ],\r\n    canWatchMembers: [ false ],\r\n  });\r\n\r\n  constructor(\r\n    private sessionService: UserSessionService,\r\n    private updateGroupManagersService: UpdateGroupManagersService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private fb: UntypedFormBuilder,\r\n    private confirmationService: ConfirmationService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    if (this.manager) {\r\n      this.form.reset({\r\n        canManage: this.manager.canManage,\r\n        canGrantGroupAccess: this.manager.canGrantGroupAccess,\r\n        canWatchMembers: this.manager.canWatchMembers,\r\n      }, { emitEvent: false });\r\n\r\n      this.userCaption = this.manager.login ? formatUser({\r\n        login: this.manager.login,\r\n        firstName: this.manager.firstName,\r\n        lastName: this.manager.lastName,\r\n      }) : this.manager.name;\r\n    }\r\n  }\r\n\r\n  onClose(): void {\r\n    this.close.emit({ updated: false });\r\n  }\r\n\r\n  onAccept(): void {\r\n    if (!this.manager) {\r\n      throw new Error('Unexpected: Missed manager data');\r\n    }\r\n\r\n    const currentUserId = this.sessionService.session$.value?.groupId;\r\n\r\n    if (!currentUserId) {\r\n      throw new Error('Unexpected: Missed current used ID');\r\n    }\r\n\r\n    const canManageValue = this.form.get('canManage')?.value as GroupManagerPermissionChanges['canManage'];\r\n\r\n    if (this.manager.id !== currentUserId || this.manager.id === currentUserId &&\r\n      (this.manager.canManage !== 'memberships_and_group') || canManageValue === 'memberships_and_group') {\r\n      this.update();\r\n      return;\r\n    }\r\n\r\n    this.confirmationService.confirm({\r\n      message: $localize`Are you sure to remove from yourself the permission to edit group settings and edit managers?\r\n        You may lose manager access and not be able to restore it.`,\r\n      header: $localize`Confirm Action`,\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: $localize`Yes, save these changes.`,\r\n      acceptButtonStyleClass: 'p-button-danger',\r\n      accept: () => {\r\n        this.update();\r\n      },\r\n      rejectLabel: $localize`No`,\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    if (!this.manager || !this.group) {\r\n      throw new Error('Unexpected: Missed input component params');\r\n    }\r\n\r\n    const managerPermissions: GroupManagerPermissionChanges = {\r\n      canManage: this.form.get('canManage')?.value as GroupManagerPermissionChanges['canManage'],\r\n      canGrantGroupAccess: this.form.get('canGrantGroupAccess')?.value as GroupManagerPermissionChanges['canGrantGroupAccess'],\r\n      canWatchMembers: this.form.get('canWatchMembers')?.value as GroupManagerPermissionChanges['canWatchMembers'],\r\n    };\r\n\r\n    this.isUpdating = true;\r\n    this.updateGroupManagersService.update(this.group.id, this.manager.id, managerPermissions).subscribe({\r\n      next: () => {\r\n        this.isUpdating = false;\r\n        this.actionFeedbackService.success($localize`New permissions successfully saved.`);\r\n        this.close.emit({ updated: true });\r\n      },\r\n      error: () => {\r\n        this.isUpdating = false;\r\n        this.actionFeedbackService.error($localize`Failed to save permissions.`);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../../shared/helpers/config';\r\nimport { decodeSnakeCase } from '../../shared/operators/decode';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User, userDecoder } from '../../modules/group/http-services/get-user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetUserByLoginService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  get(login: string): Observable<User> {\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/users/by-login/${login}`)\r\n      .pipe(decodeSnakeCase(userDecoder));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActionResponse } from '../../../shared/http-services/action-response';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { Observable } from 'rxjs';\r\nimport { GroupManagerPermissionChanges } from './update-group-managers.service';\r\n\r\nconst defaultPermissions: GroupManagerPermissionChanges = {\r\n  canGrantGroupAccess: false,\r\n  canManage: 'none',\r\n  canWatchMembers: false,\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GroupCreateManagerService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  create(\r\n    groupId: string,\r\n    managerId: string,\r\n    payload: GroupManagerPermissionChanges = defaultPermissions,\r\n  ): Observable<ActionResponse<unknown>> {\r\n    return this.http.post<ActionResponse<unknown>>(`${appConfig.apiUrl}/groups/${groupId}/managers/${managerId}`, {\r\n      can_manage: payload.canManage,\r\n      can_grant_group_access: payload.canGrantGroupAccess,\r\n      can_watch_members: payload.canWatchMembers,\r\n    });\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { Manager } from '../../http-services/get-group-managers.service';\r\nimport { GetUserByLoginService } from '../../../../core/http-services/get-user-by-login.service';\r\nimport { GroupCreateManagerService } from '../../http-services/group-create-manager.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { errorIsHTTPForbidden, errorIsHTTPNotFound } from '../../../../shared/helpers/errors';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'alg-group-manager-add',\r\n  templateUrl: './group-manager-add.component.html',\r\n  styleUrls: [ './group-manager-add.component.scss' ]\r\n})\r\nexport class GroupManagerAddComponent {\r\n\r\n  @Output() added = new EventEmitter<void>();\r\n\r\n  @Input() groupData?: GroupData;\r\n  @Input() managers?: Manager[];\r\n\r\n  state: 'ready' | 'error' | 'loading' = 'ready';\r\n  login = '';\r\n\r\n  constructor(\r\n    private getUserByLoginService: GetUserByLoginService,\r\n    private groupCreateManagerService: GroupCreateManagerService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {}\r\n\r\n  onClick(): void {\r\n    if (!this.managers) {\r\n      throw new Error('Unexpected: Missed managers');\r\n    }\r\n\r\n    if (this.managers.some(manager => manager.login === this.login)) {\r\n      this.actionFeedbackService.error($localize`This user is already a manager of this group.`);\r\n      return;\r\n    }\r\n\r\n    if (!this.groupData) {\r\n      throw new Error('Unexpected: missed group data');\r\n    }\r\n\r\n    const groupId = this.groupData.group.id;\r\n\r\n    this.state = 'loading';\r\n    this.getUserByLoginService.get(this.login).pipe(\r\n      switchMap(user => this.groupCreateManagerService.create(groupId, user.groupId)),\r\n    ).subscribe({\r\n      next: () => {\r\n        this.state = 'ready';\r\n        this.actionFeedbackService.success($localize`Manager added!`);\r\n        this.login = '';\r\n        this.added.emit();\r\n      },\r\n      error: error => {\r\n        this.state = 'error';\r\n\r\n        if (errorIsHTTPNotFound(error)) {\r\n          this.actionFeedbackService.error($localize`The login you entered does not exist or is not visible to you.`);\r\n        } else if (errorIsHTTPForbidden(error)) {\r\n          this.actionFeedbackService.error($localize`Unable to add this manager.`);\r\n        } else {\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(error instanceof HttpErrorResponse)) throw error;\r\n        }\r\n      },\r\n    });\r\n  }\r\n}\r\n","<alg-section-paragraph icon=\"fa fa-sign-in-alt\" i18n-label label=\"Add a manager\">\r\n  <div class=\"input-wrapper\">\r\n    <input\r\n      type=\"text\"\r\n      i18n-placeholder=\"Placeholder of field for searching for user by login\" placeholder=\"Login of a user\"\r\n      [(ngModel)]=\"login\"\r\n      [disabled]=\"state === 'loading'\"\r\n    >\r\n    <span class=\"icon\">\r\n      <i class=\"fa fa-font\"></i>\r\n    </span>\r\n    <p-button\r\n      styleClass=\"alg-button p-button-rounded\"\r\n      i18n-label label=\"Add\"\r\n      icon=\"fa fa-plus\"\r\n      [disabled]=\"login === '' || state === 'loading'\"\r\n      (onClick)=\"onClick()\"\r\n    ></p-button>\r\n  </div>\r\n</alg-section-paragraph>\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-loading size=\"medium\" *ngIf=\"state.isFetching && !state.data\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    i18n-message message=\"Error while loading the group managers\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"fetchData()\"\r\n  ></alg-error>\r\n\r\n  <ng-container *ngIf=\"state.data as managers\">\r\n    <alg-section icon=\"fa fa-users\" i18n-label label=\"Managers of this group\">\r\n      <alg-grid\r\n        tableStyle=\"--group-manager-list\"\r\n        class=\"slanted-grid\"\r\n        *ngIf=\"managers.length > 0; else noManagers\"\r\n        [loading]=\"removalInProgress || state.isFetching\"\r\n        [data]=\"managers\"\r\n        [(selection)]=\"selection\"\r\n        sortMode=\"single\"\r\n        [showGear]=\"false\"\r\n        [scrollable]=\"false\"\r\n        dataKey=\"id\"\r\n      >\r\n        <ng-template #headerTemplate let-columns>\r\n          <tr style=\"border: none; height: 100%\">\r\n            <th class=\"thin\" *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\"></th>\r\n            <th style=\"min-width: 160px;\">\r\n              <div class=\"slanted-header\">\r\n                <div class=\"slanted-header-content\" i18n>\r\n                  Name\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th style=\"min-width: 110px;\">\r\n              <div class=\"slanted-header\">\r\n                <div class=\"slanted-header-content\" i18n>\r\n                  Can Manage\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th style=\"width: 5rem; max-width: 5rem;\">\r\n              <div class=\"slanted-header\">\r\n                <div class=\"slanted-header-content\" i18n>\r\n                  Can grant group access\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th style=\"width: 5rem; max-width: 5rem;\">\r\n              <div class=\"slanted-header\">\r\n                <div class=\"slanted-header-content\" i18n>\r\n                  Can watch members\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th style=\"width: 11rem; max-width: 11rem;\"></th>\r\n          </tr>\r\n        </ng-template>\r\n\r\n        <ng-template\r\n          #bodyTemplate\r\n          let-rowData\r\n          let-columns=\"columns\"\r\n          let-rowIndex=\"rowIndex\"\r\n        >\r\n          <tr [pSelectableRow]=\"rowData\" [pSelectableRowIndex]=\"rowIndex\">\r\n            <td class=\"thin\" *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\">\r\n              <p-tableCheckbox class=\"p-chkbox\" [value]=\"rowData\"></p-tableCheckbox>\r\n            </td>\r\n            <td\r\n              style=\"text-align: left; min-width: 160px; padding-left: 0.5rem; justify-content: left\"\r\n              tooltipPosition=\"top\"\r\n              tooltipStyleClass=\"tooltip-custom\"\r\n            >\r\n              <a class=\"alg-link\"\r\n                [routerLink]=\"rowData | groupLink\"\r\n              >\r\n                {{ rowData.login ? (rowData | userCaption) : rowData.name }}\r\n              </a>\r\n            </td>\r\n            <td style=\"min-width: 110px;\">\r\n              {{ rowData.canManageAsText }}\r\n            </td>\r\n            <td style=\"width: 5rem; max-width: 5rem;\">\r\n              <span class=\"table-icon\"\r\n                [ngClass]=\"{\r\n                  locked: rowData.canGrantGroupAccess,\r\n                  unlocked: !rowData.canGrantGroupAccess\r\n                }\">\r\n                <i *ngIf=\"!rowData.canGrantGroupAccess\" class=\"fa fa-times\"></i>\r\n                <i *ngIf=\"rowData.canGrantGroupAccess\" class=\"fa fa-check\"></i>\r\n              </span>\r\n            </td>\r\n            <td style=\"width: 5rem; max-width: 5rem;\">\r\n              <span class=\"table-icon\"\r\n                [ngClass]=\"{\r\n                  locked: rowData.canWatchMembers,\r\n                  unlocked: !rowData.canWatchMembers\r\n                }\">\r\n                <i *ngIf=\"!rowData.canWatchMembers\" class=\"fa fa-times\"></i>\r\n                <i *ngIf=\"rowData.canWatchMembers\" class=\"fa fa-check\"></i>\r\n              </span>\r\n            </td>\r\n            <td style=\"width: 11rem; max-width: 11rem;\">\r\n              <button\r\n                pButton\r\n                type=\"button\"\r\n                icon=\"pi pi-pencil\"\r\n                class=\"p-button-text\"\r\n                (click)=\"openPermissionsEditDialog(rowData)\"\r\n                *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\"\r\n              ></button>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n\r\n        <ng-template #footerTemplate>\r\n          <tr *ngIf=\"datapager.canLoadMore$ | async\">\r\n            <td [colSpan]=\"6\">\r\n              <div class=\"text-center\">\r\n                <button\r\n                  pButton\r\n                  class=\"p-button-rounded\"\r\n                  i18n-label label=\"Load more\"\r\n                  (click)=\"fetchMoreData()\"\r\n                  [disabled]=\"state.isFetching\"\r\n                ></button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n\r\n        <ng-template *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\" #summaryTemplate>\r\n          <div class=\"summary\">\r\n            <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\r\n            <span class=\"select-all\" (click)=\"onSelectAll(managers)\" i18n>\r\n              Select all\r\n            </span>\r\n            <span class=\"filler\"></span>\r\n            <div class=\"summary-actions\">\r\n              <span (click)=\"onRemove($event)\" [class.disabled]=\"removalInProgress || !state.isReady || selection.length === 0\">\r\n              <span i18n>Remove</span>\r\n                <i class=\"fa fa-trash-alt\"></i>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </alg-grid>\r\n\r\n      <ng-template #noManagers>\r\n        <div class=\"validation-text\" i18n>\r\n          This group has no dedicated managers.\r\n        </div>\r\n      </ng-template>\r\n    </alg-section>\r\n    <alg-group-manager-add\r\n      *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\"\r\n      [groupData]=\"groupData\"\r\n      [managers]=\"managers\"\r\n      (added)=\"onAdded()\"\r\n    ></alg-group-manager-add>\r\n  </ng-container>\r\n\r\n  <alg-manager-permission-dialog\r\n    [visible]=\"isPermissionsEditDialogOpened\"\r\n    [group]=\"groupData?.group\"\r\n    [manager]=\"dialogManager\"\r\n    (close)=\"closePermissionsEditDialog($event)\"\r\n  ></alg-manager-permission-dialog>\r\n</ng-container>\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { GetGroupManagersService, Manager } from '../../http-services/get-group-managers.service';\r\nimport { GroupData, GroupDataSource } from '../../services/group-datasource.service';\r\nimport { RemoveGroupManagerService } from '../../http-services/remove-group-manager.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { mapStateData } from '../../../../shared/operators/state';\r\nimport { UserSessionService } from '../../../../shared/services/user-session.service';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { displayGroupManagerRemovalResponseToast } from './group-manager-removal-response-handling';\r\nimport { DataPager } from 'src/app/shared/helpers/data-pager';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nconst managersLimit = 25;\r\n\r\n@Component({\r\n  selector: 'alg-group-manager-list',\r\n  templateUrl: './group-manager-list.component.html',\r\n  styleUrls: [ './group-manager-list.component.scss' ]\r\n})\r\nexport class GroupManagerListComponent implements OnChanges {\r\n\r\n  @Input() groupData?: GroupData;\r\n\r\n  selection: Manager[] = [];\r\n  removalInProgress = false;\r\n  isPermissionsEditDialogOpened = false;\r\n  dialogManager?: Manager & { canManageAsText: string };\r\n\r\n  readonly datapager = new DataPager({\r\n    fetch: (pageSize, latestManager?: Manager): Observable<Manager[]> => {\r\n      if (!this.groupData) throw new Error('unexpected');\r\n      return this.getGroupManagersService.getGroupManagers(this.groupData.group.id, { limit: pageSize, fromId: latestManager?.id });\r\n    },\r\n    pageSize: managersLimit,\r\n    onLoadMoreError: (): void => {\r\n      this.actionFeedbackService.error($localize`Could not load more results, are you connected to the internet?`);\r\n    },\r\n  });\r\n\r\n  readonly state$ = this.datapager.list$.pipe(\r\n    mapStateData(managers => managers.map(manager => ({\r\n      ...manager,\r\n      canManageAsText: this.getManagerLevel(manager),\r\n    }))),\r\n  );\r\n\r\n  constructor(\r\n    private getGroupManagersService: GetGroupManagersService,\r\n    private removeGroupManagerService: RemoveGroupManagerService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private groupDataSource: GroupDataSource,\r\n    private userService: UserSessionService,\r\n    private confirmationService: ConfirmationService,\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.groupData) {\r\n      (changes.groupData?.previousValue as GroupData | undefined)?.group.id !== this.groupData?.group.id\r\n        ? this.fetchData()\r\n        : this.fetchMoreData();\r\n    }\r\n  }\r\n\r\n  private getManagerLevel(manager: Manager): string {\r\n    switch (manager.canManage) {\r\n      case 'none':\r\n        return $localize`Read-only`;\r\n      case 'memberships':\r\n        return $localize`Memberships`;\r\n      case 'memberships_and_group':\r\n        return $localize`Memberships and group`;\r\n    }\r\n  }\r\n\r\n  fetchData(): void {\r\n    this.datapager.reset();\r\n    this.fetchMoreData();\r\n  }\r\n  fetchMoreData(): void {\r\n    if (!this.groupData) throw new Error('unexpected');\r\n    this.datapager.load();\r\n  }\r\n\r\n  onSelectAll(managers: Manager[]): void {\r\n    if (this.selection.length === managers.length) {\r\n      this.selection = [];\r\n      return;\r\n    }\r\n    this.selection = managers;\r\n  }\r\n\r\n  onRemove(event: Event): void {\r\n    if (this.selection.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const currentUserId = this.userService.session$.getValue()?.groupId;\r\n\r\n    if (!currentUserId) {\r\n      throw new Error('Unexpected: Missed current user ID');\r\n    }\r\n\r\n    if (this.selection.some(manager => manager.id === currentUserId)) {\r\n      this.confirmationService.confirm({\r\n        target: event.target || undefined,\r\n        key: 'commonPopup',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        message: $localize`Are you sure to remove yourself from the managers of this group? You may lose manager access and\r\n          not be able to restore it.`,\r\n        acceptLabel: $localize`Yes, remove me from the group managers`,\r\n        acceptButtonStyleClass: 'p-button-danger',\r\n        acceptIcon: 'fa fa-check',\r\n        rejectLabel: $localize`No`,\r\n        accept: () => this.remove(),\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n  }\r\n\r\n  remove(): void {\r\n    if (!this.groupData) {\r\n      throw new Error('Unexpected: Missed groupData');\r\n    }\r\n\r\n    const currentUserId = this.userService.session$.getValue()?.groupId;\r\n\r\n    if (!currentUserId) {\r\n      throw new Error('Unexpected: Missed current user ID');\r\n    }\r\n\r\n    const groupId = this.groupData.group.id;\r\n    const ownManagerId = this.selection.find(manager => manager.id === currentUserId)?.id;\r\n\r\n    this.removalInProgress = true;\r\n\r\n    this.removeGroupManagerService.removeBatch(\r\n      groupId,\r\n      this.selection.filter(manager => manager.id !== ownManagerId).map(manager => manager.id),\r\n      ownManagerId,\r\n    )\r\n      .subscribe({\r\n        next: result => {\r\n          displayGroupManagerRemovalResponseToast(this.actionFeedbackService, result);\r\n          this.removalInProgress = false;\r\n\r\n          if (result.countSuccess > 0) {\r\n            this.selection = [];\r\n            this.fetchData();\r\n          }\r\n        },\r\n        error: err => {\r\n          this.removalInProgress = false;\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n  }\r\n\r\n  openPermissionsEditDialog(manager: Manager & { canManageAsText: string }): void {\r\n    this.isPermissionsEditDialogOpened = true;\r\n    this.dialogManager = manager;\r\n  }\r\n\r\n  closePermissionsEditDialog(event: { updated: boolean }): void {\r\n    this.isPermissionsEditDialogOpened = false;\r\n    this.dialogManager = undefined;\r\n\r\n    if (event.updated) {\r\n      this.fetchData();\r\n      this.groupDataSource.refetchGroup();\r\n    }\r\n  }\r\n\r\n  onAdded(): void {\r\n    this.fetchData();\r\n  }\r\n}\r\n","import { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { Result } from '../../http-services/remove-group-manager.service';\r\n\r\nexport function displayGroupManagerRemovalResponseToast(feedbackService: ActionFeedbackService, result: Result): void {\r\n  if (result.countSuccess === result.countRequests) {\r\n    feedbackService.success($localize`${result.countSuccess} manager(s) have been removed`);\r\n  } else if (result.countSuccess === 0) {\r\n    feedbackService.error($localize`Unable to remove the selected manager(s). ` + `${result.errorText || ''}`);\r\n  } else {\r\n    feedbackService.partial(\r\n      $localize`${result.countSuccess} manager(s) have been removed, ${result.countRequests - result.countSuccess} could\r\n       not be removed. ` + `${result.errorText || ''}`\r\n    );\r\n  }\r\n}\r\n","<alg-group-manager-list\r\n  [groupData]=\"groupData\"\r\n  *ngIf=\"groupData?.group?.isCurrentUserManager || groupData?.group?.currentUserMembership !== 'none'; else noPermission\"\r\n></alg-group-manager-list>\r\n\r\n<ng-template #noPermission>\r\n  <div class=\"error validation-text\" i18n>You are not allowed to see this page.</div>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\nimport { ManagementAdditions } from '../../helpers/group-management';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-managers',\r\n  templateUrl: './group-managers.component.html',\r\n  styleUrls: [ './group-managers.component.scss' ],\r\n})\r\nexport class GroupManagersComponent {\r\n  @Input() groupData?: GroupData & { group: GroupData['group'] & ManagementAdditions };\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { itemCorePermDecoder, itemEntryTimePermDecoder, itemSessionPermDecoder } from 'src/app/shared/models/domain/item-permissions';\r\n\r\nconst groupPermissionsDecoder = pipe(\r\n  itemCorePermDecoder,\r\n  D.intersect(itemSessionPermDecoder),\r\n  D.intersect(itemEntryTimePermDecoder),\r\n);\r\n\r\nconst grantedPermissionsDecoder = D.struct({\r\n  group: D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n  }),\r\n  item: D.struct({\r\n    id: D.string,\r\n    languageTag: D.string,\r\n    requiresExplicitEntry: D.boolean,\r\n    title: D.nullable(D.string),\r\n  }),\r\n  permissions: groupPermissionsDecoder,\r\n  sourceGroup: D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n  }),\r\n});\r\n\r\nexport type GroupPermissions = D.TypeOf<typeof groupPermissionsDecoder>;\r\nexport type GrantedPermissions = D.TypeOf<typeof grantedPermissionsDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GrantedPermissionsService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  get(id: string, descendants = 0): Observable<GrantedPermissions[]> {\r\n    const httpParams = new HttpParams().set('descendants', descendants);\r\n    return this.http.get<unknown>(`${appConfig.apiUrl}/groups/${ id }/granted_permissions`, {\r\n      params: httpParams,\r\n    }).pipe(\r\n      decodeSnakeCase(D.array(grantedPermissionsDecoder)),\r\n    );\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nconst PERMISSION_CAPTIONS = {\r\n  none: $localize`None`,\r\n  children: $localize`Children`,\r\n  all: $localize`All`,\r\n  all_with_grant: $localize`All with grant`,\r\n  enter: $localize`Enter`,\r\n  content: $localize`Content`,\r\n  content_with_descendants: $localize`Content with descendants`,\r\n  solution: $localize`Solution`,\r\n  solution_with_grant: $localize`Solution with grant`,\r\n  info: $localize`Info`,\r\n  result: $localize`Result`,\r\n  answer: $localize`Answer`,\r\n  answer_with_grant: $localize`Answer with grant`,\r\n};\r\n\r\n@Pipe({ name: 'groupPermissionCaption', pure: true })\r\nexport class GroupPermissionCaptionPipe implements PipeTransform {\r\n  constructor() {}\r\n\r\n  transform(value: keyof typeof PERMISSION_CAPTIONS): string {\r\n    return PERMISSION_CAPTIONS[value] ?? $localize`No caption`;\r\n  }\r\n}\r\n","<ng-container *ngIf=\"permissions\">\r\n  <ul class=\"captions\">\r\n    <li class=\"caption-item\">\r\n      <div class=\"caption\">Can View: {{ permissions.canView | groupPermissionCaption }}</div>\r\n    </li>\r\n    <li class=\"caption-item\">\r\n      <div class=\"caption\">Can Grant View: {{ permissions.canGrantView | groupPermissionCaption }}</div>\r\n    </li>\r\n    <li class=\"caption-item\">\r\n      <div class=\"caption\">Can Enter From: {{ permissions.canEnterFrom | date:'d/MM/y' }}</div>\r\n    </li>\r\n    <li class=\"caption-item\">\r\n      <div class=\"caption\">Until: {{ permissions.canEnterUntil | date:'d/MM/y' }}</div>\r\n    </li>\r\n  </ul>\r\n</ng-container>\r\n","import { Component, Input } from '@angular/core';\r\nimport { GroupPermissions } from '../../http-services/granted-permissions.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-permissions',\r\n  templateUrl: './group-permissions.component.html',\r\n  styleUrls: [ './group-permissions.component.scss' ],\r\n})\r\nexport class GroupPermissionsComponent {\r\n  @Input() permissions?: GroupPermissions;\r\n}\r\n","<ng-container *ngIf=\"group?.currentUserCanGrantGroupAccess; else noAccess\">\r\n  <alg-section icon=\"fa fa-users\" i18n-label label=\"Activity associated to {{ group?.name }}\">\r\n    <ng-container *ngIf=\"rootActivityState$ | async as rootActivityState\">\r\n      <div class=\"spinner\" *ngIf=\"rootActivityState.isFetching\">\r\n        <alg-loading size=\"medium\"></alg-loading>\r\n      </div>\r\n\r\n      <alg-error\r\n        *ngIf=\"rootActivityState.isError\"\r\n        i18n-message message=\"Error while loading the root activity.\"\r\n        [showRefreshButton]=\"true\"\r\n        refreshButtonType=\"refresh\"\r\n        (refresh)=\"refresh()\"\r\n      ></alg-error>\r\n\r\n      <ng-container *ngIf=\"rootActivityState.isReady\">\r\n        <ng-container *ngIf=\"rootActivityState.data; else noActivity\">\r\n          <div class=\"item\">\r\n            <div>\r\n              <i class=\"icon fa fa-folder\"></i>\r\n              <strong><ng-container i18n>Root activity:</ng-container> {{ rootActivityState.data.string.title }}</strong>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n\r\n        <ng-template #noActivity>\r\n          <div i18n>This group has no root activity.</div>\r\n        </ng-template>\r\n      </ng-container>\r\n    </ng-container>\r\n  </alg-section>\r\n\r\n  <alg-section\r\n    icon=\"fa fa-book\"\r\n    i18n-label label=\"Specific permissions given to the group on content\"\r\n  >\r\n    <ng-container *ngIf=\"permissionState$ | async as permissionState\">\r\n      <div class=\"spinner\" *ngIf=\"permissionState.isFetching\">\r\n        <alg-loading size=\"medium\"></alg-loading>\r\n      </div>\r\n\r\n      <alg-error\r\n        *ngIf=\"permissionState.isError\"\r\n        i18n-message message=\"Error while loading permissions.\"\r\n        [showRefreshButton]=\"true\"\r\n        refreshButtonType=\"refresh\"\r\n        (refresh)=\"refreshPermissions()\"\r\n      ></alg-error>\r\n\r\n      <ng-container *ngIf=\"permissionState.isReady\">\r\n        <ng-container *ngIf=\"permissionState.data.length > 1; else noPermissions\">\r\n          <div class=\"item\" *ngFor=\"let grantedPermission of permissionState.data\">\r\n          <div>\r\n            <i class=\"icon fa fa-folder\"></i>\r\n            <strong>\r\n              {{ grantedPermission.item.title }}.\r\n            </strong>\r\n            <ng-container\r\n              *ngIf=\"grantedPermission.sourceGroup.id !== group?.id && grantedPermission.group.id !== group?.id; else currentGroup\">\r\n                <span i18n>Given by</span>\r\n                <a\r\n                  class=\"alg-link\"\r\n                  [routerLink]=\"{ id: grantedPermission.sourceGroup.id, isUser: false } | groupLink\"\r\n                >\r\n                  {{ grantedPermission.sourceGroup.name }}\r\n                </a>\r\n            </ng-container>\r\n            <ng-template #currentGroup>\r\n              <span i18n>Given by this group</span>\r\n            </ng-template>\r\n          </div>\r\n          <alg-group-permissions [permissions]=\"grantedPermission.permissions\"></alg-group-permissions>\r\n        </div>\r\n        </ng-container>\r\n\r\n        <ng-template #noPermissions>\r\n          <div i18n>This group has no specific permissions.</div>\r\n        </ng-template>\r\n      </ng-container>\r\n    </ng-container>\r\n  </alg-section>\r\n</ng-container>\r\n\r\n<ng-template #noAccess>\r\n  <p class=\"error alg-error-text\" i18n>You are not allowed to manage permissions of this group.</p>\r\n</ng-template>\r\n","import { Component, Input, OnChanges, OnDestroy } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { GetItemByIdService } from '../../../item/http-services/get-item-by-id.service';\r\nimport { ReplaySubject, of, Subject } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { GrantedPermissionsService } from '../../http-services/granted-permissions.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-access',\r\n  templateUrl: './group-access.component.html',\r\n  styleUrls: [ './group-access.component.scss' ],\r\n})\r\nexport class GroupAccessComponent implements OnChanges, OnDestroy {\r\n  @Input() group?: Group;\r\n\r\n  private readonly group$ = new ReplaySubject<Group>(1);\r\n\r\n  private refresh$ = new Subject<void>();\r\n  rootActivityState$ = this.group$.pipe(\r\n    switchMap(({ rootActivityId }) => {\r\n      if (!rootActivityId) {\r\n        return of(null);\r\n      }\r\n      return this.getItemByIdService.get(rootActivityId);\r\n    }),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  private permissionsRefresh$ = new Subject<void>();\r\n  permissionState$ = this.group$.pipe(\r\n    switchMap(group => this.grantedPermissionsService.get(group.id)),\r\n    mapToFetchState({ resetter: this.permissionsRefresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private getItemByIdService: GetItemByIdService,\r\n    private grantedPermissionsService: GrantedPermissionsService,\r\n  ) {\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.group) {\r\n      this.group$.next(this.group);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.group$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  refreshPermissions(): void {\r\n    this.permissionsRefresh$.next();\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n\r\n  <ng-container *ngIf=\"state.data?.group as group\">\r\n    <div *ngIf=\"state.isFetching\" class=\"block-ui\"></div>\r\n    <alg-group-header [groupData]=\"state.data\" *ngIf=\"!(fullFrame$ | async)?.active\"></alg-group-header>\r\n    <alg-pending-join-requests\r\n        *ngIf=\"group.isCurrentUserManager && group.currentUserCanManage !== 'none'\"\r\n        [groupId]=\"group.id\"\r\n    ></alg-pending-join-requests>\r\n    <alg-group-indicator\r\n        class=\"group-indicator\"\r\n        *ngIf=\"group.currentUserManagership !== 'none' || group.currentUserMembership !== 'none'\"\r\n        [group]=\"group\"\r\n    >\r\n    </alg-group-indicator>\r\n    <!-- tabs -- if only the first tab is visible, do not show the tab bar -->\r\n    <div [hidden]=\"!group.isCurrentUserManager && group.currentUserMembership === 'none' && !adminTab.isActive && !accessTab?.isActive && !compositionTab.isActive && !settingsTab.isActive\">\r\n      <div class=\"nav-tab\">\r\n        <a\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./'\"\r\n          routerLinkActive #overviewTab=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n          [class.active]=\"overviewTab.isActive\"\r\n          i18n\r\n        >\r\n          Overview\r\n        </a>\r\n        <a\r\n          [hidden]=\"!group.isCurrentUserManager && !compositionTab?.isActive\"\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./members'\"\r\n          routerLinkActive #compositionTab=\"routerLinkActive\"\r\n          [class.active]=\"compositionTab.isActive\"\r\n          i18n\r\n        >\r\n          Composition\r\n        </a>\r\n        <a\r\n          [hidden]=\"!group.isCurrentUserManager && group.currentUserMembership === 'none' && !adminTab?.isActive\"\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./managers'\"\r\n          routerLinkActive #adminTab=\"routerLinkActive\"\r\n          [class.active]=\"adminTab.isActive\"\r\n          i18n\r\n        >\r\n          Managers\r\n        </a>\r\n        <a\r\n            [hidden]=\"!group.currentUserCanGrantGroupAccess && !accessTab?.isActive\"\r\n            class=\"nav-tab-item\"\r\n            [routerLink]=\"'./access'\"\r\n            routerLinkActive #accessTab=\"routerLinkActive\"\r\n            [class.active]=\"accessTab.isActive\"\r\n            i18n\r\n        >\r\n          Access\r\n        </a>\r\n        <a\r\n          [hidden]=\"!group.canCurrentUserManageGroup && !settingsTab?.isActive\"\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./settings'\"\r\n          routerLinkActive #settingsTab=\"routerLinkActive\"\r\n          [class.active]=\"settingsTab.isActive\"\r\n          i18n\r\n        >\r\n          Settings\r\n        </a>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"bg-white\">\r\n      <alg-group-overview\r\n        *ngIf=\"overviewTab?.isActive || !overviewTab && group.currentUserManagership === 'none' && group.currentUserMembership === 'none'\"\r\n        [group]=\"group\"\r\n        (groupRefreshRequired)=\"onGroupRefreshRequired()\"\r\n        (leftGroup)=\"refreshNav()\"\r\n      ></alg-group-overview>\r\n      <alg-group-composition *ngIf=\"!!compositionTab?.isActive\" [groupData]=\"state.data\" (groupRefreshRequired)=\"onGroupRefreshRequired()\" (addedGroup)=\"refreshNav()\" (removedGroup)=\"refreshNav()\"></alg-group-composition>\r\n      <alg-group-managers *ngIf=\"!!adminTab?.isActive\" [groupData]=\"state.data\"></alg-group-managers>\r\n      <alg-group-access *ngIf=\"!!accessTab?.isActive\" [group]=\"group\"></alg-group-access>\r\n      <alg-group-edit *ngIf=\"!!settingsTab?.isActive\" #groupEdit></alg-group-edit>\r\n    </div>\r\n\r\n  </ng-container>\r\n\r\n  <alg-loading *ngIf=\"state.isFetching && !state.data\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    [showRefreshButton]=\"$any(state.error).status !== 403\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"onGroupRefreshRequired()\"\r\n  >\r\n    <ng-container *ngIf=\"$any(state.error).status === 403; else otherError;\" i18n>\r\n      You are not allowed to view this group page.\r\n    </ng-container>\r\n    <ng-template #otherError>\r\n      <ng-container i18n>Error while loading the group info</ng-container>\r\n    </ng-template>\r\n  </alg-error>\r\n\r\n</ng-container>\r\n","import { Component, ViewChild } from '@angular/core';\r\nimport { GroupDataSource } from '../../services/group-datasource.service';\r\nimport { withManagementAdditions } from '../../helpers/group-management';\r\nimport { RouterLinkActive } from '@angular/router';\r\nimport { mapStateData } from 'src/app/shared/operators/state';\r\nimport { LayoutService } from '../../../../shared/services/layout.service';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\nimport { PendingChangesComponent } from '../../../../shared/guards/pending-changes-guard';\r\nimport { GroupEditComponent } from '../group-edit/group-edit.component';\r\n\r\n@Component({\r\n  selector: 'alg-group-details',\r\n  templateUrl: './group-details.component.html',\r\n  styleUrls: [ './group-details.component.scss' ],\r\n})\r\nexport class GroupDetailsComponent implements PendingChangesComponent {\r\n\r\n  state$ = this.groupDataSource.state$.pipe(mapStateData(state => ({\r\n    ...state,\r\n    group: withManagementAdditions(state.group),\r\n  })));\r\n  fullFrame$ = this.layoutService.fullFrame$;\r\n\r\n  // use of ViewChild required as these elements are shown under some conditions, so may be undefined\r\n  @ViewChild('overviewTab') overviewTab?: RouterLinkActive;\r\n  @ViewChild('compositionTab') compositionTab?: RouterLinkActive;\r\n  @ViewChild('adminTab') adminTab?: RouterLinkActive;\r\n  @ViewChild('settingsTab') settingsTab?: RouterLinkActive;\r\n  @ViewChild('accessTab') accessTab?: RouterLinkActive;\r\n  @ViewChild('groupEdit') groupEdit?: GroupEditComponent;\r\n\r\n  isDirty(): boolean {\r\n    return !!this.groupEdit?.isDirty();\r\n  }\r\n\r\n  constructor(\r\n    private groupDataSource: GroupDataSource,\r\n    private layoutService: LayoutService,\r\n    private currentContentService: CurrentContentService,\r\n  ) {}\r\n\r\n  refreshNav(): void {\r\n    this.currentContentService.forceNavMenuReload();\r\n  }\r\n\r\n  onGroupRefreshRequired(): void {\r\n    this.groupDataSource.refetchGroup();\r\n    this.refreshNav();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { map } from 'rxjs/operators';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\n\r\nconst groupIdDecoder = D.string;\r\n\r\ntype GroupId = D.TypeOf<typeof groupIdDecoder>;\r\n\r\nconst groupPathDecoder = D.array(groupIdDecoder);\r\n\r\ntype GroupPath = D.TypeOf<typeof groupPathDecoder>;\r\n\r\nconst groupPathResponseDecoder = D.struct({\r\n  path: groupPathDecoder,\r\n});\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupPathService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getGroupPath(groupId: GroupId): Observable<GroupPath> {\r\n    return this.http.get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/path-from-root`).pipe(\r\n      decodeSnakeCase(groupPathResponseDecoder),\r\n      // remove the last element from the path as it is the group id itself, that we do not need in our group paths\r\n      map(raw => raw.path.slice(0,-1)),\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap, UrlTree } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { combineLatestWith, filter, map } from 'rxjs/operators';\r\nimport { GetGroupPathService } from 'src/app/modules/group/http-services/get-group-path.service';\r\nimport { groupInfo, GroupInfo, isGroupInfo } from 'src/app/shared/models/content/group-info';\r\nimport { readyData } from 'src/app/shared/operators/state';\r\nimport { groupRoute, groupRouteFromParams, isGroupRouteError } from 'src/app/shared/routing/group-route';\r\nimport { GroupRouter } from 'src/app/shared/routing/group-router';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\nimport { LayoutService } from 'src/app/shared/services/layout.service';\r\nimport { ModeAction, ModeService } from 'src/app/shared/services/mode.service';\r\nimport { GroupDataSource } from '../../services/group-datasource.service';\r\n\r\nconst GROUP_BREADCRUMB_CAT = $localize`Groups`;\r\n\r\n/**\r\n * GroupByIdComponent is just a container for detail or edit page but manages the fetching on id change and (un)setting the current content.\r\n */\r\n@Component({\r\n  selector: 'alg-group-by-id',\r\n  templateUrl: './group-by-id.component.html',\r\n  styleUrls: [ './group-by-id.component.scss' ],\r\n  providers: [ GroupDataSource ],\r\n})\r\nexport class GroupByIdComponent implements OnDestroy {\r\n\r\n  private subscriptions: Subscription[] = []; // subscriptions to be freed up on destroy\r\n  private hasRedirected = false;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private currentContent: CurrentContentService,\r\n    private modeService: ModeService,\r\n    private layoutService: LayoutService,\r\n    private groupDataSource: GroupDataSource,\r\n    private groupRouter: GroupRouter,\r\n    private getGroupPath: GetGroupPathService,\r\n  ) {\r\n    this.layoutService.configure({ fullFrameActive: false });\r\n\r\n    // on route change: refetch group if needed\r\n    this.activatedRoute.paramMap.subscribe(params => this.fetchGroupAtRoute(params));\r\n\r\n    // on state change, update current content page info (for breadcrumb)\r\n    this.subscriptions.push(\r\n      this.groupDataSource.state$.pipe(\r\n        readyData(),\r\n        map(({ group, route, breadcrumbs }): GroupInfo => groupInfo({\r\n          route: route,\r\n          breadcrumbs: {\r\n            category: GROUP_BREADCRUMB_CAT,\r\n            path: breadcrumbs.map(breadcrumb => ({\r\n              title: breadcrumb.name,\r\n              navigateTo: (): UrlTree => this.groupRouter.url(breadcrumb.route),\r\n            })),\r\n            currentPageIdx: breadcrumbs.length - 1,\r\n          },\r\n          title: group.name,\r\n        })),\r\n      ).subscribe(p => this.currentContent.replace(p)),\r\n\r\n      this.modeService.modeActions$.pipe(\r\n        filter(action => [ ModeAction.StartEditing, ModeAction.StopEditing ].includes(action)),\r\n        combineLatestWith(this.currentContent.content$.pipe(filter(isGroupInfo))),\r\n      ).subscribe(([ action, content ]) => {\r\n        this.groupRouter.navigateTo(content.route, { page: [ action === ModeAction.StartEditing ? 'edit' : 'details' ] });\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.currentContent.clear();\r\n    this.subscriptions.forEach(s => s.unsubscribe());\r\n  }\r\n\r\n  private fetchGroupAtRoute(params: ParamMap): void {\r\n    const route = groupRouteFromParams(params);\r\n\r\n    if (isGroupRouteError(route)) {\r\n      if (!route.id) throw new Error('a group id is required to open group details');\r\n      if (this.hasRedirected) throw new Error('too many redirections');\r\n      else this.solveMissingPathAttempt(route.id);\r\n      return;\r\n    }\r\n\r\n    this.hasRedirected = false;\r\n    this.currentContent.replace(groupInfo({\r\n      route,\r\n      breadcrumbs: { category: GROUP_BREADCRUMB_CAT, path: [], currentPageIdx: -1 },\r\n    }));\r\n    this.groupDataSource.fetchGroup(route);\r\n  }\r\n\r\n  private solveMissingPathAttempt(groupId: string): void {\r\n    this.getGroupPath.getGroupPath(groupId).subscribe({\r\n      next: path => {\r\n        this.hasRedirected = true;\r\n        this.groupRouter.navigateTo(groupRoute({ id: groupId, isUser: false }, path), { navExtras: { replaceUrl: true } });\r\n      },\r\n      error: () => {\r\n        this.groupRouter.navigateTo(groupRoute({ id: groupId, isUser: false }, []), { navExtras: { replaceUrl: true } });\r\n      }\r\n    });\r\n  }\r\n}\r\n","<router-outlet></router-outlet>\r\n","<ng-container *ngIf=\"currentUser$ | async as currentUser\">\r\n  <div class=\"bg-white\">\r\n    <div class=\"modify-section\">\r\n      <div class=\"flex-1 modify-description\" i18n>\r\n        The following information is what we receive from France-IOI login platform.\r\n      </div>\r\n      <p-button\r\n        styleClass=\"alg-button p-button-rounded-full\"\r\n        i18n-label label=\"Modify\"\r\n        icon=\"fa fa-pen\"\r\n        (click)=\"onModify(currentUser.groupId)\"\r\n      ></p-button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"bg-white\">\r\n    <alg-section i18n-label label=\"Personal Information\" icon=\"fa fa-users\">\r\n      <ul class=\"alg-data-list\">\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Login</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.login }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>First Name</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.firstName }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Last Name</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.lastName }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Birth date</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.birthDate }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Student ID</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.studentId }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Gender</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.sex }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Nationality</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.countryCode }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Personal Web page</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.webSite }}</span>\r\n        </li>\r\n      </ul>\r\n    </alg-section>\r\n  </div>\r\n\r\n  <div class=\"bg-white\">\r\n    <alg-section i18n-label label=\"School Information\" icon=\"fa fa-graduation-cap\">\r\n      <ul class=\"alg-data-list\">\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Your grade</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.grade }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Highschool graduation year</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.graduationYear }}</span>\r\n        </li>\r\n      </ul>\r\n    </alg-section>\r\n  </div>\r\n\r\n  <div class=\"bg-white\">\r\n    <alg-section i18n-label label=\"Contact Information\" icon=\"fa fa-envelope\">\r\n      <ul class=\"alg-data-list\">\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Primary email</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.email }}</span>\r\n        </li>\r\n      </ul>\r\n    </alg-section>\r\n  </div>\r\n</ng-container>\r\n","import { Component } from '@angular/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Location } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'alg-current-user',\r\n  templateUrl: './current-user.component.html',\r\n  styleUrls: [ './current-user.component.scss' ],\r\n})\r\nexport class CurrentUserComponent {\r\n  currentUser$ = this.userSessionService.userProfile$;\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private location: Location,\r\n  ) {}\r\n\r\n  onModify(userId: string): void {\r\n    const backUrl = window.location.origin + this.location.prepareExternalUrl('update-profile.html');\r\n    window.open(\r\n      `${ appConfig.oauthServerUrl }?all=1&client_id=${ userId }&redirect_uri=${encodeURI(backUrl)}`,\r\n      undefined,\r\n      'popup,width=800,height=640'\r\n    );\r\n\r\n    const onProfileUpdated = (): void => {\r\n      this.userSessionService.refresh().subscribe({\r\n        error: err => {\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n      window.removeEventListener('profileUpdated', onProfileUpdated);\r\n    };\r\n\r\n    window.addEventListener('profileUpdated', onProfileUpdated);\r\n  }\r\n\r\n}\r\n","<div class=\"alg-page-header\" *ngIf=\"user\">\r\n  <div>\r\n    <div class=\"alg-page-header-title\">\r\n      {{ user | userCaption }}\r\n    </div>\r\n\r\n    <div class=\"alg-page-header-subtitle\" *ngIf=\"user.webSite\">\r\n      <i class=\"fa fa-external-link-alt\"></i>\r\n      <a class=\"web-site alg-link base-color\" [attr.href]=\"user.webSite\" target=\"_blank\">{{ user.webSite }}</a>\r\n    </div>\r\n\r\n    <div class=\"free-text alg-page-header-subtitle\" *ngIf=\"user.freeText\">\r\n      {{ user.freeText }}\r\n    </div>\r\n  </div>\r\n\r\n  <alg-page-navigator\r\n    *ngIf=\"true\"\r\n    [allowEditing]=\"false\"\r\n    [allowWatching]=\"!!user.currentUserCanWatchUser && !user.isCurrentUser\"\r\n    [isWatched]=\"!!(isCurrentGroupWatched$ | async)\"\r\n    [allowFullScreen]=\"false\"\r\n    (edit)=\"onEditButtonClicked()\"\r\n    (watch)=\"onStartWatchButtonClicked()\"\r\n    (stopWatch)=\"onStopWatchButtonClicked()\"\r\n  ></alg-page-navigator>\r\n</div>\r\n","import { Input, Component } from '@angular/core';\r\nimport { User } from '../../http-services/get-user.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { ModeAction, ModeService } from '../../../../shared/services/mode.service';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\nimport { RawGroupRoute } from 'src/app/shared/routing/group-route';\r\n\r\n@Component({\r\n  selector: 'alg-user-header[user][route]',\r\n  templateUrl: './user-header.component.html',\r\n  styleUrls: [ './user-header.component.scss' ],\r\n})\r\nexport class UserHeaderComponent {\r\n  @Input() user!: User;\r\n  @Input() route!: RawGroupRoute;\r\n\r\n  isCurrentGroupWatched$ = this.groupWatchingService.watchedGroup$.pipe(\r\n    map(watchedGroup => !!(watchedGroup && watchedGroup.route.id === this.user?.groupId)),\r\n  );\r\n\r\n  constructor(\r\n    private groupWatchingService: GroupWatchingService,\r\n    private modeService: ModeService,\r\n  ) {\r\n  }\r\n\r\n  onEditButtonClicked(): void {\r\n    this.modeService.modeActions$.next(ModeAction.StartEditing);\r\n  }\r\n\r\n  onStartWatchButtonClicked(): void {\r\n    this.groupWatchingService.startUserWatching(this.route, this.user);\r\n  }\r\n\r\n  onStopWatchButtonClicked(): void {\r\n    this.groupWatchingService.stopWatching();\r\n  }\r\n}\r\n","<ng-container *ngIf=\"currentUser$ | async as currentUser\">\r\n  <div class=\"bg-white\">\r\n    <alg-section i18n-label label=\"Platform settings\" icon=\"fa fa-cog\">\r\n      <ul class=\"alg-data-list\">\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Platform language</span>\r\n          <span class=\"alg-data-list-item-value\">\r\n            <alg-language-picker\r\n                styleClass=\"alg-language-picker-dropdown base\"\r\n                [defaultLang]=\"currentUser.defaultLanguage\"\r\n                [redirectOnChange]=\"false\"\r\n                (changeLang)=\"onChangeLang($event)\"\r\n            ></alg-language-picker>\r\n          </span>\r\n        </li>\r\n      </ul>\r\n    </alg-section>\r\n  </div>\r\n</ng-container>\r\n","import { Component } from '@angular/core';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { LocaleService } from '../../../../core/services/localeService';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'alg-platform-settings',\r\n  templateUrl: './platform-settings.component.html',\r\n  styleUrls: [ './platform-settings.component.scss' ],\r\n})\r\nexport class PlatformSettingsComponent {\r\n  currentUser$ = this.userSessionService.userProfile$;\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private localeService: LocaleService,\r\n  ) {}\r\n\r\n  onChangeLang(event: string): void {\r\n    this.update({ default_language: event });\r\n  }\r\n\r\n  update(changes: { default_language: string }): void {\r\n    this.userSessionService.updateCurrentUser(changes).subscribe({\r\n      next: () => {\r\n        this.actionFeedbackService.success($localize`Changes successfully saved.`);\r\n\r\n        if (changes.default_language) {\r\n          this.localeService.navigateTo(changes.default_language);\r\n        }\r\n      },\r\n      error: err => {\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n\r\n  <alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    i18n-message message=\"Error while loading the user info\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n\r\n  <ng-container *ngIf=\"state.isReady\">\r\n\r\n    <alg-user-header [user]=\"state.data.user\" [route]=\"state.data.route\" *ngIf=\"!(fullFrame$ | async)?.active\"></alg-user-header>\r\n\r\n    <nav class=\"nav-tab\" *ngIf=\"(currentUserGroupId$ | async) === state.data.user.groupId || (activeRoute$ | async) === 'personal-data' || (activeRoute$ | async) === 'settings'\">\r\n      <a\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./'\"\r\n          routerLinkActive #progress=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n          [class.active]=\"progress.isActive\"\r\n          i18n\r\n      >\r\n        Progress\r\n      </a>\r\n      <a\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./personal-data'\"\r\n          routerLinkActive #personalData=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n          [class.active]=\"personalData.isActive\"\r\n          i18n\r\n          [hidden]=\"(currentUserGroupId$ | async) !== state.data.user.groupId && (activeRoute$ | async) !== 'personal-data'\"\r\n      >\r\n        Personal data\r\n      </a>\r\n      <a\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./settings'\"\r\n          routerLinkActive #settings=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n          [class.active]=\"settings.isActive\"\r\n          i18n\r\n          [hidden]=\"(currentUserGroupId$ | async) !== state.data.user.groupId && (activeRoute$ | async) !== 'settings'\"\r\n      >\r\n        Settings\r\n      </a>\r\n    </nav>\r\n\r\n    <ng-container *ngIf=\"activeRoute$ | async as activeRoute\">\r\n      <ng-container *ngIf=\"activeRoute === 'progress'\">\r\n        <div class=\"bg-white\" *ngIf=\"currentUserGroupId$ | async as currentUserGroupId\">\r\n          <alg-section icon=\"fa fa-chart-line\" i18n-label label=\"Progress\">\r\n            <alg-group-log-view\r\n                [groupId]=\"currentUserGroupId !== state.data.user.groupId ? state.data.user.groupId : undefined\"\r\n                [showUserColumn]=\"false\"\r\n            ></alg-group-log-view>\r\n          </alg-section>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"activeRoute === 'personal-data'\">\r\n        <ng-container *ngIf=\"(currentUserGroupId$ | async) === state.data.user.groupId; else forbidden\">\r\n          <alg-current-user></alg-current-user>\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"activeRoute === 'settings'\">\r\n        <ng-container *ngIf=\"(currentUserGroupId$ | async) === state.data.user.groupId; else forbidden\">\r\n          <alg-platform-settings></alg-platform-settings>\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <ng-template #forbidden>\r\n        <div class=\"bg-white\">\r\n          <alg-error i18n-message message=\"You cannot access this page for this user\"></alg-error>\r\n        </div>\r\n      </ng-template>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-container>\r\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { GetUserService } from '../../http-services/get-user.service';\r\nimport { mapToFetchState, readyData } from '../../../../shared/operators/state';\r\nimport { combineLatest, Observable, of, Subject, Subscription } from 'rxjs';\r\nimport { ActivatedRoute, NavigationEnd, Router, RouterLinkActive } from '@angular/router';\r\nimport { catchError, delay, switchMap, map, startWith, filter, share, distinctUntilChanged } from 'rxjs/operators';\r\nimport { contentInfo } from '../../../../shared/models/content/content-info';\r\nimport { CurrentContentService } from '../../../../shared/services/current-content.service';\r\nimport { UserSessionService } from '../../../../shared/services/user-session.service';\r\nimport { formatUser } from '../../../../shared/helpers/user';\r\nimport { LayoutService } from '../../../../shared/services/layout.service';\r\nimport { GetGroupBreadcrumbsService } from '../../http-services/get-group-breadcrumbs.service';\r\nimport { groupRoute, groupRouteFromParams, isGroupRoute, rawGroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { GroupRouter } from 'src/app/shared/routing/group-router';\r\n\r\n@Component({\r\n  selector: 'alg-user',\r\n  templateUrl: './user.component.html',\r\n  styleUrls: [ './user.component.scss' ]\r\n})\r\nexport class UserComponent implements OnInit, OnDestroy {\r\n  @ViewChild('progress') progress?: RouterLinkActive;\r\n  @ViewChild('personalData') personalData?: RouterLinkActive;\r\n\r\n  private refresh$ = new Subject<void>();\r\n  private readonly userRoute$ = this.route.paramMap.pipe(\r\n    map(params => {\r\n      const { id, path } = groupRouteFromParams(params);\r\n      if (!id) throw new Error('expected user id is user page path');\r\n      const group = { id, isUser: true };\r\n      return path ? groupRoute(group, path) : rawGroupRoute(group);\r\n    })\r\n  );\r\n\r\n  readonly state$ = this.userRoute$.pipe(\r\n    switchMap(route => this.getUserService.getForId(route.id).pipe(map(user => ({ route: route, user: user })))),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n    share(),\r\n  );\r\n\r\n  readonly currentUserGroupId$ = this.userSessionService.userProfile$.pipe(\r\n    delay(0),\r\n    map(userProfile => userProfile.groupId),\r\n  );\r\n\r\n  readonly fullFrame$ = this.layoutService.fullFrame$;\r\n\r\n  private url$ = this.router.events.pipe(\r\n    filter(event => event instanceof NavigationEnd),\r\n    map(() => this.router.url),\r\n    startWith(this.router.url),\r\n    distinctUntilChanged(),\r\n  );\r\n  readonly activeRoute$: Observable<'progress' | 'personal-data' | 'settings'> = this.url$.pipe(\r\n    map(url => this.getCurrentRoute(url)),\r\n  );\r\n\r\n  private readonly breadcrumbs$ = this.userRoute$.pipe(\r\n    switchMap(route => (isGroupRoute(route) ? this.getGroupBreadcrumbsService.getBreadcrumbs(route) : of(undefined)))\r\n  );\r\n\r\n  private subscription?: Subscription;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private getUserService: GetUserService,\r\n    private userSessionService: UserSessionService,\r\n    private currentContent: CurrentContentService,\r\n    private layoutService: LayoutService,\r\n    private groupRouter: GroupRouter,\r\n    private getGroupBreadcrumbsService: GetGroupBreadcrumbsService,\r\n  ) {\r\n    this.layoutService.configure({ fullFrameActive: false });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = combineLatest([\r\n      this.userRoute$,\r\n      this.activeRoute$.pipe(map(p => this.pageTitle(p))),\r\n      this.state$.pipe(readyData()),\r\n      this.breadcrumbs$.pipe(catchError(() => of(undefined))), // error is handled elsewhere\r\n    ])\r\n      .pipe(\r\n        map(([ currentUserRoute, currentPageTitle, data, breadcrumbs ]) => contentInfo({\r\n          title: formatUser(data.user),\r\n          breadcrumbs: {\r\n            category: $localize`Users`,\r\n            path: [\r\n              ...(breadcrumbs?.slice(0,-1) ?? []).map(b => ({ title: b.name, navigateTo: this.groupRouter.url(b.route) })),\r\n              { title: formatUser(data.user), navigateTo: this.groupRouter.url(currentUserRoute) },\r\n              { title: currentPageTitle }\r\n            ],\r\n            currentPageIdx: breadcrumbs ? breadcrumbs.length : 1,\r\n          }\r\n        }))\r\n      ).subscribe(contentInfo => {\r\n        this.currentContent.replace(contentInfo);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.currentContent.clear();\r\n    this.subscription?.unsubscribe();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  /**\r\n   * Return the i18n title of a page\r\n   */\r\n  private pageTitle(page: 'progress' | 'personal-data' | 'settings'): string {\r\n    switch (page) {\r\n      case 'progress': return $localize`Progress`;\r\n      case 'personal-data': return $localize`Personal info`;\r\n      case 'settings': return $localize`Settings`;\r\n    }\r\n  }\r\n\r\n  private getCurrentRoute(url: string): 'progress' | 'personal-data' | 'settings' {\r\n    if (url.endsWith('/personal-data')) {\r\n      return 'personal-data';\r\n    } else if (url.endsWith('/settings')) {\r\n      return 'settings';\r\n    }\r\n    return 'progress';\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MyGroupsComponent } from './pages/my-groups/my-groups.component';\r\nimport { GroupDetailsComponent } from './pages/group-details/group-details.component';\r\nimport { GroupByIdComponent } from './pages/group-by-id/group-by-id.component';\r\nimport { UserComponent } from './pages/user/user.component';\r\nimport { PendingChangesGuard } from '../../shared/guards/pending-changes-guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'mine',\r\n    component: MyGroupsComponent,\r\n  },\r\n  {\r\n    path: 'users/:id',\r\n    component: UserComponent,\r\n    children: [\r\n      {\r\n        path: 'personal-data',\r\n        children: [],\r\n      },\r\n      {\r\n        path: 'settings',\r\n        children: [],\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: 'by-id/:id',\r\n    component: GroupByIdComponent,\r\n    children: [\r\n      {\r\n        path: 'details',\r\n        component: GroupDetailsComponent,\r\n        canDeactivate: [ PendingChangesGuard ],\r\n        children: [\r\n          {\r\n            path: '',\r\n            children: [],\r\n          },\r\n          {\r\n            path: 'members',\r\n            children: [],\r\n          },\r\n          {\r\n            path: 'managers',\r\n            children: [],\r\n          },\r\n          {\r\n            path: 'settings',\r\n            canDeactivate: [ PendingChangesGuard ],\r\n            children: [],\r\n          },\r\n          {\r\n            path: 'access',\r\n            children: [],\r\n          },\r\n        ]\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forChild(routes) ],\r\n  exports: [ RouterModule ],\r\n})\r\nexport class GroupRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SharedComponentsModule } from '../shared-components/shared-components.module';\r\n\r\nimport { GroupRoutingModule } from './group-routing.module';\r\n\r\nimport { GroupHeaderComponent } from './components/group-header/group-header.component';\r\nimport { GroupNoPermissionComponent } from './components/group-no-permission/group-no-permission.component';\r\nimport { GroupJoinByCodeComponent } from './components/group-join-by-code/group-join-by-code.component';\r\n\r\nimport { GroupOverviewComponent } from './pages/group-overview/group-overview.component';\r\nimport { GroupCompositionComponent } from './pages/group-composition/group-composition.component';\r\nimport { MyGroupsComponent } from './pages/my-groups/my-groups.component';\r\nimport { GroupDetailsComponent } from './pages/group-details/group-details.component';\r\nimport { DurationToMinPipe } from 'src/app/shared/pipes/duration';\r\nimport { GroupInviteUsersComponent } from './components/group-invite-users/group-invite-users.component';\r\nimport { GroupManagerListComponent } from './components/group-manager-list/group-manager-list.component';\r\nimport { CurrentUserComponent } from './pages/current-user/current-user.component';\r\nimport { GroupEditComponent } from './pages/group-edit/group-edit.component';\r\nimport { GroupByIdComponent } from './pages/group-by-id/group-by-id.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MemberListComponent } from './components/member-list/member-list.component';\r\nimport { GroupCompositionFilterComponent } from './components/group-composition-filter/group-composition-filter.component';\r\nimport { PendingChangesGuard } from 'src/app/shared/guards/pending-changes-guard';\r\nimport { JoinedGroupListComponent } from './components/joined-group-list/joined-group-list.component';\r\nimport { UserGroupInvitationsComponent } from './components/user-group-invitations/user-group-invitations.component';\r\nimport { PendingRequestComponent } from './components/pending-request/pending-request.component';\r\nimport { PendingJoinRequestsComponent } from './components/pending-join-requests/pending-join-requests.component';\r\nimport { AddSubGroupComponent } from './components/add-sub-group/add-sub-group.component';\r\nimport { ManagedGroupListComponent } from './components/managed-group-list/managed-group-list.component';\r\nimport { AssociatedActivityComponent } from './components/associated-activity/associated-activity.component';\r\nimport { GroupIndicatorComponent } from './components/group-indicator/group-indicator.component';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { RippleModule } from 'primeng/ripple';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\nimport { GroupDeleteService } from './services/group-delete.service';\r\nimport { GroupRemoveButtonComponent } from './components/group-remove-button/group-remove-button.component';\r\nimport { GroupLinksComponent } from './components/group-links/group-links.component';\r\nimport { UserComponent } from './pages/user/user.component';\r\nimport { UserHeaderComponent } from './components/user-header/user-header.component';\r\nimport { GroupLogViewComponent } from './components/group-log-view/group-log-view.component';\r\nimport { AddGroupComponent } from './components/add-group/add-group.component';\r\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\r\nimport { SuggestionOfActivitiesComponent } from './components/suggestion-of-activities/suggestion-of-activities.component';\r\nimport { GroupAccessComponent } from './pages/group-access/group-access.component';\r\nimport { GroupManagersComponent } from './pages/group-managers/group-managers.component';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { ManagerPermissionDialogComponent } from './components/manager-permission-dialog/manager-permission-dialog.component';\r\nimport { GroupPermissionsComponent } from './components/group-permissions/group-permissions.component';\r\nimport { GroupLeaveComponent } from './components/group-leave/group-leave.component';\r\nimport { GroupManagerAddComponent } from './components/group-manager-add/group-manager-add.component';\r\nimport { PlatformSettingsComponent } from './pages/platform-settings/platform-settings.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GroupHeaderComponent,\r\n    GroupOverviewComponent,\r\n    GroupCompositionComponent,\r\n    MyGroupsComponent,\r\n    GroupDetailsComponent,\r\n    GroupNoPermissionComponent,\r\n    GroupJoinByCodeComponent,\r\n    DurationToMinPipe,\r\n    GroupInviteUsersComponent,\r\n    GroupManagerListComponent,\r\n    CurrentUserComponent,\r\n    GroupEditComponent,\r\n    GroupByIdComponent,\r\n    MemberListComponent,\r\n    GroupCompositionFilterComponent,\r\n    JoinedGroupListComponent,\r\n    PendingJoinRequestsComponent,\r\n    UserGroupInvitationsComponent,\r\n    PendingRequestComponent,\r\n    AddSubGroupComponent,\r\n    ManagedGroupListComponent,\r\n    AssociatedActivityComponent,\r\n    GroupRemoveButtonComponent,\r\n    GroupIndicatorComponent,\r\n    GroupLinksComponent,\r\n    UserComponent,\r\n    UserHeaderComponent,\r\n    GroupLogViewComponent,\r\n    AddGroupComponent,\r\n    GroupManagersComponent,\r\n    SuggestionOfActivitiesComponent,\r\n    GroupAccessComponent,\r\n    ManagerPermissionDialogComponent,\r\n    GroupPermissionsComponent,\r\n    GroupLeaveComponent,\r\n    GroupManagerAddComponent,\r\n    PlatformSettingsComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    GroupRoutingModule,\r\n    SharedComponentsModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    ButtonModule,\r\n    RippleModule,\r\n    TooltipModule,\r\n    OverlayPanelModule,\r\n    DialogModule,\r\n  ],\r\n  exports: [\r\n    GroupIndicatorComponent\r\n  ],\r\n  providers: [\r\n    PendingChangesGuard,\r\n    GroupDeleteService\r\n  ]\r\n})\r\n\r\nexport class GroupModule {}\r\n"],"names":["NO_SORT","sort1","sort2","JSON","stringify","opts","params","HttpParams","length","apiFormatOpts","map","opt","ascending","field","set","join","groupMembershipDecoder","pipe","D","action","group","description","id","name","type","memberSince","dateDecoder","isMembershipLocked","canLeaveTeam","JoinedGroupsService","constructor","http","getJoinedGroups","sort","this","get","appConfig","sortOptionsToHTTP","decodeSnakeCase","memberships","filter","membership","i0","factory","GroupLeaveService","leave","groupId","delete","successData","data","changed","JoinedGroupListComponent","joinedGroupsService","groupLeaveService","confirmationService","actionFeedbackService","Subject","ReplaySubject","sort$","startWith","distinctUntilChanged","sortEquals","switchMap","mapToFetchState","resetter","refresh$","asObservable","ngOnDestroy","complete","onCustomSort","event","multiSortMeta","meta","order","multisortEventToOptions","next","onGroupLeaveClick","confirm","target","undefined","key","message","$localize","header","icon","acceptLabel","accept","leaveGroup","rejectLabel","groupName","subscribe","refresh","success","error","_err","selectors","Action","RequestActionsService","processJoinRequests","ids","Accept","forkJoin","Array","from","entries","groupMembersIds","post","group_ids","Map","Object","processLeaveRequests","processGroupInvitations","groupIds","feedbackService","result","msg","countSuccess","countRequests","detailMsg","partial","userDecoder","login","firstName","lastName","grade","groupPendingRequestDecoder","at","user","groupInvitationDecoder","invitingUser","GetRequestsService","getGroupPendingRequests","includeSubgroup","pendingRequests","r","getGroupInvitations","groupInvitations","invitation","wrapper","table","GridComponent","EventEmitter","onSelectionChange","selection","selectionChange","emit","onRowSelect","onRowUnselect","detectSelected","selectedCol","selectedColumns","col","columns","selected","toShow","ngOnChanges","_changes","showGear","showColumns","showColumnSelection","showAll","expand","newSel","push","expandWholeWidth","handleColumnChanges","item","sortFunction","onHeaderCheckbox","reset","clear","DomHandler","TableService","provide","Table","useFactory","tableFactory","deps","ctx","PendingRequestComponent","ngOnInit","panel","collapsed","requests","onAccept","onAcceptOrReject","onReject","state","processRequests","onSelectAll","sortMeta","groupColumn","PendingJoinRequestsComponent","getRequestsService","requestActionService","label","value","dataFetching","merge","of","fetchingState","readyState","tag","isReady","showSwitch","concat","currentSort","onProcessRequests","requestMap","forEach","elm","groupID","Error","memberID","displayResponseToast","res","size","values","includes","reduce","acc","parseResults","err","unexpectedError","HttpErrorResponse","onSubgroupSwitch","selectedIdx","ensureDefined","subgroupSwitchItems","onFetch","UserGroupInvitationsComponent","parseGroupInvitationResults","ManagedGroupListComponent","managedGroupService","fetchData","getManagedGroups","getType","getCanManage","GroupCreationService","create","response","addSubgroup","parentId","childId","assertSuccess","AddGroupComponent","groupCreationService","groupRouter","title","addChild","createdId","navigateTo","rawGroupRoute","MyGroupsComponent","currentContent","layoutService","fullFrame$","configure","fullFrameActive","replace","myGroupsInfo","breadcrumbs","category","path","currentPageIdx","onGroupJoined","joinedGroupList","forceNavMenuReload","breadcrumbDecoder","GetGroupBreadcrumbsService","getBreadcrumbs","route","breadcrumb","index","groupRoute","slice","GroupDataSource","getGroupByIdService","getGroupBreadcrumbsService","fetchOperation","shareReplay","fetchGroup","refetchGroup","SuggestionOfActivitiesComponent","groupWatchingService","itemNavigationService","watchedGroup$","isNotNull","watchedGroup","getRootActivities","rootActivities","act","navigationNeighbors_r3","GroupHeaderComponent","modeService","groupNavTreeService","combineLatest","group$","navigationNeighbors$","groupWithManagement","groupData","withManagementAdditions","onEditButtonClicked","modeActions$","ModeAction","onStartWatchButtonClicked","startGroupWatching","openSuggestionOfActivitiesOverlayPanel","onStopWatchButtonClicked","op","hide","stopWatching","show","setTimeout","align","GroupLogViewComponent","activityLogService","groupId$","getData$","BehaviorSubject","showOverlaySubject$","debounceTime","showOverlay$","toggle","showOverlaySubscription","unsubscribe","getAllActivityLog","getLogColumns","rowData","disabled","showUserColumn","onMouseEnter","itemId","targetRef","contentRef","nativeElement","onMouseLeave","canCloseOverlay","closeOverlay","GroupLeaveComponent","GroupOverviewComponent","router","onLeave","isPublic","groupRefreshRequired","leftGroup","navigate","TypeFilter","GroupCompositionFilterComponent","Users","directChildren","Teams","Groups","Sessions","defaultValue","setFilter","selectedChildrenFilter","childrenFilters","findIndex","childrenFilter","selectedTypeFilter","Math","max","directChildrenTypeFilters","allDescendantsTypeFilters","typeFilter","onTypeFilterChanged","typeFilters","change","onChildrenFilterChanged","GroupNoPermissionComponent","GroupActionsService","updateGroup","changes","put","CodeActionsService","createNewCode","resp","code","removeCode","CodeTokenComponent","refreshCode","remove","ctx_r18","GroupJoinByCodeComponent","groupActionsService","codeActionsService","tooltip","codeLifetimeOptions","codeInfo","codeLifetimeHasChanged","previousValue","codeLifetime","valueInSeconds","currentValue","codeLifetimeControlValue","asDuration","selectedCodeLifetimeOption","getSelectedCodeLifetimeOption","generateNewCode","processing","expiresAt","codeExpiresAt","code_expires_at","refreshRequired","submitCodeLifetime","ms","hasCodeNotSet","newCodeLifetime","CodeLifetime","code_lifetime","changeCodeLifetime","optionValue","isUsableOnce","isInfinite","InvitationResult","CreateGroupInvitationsService","createInvitations","logins","Success","AlreadyInvited","NotFound","MessageComponent","msgs","severity","summary","detail","GroupInviteUsersComponent","createGroupInvitationsService","formBuilder","subscription","inviteForm","valueChanges","loginListChanged","setState","newState","enable","disable","newValue","split","displayResponse","successInvites","e","alreadyInvited","notFoundUsers","invalidInvites","messages","onInviteClicked","control","trim","self","indexOf","setValue","GroupUsersService","removeUsers","usersId","httpParams","errorText","some","error_text","RemoveGroupService","removeBatch","catchError","RemoveSubgroupService","parentGroupId","childGroupId","usersColumns","sortable","groupsColumns","nameUserCountColumns","descendantUsersColumns","descendantTeamsColumns","MemberListComponent","getGroupMembersService","getGroupChildrenService","getGroupDescendantsService","groupUsersService","removeSubgroupService","removeGroupService","defaultFilter","DataPager","fetch","pageSize","latestRow","getRows","onLoadMoreError","datapager","list$","removalInProgress$","currentFilter","getColumns","fetchRows","load","fetchMoreRows","getGroupChildrenWithSubgroupCount","children","child","getTeamDescendants","descendantTeams","descendantTeam","parentGroups","parents","parent","members","member","isUser","getGroupMembers","getUserDescendants","limit","fromId","descendantUsers","descendantUser","onFilterChange","compositionFilter","rows","unselectAll","selectedMemberIds","onRemoveGroup","getSelectedGroupChildCaptions","acceptIcon","removeGroupsOrSubgroups","onRemoveSubgroups","selectedGroupIds","displayGroupRemovalResponseToast","removedGroup","onRemove","g","isEmpty","reject","groupInfoDecoder","SearchGroupService","search","searchString","fromObject","toString","groups","notBase","searchPossibleSubgroups","AddSubGroupComponent","searchGroupService","addGroup","GroupCompositionComponent","groupWithPermissions","refreshGroupInfo","_","memberList","addedGroup","activity","itemFound","GroupUpdateService","AssociatedActivityComponent","getItemByIdService","searchItemService","allowedNewActivityTypes","activityChanges$","triggerChange","onChange","isExistingActivity","isNewActivity","string","urlArrayForItemRoute","rawItemRoute","errorIsHTTPForbidden","items","isActivityFound","writeValue","rootActivity","registerOnChange","fn","registerOnTouched","_fn","setRootActivity","activityType","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","GroupDeleteService","GroupRemoveButtonComponent","groupDeleteService","id$","hasGroupChildren$","getGroupChildren","groupChild","onDeleteGroup","deleteGroup","deletionInProgress$","groupDeleted","navigateToMyGroups","GroupEditComponent","currentContentService","groupDataSource","groupUpdateService","createItemService","pendingChangesService","Validators","state$","mapStateData","readyData","initialFormData","resetFormWith","stopEditing","isDirty","groupForm","dirty","save","invalid","languageTag","asRootOfGroupId","concatMap","rootActivityId","root_activity_id","refreshNav","resetForm","refreshGroup","GroupLinksComponent","onButtonClick","GroupIndicatorComponent","managerDecoder","canManage","canGrantGroupAccess","canWatchMembers","GetGroupManagersService","getGroupManagers","options","RemoveGroupManagerService","managerId","ownManagerId","accumulator","seed","operate","scanInternals","arguments","removedManagers","removedManager","UpdateGroupManagersService","update","payload","can_manage","can_grant_group_access","can_watch_members","ctx_r0","ManagerPermissionDialogComponent","sessionService","updateGroupManagersService","fb","comment","manager","form","emitEvent","userCaption","formatUser","onClose","close","updated","currentUserId","session$","canManageValue","acceptButtonStyleClass","managerPermissions","isUpdating","GetUserByLoginService","defaultPermissions","GroupCreateManagerService","GroupManagerAddComponent","getUserByLoginService","groupCreateManagerService","onClick","managers","added","errorIsHTTPNotFound","GroupManagerListComponent","getGroupManagersService","removeGroupManagerService","userService","latestManager","canManageAsText","getManagerLevel","fetchMoreData","getValue","find","removalInProgress","displayGroupManagerRemovalResponseToast","openPermissionsEditDialog","isPermissionsEditDialogOpened","dialogManager","closePermissionsEditDialog","onAdded","GroupManagersComponent","groupPermissionsDecoder","itemCorePermDecoder","itemSessionPermDecoder","itemEntryTimePermDecoder","grantedPermissionsDecoder","requiresExplicitEntry","permissions","sourceGroup","GrantedPermissionsService","descendants","PERMISSION_CAPTIONS","none","all","all_with_grant","enter","content","content_with_descendants","solution","solution_with_grant","info","answer","answer_with_grant","GroupPermissionCaptionPipe","transform","pure","GroupPermissionsComponent","GroupAccessComponent","grantedPermissionsService","permissionsRefresh$","refreshPermissions","GroupDetailsComponent","groupEdit","onGroupRefreshRequired","groupPathDecoder","groupPathResponseDecoder","GetGroupPathService","getGroupPath","raw","GROUP_BREADCRUMB_CAT","GroupByIdComponent","activatedRoute","paramMap","fetchGroupAtRoute","subscriptions","groupInfo","url","p","combineLatestWith","content$","isGroupInfo","page","s","groupRouteFromParams","isGroupRouteError","hasRedirected","solveMissingPathAttempt","navExtras","replaceUrl","CurrentUserComponent","userSessionService","location","userProfile$","onModify","userId","backUrl","window","origin","prepareExternalUrl","open","encodeURI","onProfileUpdated","removeEventListener","addEventListener","UserHeaderComponent","startUserWatching","PlatformSettingsComponent","localeService","onChangeLang","default_language","updateCurrentUser","UserComponent","getUserService","userRoute$","getForId","share","delay","userProfile","events","NavigationEnd","url$","getCurrentRoute","isGroupRoute","activeRoute$","pageTitle","breadcrumbs$","currentUserRoute","currentPageTitle","contentInfo","b","endsWith","routes","component","canDeactivate","PendingChangesGuard","GroupRoutingModule","RouterModule","GroupModule","imports","CommonModule","SharedComponentsModule","ReactiveFormsModule","FormsModule","ButtonModule","RippleModule","TooltipModule","OverlayPanelModule","DialogModule"],"sourceRoot":"webpack:///"}