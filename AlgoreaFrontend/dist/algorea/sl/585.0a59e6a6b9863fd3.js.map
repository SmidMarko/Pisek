{"version":3,"file":"585.0a59e6a6b9863fd3.js","mappings":"mSASO,MAAMA,GAAuB,GAM9B,YAAqBC,EAAoBC,GAC7C,OAAOC,KAAKC,UAAUH,KAAWE,KAAKC,UAAUF,GAG5C,YAA4BG,GAChC,IAAIC,EAAS,IAAIC,KACjB,GAAmB,GAAfF,EAAKG,OAAa,OAAOF,EAC7B,MAAMG,EAAgBJ,EAAKK,IAAIC,GAAQA,EAAIC,UAAYD,EAAIE,MAAQ,IAAIF,EAAIE,SAC3EP,SAASA,EAAOQ,IAAI,OAAQL,EAAcM,KAAK,MACxCT,4ECbT,MAAMU,IAAyBC,SAC7BC,KAAS,CACPC,OAAQD,KAAU,sBAAuB,wBAAyB,iBAAkB,kBAAmB,kBACvGE,MAAOF,KAAS,CACdG,YAAaH,KAAWA,MACxBI,GAAIJ,KACJK,KAAML,KACNM,KAAMN,KAAU,QAAS,OAAQ,OAAQ,UAAW,QAAS,OAAQ,aAEvEO,YAAaP,KAAWQ,OACxBC,mBAAoBT,OAEtBA,KACEA,KAAU,CACRU,aAAcV,KAAU,gBAAiB,oBAAqB,oCAU7D,IAAMW,GAAmB,MAA1B,MAAOA,EAEXC,YAAoBC,eAEpBC,gBAAgBC,GACd,OAAOC,KAAKH,KACTI,IAAI,GAAGC,4CAAmD,CAAE9B,OAAQ+B,GAAkBJ,KACtFhB,MACCqB,OAAgBpB,KAAQF,MACxBN,OAAI6B,GAAeA,EAAYC,OAAOC,GAAwC,SAA1BA,EAAWrB,MAAMI,sDAThEK,GAAmBa,wCAAnBb,EAAmBc,QAAnBd,EAAmB,qBAFlB,SAEDA,GAAmB,iBCrBzB,IAAMe,GAAiB,MAAxB,MAAOA,EAEXd,YAAoBC,eAEpBc,MAAMC,GACJ,OAAOZ,KAAKH,KAAKgB,OAA+C,GAAGX,6CAAmDU,KACnH7B,MACCP,OAAIsC,OACJtC,OAAKuC,GAAiCA,EAAKC,wDARtCN,GAAiBF,wCAAjBE,EAAiBD,QAAjBC,EAAiB,qBAFhB,SAEDA,GAAiB,wHCb5BO,uBAOEA,4DAAWA,qBACZA,aAHCA,qDAeEA,cAAmD,QACjDA,WAAaA,QACbA,yBAAaA,QACbA,iBAAmC,UACjCA,YAAoBA,QACpBA,yBACFA,QACAA,8BAEAA,oCATFA,mDAAKA,gEAsBCA,+BAGMA,wCAOAA,wCAOAA,4CAfFA,YACEA,yBAOAA,yBAOAA,yBACFA,yCAhBuDA,iCAElDA,mDAOAA,sFASLA,SACEA,kBAMFA,mCAzBAA,kCAkBAA,iEAlBeA,oCAkBAA,uFAUjBA,qBAMIA,+EAASA,kCACZA,mCA7CTA,cAAI,OAAJA,CAAI,UAE4EA,SAA2BA,UAEzGA,cAAIA,SAA2BA,QAC/BA,cAAIA,yBAA2CA,QAC/CA,cAAI,aAEAA,mCACAA,6CA4BAA,6CAUFA,8DA7CoBA,+DAAwDA,6BAE1EA,6BACAA,iDAGeA,qGAA0H,aAA1HA,CAA0H,yCA6C/IA,cAAI,OAAJA,CAAI,UAEAA,YAAiDA,sCAD/CA,wHA9EVA,qBAMEA,kEAAgBA,2BAGhBA,gCAcAA,kCAqDAA,gCAOFA,qCAhFEA,mCAA0B,gBAA1BA,CAA0B,mDAd9BA,SACEA,8BAUAA,4BAqFFA,6BA9FKA,iCAUAA,mCCGE,IAAMC,GAAwB,MAA/B,MAAOA,EAUXtB,YAAoBuB,EACAC,EACAC,EACAC,GAHAtB,2BACAA,yBACAA,2BACAA,6BAZZA,cAAW,IAAIuB,IACNvB,WAAQ,IAAIwB,IAA2B,GAC/CxB,YAASA,KAAKyB,MAAM1C,MAC3B2C,QAAU5D,KACV6D,OAAqBC,KACrBC,OAAU9B,GAAQC,KAAKmB,oBAAoBrB,gBAAgBC,KAC3D+B,QAAgB,CAAEC,SAAU/B,KAAKgC,SAASC,kBAQ5CC,cACElC,KAAKyB,MAAMU,WAGbC,aAAaC,GACX,MAAMtC,EJxBJ,YAAkCsC,GACtC,OAAOA,EAAMC,eAAe9D,IAAI+D,IAAS,CAAE5D,MAAO4D,EAAK5D,MAAOD,UAAW6D,EAAKC,OAAS,KIuBxEC,CAAwBJ,GACjCtC,GAAMC,KAAKyB,MAAMiB,KAAK3C,GAG5B4C,kBAAkBN,EAAc9B,GAC9BP,KAAKqB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLC,QAASC,+DAAqDA,CAC9DC,OAAQD,gBAAyBA,CACjCE,KAAM,6BACNC,YAAaH,qBAA2BA,CACxCI,OAAQA,KACNrD,KAAKsD,WAAW/C,IAElBgD,YAAaN,IAAaA,GAI9BK,WAAW/C,GACT,MACMiD,EAAYjD,EAAWrB,MAAMG,KACnCW,KAAKoB,kBAAkBT,MAFPJ,EAAWrB,MAAME,IAG9BqE,UAAU,CACTf,KAAMA,KACJ1C,KAAK0D,UACL1D,KAAKsB,sBAAsBqC,QAAQV,6BAA2BO,GAEhEI,MAAOC,IACL7D,KAAKsB,sBAAsBsC,MAAMX,oCAA6BO,KAKtEE,UACE1D,KAAKgC,SAASU,qDAvDLxB,GAAwBV,qEAAxBU,EAAwB4C,sGDVXb,4DAAAA,GAiBTA,KAAAA,GACAA,KAAAA,GAEIA,gBAAAA,GAGcA,QAAAA,GAoBSA,8EAAAA,GAOAA,8HAAAA,GAUAA,iGAAAA,GAyBJA,sBAAAA,69CA1FxChC,wDAAeA,uTCeFC,GAAwB,iBCNzB6C,EAGX,MAHD,OAAYA,QAAM,KAChBA,qBACAA,uBAFUA,EAAZ,IAAYA,GAGX,GAKM,IAAMC,GAAqB,MAA5B,MAAOA,EAEXpE,YAAoBC,eAEpBoE,oBAAoBC,EAA4BjF,GAC9C,MAAMK,EAAOL,IAAW8E,EAAOI,OAAS,SAAW,SACnD,OAAOC,OACLC,MAAMC,KAAKJ,EAAIK,WAAW/F,IAAIgG,GAC5BxE,KAAKH,KACF4E,KACC,GAAGvE,qBAA2BsE,EAAgB,oBAAoBlF,IAAQ,KAAM,CAC9ElB,OAAQ,CACNsG,UAAWF,EAAgB,GAAG3F,KAAK,QAGxCE,MACCP,OAAIsC,OACJtC,OAAIuC,GAAQ,IAAI4D,IAAIC,OAAOL,QAAQxD,QAM7C8D,qBAAqBX,EAA4BjF,GAC/C,MAAMK,EAAOL,IAAW8E,EAAOI,OAAS,SAAW,SACnD,OAAOC,OACLC,MAAMC,KAAKJ,EAAIK,WAAW/F,IAAIgG,GAC5BxE,KAAKH,KACF4E,KACC,GAAGvE,qBAA2BsE,EAAgB,qBAAqBlF,IAAQ,KAAM,CAC/ElB,OAAQ,CACNsG,UAAWF,EAAgB,GAAG3F,KAAK,QAGxCE,MACCP,OAAIsC,OACJtC,OAAIuC,GAAQ,IAAI4D,IAAIC,OAAOL,QAAQxD,QAM7C+D,wBAAwBC,EAAoB9F,GAC1C,MAAMK,EAAOL,IAAW8E,EAAOI,OAAS,SAAW,SACnD,OAAOC,OACLW,EAASvG,IAAIoC,GACXZ,KAAKH,KACF4E,KAA2C,GAAGvE,6CAAmDU,KAAWtB,IAAQ,MACpHP,MACCP,OAAIsC,uDAjDHkD,GAAqBxD,wCAArBwD,EAAqBvD,QAArBuD,EAAqB,qBAFpB,SAEDA,GAAqB,sCCT5B,YAA+BgB,EAAwCC,EAAgBhG,GAC3F,MAAMiG,EAAMjG,IAAW8E,SAAgBd,UAAmBA,CAAGA,WAAmBA,CAEhF,GAAIgC,EAAOE,eAAiBF,EAAOG,cACjCJ,EAAgBrB,QAAQV,8DAAwDiC,OAAK,GACpD,IAAxBD,EAAOE,aAAoB,CACpC,MAAME,EAAYpG,IAAW8E,SAC3Bd,0CAAoDA,CACpDA,0CAAoDA,CACtD+B,EAAgBpB,MAAMyB,QAGtBL,EAAgBM,QAAQrC,iHADqBkC,gBCTjD,MAAMI,IAAcxG,SAClBC,KAAS,CACP4B,QAAS5B,KACTwG,MAAOxG,OAETA,KACEA,KAAU,CACRyG,UAAWzG,KAAWA,MACtB0G,SAAU1G,KAAWA,MACrB2G,MAAO3G,KAAWA,UAKlB4G,GAA6B5G,KAAS,CAC1C6G,GAAI7G,KAAWQ,OACfN,MAAOF,KAAS,CACdI,GAAIJ,KACJK,KAAML,OAERM,KAAMN,KAAU,eAAgB,iBAChC8G,KAAMP,KAGFQ,GAAyB/G,KAAS,CACtCC,OAAQD,KAAU,qBAAsB,uBAAwB,wBAChE6G,GAAIrG,MACJN,MAAOF,KAAS,CACdI,GAAIJ,KACJK,KAAML,KACNG,YAAaH,KAAWA,MACxBM,KAAMN,KAAU,QAAS,OAAQ,OAAQ,UAAW,QAAS,UAAW,UAE1E4B,QAAS5B,KACTgH,aAAchH,KAAWA,KAAS,CAChCI,GAAIJ,KACJyG,UAAWzG,KAAWA,MACtB0G,SAAU1G,KAAWA,MACrBwG,MAAOxG,UAwCJ,IAAMiH,GAAkB,MAAzB,MAAOA,EAEXrG,YAAoBC,eAEpBqG,wBACEtF,EACAuF,GAA4B,EAC5BpG,EAAiB,IAEjB,IAAI3B,EAAS,IAAIC,KACjB,OAAIuC,IACFxC,EAASA,EAAOQ,IAAI,WAAYgC,GAC5BuF,IAAiB/H,EAASA,EAAOQ,IAAI,4BAA6B,OAEpEmB,EAAKzB,OAAS,IAAGF,EAASA,EAAOQ,IAAI,OAAQmB,EAAKlB,KAAK,OACpDmB,KAAKH,KACTI,IAAa,GAAGC,kCAAyC,CAAE9B,OAAQA,IACnEW,MACCqB,OAAgBpB,KAAQ4G,MACxBpH,OAAI4H,GAAmBA,EAAgB5H,IAAI6H,IAAM,CAC/CR,GAAIQ,EAAER,GACN3G,MAAOmH,EAAEnH,MACT4G,KAAM,CACJ1G,GAAIiH,EAAEP,KAAKlF,QACX4E,MAAOa,EAAEP,KAAKN,MACdC,UAAWY,EAAEP,KAAKL,WAAa,KAC/BC,SAAUW,EAAEP,KAAKJ,UAAY,KAC7BC,MAAOU,EAAEP,KAAKH,OAAS,WAMjCW,oBACEvG,EAAiB,IAEjB,IAAI3B,EAAS,IAAIC,KACjB,OAAI0B,EAAKzB,OAAS,IAAGF,EAASA,EAAOQ,IAAI,OAAQmB,EAAKlB,KAAK,OACpDmB,KAAKH,KACTI,IAAa,GAAGC,4CAAmD,CAAE9B,OAAQA,IAC7EW,MACCqB,OAAgBpB,KAAQ+G,MACxBvH,OAAI+H,GAAoBA,EAAiBjG,OAAOkG,GAAoC,uBAAtBA,EAAWvH,QAAiCT,IAAI6H,IAAM,CAClHR,GAAIQ,EAAER,GACN3G,MAAO,CACLE,GAAIiH,EAAEnH,MAAME,GACZC,KAAMgH,EAAEnH,MAAMG,KACdF,YAAakH,EAAEnH,MAAMC,YACrBG,KAAM+G,EAAEnH,MAAMI,MAEhBwG,KAAMO,EAAEL,gEAlDLC,GAAkBzF,wCAAlByF,EAAkBxF,QAAlBwF,EAAkB,qBAFjB,SAEDA,GAAkB,yRCjE3BhF,iCAAcA,wEADhBA,mGAIEA,8CAAcA,+CAAuC,gEADvDA,yDAIEA,+CAAcA,2CAAmC,gEADnDA,0IAIEA,qFACEA,yCAAiC,sEAFrCA,0DAOEA,iCAAcA,kEADhBA,gHAIEA,+CAAcA,iDAAyC,0EADzDA,0DAKEA,4CAAcA,4CAAoC,gEADpDA,0DAIEA,iCAAcA,wEADhBA,0EAIFA,mBAEEA,yDAASA,yBAGTA,gBACFA,0FAWMA,cAAsC,aACeA,sEAASA,kCAC1DA,SACFA,QACAA,yBAEEA,uEAAUA,kCACXA,iDANKA,0DACJA,iCAGAA,2EARRA,kBAA0D,OACrDA,SAAcA,QACjBA,cACEA,wBASFA,oCAXGA,uBAEmBA,8EAV1BA,kBAAmE,YAC7CA,yDAASA,yBAC3BA,mBACEA,gBACFA,QACAA,4BAAoBA,UAEtBA,yBAcFA,gCAd8CA,iEAgB5CA,mBAA+CA,SAAYA,+BAAZA,gDAE7CA,sCACAA,yDAJJA,kBAAiEA,yDAASA,qBACxEA,0BACAA,mBACEA,uBACAA,uBACFA,kCAJ6BA,kCAEvBA,iCACAA,iCC9EF,YAAuBwF,GAC3B,OAAOA,EAAQC,MA2BV,IAAMC,GAAa,MAApB,MAAOA,EAIX/G,cAKSI,aAAwB,GACxBA,eAA+B,GAE/BA,cAAW,WACXA,mBAA4B,GAC5BA,iBAAa,EAEbA,yBAAqB,EACrBA,iBAAa,EAKbA,eAAW,EACXA,cAAU,EACVA,gBAAa,GAEZA,sBAAmB,IAAI4G,MACvB5G,UAAO,IAAI4G,MACX5G,qBAAkB,IAAI4G,MAWhC5G,0BAAsB,EAEtBA,cAAmC,GACnCA,YAAS,EACTA,aAAS,EAET6G,kBAAkBC,GAChB9G,KAAK8G,UAAYA,EACjB9G,KAAK+G,gBAAgBC,KAAKhH,KAAK8G,WAAa,IAG9CG,cACEjH,KAAK+G,gBAAgBC,KAAKhH,KAAK8G,WAAa,IAG9CI,gBACElH,KAAK+G,gBAAgBC,KAAKhH,KAAK8G,WAAa,IAG9CK,iBACE,MAAMC,EAAcpH,KAAKqH,iBAAmB,GAE5C,UAAWC,KAAOtH,KAAKuH,QACrBvH,KAAKwH,SAASF,EAAI3I,QAAS,EAG7B,UAAW2I,KAAOF,EAChBpH,KAAKwH,SAASF,EAAI3I,QAAS,EAG7BqB,KAAKyH,OAASzH,KAAKuH,QAAQjJ,OAAS8I,EAAY9I,OAGlDoJ,YAAYC,GACN3H,KAAK4H,UACP5H,KAAKmH,iBAITU,cACE7H,KAAK8H,qBAAuB9H,KAAK8H,oBAGnCC,UAKE,GAJA/H,KAAKqH,gBAAkBrH,KAAKuH,QAC5BvH,KAAKyH,OAAS,EACdzH,KAAKgI,QAAUhI,KAAKgI,QAEfhI,KAAKgI,OAAQ,CAChB,MAAMC,EAAuB,GAC7B,UAAWX,KAAOtH,KAAKuH,QACjBvH,KAAKwH,SAASF,EAAI3I,QACpBsJ,EAAOC,KAAKZ,GAEdtH,KAAKwH,SAASF,EAAI3I,QAAS,EAG7BqB,KAAKqH,gBAAkBY,EAEvBjI,KAAKyH,OAASzH,KAAKuH,QAAQjJ,OAAS0B,KAAKqH,gBAAgB/I,OAG3D,UAAWgJ,KAAOtH,KAAKuH,QACrBvH,KAAKwH,SAASF,EAAI3I,QAAS,EAE7BqB,KAAKmI,iBAAiBnB,KAAKhH,KAAKgI,QAGlCI,oBAAoBC,GAClBrI,KAAKwH,SAASa,EAAK1J,QAAUqB,KAAKwH,SAASa,EAAK1J,OAChD,MAAMsJ,EAAuB,GAC7B,UAAWX,KAAOtH,KAAKuH,SACY,IAA7BvH,KAAKwH,SAASF,EAAI3I,QACpBsJ,EAAOC,KAAKZ,GAIhBtH,KAAKqH,gBAAkBY,EAEvBjI,KAAKyH,OAASzH,KAAKuH,QAAQjJ,OAAS0B,KAAKqH,gBAAgB/I,OAG3DgK,aAAajG,GACXrC,KAAKD,KAAKiH,KAAK3E,GAGjBkG,mBACEvI,KAAK+G,gBAAgBC,KAAKhH,KAAK8G,WAG1B0B,QACLxI,KAAK0G,OAAO+B,sDAlIH9B,8BAAa7C,2oCAVb,CACT4E,KACAC,KACA,CACEC,QAASC,KACTC,WAAYC,GACZC,KAAM,CAAErC,MAEXnG,yDD+BYyC,aAAAA,2qCA/DfhC,uBAeEA,2CAAmBgI,wBAAnBhI,CAA6C,kCAC7BgI,mBADhBhI,CAA6C,gCAE9BgI,iBAFfhI,CAA6C,kCAG5BgI,mBAHjBhI,CAA6C,2CAInBgI,uBAG1BhI,uBAGAA,uBAGAA,uBAGAA,uBAMAA,uBAGAA,uBAIAA,uBAGAA,uBAGFA,QACAA,0BAOAA,yBAsBAA,gCA7EEA,8BAAsB,4BAAtBA,CAAsB,eAAtBA,CAAsB,gDAAtBA,CAAsB,gCAAtBA,CAAsB,wBAAtBA,CAAsB,oBAAtBA,CAAsB,4BAAtBA,CAAsB,sBAAtBA,CAAsB,gCAAtBA,CAAsB,gBAAtBA,CAAsB,qBAmBRA,qFAGAA,mFAGAA,wCAGAA,sCAMAA,wCAGAA,8CAIAA,yCAGAA,8CAObA,0DAIyBA,yDAsBLA,i0JC9CV0F,GAAa,sIC1BtB1F,iCAAcA,kDAA0C,sEAD1DA,iEAIAA,yIAuBUA,SACEA,iBAGC,YAEGA,SACAA,yBACFA,UAEJA,kCARIA,0CAA6B,qDAI3BA,iCACYA,2DATpBA,cACEA,cACAA,kCAWFA,kCAXgCA,uDAyB1BA,mBACEA,SACFA,yCADEA,gEAEFA,SACEA,yBACFA,yCADEA,4EAWEA,mBAA4D,OAA5DA,CAA4D,UACtDA,YAAkBA,QAAOA,SAAwBA,2CAAxBA,wDAVnCA,kBAA+D,WAA/DA,CAA+D,aAOzDA,gCACFA,QACAA,0BAMFA,2CARIA,0CAEgCA,+DAQtCA,SACEA,SACFA,yCADEA,gEAEFA,SACEA,SACFA,4DADEA,8DA7BNA,cACEA,YACEA,0BAGAA,kCAGAA,yBAiBAA,kCAGAA,kCAGFA,QACFA,kCA/BgBA,mCACcA,4CAGXA,oCAGoBA,4CAiBpBA,uEA7BrBA,iBAAgE,QAE5DA,8BACFA,QACAA,wBAiCFA,2DArCIA,0BAA0B,yBAETA,0BAECA,+GAoCtBA,kBACEA,iCACAA,mBAAyBA,0DAASA,yBAAlCA,YAEAA,QACAA,mBACAA,kBAA6B,aACoDA,0DAASA,sBACtFA,4BAAiBA,UAEnBA,mBAA+EA,0DAASA,sBACtFA,8BAAiBA,uCAJbA,gFAGAA,0HAnFdA,uBAOEA,4FAAyB,oDACjBA,2BAGRA,2CAgBAA,4CA6CAA,6CAiBFA,iCAvFEA,mCAA2B,oBAA3BA,CAA2B,kBAA3BA,CAA2B,oBAA3BA,CAA2B,wBAA3BA,CAA2B,qDAwF7BA,4BAEAA,mCA7FFA,mBACEA,8BA0FAA,uBAGFA,8BA5FKA,2CAyF6BA,oEASpCA,uBCtGK,IAAMiI,GAAuB,MAA9B,MAAOA,EALbtJ,cAOWI,aAAwB,GACxBA,cAAgB,GAChBA,WAA+D,WAC/DA,WAAQ,GAEPA,UAAO,IAAI4G,MACX5G,qBAAkB,IAAI4G,MAIhC5G,eAAiB,GACjBA,WAA2B,GAC3BA,gBAAY,EAEZmJ,WACEnJ,KAAKoJ,MAAMlB,KAAK,CACdX,QAASvH,KAAKuH,UAIlBG,YAAYC,GACV3H,KAAKqJ,UAAqC,IAAzBrJ,KAAKsJ,SAAShL,OAGjCiL,WACEvJ,KAAKwJ,iBAAiBzF,UAGxB0F,WACEzJ,KAAKwJ,iBAAiBzF,UAGhByF,iBAAiBvK,GACO,IAA1Be,KAAK8G,UAAUxI,QAA+B,UAAf0B,KAAK0J,QAGxC1J,KAAK2J,gBAAgB3C,KAAK,CAAEjG,KAAMf,KAAK8G,UAAWxH,KAAML,IACxDe,KAAK8G,UAAY,IAGnB8C,cAEI5J,KAAK8G,UADH9G,KAAK8G,UAAUxI,SAAW0B,KAAKsJ,SAAShL,OACzB,GAEA0B,KAAKsJ,SAI1BlH,aAAaC,GACX,MAAMwH,EAAWxH,EAAMC,eAAe9D,IAAI+D,IAAwB,IAAfA,EAAKC,MAAe,IAAID,EAAK5D,QAAU4D,EAAK5D,OAC3FkL,GAAU7J,KAAKD,KAAKiH,KAAK6C,iDApDpBX,8BAAuBpF,wWDFVb,kDAAAA,GA4DWA,QAAAA,GAoB6BA,YAAAA,GAMvCA,SAAAA,GAGAA,QAAAA,GAM6CA,+BAAAA,mzCA9GxEhC,mCAOEA,uBAIAA,8BAOAA,2CAkGFA,QAEAA,kEApHEA,uBAAe,iBAAfA,CAAe,yBAKeA,+CAK3BA,iDAAiC,2oICKzBiI,GAAuB,4CCRhCjI,iBAEuB,qBACNA,4DAAUA,+BAAwDA,mCAA9BA,wEAHrDA,6CACGA,4BCQP,MAAM6I,GAAc,CAAEnL,MAAO,aAAcuE,OAAQD,SAAgBA,EAO5D,IAAM8G,GAA4B,MAAnC,MAAOA,EAuBXnK,YACUoK,EACAC,EACA3I,GAFAtB,0BACAA,4BACAA,6BAtBDA,iBAAa,EAEtBA,cAA6B,GAE7BA,aAAwB,CACtB,CAAErB,MAAO,aAAcuE,OAAQD,WAAeA,EAC9C,CAAEtE,MAAO,KAAMuE,OAAQD,cAAuBA,GAEvCjD,yBAAsB,CAC7B,CAAEkK,MAAOjH,iBAA0BA,CAAEkH,OAAO,GAC5C,CAAED,MAAOjH,gBAAwBA,CAAEkH,OAAO,IAE5CnK,sBAAkB,EAElBA,WAA+D,WAC/DA,iBAAwB,GAEhBA,kBAAe,IAAIuB,IAOzBvB,KAAKoK,aAAarL,MAChB8C,OAAUzD,IACRiM,SACEC,SAAGC,YACHvK,KAAKgK,mBAAmB9D,wBAAwB9H,EAAOwC,QAASxC,EAAO+H,gBAAiB/H,EAAO2B,MAC5FhB,MAAKP,OAAIgM,WAGhB/G,UAAU,CACVf,KAAMgH,IACJ1J,KAAK0J,MAAQA,EAAMe,IACff,EAAMgB,UACR1K,KAAKsJ,SAAWI,EAAM3I,OAG1B6C,MAAOC,IACL7D,KAAK0J,MAAQ,mBAKnBhC,YAAYC,GACL3H,KAAK2K,aAAY3K,KAAKuH,QAAU,CAAEuC,IAAcc,OAAO5K,KAAKuH,UACjEvH,KAAKoK,aAAa1H,KAAK,CAAE9B,QAASZ,KAAKY,QAASuF,gBAAiBnG,KAAKmG,gBAAiBpG,KAAMC,KAAK6K,cAGpG3I,cACElC,KAAKoK,aAAajI,WAIpB2I,kBAAkB1M,GAChB4B,KAAK0J,MAAQ,aAEb,MAAMqB,EAAa,IAAIpG,IACvBvG,EAAO2C,KAAKiK,QAAQC,IAClB,MAAMC,EAAUD,EAAI/L,MAAME,GAE1B,IAAK6L,EAAInF,KACP,MAAM,IAAIqF,MAAM,8BAGlB,MAAMC,EAAWH,EAAInF,KAAK1G,GAEpB+K,EAAQY,EAAW9K,IAAIiL,GAClBH,EAAWnM,IAAIsM,EAAtBf,EAA+BA,EAAMS,OAAO,CAAEQ,IACrB,CAAEA,MAGjCpL,KAAKiK,qBAAqBhG,oBAAoB8G,EAAY3M,EAAOkB,MAC9DmE,UAAU,CACTf,KAAMuC,IACJjF,KAAK0J,MAAQ,QACb2B,GAAqBrL,KAAKsB,sBRjC9B,YAAuBP,GAC3B,MAAMuK,EAAM,CAAElG,cAAe,EAAGD,aAAc,GAC9CpE,SAAKiK,QAAQC,IACXK,EAAIlG,eAAiB6F,EAAIM,KACzBD,EAAInG,cAAgBd,MAAMC,KAAK2G,EAAIO,UAChChN,IAAYkL,GAAU,CAAE,UAAW,aAAc+B,SAAS/B,GAAS,EAAI,GACvEgC,OAAO,CAACC,EAAKL,IAAQK,EAAML,EAAK,KAE9BA,EQyBkDM,CAAa3G,GAAS7G,EAAOkB,MAC9EU,KAAKoK,aAAa1H,KAAK,CAAE9B,QAASZ,KAAKY,QAASuF,gBAAiBnG,KAAKmG,gBAAiBpG,KAAMC,KAAK6K,eAEpGjH,MAAOiI,IAGL,GAFA7L,KAAK0J,MAAQ,QACb1J,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvDG,iBAAiBC,GACfjM,KAAKmG,iBAAkB+F,QAAclM,KAAKmM,oBAAoBF,IAAc9B,MAE5EnK,KAAKuH,QAAUvH,KAAKuH,QAAQjH,OAAO2K,GAAOA,IAAQnB,IAC9C9J,KAAKmG,kBAAiBnG,KAAKuH,QAAU,CAAEuC,IAAcc,OAAO5K,KAAKuH,UAErEvH,KAAKoK,aAAa1H,KAAK,CAAE9B,QAASZ,KAAKY,QAASuF,gBAAiBnG,KAAKmG,gBAAiBpG,KAAMC,KAAK6K,cAGpGuB,QAAQrM,GACF9B,KAAKC,UAAU6B,KAAU9B,KAAKC,UAAU8B,KAAK6K,eAC/C7K,KAAK6K,YAAc9K,EACnBC,KAAKoK,aAAa1H,KAAK,CAAE9B,QAASZ,KAAKY,QAASuF,gBAAiBnG,KAAKmG,gBAAiBpG,KAAMC,KAAK6K,6DAxG3Fd,GAA4BvJ,yDAA5BuJ,EAA4BjG,8JDxBrBb,4BAAAA,4MADpBhC,iCAKEA,gCAAQgI,cAARhI,CAAwB,qCACLgI,yBAEnBhI,2CAQFA,cAdEA,uBAAe,oBAAfA,CAAe,sDCuBJ8I,GAA4B,GCT5BsC,GAA6B,MAApC,MAAOA,EAcXzM,YACUoK,EACAC,EACA3I,GAFAtB,0BACAA,4BACAA,6BAhBVA,cAA6B,GAEpBA,aAAwB,CAC/B,CAAErB,MAAO,aAAcuE,OAAQD,QAAgBA,EAC/C,CAAEtE,MAAO,aAAcuE,OAAQD,KAAeA,EAC9C,CAAEtE,MAAO,KAAMuE,OAAQD,cAAuBA,GAGhDjD,WAA+D,WAC/DA,iBAAwB,GAEhBA,kBAAe,IAAIuB,IAOzBvB,KAAKoK,aAAarL,MAChB8C,OAAUzD,IACRiM,SACEC,SAAGC,YACHvK,KAAKgK,mBAAmB1D,oBAAoBlI,EAAO2B,MAChDhB,MAAKP,OAAIgM,WAGhB/G,UAAU,CACVf,KAAMgH,IACJ1J,KAAK0J,MAAQA,EAAMe,IACff,EAAMgB,UACR1K,KAAKsJ,SAAWI,EAAM3I,OAG1B6C,MAAOC,IACL7D,KAAK0J,MAAQ,mBAKnBP,WACEnJ,KAAKoK,aAAa1H,KAAK,CAAE3C,KAAMC,KAAK6K,cAGtC3I,cACElC,KAAKoK,aAAajI,WAGpB2I,kBAAkB1M,GAChB4B,KAAK0J,MAAQ,aACb1J,KAAKiK,qBAAqBnF,wBAAwB1G,EAAO2C,KAAKvC,IAAI6H,GAAKA,EAAEnH,MAAME,IAAKhB,EAAOkB,MACxFmE,UAAU,CACTf,KAAMuC,IACJjF,KAAK0J,MAAQ,QACb2B,GAAqBrL,KAAKsB,sBTc9B,YAAsCP,GAC1C,MAAO,CACLqE,cAAerE,EAAKzC,OACpB6G,aAAcpE,EAAKT,OAAOoJ,GAASA,EAAM1I,SAAS1C,QSjBKgO,CAA4BrH,GAAS7G,EAAOkB,MAC7FU,KAAKoK,aAAa1H,KAAK,CAAE3C,KAAMC,KAAK6K,eAEtCjH,MAAOiI,IAGL,GAFA7L,KAAK0J,MAAQ,QACb1J,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvDO,QAAQrM,GACF9B,KAAKC,UAAU6B,KAAU9B,KAAKC,UAAU8B,KAAK6K,eAC/C7K,KAAK6K,YAAc9K,EACnBC,KAAKoK,aAAa1H,KAAK,CAAE3C,KAAMC,KAAK6K,6DApE7BwB,GAA6B7L,yDAA7B6L,EAA6BvI,2FCftBb,6BAAAA,qGADpBhC,iCAKEA,gCAAQgI,cAARhI,CAAwB,qCACLgI,yBAErBhI,cANEA,uBAAe,oBAAfA,CAAe,4CDcJoL,GAA6B,2DEhB1CpL,uBAMIA,2DAAWA,uBACdA,aAFGA,qDAcEA,cAA4B,QAC1BA,WAAaA,QACbA,6BAA2BA,QAC3BA,0BAAmBA,QACnBA,6BAAwCA,QACxCA,8BAA6CA,oCAL/CA,8CAAKA,qDAsBCA,sCACAA,sCASEA,sCACAA,8FAvBRA,cAAI,OAAJA,CAAI,UAEiEA,SAAgBA,UAEnFA,cAAIA,SAAyBA,QAC7BA,cAAIA,SAAmCA,QACvCA,cAAI,aAMAA,wBACAA,wBACFA,UAEFA,eAAI,cAMEA,wBACAA,wBACFA,iDAtBkBA,yDAA6CA,uBAE/DA,kCACAA,4CAGAA,4EAIIA,0CACAA,yCAKAA,oFAIEA,8CACAA,wEAOZA,cAAI,OAAJA,CAAI,UAEAA,YAAyDA,sCADvDA,2EAlDVA,uBAQEA,gCAUAA,kCA8BAA,gCAOFA,8BApDEA,sBAAc,gBAAdA,CAAc,iCCLX,IAAMsL,GAAyB,MAAhC,MAAOA,EAOX3M,YAAoB4M,8BALpBxM,WAAwC,WACxCA,iBAAwB,GAExBA,UAAgB,GAKhBmJ,WACEnJ,KAAKyM,YAGPA,YACEzM,KAAK0J,MAAQ,WACb1J,KAAKwM,oBAAoBE,mBAAmBjJ,UAAU,CACpDf,KAAM3B,IACJf,KAAK0J,MAAQ,QACb1J,KAAKe,KAAOA,GAEd6C,MAAOC,GAAQ7D,KAAK0J,MAAQ,UAIhCiD,QAAQxC,GACN,OAAQA,OACD,QACH,OAAOlH,QAAgBA,KACpB,OACH,OAAOA,QAAeA,KACnB,OACH,OAAOA,MAAeA,KACnB,UACH,OAAOA,YAAkBA,KACtB,UACH,OAAOA,MAAkBA,KACtB,OACH,OAAOA,OAAeA,SAEtB,OAAOA,OAAgBA,EAI7B2J,aAAazC,GACX,OAAQA,OACD,cACH,OAAOlH,eAAsBA,KAC1B,wBACH,OAAOA,yBAA8BA,SAErC,OAAOA,OAAeA,gDAnDjBsJ,GAAyB/L,sCAAzB+L,EAAyBzI,mGDJZb,gDAAAA,GAgBTA,KAAAA,GACcA,KAAAA,GACdA,gBAAAA,GACcA,8BAAAA,GACAA,+BAAAA,GAqCSA,8BAAAA,mpBA7DxChC,8BASAA,kEARKA,gCAAyB,y5ECOjBsL,GAAyB,iBCM/B,IAAMM,GAAoB,MAA3B,MAAOA,EAEXjN,YAAoBC,eAEpBiN,OAAOzN,EAAcC,GAKnB,OAAOU,KAAKH,KACT4E,KAAmC,GAAGvE,oBAL5B,CACXb,KAAMA,EACNC,KAAMA,GAGkE,IACvEP,MACCP,OAAIsC,OACJtC,OAAIuO,GAAYA,EAAS3N,KAI/B4N,YAAYC,EAAkBC,GAC5B,OAAOlN,KAAKH,KACT4E,KAA2B,GAAGvE,qBAA2B+M,eAAsBC,IAAW,KAAM,IAChGnO,MAAKP,OAAI2O,qDApBHN,GAAoBrM,wCAApBqM,EAAoBpM,QAApBoM,EAAoB,qBAFnB,SAEDA,GAAoB,6BCC1B,IAAMO,GAAiB,MAAxB,MAAOA,EA8BXxN,YACUyN,EACA/L,EACAgM,GAFAtN,4BACAA,6BACAA,mBAhCVA,0BAAoD,CAClD,CACEV,KAAM,QACN6D,KAAM,aACNoK,MAAOtK,QAAgBA,CACvB9D,YAAa,IAEf,CACEG,KAAM,OACN6D,KAAM,aACNoK,MAAOtK,MAAeA,CACtB9D,YAAa,IAEf,CACEG,KAAM,UACN6D,KAAM,cACNoK,MAAOtK,YAAkBA,CACzB9D,YAAa,IAEf,CACEG,KAAM,QACN6D,KAAM,aACNoK,MAAOtK,OAAgBA,CACvB9D,YAAa,KAIjBa,WAAiC,QAQjCwN,SAAStO,GACPc,KAAK0J,MAAQ,cACb1J,KAAKqN,qBAAqBP,OAAO5N,EAAMqO,MAAOrO,EAAMI,MAAMmE,UAAU,CAClEf,KAAM+K,IACJzN,KAAK0J,MAAQ,QACb1J,KAAKsB,sBAAsBqC,QAAQV,oCAAqCA,EACxEjD,KAAKsN,YAAYI,YAAWC,QAAc,IAAKzO,EAAOE,GAAIqO,MAE5D7J,MAAOiI,IAGL,GAFA7L,KAAK0J,MAAQ,QACb1J,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDA/C1CuB,GAAiB5M,2DAAjB4M,EAAiBtJ,gFCf0Bb,wBAAAA,GAMEA,4CAAAA,2KAN1DhC,yBAA4E,uBAGtEA,wCAAgBgI,gBAInBhI,iBALGA,mEAAkD,kCAAlDA,CAAkD,+CDa3CmM,GAAiB,uDEf9BnM,iBAA6E,YAC3EA,YAAkDA,QAClDA,+BAAyFA,WCSpF,IAAM2M,GAAiB,MAAxB,MAAOA,EAKXhO,YACUiO,EACAC,GADA9N,sBACAA,qBAJVA,gBAAaA,KAAK8N,cAAcC,WAM9B/N,KAAK8N,cAAcE,UAAU,CAAEC,iBAAiB,IAChDjO,KAAK6N,eAAeK,SAAQC,QAAa,CACvCZ,MAAOtK,cAAoBA,CAC3BmL,YAAa,CACXC,SAAUpL,cAAoBA,CAC9BqL,KAAM,GACNC,gBAAgB,MAKtBrM,cACElC,KAAK6N,eAAepF,QAGtB+F,gBACExO,KAAKyO,iBAAiB/K,UACtB1D,KAAK6N,eAAea,mEA1BXd,GAAiBpN,gDAAjBoN,EAAiB9J,6LDDGb,wCAAAA,GAKKA,mCAAAA,GACiCA,kBAAAA,GAf5BA,cAAAA,GACGA,0DAAAA,gbAF9ChC,yCAKAA,sCAAyD,iCAIzDA,iBAAsB,mBAElBA,wCACFA,QACAA,kCAIIA,sCAAegI,oBAClBhI,QACDA,yBACEA,mCACFA,UAGFA,kBACEA,0BACFA,oBA1BwCA,6DAObA,qFCId2M,GAAiB,wCCF9B,MAAMe,GAAoB3P,KAAS,CACjCI,GAAIJ,KACJK,KAAML,KACNM,KAAMN,KAAU,QAAS,OAAQ,OAAQ,UAAW,QAAS,OAAQ,UAAW,UAY3E,IAAM4P,GAA0B,MAAjC,MAAOA,EAEXhP,YAAoBC,eAEpBgP,eAAeC,GACb,MAAM/J,EAAW,IAAK+J,EAAMR,KAAMQ,EAAM1P,IAExC,OAAOY,KAAKH,KAAKI,IAAa,GAAGC,qBAA2B6E,EAASlG,KAAK,oBAAoBE,MAC5FqB,OAAgBpB,KAAQ2P,MACxBnQ,OAAI4P,GAAeA,EAAY5P,IAAI,CAACuQ,EAAYC,KAAW,IACtDD,EACHD,OAAOG,QAAWF,EAAYX,EAAYc,MAAM,EAAGF,GAAOxQ,IAAI,EAAGY,QAASA,uDAXrEwP,GAA0BpO,wCAA1BoO,EAA0BnO,QAA1BmO,EAA0B,qBAFzB,SAEDA,GAA0B,GCH1BO,EAAe,MAAtB,MAAOA,EAkBXvP,YACUwP,EACAC,GADArP,2BACAA,kCAlBFA,oBAAiB,IAAIwB,IAA0B,GAC/CxB,cAAW,IAAIuB,IAEvBvB,YAASA,KAAKsP,eAAevQ,MAG3B8C,OAAUiN,IAAS1K,OAAS,CAC1BlF,MAAOc,KAAKoP,oBAAoBnP,IAAI6O,EAAM1P,IAC1CgP,YAAapO,KAAKqP,2BAA2BR,eAAeC,KAC3D/P,MACDP,OAAI,EAAGU,QAAOkP,kBAAmB,CAAEU,QAAO5P,QAAOkP,kBACjDtM,QAAgB,CAAEC,SAAU/B,KAAKgC,cAEnCuN,QAAY,IAQdC,WAAWV,GACT9O,KAAKsP,eAAe5M,KAAKoM,GAI3BW,eACEzP,KAAKgC,SAASU,OAGhBR,cACElC,KAAKgC,SAASG,WACdnC,KAAKsP,eAAenN,yDAlCXgN,GAAe3O,kDAAf2O,EAAe1O,QAAf0O,EAAe,YAAfA,GAAe,qICpB1BlO,iBACEA,yBACFA,kDACAA,uBAKEA,4DAAWA,qBACZA,aAHCA,qDAIFA,0BAEAA,mCAOIA,cAAI,OAAJA,CAAI,aACqBA,SAAwBA,UAC/CA,cAAI,iCAEAA,SACFA,sCAJqBA,gCAEIA,mDACvBA,wFAVVA,qBAKEA,gCAUFA,mCAbIA,iDAhBNA,SACEA,wBAGAA,8BAOAA,wBAGAA,4BAgBFA,6BA7BkCA,oCAI7BA,iCAMGA,oDAMDA,mDCJA,IAAMyO,GAA+B,MAAtC,MAAOA,EAeX9P,YACU+P,EACAC,GADA5P,4BACAA,6BAhBFA,cAAW,IAAIuB,IACdvB,YAASA,KAAK2P,qBAAqBE,cAAc9Q,MACxDuB,OAAOwP,QACPjO,OAAUkO,GACR/P,KAAK4P,sBAAsBI,kBAAkBD,EAAajB,MAAM1P,IAAIL,MAClEP,OAAIyR,GAAkB,IACjBA,EAAe3P,OAAO4P,GAAOA,EAAItP,UAAYmP,EAAajB,MAAM1P,OAChE6Q,EAAe3P,OAAO4P,GAAOA,EAAItP,UAAYmP,EAAajB,MAAM1P,KACnE8P,MAAM,EAAG,OAGfpN,QAAgB,CAAEC,SAAU/B,KAAKgC,YAQnCE,cACElC,KAAKgC,SAASG,WAGhBuB,UACE1D,KAAKgC,SAASU,qDAzBLgN,GAA+BlP,kDAA/BkP,EAA+B5L,+FDPlBb,iCAAAA,GAKmCA,eAAAA,ycAX7DhC,wDAAeA,yoECaFyO,GAA+B,gHCLtCzO,gCAUEA,qHAAUkP,6BAAVlP,CAA0D,+GAClDkP,+BADRlP,CAA0D,4GAEjDkP,2BAFTlP,CAA0D,mDAGlDA,gCAHRA,CAA0D,qDAIjDA,uCAJTA,CAA0D,wDAK7CA,uDACdA,+CAdCA,0EAAkE,kDAAlEA,CAAkE,qBAAlEA,CAAkE,mPAHtEA,SACEA,wCAiBFA,8BAhBKA,sEAyBPA,mFClBK,IAAMmP,GAAoB,MAA3B,MAAOA,EAcXxQ,YACUyQ,EACAV,EACAW,GAFAtQ,mBACAA,4BACAA,2BAZOA,YAAS,IAAIwB,IAAqB,GAGnDxB,6BAAyBuQ,QAAc,CAAEvQ,KAAK2P,qBAAqBE,cAAe7P,KAAKwQ,SAAUzR,MAC/FP,OAAI,EAAGuR,EAAc7Q,QAAe6Q,GAAgBA,EAAajB,MAAM1P,KAAOF,EAAME,MAGtFY,0BAAuBA,KAAKsQ,oBAAoBG,qBAQhD/I,cACE1H,KAAK0Q,oBAAsB1Q,KAAK2Q,WAAWzR,OAAQ0R,SAAwB5Q,KAAK2Q,UAAUzR,YAAS4D,EAE/F9C,KAAK2Q,WACP3Q,KAAKwQ,OAAO9N,KAAK1C,KAAK2Q,UAAUzR,OAIpCgD,cACElC,KAAKwQ,OAAOrO,WAGd0O,sBACE7Q,KAAKqQ,YAAYS,aAAapO,KAAKqO,mBAGrCC,0BAA0B3O,GACxB,IAAKrC,KAAK2Q,WAAWzR,MAAO,MAAM,IAAIiM,MAAM,sDAC5CnL,KAAK2P,qBAAqBsB,mBAAmBjR,KAAK2Q,UAAU7B,MAAO9O,KAAK2Q,UAAUzR,OAClFc,KAAKkR,uCAAuC7O,GAG9C8O,2BACEnR,KAAKoR,IAAIC,OACTrR,KAAK2P,qBAAqB2B,eAG5BJ,uCAAuC7O,GACrCrC,KAAKoR,IAAIG,KAAKlP,GAKdmP,WAAW,KACTxR,KAAKoR,IAAIK,wDAtDFrB,GAAoB5P,8DAApB4P,EAAoBtM,4lBDhBjC7C,iBAAoC,UAApCA,CAAoC,UAApCA,CAAoC,UAApCA,CAAoC,UAItBA,SAA4BA,YAGtCA,kDAmBFA,UAGFA,8BAKEA,kDACFA,+BA/BcA,uFAGKA,yDAwBfA,4BAG6BA,uqKClBpBmP,GAAoB,4ICf/BnP,gDASEA,2BAEAA,gCAEEA,4BAA6CA,kDAXjDA,uBAKEA,4DAAWA,qBAEXA,yBAGAA,2CAGFA,gDAXEA,mCACAA,uEAAoF,0CAIxEA,4CAAwC,yCAmB9CA,SACEA,cAAI,YAEAA,SACFA,UAEJA,kCAHMA,4DAJRA,cACEA,kCAOFA,wCAPgCA,sEARhCA,cAAI,UAAJA,CAAI,WAAJA,CAAI,iBAGiCA,0DAASA,qBAAWA,cAIzDA,iEANMA,mCAMDA,6DAoBCA,SACEA,qCACFA,yCADEA,6IAEFA,SACEA,mBAIEA,sGAAcA,8DAGdA,SACFA,QACFA,2CAPIA,8CAAuC,gCAKvCA,uEAGJA,SACEA,qCAA4DA,gCAAgCA,QAC9FA,yCADsBA,+CAAwCA,6DAE9DA,SACEA,yBACFA,yCADEA,2EAEFA,SACEA,SACFA,4DADEA,6EAvBNA,iBAAgCA,4EAAcA,mCAC5CA,YACEA,kCAGAA,kCAWAA,kCAGAA,kCAGAA,kCAGFA,QACFA,oCAzBgBA,mCACGA,8CAGAA,mDAWAA,2CAGAA,+DApBrBA,cACEA,wBA2BFA,gCA3BsBA,uDA8BtBA,cAAI,OAAJA,CAAI,UAEAA,YAA8DA,sCAD5DA,8DA3DZA,SACEA,sBACEA,iCAmBAA,iCAoCAA,iCAOFA,QACFA,mCAhE6BA,yCAA8B,uBAA9BA,CAA8B,mDAnB7DA,SACEA,gCAEAA,8BAeAA,iCAkEFA,6BAnF8BA,6CAGzBA,iCAcYA,wEAwEfA,SACEA,kCAA+DA,8DAAcA,2CAAgBA,QAC/FA,sCADuBA,4ECpElB,IAAMyQ,GAAqB,MAA5B,MAAOA,EAwBX9R,YACU+R,6BAtBD3R,qBAAiB,EAKTA,cAAW,IAAIwB,IAAkC,GACjDxB,cAAW,IAAIuB,IACvBvB,YAASA,KAAK4R,SAAS7S,MAC9B8C,OAAWjB,GAAgCZ,KAAK6R,SAASjR,KACzDkB,QAAgB,CAAEC,SAAU/B,KAAKgC,YAElBhC,yBAAsB,IAAI8R,UAAiFhP,GAC5H9C,mBAAeqK,QACbrK,KAAK+R,oBAAoBhT,MAAKiT,QAAa,MAC3ChS,KAAK+R,oBAAoBhT,MAAKuB,OAAO6J,IAAUA,KAC/CpL,MAAK4C,UAAwB4N,QAAY,IAE1BvP,6BAA0BA,KAAKiS,aAAaxO,UAAU1C,IACrEA,EAAOf,KAAKoR,IAAIc,OAAOnR,EAAKsB,MAAOtB,EAAK8B,QAAU7C,KAAKoR,IAAIC,SAO7D3J,cACE1H,KAAK4R,SAASlP,KAAK1C,KAAKY,SAG1BsB,cACElC,KAAK4R,SAASzP,WACdnC,KAAKgC,SAASG,WACdnC,KAAK+R,oBAAoB5P,WACzBnC,KAAKmS,wBAAwBC,cAG/B1O,UACE1D,KAAKgC,SAASU,OAGRmP,SAASjR,GACf,OAAOZ,KAAK2R,mBAAmBU,kBAAkBzR,GAAS7B,MACxDP,OAAKuC,IAAyB,CAC5BwG,QAASvH,KAAKsS,gBACdC,QAASxR,MAKPuR,gBAqBN,MAAO/K,CAnBL,CACE5I,MAAO,eACPuE,OAAQD,QAAiBA,EAE3B,CACEtE,MAAO,oBACPuE,OAAQD,SAAkBA,EAE5B,CACEtE,MAAO,YACPuE,OAAQD,WAAkCA,CAC1CuP,UAAWxS,KAAKyS,gBAElB,CACE9T,MAAO,KACPuE,OAAQD,UAAeA,GAIZ3C,OAAOgH,IAAQA,EAAIkL,UAAUhU,IAAI8I,IAAQ,CACtD3I,MAAO2I,EAAI3I,MACXuE,OAAQoE,EAAIpE,UAIhBwP,aAAarQ,EAAcsQ,EAAgB3D,GACzC,MAAM4D,EAAY5S,KAAK6S,YAAY5S,IAAI+O,GACvC,IAAK4D,EACH,MAAM,IAAIzH,MAAM,mCAElBnL,KAAK+R,oBAAoBrP,KAAK,CAAEL,QAAOsQ,SAAQ9P,OAAQ+P,EAAUE,gBAGnEC,aAAa1Q,EAAmB1D,GAChB,sBAAVA,IAAiCqU,QAAgB3Q,IACnDrC,KAAKiT,eAITA,eACEjT,KAAK+R,oBAAoBrP,UAAKI,iDA9FrB4O,GAAqBlR,sCAArBkR,EAAqB5N,4SDbyCb,wDAAAA,GAI1DA,iDAAAA,GAgEMA,yDAAAA,+wBA9EvBhC,kDAsFAA,8BAIEA,iCAGFA,+BA7FeA,kCA0FEA,uPCnEJyQ,GAAqB,0BCrB9BzQ,oBAEAA,gCAEEA,oBAEAA,kDARNA,SACEA,aACEA,iCAGAA,2CAKFA,QAEAA,iBAAoB,gBAKhBA,2DAAWA,wBAEZA,UAELA,2CAnBmBA,kDAAgC,cAgB7CA,uDCPC,IAAMiS,GAAmB,MAA1B,MAAOA,EAKXtT,YACUwB,EACAE,GADAtB,yBACAA,6BANAA,WAAQ,IAAI4G,MAUtBtD,aACE,IAAKtD,KAAKd,MACR,MAAM,IAAIiM,MAAM,4BAGlBnL,KAAKoB,kBAAkBT,MAAMX,KAAKd,MAAME,IAAIqE,UAAU,CACpDf,KAAMA,KACJ1C,KAAKsB,sBAAsBqC,QAAQV,uBAA4BA,EAC/DjD,KAAKW,MAAMqG,QAEbpD,MAAOiI,IAEL,GADA7L,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDAvB1CqH,GAAmB1S,+CAAnB0S,EAAmBpP,mIDKRb,oBAAAA,GAd4CA,0CAAAA,GAI3CA,qKAAAA,uMANzBhC,sCAAeA,kKCWFiS,GAAmB,6BCT5BjS,aAA2CA,SAAuBA,+BAAvBA,gGAI7CA,yBACEA,gCACFA,+BADsBA,+EAGtBA,yBAA0H,wBACvFA,0DAASA,qBAAWA,mCAApCA,2DAXrBA,SACEA,yBACEA,sBACAA,2CACFA,QAEAA,gCAIAA,gCAGFA,yCAXQA,2CAA0B,cAIkCA,0DAIUA,+DCDvE,IAAMkS,GAAsB,MAA7B,MAAOA,EAMXvT,YAAoBwT,iBALVpT,0BAAuB,IAAI4G,MAC3B5G,eAAY,IAAI4G,MAM1ByM,UACMrT,KAAKd,OAAOoU,SACdtT,KAAKuT,qBAAqBvM,QAG5BhH,KAAKwT,UAAUxM,OACVhH,KAAKoT,OAAOK,SAAS,CAAE,gEAdnBN,GAAsB3S,sCAAtB2S,EAAsBrP,4LDRiBb,cAAAA,GAKKA,UAAAA,GAIEA,gCAAAA,GAP7BA,uBAAAA,kUAH9BhC,sCAAeA,qhECSFkS,GAAsB,GCN5B,IAAKO,EAKX,MALD,OAAYA,QAAU,KACpBA,gBACAA,sBACAA,gBACAA,gBAJUA,EAAZ,IAAYA,GAKX,GAWM,IAAMC,GAA+B,MAAtC,MAAOA,EA0DX/T,cAtDUI,YAAS,IAAI4G,MAEvB5G,WAAgB,CAAEV,KAAMoU,EAAWE,MAAOC,gBAAgB,GAE1D7T,4BAAyB,EACzBA,wBAAqB,EAEZA,qBAAsD,CAC7D,CACEkK,MAAOjH,4BAA+BA,CACtCkH,OAAO,GAET,CACED,MAAOjH,gBAA0BA,CACjCkH,OAAO,IAIFnK,+BAAkF,CACzF,CACEmD,KAAM,cACN+G,MAAOjH,OAAgBA,CACvBkH,MAAOuJ,EAAWI,OAEpB,CACE3Q,KAAM,aACN+G,MAAOjH,YAAgBA,CACvBkH,MAAOuJ,EAAWE,QAIb5T,+BAAkF,CACzF,CACEmD,KAAM,cACN+G,MAAOjH,YAAqBA,CAC5BkH,MAAOuJ,EAAWK,QAEpB,CACE5Q,KAAM,iBACN+G,MAAOjH,MAAmBA,CAC1BkH,MAAOuJ,EAAWM,UAEpB,CACE7Q,KAAM,cACN+G,MAAOjH,OAAgBA,CACvBkH,MAAOuJ,EAAWI,OAEpB,CACE3Q,KAAM,aACN+G,MAAOjH,YAAgBA,CACvBkH,MAAOuJ,EAAWE,QAMtBzK,WACMnJ,KAAKiU,cACPjU,KAAKkU,UAAUlU,KAAKiU,cAIjBC,UAAU5T,GACfN,KAAKmK,MAAQ7J,EACbN,KAAKmU,uBAAyBnU,KAAKoU,gBAAgBC,UAAUC,GAAkBA,EAAenK,QAAUnK,KAAKmK,MAAM0J,gBAEnH7T,KAAKuU,mBAAqBC,KAAKC,IAAI,GADfzU,KAAKmK,MAAM0J,eAAiB7T,KAAK0U,0BAA4B1U,KAAK2U,2BACpCN,UAAUO,GAAcA,EAAWzK,QAAUnK,KAAKmK,MAAM7K,OAG5GuV,oBAAoB7F,GAClB,MAAM8F,EAAc9U,KAAKmK,MAAM0J,eAAiB7T,KAAK0U,0BAA4B1U,KAAK2U,0BACtF3U,KAAKuU,mBAAqBvF,EAC1BhP,KAAKmK,MAAM7K,MAAO4M,QAAc4I,EAAY9F,IAAQ7E,MACpDnK,KAAK+U,OAAO/N,KAAKhH,KAAKmK,OAGxB6K,wBAAwBhG,GACtBhP,KAAKmK,MAAM0J,gBAAiB3H,QAAclM,KAAKoU,gBAAgBpF,IAAQ7E,MACvEnK,KAAKmU,uBAAyBnF,EAE9B,MAAM8F,EAAc9U,KAAKmK,MAAM0J,eAAiB7T,KAAK0U,0BAA4B1U,KAAK2U,0BACtF3U,KAAKuU,mBAAqBO,EAAYT,UAAUO,GAAcA,EAAWzK,SAClD,UAApBnK,KAAKmK,MAAM7K,KAAmB,QAAU,UAC3CU,KAAKmK,MAAM7K,MAAO4M,QAAc4I,EAAY9U,KAAKuU,qBAAqBpK,MAEtEnK,KAAK+U,OAAO/N,KAAKhH,KAAKmK,qDAzFbwJ,8BAA+B7P,wRCnB5C7C,iBAA4B,qBAIxBA,kCAAUgI,+BACXhI,QACDA,2BAIEA,kCAAUgI,2BACXhI,iBATCA,0CAAyB,qCAKzBA,uGAAsF,gpFDY7E0S,GAA+B,GEZ/BsB,GAA0B,MAAjC,MAAOA,8EAA0BnR,wFCPFb,uCAAAA,gEAArChC,0BAA0EA,wEDO7DgU,GAA0B,6BEGhC,IAAMC,GAAmB,MAA1B,MAAOA,EAEXtV,YAAoBC,eAEpBsV,YAAY/V,EAAYgW,GACtB,OAAOpV,KAAKH,KACTwV,IAA0B,GAAGnV,qBAA2Bd,IAAMgW,GAC9DrW,MACCP,OAAI2O,qDARC+H,GAAmB1U,wCAAnB0U,EAAmBzU,QAAnByU,EAAmB,qBAFlB,SAEDA,GAAmB,GCInBI,GAAkB,MAAzB,MAAOA,EAEX1V,YAAoBC,eAEpB0V,cAAcnW,GACZ,OAAOY,KAAKH,KACT4E,KAAkD,GAAGvE,qBAA2Bd,SAAW,KAAM,IACjGL,MACCP,OAAIgX,IACF,MAAMC,EAAQD,EAAgCC,KAC9C,IAAKA,EAAM,MAAM,IAAItK,MAAM,+CAC3B,OAAOsK,KAKfC,WAAWtW,GACT,OAAOY,KAAKH,KACTgB,OAA6B,GAAGX,qBAA2Bd,UAC3DL,MACCP,OAAI2O,qDApBCmI,GAAkB9U,wCAAlB8U,EAAkB7U,QAAlB6U,EAAkB,qBAFjB,SAEDA,GAAkB,wFCZ7BrU,kBAIEA,yDAASA,yBAKTA,eACFA,gCAPEA,qFAQFA,kBAGEA,yDAASA,wBAKTA,eACFA,qDCfK,IAAM0U,GAAkB,MAAzB,MAAOA,EALb/V,cAMWI,kBAAc,EACdA,iBAAa,EACbA,UAAO,MAENA,aAAU,IAAI4G,MACd5G,YAAS,IAAI4G,MAEvBgP,cACE5V,KAAK0D,QAAQsD,OAGf0O,aACE1V,KAAK6V,OAAO7O,qDAbH2O,8BAAkB7R,oMDAHb,0CAAAA,GAUAA,+BAAAA,ofAjB5BhC,iBAA4B,YACgDA,SAAQA,QAClFA,yBAWAA,yBAUFA,eAtBqBA,oEAAuDA,uBAEvEA,qCAWAA,8hHCPQ0U,GAAkB,6DCP/B1U,wCAUMA,+BAAuFA,gCACvFA,+BAA4GA,gCAC5GA,+BAAkHA,mCAEhHA,qGAGAA,kHAAOT,wEAAPS,oCAEEA,kEAA0IA,yJAN9IA,SACEA,2BAIAA,4CAGFA,0CAPkCA,iEAAiD,yCAQnFA,+CAEAA,gJACAA,uBAIEA,4DAAWA,6BAGZA,iCAFCA,0DArBJA,iBACEA,yBACAA,yBACAA,yBACAA,kCASAA,0BAGAA,8BAQFA,8BAvBuBA,gDACAA,gDACAA,oDACNA,8HASUA,4EAStBA,0FAuBDA,kBAAiG,wBAK7FA,yGAGDA,QACDA,uBAGEA,4DAAWA,kCAA4B6U,uDAKxC7U,8CAZCA,qDAQAA,0KAAgI,wEAhCxIA,kBAAmD,WAAnDA,CAAmD,aAE/CA,YAA6BA,QAC7BA,6BAIEA,2DAAWA,4BAAXA,CAA6B,oDACnBA,wBACXA,UAEHA,kBAA+B,aAC7BA,YAAiCA,QACjCA,4BAGEA,2DAAUA,iCACXA,QAEDA,yBAmBFA,kCAlCIA,oCAAmB,iBAAnBA,CAAmB,iBAUnBA,8CAA6B,yCAKGA,kFCpCnC,IAAM8U,GAAwB,MAA/B,MAAOA,EAgCXnW,YACUoW,EACAC,EACA3U,GAFAtB,2BACAA,0BACAA,6BAhCAA,qBAAkB,IAAI4G,MAIhC5G,iBAAa,EAEbA,yBAAsB,CACpB,CACEkK,MAAOjH,gBAAmBA,CAC1BkH,MAAO,WACP+L,QAASjT,8BAAuCA,CAAGA,sCAA+DA,EAEpH,CACEiH,MAAOjH,iBAAsBA,CAC7BkH,MAAO,cACP+L,QAASjT,iCAA8CA,CAAGA,sCAA+DA,EAE3H,CACEiH,MAAOjH,SAAiBA,CACxBkH,MAAO,SACP+L,QAASjT,iDAA4EA,CACnFA,sCAA+DA,GAGrEjD,8BAA2BA,KAAKmW,oBAAoB9B,UAAU,EAAGlK,WAAsB,WAAVA,GAC7EnK,gCAA6B,EAC7BA,qBAAkBiD,iDAA4EA,CAC5FA,sCAA+DA,CAQjEyE,YAAY0N,GACNA,EAAQlW,QAAUc,KAAKd,QAAOc,KAAKoW,cAAWtT,GAC9CsS,EAAQlW,OAASc,KAAKd,QACxBc,KAAKoW,UAAWA,SAASpW,KAAKd,OAK1BmX,EAHoCnX,MAAMoX,eAAqCC,cAAcC,iBAC9FpB,EAAQlW,MAAMuX,cAAoCF,cAAcC,iBAGjExW,KAAK0W,yBAA2B1W,KAAKd,MAAMqX,cAAcI,WACzD3W,KAAK4W,2BAA6B5W,KAAK6W,8BAA8B7W,KAAKd,MAAMqX,gBAOtFO,kBACE,IAAK9W,KAAKd,MAAO,OAGjBc,KAAK+W,YAAa,EAElB,MAAMnW,EAAUZ,KAAKd,MAAME,GACrB4X,EAAYhX,KAAKd,MAAM+X,cAE7BjX,KAAKiW,mBAAmBV,cAAc3U,GACnC7B,MACC8C,OAAU,IAEO,OAAdmV,GAAqB1M,aAAGxH,GAAa9C,KAAKgW,oBAAoBb,YAAYvU,EAAS,CAAEsW,gBAAiB,SAG1GzT,UAAU,CACTf,KAAMA,KACJ1C,KAAKsB,sBAAsBqC,QAAQV,8BAAwCA,EAC3EjD,KAAK+W,YAAa,EAClB/W,KAAKmX,gBAAgBnQ,QAEvBpD,MAAOiI,IAGL,GAFA7L,KAAK+W,YAAa,EAClB/W,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvDuL,mBAAmBC,GACjB,IAAKrX,KAAKd,QAAUc,KAAKoW,SAAU,MAAM,IAAIjL,MAAM,2DACnD,GAAInL,KAAKoW,SAASkB,cAAe,MAAM,IAAInM,MAAM,mDACjD,MAAMoM,EAAkB,IAAIC,KAAaH,GACrCrX,KAAKd,MAAMqX,cAAcC,iBAAmBe,EAAgBf,iBAGhExW,KAAK+W,YAAa,EAGlB/W,KAAKgW,oBAAoBb,YAAYnV,KAAKd,MAAME,GAAI,CAClDqY,cAAeF,EAAgBf,eAC/BU,gBAAiB,OAChBzT,UAAU,CACXf,KAAMA,KACJ1C,KAAKsB,sBAAsBqC,QAAQV,2BAAwCA,EAC3EjD,KAAK+W,YAAa,EAClB/W,KAAKmX,gBAAgBnQ,QAEvBpD,MAAOiI,IAGL,GAFA7L,KAAK+W,YAAa,EAClB/W,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,MAKrD6J,aACE,IAAK1V,KAAKd,MAAO,MAAM,IAAIiM,MAAM,8CAGjCnL,KAAK+W,YAAa,EAElB,MAAMnW,EAAUZ,KAAKd,MAAME,GACrB4X,EAAYhX,KAAKd,MAAM+X,cAE7BjX,KAAKiW,mBAAmBP,WAAW9U,GAChC7B,MACC8C,OAAU,IAEO,OAAdmV,GAAqB1M,aAAGxH,GAAa9C,KAAKgW,oBAAoBb,YAAYvU,EAAS,CAAEsW,gBAAiB,SAG1GzT,UAAU,CACTf,KAAMA,KACJ1C,KAAKsB,sBAAsBqC,QAAQV,mEAA+DA,EAClGjD,KAAK+W,YAAa,EAClB/W,KAAKmX,gBAAgBnQ,QAEvBpD,MAAOiI,IAGL,GAFA7L,KAAK+W,YAAa,EAClB/W,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvD6L,mBAAmBlQ,GACjB,MAAMmQ,EAAc3X,KAAKmW,oBAAoB3O,IAAW2C,MACpC,aAAhBwN,GAA4B3X,KAAKoX,mBAAmBI,oBACpC,gBAAhBG,GAA+B3X,KAAKoX,mBAAmBI,sBAE3DxX,KAAK4W,2BAA6BpP,EAG5BqP,8BAA8BN,GACpC,OAAuCvW,KAAKmW,oBAAoB9B,UAA5DkC,GAAcqB,aAAwD,EAAGzN,WAAsB,gBAAVA,EACrFoM,GAAcsB,WAAsD,EAAG1N,WAAsB,aAAVA,EAC7C,EAAGA,WAAsB,WAAVA,iDAzJhD4L,GAAwBvV,yDAAxBuV,EAAwBjS,+LDfjBb,uCAAAA,GAIiBA,8EAAAA,GAmBXA,gBAAAA,GAhBoCA,sCAAAA,GACAA,kEAAAA,GACIA,yDAAAA,GAE2CA,8HAE5E,GAGQA,qEAA8B,GAGuBA,kDAC7D,GAcAA,MAAAA,GAUAA,YAAAA,2nCA/CjChC,wBACAA,mCAIC,UAJDA,CAIC,YAEGA,WAA4FA,QAE5FA,wBA0BAA,yBAyCFA,iBA5EIA,2BAIJA,iCAK2BA,kCA0BDA,q5HCjBf8U,GAAwB,GCX9B,IAAK+B,EAKX,MALD,OAAYA,QAAgB,KAC1BA,uBACAA,qBACAA,uCACAA,2BAJUA,EAAZ,IAAYA,GAKX,GAKM,IAAMC,GAA6B,MAApC,MAAOA,EAEXnY,YAAoBC,eAEpBmY,kBACEpX,EACAqX,GAEA,OAAOjY,KAAKH,KACT4E,KACC,GAAGvE,qBAA2BU,gBAC9B,CAAEqX,OAAQA,GAAU,IACrBlZ,MACCP,OAAIsC,OACJtC,OAAI,SAAUuC,GACZ,OAAO,IAAI4D,IACTC,OAAOL,QAAQxD,GAAMvC,IACnB,EAAGuE,EAAKoH,MACN,OAAQA,OACD,UACH,MAAO,CAAEpH,EAAK+U,EAAiBI,SAAO,IACnC,YACH,MAAO,CAAEnV,EAAK+U,EAAiBK,gBAAc,IAC1C,YACH,MAAO,CAAEpV,EAAK+U,EAAiBM,UAAQ,IACpC,YACA,UACH,MAAO,CAAErV,EAAK+U,EAAiB3M,OAAK,QAEpC,MAAM,IAAIA,MAAM,sBAAsBpI,oCAAsC9E,KAAKC,UAAUiM,4DA7BlG4N,GAA6BvX,wCAA7BuX,EAA6BtX,QAA7BsX,EAA6B,qBAF5B,SAEDA,GAA6B,6BCTnC,IAAMM,GAAgB,MAAvB,MAAOA,EASXzY,cAPSI,UAAqC,OAErCA,YAAS,GACTA,eAAW,EAEpBA,UAAmB,GAInB0H,YAAYC,GACV3H,KAAKsY,KAAO,CAAC,CACXC,SAAUvY,KAAKV,KACfkZ,QAASxY,KAAKwY,QACdC,OAAQzY,KAAKyY,uDAfNJ,8BAAgBvU,+NCR7B7C,6BAAsCA,sBAAc,8CDQvCoX,GAAgB,yBEFzBpX,8BACEA,8CAUFA,kDACEA,2BAD4CA,qBAAqB,oBCKhE,IAAMyX,GAAyB,MAAhC,MAAOA,EAWX9Y,YACU+Y,EACArX,EACAsX,GAFA5Y,qCACAA,6BACAA,mBAXAA,qBAAkB,IAAI4G,MAEhC5G,gBAAaA,KAAK4Y,YAAY1Z,MAAM,CAAE+Y,OAAQ,KAC9CjY,WAA0B,QAE1BA,cAAsB,GAUtBmJ,WACEnJ,KAAK6Y,aAAe7Y,KAAK8Y,WAAW7Y,IAAI,WAAW8Y,aAAatV,UAAWsR,GAAmB/U,KAAKgZ,iBAAiBjE,IAGtH7S,cACElC,KAAK6Y,cAAczG,cAGrB6G,SAASC,GACHlZ,KAAK0J,QAAUwP,IACA,YAAflZ,KAAK0J,OAAqB1J,KAAK8Y,WAAWK,SAC7B,YAAbD,GAAwBlZ,KAAK8Y,WAAWM,UAC5CpZ,KAAK0J,MAAQwP,GAGfF,iBAAiBK,GACf,GAAmB,YAAfrZ,KAAK0J,MAAqB,OAC9B1J,KAAKiZ,SAAS,SAEd,MAAMhB,EAASoB,EAASC,MAAM,KAAKhZ,OAAOkF,GAASA,EAAMlH,OAAS,GAE5C,IAAlB2Z,EAAO3Z,OACT0B,KAAKiZ,SAAS,SACLhB,EAAO3Z,QAAU,KAC1B0B,KAAKiZ,SAAS,YAIVM,gBAAgBxM,GAEtB,MAAMyM,EAA2BnV,MAAMC,KAAKyI,EAASxI,WAAWjE,OAAOE,GAAKA,EAAE,KAAOsX,WAA0BtZ,IAAIgC,GAAKA,EAAE,IACpHiZ,EAA2BpV,MAAMC,KAAKyI,EAASxI,WAAWjE,OAAOE,GAAKA,EAAE,KAAOsX,kBAAiCtZ,IAAIgC,GAAKA,EAAE,IAC3HkZ,EAA0BrV,MAAMC,KAAKyI,EAASxI,WAAWjE,OAAOE,GAAKA,EAAE,KAAOsX,YAA2BtZ,IAAIgC,GAAKA,EAAE,IACpHmZ,EAA2BtV,MAAMC,KAAKyI,EAASxI,WAAWjE,OAAOE,GAAKA,EAAE,KAAOsX,SAAwBtZ,IAAIgC,GAAKA,EAAE,IAEpHgZ,EAAelb,OAAS,GAC1B0B,KAAK4Z,SAAS1R,KAAK,CACjB5I,KAAM,UACNkZ,QAASvV,8DAAkE3E,CAC3Ema,OAAQ,GAAGe,EAAe3a,KAAK,UAG/B4a,EAAenb,OAAS,GAC1B0B,KAAK4Z,SAAS1R,KAAK,CACjB5I,KAAM,OACNkZ,QAASvV,wDAAuE3E,CAChFma,OAAQ,GAAGgB,EAAe5a,KAAK,UAG/B6a,EAAcpb,OAAS,GACzB0B,KAAK4Z,SAAS1R,KAAK,CACjB5I,KAAM,QACNkZ,QAASvV,sEAA4D3E,CACrEma,OAAQ,GAAGiB,EAAc7a,KAAK,UAG9B8a,EAAerb,OAAS,GAC1B0B,KAAK4Z,SAAS1R,KAAK,CACjB5I,KAAM,QACNkZ,QAASvV,yEAAwE3E,CACjFma,OAAQ,GAAGkB,EAAe9a,KAAK,UAKrCgb,kBACE,IAAK7Z,KAAKd,OAAwB,UAAfc,KAAK0J,MAAmB,OAG3C1J,KAAK4Z,SAAW,GAGhB,MAAME,EAAU9Z,KAAK8Y,WAAW7Y,IAAI,UACpC,IAAK6Z,EAAS,OAEd,MAAM7B,EAAU6B,EAAQ3P,MAAiBmP,MAAM,KAC5C9a,IAAIgH,GAASA,EAAMuU,QACnBzZ,OAAO,SAAUkF,EAAOwJ,EAAOgL,GAC9B,OAAOA,EAAKC,QAAQzU,KAAWwJ,GAAmB,KAAVxJ,IAI5CxF,KAAKiZ,SAAS,WAEdjZ,KAAK2Y,8BAA8BX,kBAAkBhY,KAAKd,MAAME,GAAI6Y,GAAQxU,UAAU,CACpFf,KAAM4I,IACJtL,KAAKuZ,gBAAgBjO,GAGrBwO,EAAQI,SAAS,IAEjBla,KAAKiZ,SAAS,UAEhBrV,MAAOiI,IAGL,GAFA7L,KAAKiZ,SAAS,SACdjZ,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDAlH1C6M,GAAyBlY,2DAAzBkY,EAAyB5U,kKDtB0Bb,mBAAAA,GACnDA,2DAAAA,GAE4FA,yBAAAA,GAG1BA,wDAAAA,GAKvDA,QAAAA,6ZAXxBhC,mCAAmG,UACjGA,WAAoDA,QACpDA,iBACEA,0BAGAA,gCAIAA,sBAGEA,kCAAWgI,sBAEZhI,QAEDA,gCAGFA,iBApB4EA,wBAG5DA,0CAGAA,4CAQZA,6CAG+BA,k8ECKxByX,GAAyB,GCVzByB,GAAiB,MAAxB,MAAOA,EAEXva,YAAoBC,eAEpBua,YAAYxZ,EAAiByZ,GAC3B,MAAMC,GAAa,IAAIjc,MAAaO,IAAI,WAAYyb,EAAQxb,KAAK,MACjE,OAAOmB,KAAKH,KAAKgB,OAAiD,GAAGX,qBAA2BU,YAAmB,CACjHxC,OAAQkc,IACPvb,MACDP,OAAIsC,OACJtC,OAAIuC,GAAQ,IAAI4D,IAAIC,OAAOL,QAAQxD,oDAV5BoZ,GAAiB3Z,wCAAjB2Z,EAAiB1Z,QAAjB0Z,EAAiB,qBAFhB,SAEDA,GAAiB,6DCJxB,YAAuBpZ,GAC3B,MAAO,CACLqE,cAAerE,EAAKzC,OACpB6G,aAAcpE,EAAKT,OAAOoJ,GAASA,EAAM/F,SAASrF,OAClDic,UAAWxZ,EAAKyZ,KAAK9Q,KAAWA,EAAM+Q,YAAcxX,4BAAqCA,MAAGH,GAOzF,IAAM4X,GAAkB,MAAzB,MAAOA,EACX9a,YAAoBC,eAGpBgW,OAAOzW,GACL,OAAOY,KAAKH,KAAKgB,OAA6B,GAAGX,qBAA2Bd,KAG9Eub,YAAYzW,GACV,OAAOE,OACLF,EAAI1F,IAAIY,GAAMY,KAAK6V,OAAOzW,GAAIL,MAAK6b,OAAW,EAAGhX,YAAY0G,QAAG1G,OAChE7E,MACAP,OAAIoN,mDAZG8O,GAAkBla,wCAAlBka,EAAkBja,QAAlBia,EAAkB,qBAFjB,SAEDA,GAAkB,GCPlBG,GAAqB,MAA5B,MAAOA,EACXjb,YAAoBC,eAGpBgW,OAAOiF,EAAuBC,GAC5B,OAAO/a,KAAKH,KAAKgB,OAA6B,GAAGX,qBAA2B4a,eAA2BC,KAGzGJ,YAAYG,EAAuB5W,GACjC,OAAOE,OACLF,EAAI1F,IAAIY,GAAMY,KAAK6V,OAAOiF,EAAe1b,GAAIL,MAAK6b,OAAW,EAAGhX,YAAY0G,QAAG1G,OAC/E7E,MACAP,OAAIoN,mDAZGiP,GAAqBra,wCAArBqa,EAAqBpa,QAArBoa,EAAqB,qBAFpB,SAEDA,GAAqB,wFCThC5Z,uBAMEA,4DAAWA,uBACZA,aAFCA,oDAmBMA,2CAEEA,iBAAuD,YAEnDA,SACAA,yBACFA,0CAJEA,iCAEAA,iCACYA,2DAGhBA,cAA0B,YAEtBA,SACFA,0CADEA,4DATNA,SACEA,wBAMAA,uBAKFA,kCAXqCA,kCAM9BA,8DATTA,cACEA,wBACAA,kCAaFA,mDAdoBA,yHACYA,sDAFhCA,kDAAKA,iEAwBHA,iBACEA,8BACFA,wCADoCA,qDAK9BA,SACEA,qCAIEA,gCACFA,QACFA,yCAJIA,gDAEAA,qEANNA,SACEA,iCAQFA,yCARiBA,yDASjBA,SACEA,qCAIEA,SACFA,QACFA,yCAJIA,gDAEAA,0DAIFA,SACEA,yBACFA,yCADEA,oFAFJA,SACEA,iCAGFA,yCAHiBA,gEAIjBA,SACEA,SACFA,4DADEA,8DA1BNA,cACEA,YACEA,kCAUAA,kCAQAA,kCAKAA,kCAGFA,QACFA,kCA5BgBA,mCACGA,4CAUAA,sCAQAA,yEAxBrBA,cACEA,wBAGAA,wBA8BFA,2CAjCoBA,yHAGEA,sEAkCtBA,cAA2C,UAA3CA,CAA2C,WAA3CA,CAA2C,eAOnCA,0DAASA,2BAEVA,4CADCA,mEARRA,+DAAKA,6EAgBLA,cAAI,OAAJA,CAAI,UAEAA,YAA8GA,sCAD5GA,6EAMNA,kBACEA,iCACAA,mBAAyBA,+EAASA,2DAAlCA,YAEAA,QACAA,mBACAA,kBAA6B,aACnBA,2DAASA,wCACfA,4BAA+EA,QAC/EA,iBACFA,oDAHmCA,+FAC8CA,4GATvFA,yGAhGFA,uBAMEA,kEAAgBA,0BAAhBA,CAAqC,uGAMrCA,gCAmBAA,gCA0CAA,iCAgBAA,iCAOAA,uBAeFA,qDA7GEA,2BAAmB,iEAAnBA,CAAmB,gBAAnBA,CAAmB,wDAAnBA,CAAmB,yBA8FeA,oJA5GxCA,SAEEA,8BASAA,2CAkHFA,wCA1HKA,iCAAqB,eCiB1B,YAAuC6F,GACrC,OAAOA,EAAUtI,IAAIgJ,GAAYA,EAASnI,MAAMR,KAAK,MASvD,MAAMmc,GAAyB,CAC7B,CAAErc,MAAO,aAAcuE,OAAQD,KAAeA,CAAEgY,UAAU,GAC1D,CAAEtc,MAAO,eAAgBuE,OAAQD,cAAuBA,CAAEgY,UAAU,IAGhEC,GAA0B,CAC9B,CAAEvc,MAAO,OAAQuE,OAAQD,KAAeA,CAAEgY,UAAU,GACpD,CAAEtc,MAAO,OAAQuE,OAAQD,KAAeA,EACxC,CAAEtE,MAAO,YAAauE,OAAQD,0BAAqBA,GAG/CkY,GAAiC,CACrC,CAAExc,MAAO,OAAQuE,OAAQD,KAAeA,CAAEgY,UAAU,GACpD,CAAEtc,MAAO,YAAauE,OAAQD,0BAAqBA,GAG/CmY,GAAmC,CACvC,CAAEzc,MAAO,aAAcuE,OAAQD,KAAeA,EAC9C,CAAEtE,MAAO,eAAgBuE,OAAQD,mBAA0BA,GAGvDoY,GAAmC,CACvC,CAAE1c,MAAO,OAAQuE,OAAQD,KAAeA,CAAEgY,UAAU,GACpD,CAAEtc,MAAO,eAAgBuE,OAAQD,mBAA0BA,EAC3D,CAAEtE,MAAO,UAAWuE,OAAQD,cAAoBA,GAa3C,IAAMqY,GAAmB,MAA1B,MAAOA,EA2BX1b,YACU2b,EACAC,EACAC,EACAC,EACApa,EACAqa,EACAta,EACAua,GAPA5b,8BACAA,+BACAA,kCACAA,yBACAA,6BACAA,6BACAA,2BACAA,0BAhCAA,kBAAe,IAAI4G,MAE7B5G,mBAAwB,CAAEV,KAAMoU,QAAkBG,gBAAgB,GAElE7T,iBAAwB,GACxBA,mBAAwBA,KAAK6b,cAE7B7b,eAA8D,GAE9DA,aAAoB,GACpBA,eAAY,IAAI8b,KAAU,CACxBC,MAAOA,CAACC,EAAUC,IAAuCjc,KAAKkc,QAAQF,EAAUC,GAChFD,SAzBiB,GA0BjBG,gBAAiBA,KACfnc,KAAKsB,sBAAsBsC,MAAMX,sFAA0EA,KAG/GjD,WAAuCA,KAAKoc,UAAUC,MAKtDrc,wBAAqB,IAAIwB,IAazBU,cACElC,KAAKsc,mBAAmBna,WAG1BuF,YAAYC,IACL3H,KAAK2Q,YAEV3Q,KAAKuc,cAAgB,IAAKvc,KAAK6b,eAC/B7b,KAAKuH,QAAUvH,KAAKwc,WAAWxc,KAAKuc,eACpCvc,KAAK6K,YAAc,GACnB7K,KAAK0G,OAAO+B,QACZzI,KAAKyc,aAGPA,YACEzc,KAAKoc,UAAU5T,QACfxI,KAAKoc,UAAUM,OAGjBC,gBACE3c,KAAKoc,UAAUM,OAGjBR,QAAQF,EAAkBC,GACxB,IAAKjc,KAAK2Q,UAAW,MAAM,IAAIxF,MAAM,4CACrC,MAAM2D,EAAQ9O,KAAK2Q,UAAU7B,MAE7B,OAAQ9O,KAAKuc,cAAcjd,WACpBoU,SACH,OAAO1T,KAAKwb,wBAAwBoB,kCAClC9N,EAAM1P,GACNY,KAAK6K,YACL,GACA,CAAE,OAAQ,UAAW,SACrB9L,MAAKP,OAAIqe,GAAYA,EAASre,IAAIse,IAAU,IACzCA,EACHhO,OAAOG,QAAW6N,EAAO,IAAKhO,EAAMR,KAAMQ,EAAM1P,UAC9C,KACDsU,WACH,OAAO1T,KAAKwb,wBAAwBoB,kCAAkC9N,EAAM1P,GAAIY,KAAK6K,YAAa,CAAE,YACjG9L,MAAKP,OAAIqe,GAAYA,EAASre,IAAIse,IAAU,IACxCA,EACHhO,OAAOG,QAAW6N,EAAO,IAAKhO,EAAMR,KAAMQ,EAAM1P,UAC9C,KACHsU,QACH,OAAK1T,KAAKuc,cAAc1I,eAUf7T,KAAKwb,wBAAwBoB,kCAAkC9N,EAAM1P,GAAIY,KAAK6K,YAAa,CAAE,SACjG9L,MAAKP,OAAIqe,GAAYA,EAASre,IAAIse,IAAU,IACxCA,EACHhO,OAAOG,QAAW6N,EAAO,IAAKhO,EAAMR,KAAMQ,EAAM1P,UAZ7CY,KAAKyb,2BAA2BsB,mBAAmBjO,EAAM1P,GAAIY,KAAK6K,aACtE9L,MAAKP,OAAIwe,GAAmBA,EAAgBxe,IAAIye,IAAmB,CAClE7d,GAAI6d,EAAe7d,GACnBC,KAAM4d,EAAe5d,KACrB6d,aAAcD,EAAeE,QAAQ3e,IAAI4e,GAAUA,EAAO/d,MAAMR,KAAK,MACrEwe,QAASJ,EAAeI,QAAQ7e,IAAI8e,GAAUA,EAAO9X,OAAO3G,KAAK,MACjEiQ,OAAOnB,QAAc,CAAEvO,GAAI6d,EAAe7d,GAAIme,QAAQ,SACpD,KAQL7J,QACH,OAAI1T,KAAKuc,cAAc1I,eACd7T,KAAKub,uBAAuBiC,gBACjC1O,EAAM1P,GACNY,KAAK6K,YAjHI,GAmHRoR,GAAgC7c,IACjCL,MACAP,OAAI6e,GAAWA,EAAQ7e,IAAI8e,IAAW,IACjCA,EACHxO,OAAOG,QAAW,CAAE7P,GAAIke,EAAOle,GAAIme,QAAQ,GAAQ,IAAKzO,EAAMR,KAAMQ,EAAM1P,UAGvEY,KAAKyb,2BAA2BgC,mBAAmB3O,EAAM1P,GAAI,CAClEW,KAAMC,KAAK6K,YACX6S,MAAO1B,EACP2B,OAAS1B,GAAgC7c,KACxCL,MAAKP,OAAIof,GAAmBA,EAAgBpf,IAAIqf,IAAmB,CACpEze,GAAIye,EAAeze,GACnBoG,MAAOqY,EAAe/X,KAAKN,MAC3BM,KAAM+X,EAAe/X,KACrBoX,aAAcW,EAAeV,QAAQ3e,IAAI4e,GAAUA,EAAO/d,MAAMR,KAAK,MACrEiQ,OAAOnB,QAAc,CAAEvO,GAAIye,EAAeze,GAAIme,QAAQ,UAMhEnb,aAAaC,GACX,IAAKrC,KAAK2Q,UAAW,OAErB,MAAM9G,EAAWxH,EAAMC,eAAe9D,IAAI+D,IAAwB,IAAfA,EAAKC,MAAe,IAAID,EAAK5D,QAAU4D,EAAK5D,OAE3FkL,GAAY5L,KAAKC,UAAU2L,KAAc5L,KAAKC,UAAU8B,KAAK6K,eAC/D7K,KAAK6K,YAAchB,EACnB7J,KAAKyc,aAITqB,eAAexd,IACRN,KAAK2Q,WAENrQ,IAAWN,KAAKuc,gBAClBvc,KAAKuc,cAAgB,IAAKjc,GAC1BN,KAAKuH,QAAUvH,KAAKwc,WAAWlc,GAC/BN,KAAK0G,OAAO+B,QACZzI,KAAK6K,YAAc,GACnB7K,KAAKyc,aAITvI,UAAU5T,GACRN,KAAK+d,mBAAmB7J,UAAU5T,GAClCN,KAAK8d,eAAexd,GAGtBsJ,YAAYoU,GAERhe,KAAK8G,UADH9G,KAAK8G,UAAUxI,SAAW0f,EAAK1f,OAChB,GAEA0f,EAIrBC,cACEje,KAAK8G,UAAY,GAGnBsT,YAAYxZ,GACV,GAA8B,IAA1BZ,KAAK8G,UAAUxI,OACjB,MAAM,IAAI6M,MAAM,uCAGlB,MAAM+S,EAAoBle,KAAK8G,UAAUtI,IAAI8e,GAAUA,EAAOle,IAE9DY,KAAKsc,mBAAmB5Z,MAAK,GAC7B1C,KAAK0b,kBAAkBtB,YAAYxZ,EAASsd,GACzCza,UAAU,CACTf,KAAMuC,KC9OR,YAA+BD,EAAwCC,GACvEA,EAAOE,eAAiBF,EAAOG,cACjCJ,EAAgBrB,QAAQV,uDAA2DkC,EAClD,IAA5BkB,EAAWlB,aAChBH,EAAgBpB,MAAMX,gDAAgDA,EAEtE+B,EAAgBM,QACdrC,kIAA+HkC,GDwO3HkG,CAAqBrL,KAAKsB,sBJ3N9B,YAAuBP,GAM3B,MALY,CACVqE,cAAerE,EAAKwK,KACpBpG,aAAcd,MAAMC,KAAKvD,EAAKyK,UAC3BhN,IAAYkL,GAAU,CAAE,UAAW,aAAc+B,SAAS/B,GAAS,EAAI,GACvEgC,OAAO,CAACC,EAAKL,IAAQK,EAAML,EAAK,IIsNoBM,CAAa3G,IAC9DjF,KAAK0G,OAAO+B,QACZzI,KAAKie,cACLje,KAAKyc,YACLzc,KAAKsc,mBAAmB5Z,MAAK,IAE/BkB,MAAOiI,IAGL,GAFA7L,KAAKsc,mBAAmB5Z,MAAK,GAC7B1C,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvDsS,cAAc9b,GACZrC,KAAKqB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLI,KAAM,6BACNH,QAASC,kI,CAETG,YAAaH,IAAcA,CAC3Bob,WAAY,cACZ9a,YAAaN,IAAaA,CAC1BI,OAAQA,IAAMrD,KAAKse,4BAIvBC,kBAAkBlc,EAAczB,GAC9BZ,KAAKqB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLI,KAAM,6BACNH,QAASC,4N,CAETG,YAAaH,IAAcA,CAC3Bob,WAAY,cACZ9a,YAAaN,IAAaA,CAC1BI,OAAQA,IAAMrD,KAAKse,wBAAwB1d,KAI/C0d,wBAAwB1d,GACtB,GAA8B,IAA1BZ,KAAK8G,UAAUxI,OACjB,MAAM,IAAI6M,MAAM,sCAGlB,MAAMqT,EAAmBxe,KAAK8G,UAAUtI,IAAIU,GAASA,EAAME,IAE3DY,KAAKsc,mBAAmB5Z,MAAK,IACZ9B,EACfZ,KAAK2b,sBAAsBhB,YAAY/Z,EAAS4d,GAAoBxe,KAAK4b,mBAAmBjB,YAAY6D,IAEjG/a,UAAU,CACjBf,KAAMqK,KEpSN,YAA2C/H,EAAwCC,GACnFA,EAAOE,eAAiBF,EAAOG,cACjCJ,EAAgBrB,QAAQV,oDAA4DkC,EACnD,IAA5BkB,EAAWlB,aAChBH,EAAgBpB,MAAMX,4CAAmDA,CAAG,GAAGgC,EAAOsV,WAAa,MAEnGvV,EAAgBM,QACdrC,qI,CACqB,GAAGgC,EAAOsV,WAAa,OF6R1CkE,CAAiCze,KAAKsB,sBAAuByL,GAC7D/M,KAAK0G,OAAO+B,QACZzI,KAAKie,cACLje,KAAKyc,YACLzc,KAAKsc,mBAAmB5Z,MAAK,GAC7B1C,KAAK0e,aAAa1X,QAEpBpD,MAAOiI,IAGL,GAFA7L,KAAKsc,mBAAmB5Z,MAAK,GAC7B1C,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKrD8S,SAAStc,GACP,GAA8B,IAA1BrC,KAAK8G,UAAUxI,SAAiB0B,KAAK2Q,UACvC,MAAM,IAAIxF,MAAM,oDAGlB,MAAMvK,EAAUZ,KAAK2Q,UAAUzR,MAAME,GAEL,UAA5BY,KAAKuc,cAAcjd,KAKIU,KAAK8G,UAAoD0T,KAAKoE,IAAMA,EAAEC,SAG/F7e,KAAKue,kBAAkBlc,EAAOzB,GAIhCZ,KAAKqB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLI,KAAM,wBACNH,QAAmC,IAA1BhD,KAAK8G,UAAUxI,OACtB2E,qCAAgDA,CAChDA,+DAAuEA,CACzEG,YAAaH,IAAcA,CAC3Bob,WAAY,cACZ9a,YAAaN,IAAaA,CAC1BI,OAAQA,KAENmO,WAAW,KACTxR,KAAKme,cAAc9b,IAClB,MAELyc,OAAQA,KACNtN,WAAW,KACTxR,KAAKue,kBAAkBlc,EAAOzB,IAC7B,QA9BLZ,KAAKoa,YAAYxZ,GAmCb4b,WAAWlc,GACjB,OAAQA,EAAOhB,WACRoU,SAAmB,OAAOwH,QAC1BxH,WAAqB,OAAOyH,QAC5BzH,QAAkB,OAAO1T,KAAKuc,cAAc1I,eAAiBsH,GAAuBE,QACpF3H,QAAkB,OAAO1T,KAAKuc,cAAc1I,eAAiBmH,GAAeI,kDAxS1EE,GAAmB9a,mHAAnB8a,EAAmBxX,uUD9DNb,0CAAAA,GAuFQA,sBAAAA,GAYQA,sGAAAA,GAOsCA,YAAAA,GAMvDA,yBAAAA,4nCAtHzBhC,4CAAiDA,kCAAUgI,sBAAuDhI,QAClHA,yDADmFA,sCACpEA,8hFCmEFqa,GAAmB,GG5DhC,MAAMyD,GAAmB/f,KAAS,CAChCI,GAAIJ,KACJK,KAAML,KACNG,YAAaH,KAAWA,MACxBM,KAAMN,KAAU,QAAS,OAAQ,OAAQ,UAAW,QAAS,OAAQ,OAAQ,aAS/E,YAAiBE,GACf,MAAsB,SAAfA,EAAMI,KAMR,IAAM0f,GAAkB,MAAzB,MAAOA,EAEXpf,YAAoBC,eAEpBof,OACEC,EACAxB,EAAQ,GAER,MAAMtf,EAAS,IAAIC,KAAW,CAAE8gB,WAAY,CAAEF,OAAQC,EAAcxB,MAAOA,EAAM0B,cACjF,OAAOpf,KAAKH,KAAKI,IACf,GAAGC,2CACH,CAAE9B,OAAQA,IACVW,MACAqB,OAAgBpB,KAAQ+f,MACxBvgB,OAAI6gB,GAAUA,EAAO/e,OAAOgf,MAIhCC,wBACEL,EACAxB,EAAQ,GAER,MAAMtf,EAAS,IAAIC,KAAW,CAAE8gB,WAAY,CAAEF,OAAQC,EAAcxB,MAAOA,EAAM0B,cACjF,OAAOpf,KAAKH,KAAKI,IACf,GAAGC,uCACH,CAAE9B,OAAQA,IACVW,MACAqB,OAAgBpB,KAAQ+f,MACxBvgB,OAAI6gB,GAAUA,EAAO/e,OAAOgf,oDA5BrBN,GAAkBxe,wCAAlBwe,EAAkBve,QAAlBue,EAAkB,qBAFjB,SAEDA,GAAkB,kBCdxB,IAAMQ,GAAoB,MAA3B,MAAOA,EAgDX5f,YACU6f,6BA9CDzf,cAAU,EAETA,cAAW,IAAI4G,MAEzB5G,iBAIM,GAENA,0BAAoD,CAClD,CACEV,KAAM,QACN6D,KAAM,aACNoK,MAAOtK,QAAgBA,CACvB9D,YAAa,IAEf,CACEG,KAAM,OACN6D,KAAM,aACNoK,MAAOtK,MAAeA,CACtB9D,YAAa,IAEf,CACEG,KAAM,UACN6D,KAAM,cACNoK,MAAOtK,YAAkBA,CACzB9D,YAAa,IAEf,CACEG,KAAM,QACN6D,KAAM,aACNoK,MAAOtK,OAAgBA,CACvB9D,YAAa,KAIjBa,oBAAkBmK,GAChBnK,KAAKyf,mBAAmBF,wBAAwBpV,GAAOpL,MAAKP,OAAI6gB,GAAUA,EAAO7gB,IAAIU,IAAU,CAC7FE,GAAIF,EAAME,GACVE,KAAMJ,EAAMI,KACZiO,MAAOrO,EAAMG,KACbF,YAAaD,EAAMC,iBAOvBqO,SAAStO,GACPc,KAAK0f,SAAS1Y,KAAK9H,iDArDVsgB,GAAoBhf,oCAApBgf,EAAoB1b,yJCdqBb,oBAAAA,4IAAtDhC,6BAAqE,uBAIjEA,wCAAgBgI,gBAEjBhI,iBAJCA,mEAAkD,kCAAlDA,CAAkD,kDDYzCue,GAAoB,oEEV3Bve,+BAGIA,8DAAYA,uBACfA,iCAFGA,mFAINA,oCAAmDA,oEAAmBA,8BACtEA,iCADwBA,kGAGxBA,oCAAmDA,oEAAmBA,8BACtEA,iCADwBA,kGAZ1BA,SACEA,yBAAuE,yBAChBA,iEAAgBA,+BAAqBA,QAC1FA,sCAKFA,QACAA,2CAGAA,2CAEFA,iCAZiCA,wCAExBA,yHAKoFA,0EAGAA,iGAI3FA,6DAjBJA,SACEA,iCAeAA,2CAGFA,yCAlBiBA,mEAAiD,eCsB3D,IAAM0e,GAAyB,MAAhC,MAAOA,EAcX/f,YACUyN,EACA/L,GADAtB,4BACAA,6BAZAA,0BAAuB,IAAI4G,MAC3B5G,gBAAa,IAAI4G,MACjB5G,kBAAe,IAAI4G,MAM7B5G,WAAiC,QAOjC0H,cACE1H,KAAK4f,qBAAuB5f,KAAK2Q,WAAYC,SAAwB5Q,KAAK2Q,UAAUzR,YAAS4D,EAG/F+c,mBACE7f,KAAKuT,qBAAqBvM,OAG5B0Y,SAASxgB,GACP,IAAKc,KAAK2Q,UAAW,MAAMxF,MAAM,iDAEjCnL,KAAK0J,MAAQ,eAEbtF,OAAS,CACP0W,eAAexQ,QAAGtK,KAAK2Q,UAAUzR,MAAME,IACvC2b,aAAc7b,EAAME,IAAKkL,QAAGpL,EAAME,IAAMY,KAAKqN,qBAAqBP,OAAO5N,EAAMqO,MAAOrO,EAAMI,QAC3FP,MAAK8C,OAAUqC,GAAOlE,KAAKqN,qBAAqBL,YAAY9I,EAAI4W,cAAe5W,EAAI6W,gBAAgBtX,UAAU,CAC9Gf,KAAMod,IACJ9f,KAAKsB,sBAAsBqC,QAAQV,2DAAkDA,EACrFjD,KAAK+f,YAAY7L,UAAU,CAAEL,gBAAgB,EAAMvU,KAAMoU,WACzD1T,KAAK0J,MAAQ,QACb1J,KAAKggB,WAAWhZ,QAElBpD,MAAOiI,IAGL,GAFA7L,KAAK0J,MAAQ,QACb1J,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDA7C1C8T,GAAyBnf,+CAAzBmf,EAAyB7b,iVDrBgBb,kBAAAA,uSAFtDhC,sCAAeA,6iECuBF0e,GAAyB,kBCZhC,YAA6BM,GACjC,MAAwB,sBAAjBA,EAASxV,IAGZ,YAAwBwV,GAC5B,MAAwB,iBAAjBA,EAASxV,IAGZ,YAA0ByV,GAC9B,MAA0B,UAAnBA,EAAU5gB,KCJZ,IAAM6gB,GAAkB,MAAzB,MAAOA,EAEXvgB,YAAoBC,eAGpBsV,YAAYvU,EAAiBwU,GAC3B,OAAOpV,KAAKH,KAAKwV,IAA0B,GAAGnV,qBAA2BU,IAAWwU,GAASrW,MAC3FP,OAAI2O,qDAPGgT,GAAkB3f,wCAAlB2f,EAAkB1f,QAAlB0f,EAAkB,qBAFjB,SAEDA,GAAkB,+HCb3Blf,kEAEAA,uBAOEA,4DAAWA,qBACZA,aAHCA,uEAQEA,SACEA,aAAGA,yEAA6DA,QAChEA,6BAGEA,kEAAgBA,8BAEjBA,QACHA,iCALIA,kEAAiD,6EAOrDA,kBAAqD,aAEjDA,SACFA,QACAA,mBAAqBA,0DAASA,sBAC5BA,4BAAiBA,QACjBA,gBACFA,wCALEA,2DAUFA,mGAFFA,kBAEEA,uBACAA,mBAGCA,SAAmBA,QACpBA,mBAAqBA,0DAASA,sBAC5BA,4BAAiBA,QACjBA,gBACFA,wCARuBA,oCAErBA,yCAA8B,qCAE/BA,uDA7BPA,SAAoC,KAGhCA,iCAUAA,wBAUAA,wBAaFA,qCAnCcA,sCAEGA,6CAUQA,8CAUAA,8EAtC/BA,SACEA,yBAEEA,gCAEAA,8BAUAA,iCAsCFA,QACFA,6BAnDgCA,oCAGzBA,iCASYA,kCCWZ,IAAMmf,GAA2B,MAAlC,MAAOA,EA6CXxgB,YACUygB,EACAC,GADAtgB,0BACAA,yBA7CDA,yBAAsBugB,KAEdvgB,sBAAmB,IAAIwB,IAKhCxB,cAAW,IAAIuB,IACdvB,YAASA,KAAKwgB,iBAAiBzhB,MACtC4C,UACAE,OAAUd,IAGR,GAFIA,EAAK0f,eAAezgB,KAAK0gB,SAAS3f,EAAKkf,WAEtCU,GAAmB5f,EAAKkf,UAC3B,OAAO3V,QAAG,CACRG,IAAK1J,EAAKkf,SAASxV,IAAKrL,QAAI0D,EAAWwL,KAAM,KAC7CjP,KAAMuhB,GAAc7f,EAAKkf,UAAYlf,EAAKkf,SAAS5gB,UAAOyD,IAI9D,MAAM1D,EAAK2B,EAAKkf,SAAS7gB,GAIzB,YAHoC0D,IAAvB/B,EAAKkf,SAAS5gB,MAAqBiL,QAAGvJ,EAAKkf,SAAS5gB,MAC/DW,KAAKqgB,mBAAmBpgB,IAAIb,GAAIL,MAAKP,OAAI6J,GAAQA,EAAKwY,OAAOtT,SAEnDxO,MACVP,OAAIa,IAAS,CAAEoL,IAAK,oBAAqBrL,GAAIA,EAAIC,OAAMiP,MAAMwS,UAAqBC,SAAa,WAAY3hB,QAC3Gwb,OAAW/O,IACT,IAAImV,SAAqBnV,GAAM,OAAOvB,QAAG,CACvCG,IAAK,oBAAqBpL,KAAM4D,kCAAkDA,CAAEqL,KAAM,OAE5F,MAAMzC,QAIZ/J,QAAgB,CAAEC,SAAU/B,KAAKgC,YAG3BhC,cAAqE,OAE7EA,oBAAkBmK,GAChBnK,KAAKsgB,kBAAkBrB,OAAO9U,EAAO,CAAE,UAAW,SAAU,SACzDpL,MAAKP,OAAIyiB,GAASA,EAAM3gB,OAAO4gB,MAOpChf,cACElC,KAAKgC,SAASG,WAGhBgf,WAAWC,GACTphB,KAAKwgB,iBAAiB9d,KAAK,CAAEud,SAAUmB,EAAcX,eAAe,IAGtEY,iBAAiBC,GACfthB,KAAK0gB,SAAWY,EAGlBC,kBAAkBC,IAGlB7C,WACE3e,KAAKwgB,iBAAiB9d,KAAK,CACzBud,SAAU,CAAExV,IAAK,eAAiBgW,eAAe,IAGrDgB,gBAAgBxB,GACdjgB,KAAKwgB,iBAAiB9d,KAAK,CACzBud,cAA0Bnd,IAAhBmd,EAAS7gB,GACjB,CAAEqL,IAAK,oBAAqBrL,GAAI6gB,EAAS7gB,GAAIC,KAAM4gB,EAAS1S,OAC5D,CAAE9C,IAAK,eAAgBpL,KAAM4gB,EAAS1S,MAAOmU,aAAczB,EAAS3gB,MACtEmhB,eAAe,IAInB/c,UACE1D,KAAKgC,SAASU,qDAhFL0d,GAA2B5f,kDAA3B4f,EAA2Btc,wDAR3B,CACT,CACE8E,QAAS+Y,KACTC,aAAaC,SAAW,IAAMzB,GAC9B0B,OAAO,MAEVC,wDDvB8B9e,oBAAAA,GAQLA,0CAAAA,GAe4BA,UAAAA,GASjCA,UAAAA,GAaAA,UAAAA,kvBA9CvBhC,wDAAeA,4sFC0BFmf,GAA2B,GClB3B4B,GAAkB,MAAzB,MAAOA,EAEXpiB,YAAoBC,eAGpBgB,OAAOD,GACL,OAAOZ,KAAKH,KAAKgB,OAA6B,GAAGX,qBAA2BU,KAAW7B,MACrFP,OAAI2O,qDAPG6U,GAAkBxhB,wCAAlBwhB,EAAkBvhB,QAAlBuhB,EAAkB,YAAlBA,GAAkB,yBCN7B/gB,gDAWAA,6BAEAA,kDACAA,uBAMEA,4DAAWA,qBACZA,aAHCA,uEApBJA,iBAEEA,iDAEAA,oBAKIA,yDAASA,4CAEZA,QAEDA,yBAGAA,8BAQFA,yCAtB6BA,sEAQvBA,wGAGwBA,yCAIzBA,kCCDE,IAAMghB,GAA0B,MAAjC,MAAOA,EAeXriB,YACU0B,EACAD,EACAma,EACA0G,EACA9O,GAJApT,6BACAA,2BACAA,+BACAA,0BACAA,cAjBAA,kBAAe,IAAI4G,MAE7B5G,yBAAsB,IAAIuB,IAETvB,SAAM,IAAIwB,IAAsB,GACzCxB,cAAW,IAAIuB,IACdvB,YAASA,KAAKmiB,IAAIpjB,MACzB4C,UACAE,OAAUzC,GAAMY,KAAKoiB,kBAAkBhjB,KACvC0C,QAAgB,CAAEC,SAAU/B,KAAKgC,YAWnC0F,cACM1H,KAAKd,OACPc,KAAKmiB,IAAIzf,KAAK1C,KAAKd,MAAME,IAI7B8C,cACElC,KAAKmiB,IAAIhgB,WACTnC,KAAKgC,SAASG,WAGhBigB,kBAAkBxhB,GAChB,OAAOZ,KAAKwb,wBAAwB6G,iBAAiBzhB,GAAS7B,MAC5DP,OAAK8jB,GAA6BA,EAAWhkB,OAAS,IAI1DikB,iBACOviB,KAAKd,OAIVc,KAAKqB,oBAAoBuB,QAAQ,CAC/BI,QAASC,uFAAmE5D,CAC5E6D,OAAQD,gBAAyBA,CACjCE,KAAM,6BACNC,YAAaH,cAAoBA,CACjCI,OAAQA,KACNrD,KAAKwiB,eAEPjf,YAAaN,IAAaA,GAI9Buf,cACE,IAAKxiB,KAAKd,MACR,OAGF,MAAME,EAAKY,KAAKd,MAAME,GAChBoE,EAAYxD,KAAKd,MAAMG,KAE7BW,KAAKyiB,oBAAoB/f,MAAK,GAC9B1C,KAAKkiB,mBAAmBrhB,OAAOzB,GAC5BqE,UAAU,CACTf,KAAMA,KACJ1C,KAAKyiB,oBAAoB/f,MAAK,GAC9B1C,KAAKsB,sBAAsBqC,QAAQV,6BAA8BO,EACjExD,KAAK0iB,aAAa1b,OAClBhH,KAAK2iB,sBAEP/e,MAAOC,IACL7D,KAAKyiB,oBAAoB/f,MAAK,GAC9B1C,KAAKsB,sBAAsBsC,MAAMX,uCAA8BO,KAKvEmf,qBACO3iB,KAAKoT,OAAOK,SAAS,CAAE,iBAG9B/P,UACE1D,KAAKgC,SAASU,qDAtFLuf,GAA0BzhB,mFAA1ByhB,EAA0Bne,0KDRfb,yBAAAA,GAWEA,yCAAAA,GAN4CA,2CAAAA,ifAbtEhC,+CAAwBA,qpECgBXghB,GAA0B,yBCfrChhB,gEAEAA,uBAMEA,4DAAWA,0BACZA,aAHCA,uEAMAA,kBAAwJ,kBAAxJA,CAAwJ,UAAxJA,CAAwJ,UAAxJA,CAAwJ,WAIhJA,YAAgBA,UAElBA,kBACEA,wBACFA,UAEFA,iBAAmB,UAAnBA,CAAmB,YAEfA,aAAuBA,UAEzBA,mBACEA,4BACFA,YAGJA,uCAEAA,mBAAmC,iCACaA,iEAAgBA,wBAAcA,oDAtBpDA,+BAOTA,yCAQGA,yCAOOA,yEAI7BA,gCAGEA,yDAAQA,iBAARA,CAAe,qDACLA,uBACXA,iCAHCA,4DAMAA,kDAnCJA,SACEA,0BA0BAA,sCAOAA,2CAGFA,wDApCuDA,qFAA+E,cA2BjIA,oEAxCPA,SACEA,gCAEAA,8BASAA,iCAsCFA,6BAjDgBA,oCAGXA,iCAQYA,kCCYV,IAAM2hB,GAAkB,MAAzB,MAAOA,EAaXhjB,YACUyQ,EACAwS,EACAC,EACAxhB,EACAsX,EACAmK,EACAC,EACAC,GAPAjjB,mBACAA,6BACAA,uBACAA,6BACAA,mBACAA,0BACAA,yBACAA,6BApBVA,eAAYA,KAAK4Y,YAAY1Z,MAAM,CAEjCG,KAAM,CAAE,GAAI,CAAE6jB,cAAqBA,eAAqB,KACxD/jB,YAAa,CAAE,GAAI,IACnBiiB,aAAc,CAAE,GAAI,MAItBphB,YAASA,KAAK8iB,gBAAgBK,OAAOpkB,MAAKqkB,QAAa1Z,IAASkH,SAAwBlH,EAAMxK,SAc5Fc,KAAK6Y,aAAe7Y,KAAKmjB,OACtBpkB,MAAKskB,WACL5f,UAAU4E,IACTrI,KAAKsjB,gBAAkBjb,EACvBrI,KAAKujB,cAAclb,KAIzBc,WACEnJ,KAAKijB,sBAAsBrkB,IAAIoB,MAGjCkC,cACElC,KAAKqQ,YAAYmT,cACjBxjB,KAAK6Y,cAAczG,cACnBpS,KAAKijB,sBAAsBxa,QAG7Bgb,UACE,OAAOzjB,KAAK0jB,UAAUC,MAGxBC,OACE,IAAK5jB,KAAKsjB,gBAAiB,OAE3B,GAAItjB,KAAK0jB,UAAUG,QAEjB,YADA7jB,KAAKsB,sBAAsBsC,MAAMX,4EAAkFA,EAGrHjD,KAAK0jB,UAAUtK,UAEf,MAAMha,EAAKY,KAAKsjB,gBAAgBlkB,GAC1BC,EAAOW,KAAK0jB,UAAUzjB,IAAI,SAASkK,MACnChL,EAAca,KAAK0jB,UAAUzjB,IAAI,gBAAgBkK,MAEjDiX,EAAephB,KAAK0jB,UAAUzjB,IAAI,iBAAiBkK,OACjCyW,GAAcQ,GACpCphB,KAAKgjB,kBAAkBlW,OAAO,CAC5BS,MAAO6T,EAAa/hB,KACpBC,KAAM8hB,EAAaM,aACnBoC,YAAa,KACbC,gBAAiB/jB,KAAKsjB,gBAAgBlkB,MALYkL,QAAGqW,GAAmBS,GAAgBA,EAAahiB,GAAK,OAQ/FL,MACbilB,QAAUC,GAAkBjkB,KAAK+iB,mBAAmB5N,YAAY/V,EAAI,CAClEC,OACAF,YAA6B,KAAhBA,EAAqB,KAAOA,EACzC+kB,iBAAkBD,MAEpBxgB,UAAU,CACVf,KAAMA,KACJ1C,KAAK8iB,gBAAgBrT,eACrBzP,KAAKmkB,aACLnkB,KAAKsB,sBAAsBqC,QAAQV,mCAAsCA,GAE3EW,MAAOiI,IAGL,GAFA7L,KAAK0jB,UAAUvK,SACfnZ,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKrDsY,aACEnkB,KAAK6iB,sBAAsBnU,qBAG7B0V,YACMpkB,KAAKsjB,iBAAiBtjB,KAAKujB,cAAcvjB,KAAKsjB,iBAG5CC,cAAcrkB,GAMpBc,KAAK0jB,UAAUlb,MAAM,CACnBnJ,KAAMH,EAAMG,KACZF,YAAaD,EAAMC,YACnBiiB,aAP4C,OAAzBliB,EAAM+kB,eACzB,CAAExZ,IAAK,eACP,CAAEA,IAAK,oBAAqBrL,GAAIF,EAAM+kB,kBAOxCjkB,KAAK0jB,UAAUvK,SAGjBkL,eACErkB,KAAK8iB,gBAAgBrT,6DA9GZmT,GAAkBpiB,mHAAlBoiB,EAAkB9e,uFDlBLb,+BAAAA,GAQ4BA,uBAAAA,GAG9BA,KAAAA,GAQAA,MAAAA,GAsBeA,0CAAAA,6rBA/CvChC,wDAAeA,kyBCwBF2hB,GAAkB,0BCf3B3hB,gBAAyKA,aAACA,gCAC1KA,2BAGMA,gEAERA,6BAEAA,mJAjBFA,SAEEA,eAEEA,qEAASA,4BAETA,kBAAQA,SAAeA,UAEzBA,kBACEA,yBACAA,yBAIFA,QACAA,yBAGFA,iEAZYA,uBAGDA,+LAEJA,kKAIeA,2ECHf,IAAMqjB,GAAmB,MAA1B,MAAOA,EAKX1kB,YAAoB0N,sBAFpBtN,qBAVwB,EAcxBukB,cAAclc,GACZrI,KAAKsN,YAAYI,YAAWC,QAAc,CAAEvO,GAAIiJ,EAAKjJ,GAAIme,QAAQ,mDARxD+G,GAAmB9jB,sCAAnB8jB,EAAmBxgB,yGDC3Bb,MAAAA,GAE8EA,kCAC/E,iKAhBJhC,yDACqBA,kXCWRqjB,GAAmB,0BCV5BrjB,4BAEAA,mCAEAA,4BACiBA,6BAEjBA,sCAFgDA,4GAMhDA,4BAEAA,mCAEAA,4BACkBA,6BAElBA,sCAFiDA,8GAIjDA,4BACkBA,6BAElBA,sCAFiDA,sFCf9C,IAAMujB,GAAuB,MAA9B,MAAOA,EAGX5kB,6DAHW4kB,8BAAuB1gB,mHDNmBb,2BAAAA,GAIIA,4FAC2C,GAM/CA,4BAAAA,GAIEA,iGAC6C,GAI3CA,kGAC6C,mJAvBxGhC,iBACEA,WACEA,wBAIAA,wBAIFA,QAEAA,WACEA,wBAIAA,wBAKAA,wBAIFA,QACFA,eA1BgBA,4EACUA,wCAIAA,4CAMVA,6EACUA,wCAIAA,0CAKAA,msFCdbujB,GAAuB,GCA7B,MAAMC,IAAiB1lB,SAC5BC,KAAS,CACPI,GAAIJ,KACJK,KAAML,KACN0lB,UAAW1lB,KAAU,OAAQ,cAAe,yBAC5C2lB,oBAAqB3lB,KACrB4lB,gBAAiB5lB,OAEnBA,KACEA,KAAU,CACRwG,MAAOxG,KACPyG,UAAWzG,KAAWA,MACtB0G,SAAU1G,KAAWA,UAUpB,IAAM6lB,GAAuB,MAA9B,MAAOA,EAEXjlB,YAAoBC,eAEpBilB,iBACElkB,EACAmkB,GAMA,IAAI3mB,EAAS,IAAIC,KACjB,OAAI0mB,GAAShlB,OAAM3B,EAASA,EAAOQ,IAAI,OAAQmmB,EAAQhlB,KAAKlB,KAAK,YAC1CiE,IAAnBiiB,GAASrH,QAAqBtf,EAASA,EAAOQ,IAAI,QAASmmB,EAAQrH,aAC/C5a,IAApBiiB,GAASpH,SAAsBvf,EAASA,EAAOQ,IAAI,UAAWmmB,EAAQpH,SAEnE3d,KAAKH,KACTI,IAAa,GAAGC,qBAA2BU,aAAoB,CAAExC,OAAQA,IAAUW,MAClFqB,OAAgBpB,KAAQylB,oDAnBnBI,GAAuBrkB,wCAAvBqkB,EAAuBpkB,QAAvBokB,EAAuB,qBAFtB,SAEDA,GAAuB,6BCjB9B,YAAuB9jB,GAC3B,MAAO,CACLqE,cAAerE,EAAKzC,OACpB6G,aAAcpE,EAAKT,OAAOqD,GAAWA,GAASrF,QAO3C,IAAM0mB,GAAyB,MAAhC,MAAOA,EACXplB,YAAoBC,eAGpBgW,OAAOjV,EAAiBqkB,GACtB,OAAOjlB,KAAKH,KACTgB,OAA6B,GAAGX,qBAA2BU,cAAoBqkB,KAC/ElmB,MACCP,OAAI2O,OAIVwN,YAAYG,EAAuB5W,EAAeghB,GAChD,OAAO7a,WACFnG,EAAI1F,IAAIY,GAAMY,KAAK6V,OAAOiF,EAAe1b,GAAIL,MAC9CP,OAAI,KAAM,IACVoc,OAAW,KAAMtQ,SAAG,OAEtBvL,KCvCC,YAAgBomB,EAAaC,GAChC,OAAOC,SAAQC,QAAcH,EAAaC,EAAMG,UAAUjnB,QAAU,GAAG,GAAO,IDuC5EoN,CAA2B,CAAC8Z,EAAiB7hB,IAC3C,IAAK6hB,EAAiB7hB,GAAW,KAEnC9B,OAAU2jB,GACPN,EACCM,EAAgBhL,KAAKiL,IAAmBA,IACtCnb,QAAG,IAAKkb,GAAiB,IAAWxlB,KAAK6V,OAAOiF,EAAeoK,GAAcnmB,MAC3EP,OAAI,KAAM,IACVoc,OAAW,KAAMtQ,SAAG,KACpB9L,OAAImF,GAAW,IAAK6hB,EAAiB7hB,MAEvC2G,QAAGkb,KAETzmB,MACAP,OAAIoN,mDAjCGoZ,GAAyBxkB,wCAAzBwkB,EAAyBvkB,QAAzBukB,EAAyB,qBAFxB,SAEDA,GAAyB,4BER/B,IAAMU,GAA0B,MAAjC,MAAOA,EAEX9lB,YAAoBC,eAEpB8lB,OACE/kB,EACAqkB,EACAW,GAEA,OAAO5lB,KAAKH,KAAKwV,IAA0B,GAAGnV,qBAA2BU,cAAoBqkB,IAAa,CACxGY,WAAYD,EAAQlB,UACpBoB,uBAAwBF,EAAQjB,oBAChCoB,kBAAmBH,EAAQhB,gEAZpBc,GAA0BllB,wCAA1BklB,EAA0BjlB,QAA1BilB,EAA0B,qBAFzB,SAEDA,GAA0B,0EC0BvBzkB,4BAA6DA,mCANjEA,kCAKEA,4CAGFA,6CANEA,wCAAgC,uCAkB9BA,+BAEAA,gCAJJA,+BACEA,4CAKAA,cANgBA,sDAkBdA,4BAEAA,gCAJJA,+BACEA,4CAKAA,cANgBA,sDAetBA,SACEA,0BACFA,kDAGEA,uBAIEA,4DAAWA,qBACZA,QACDA,uBAIEA,4DAAWA,sBAEZA,iCADCA,mFApGZA,SACEA,sBACIA,uFAMFA,oBAAU,UAAVA,CAAU,YAGNA,eACFA,QACEA,6BAEFA,QACEA,kBAA2BA,yDAASA,qBACpCA,iBACFA,YAIFA,kBAA8B,YAA9BA,CAA8B,QAE1BA,aAEAA,QAEFA,oBAAyB,iCAMrBA,6CAWFA,QAEAA,uCAKEA,6CASAA,QAEFA,uCAKEA,6CASAA,cAKNA,qBAAU,aAENA,mCAIAA,6CAeFA,YAGNA,4CAxGMA,oCAAqB,WAArBA,CAAqB,eAArBA,CAAqB,eAarBA,gDAAO+kB,eAAP/kB,SAaMA,mCAEFA,iCAkBAA,iCAgBAA,iCAoBaA,oCAAkB,eCnElC,IAAMglB,GAAgC,MAAvC,MAAOA,EAkCXrmB,YACUsmB,EACAC,EACA7kB,EACA8kB,EACA/kB,GAJArB,sBACAA,kCACAA,6BACAA,UACAA,2BAlCAA,WAAQ,IAAI4G,MAEtB5G,2BAA2F,CACzF,CACEmK,MAAO,OACPD,MAAOjH,cAAoBA,CAC3BojB,QAASpjB,yBAA+BA,EAE1C,CACEkH,MAAO,cACPD,MAAOjH,eAAqBA,CAC5BojB,QAASpjB,yDAAwDA,EAEnE,CACEkH,MAAO,wBACPD,MAAOjH,0BAAgCA,CACvCojB,QAASpjB,wEAAkEA,GAK/EjD,iBAAa,EAEbA,UAAOA,KAAKomB,GAAGlnB,MAAM,CACnBwlB,UAAW,CAAE,QACbC,oBAAqB,EAAE,GACvBC,gBAAiB,EAAE,KAWrBld,cACM1H,KAAKsmB,UACPtmB,KAAKumB,KAAK/d,MAAM,CACdkc,UAAW1kB,KAAKsmB,QAAQ5B,UACxBC,oBAAqB3kB,KAAKsmB,QAAQ3B,oBAClCC,gBAAiB5kB,KAAKsmB,QAAQ1B,iBAC7B,CAAE4B,WAAW,IAEhBxmB,KAAKymB,YAAczmB,KAAKsmB,QAAQ9gB,OAAQkhB,QAAW,CACjDlhB,MAAOxF,KAAKsmB,QAAQ9gB,MACpBC,UAAWzF,KAAKsmB,QAAQ7gB,UACxBC,SAAU1F,KAAKsmB,QAAQ5gB,WACpB1F,KAAKsmB,QAAQjnB,MAItBsnB,UACE3mB,KAAK4mB,MAAM5f,KAAK,CAAE6f,SAAS,IAG7Btd,WACE,IAAKvJ,KAAKsmB,QACR,MAAM,IAAInb,MAAM,mCAGlB,MAAM2b,EAAgB9mB,KAAKkmB,eAAea,SAAS5c,OAAOvJ,QAE1D,IAAKkmB,EACH,MAAM,IAAI3b,MAAM,sCAGlB,MAAM6b,EAAiBhnB,KAAKumB,KAAKtmB,IAAI,cAAckK,MAE/CnK,KAAKsmB,QAAQlnB,KAAO0nB,GAAiB9mB,KAAKsmB,QAAQlnB,KAAO0nB,GAC/B,0BAA3B9mB,KAAKsmB,QAAQ5B,WAA6D,0BAAnBsC,EACxDhnB,KAAK2lB,SAIP3lB,KAAKqB,oBAAoBuB,QAAQ,CAC/BI,QAASC,yL,CAETC,OAAQD,gBAAyBA,CACjCE,KAAM,6BACNC,YAAaH,0BAAmCA,CAChDgkB,uBAAwB,kBACxB5jB,OAAQA,KACNrD,KAAK2lB,UAEPpiB,YAAaN,IAAaA,GAI9B0iB,SACE,IAAK3lB,KAAKsmB,UAAYtmB,KAAKd,MACzB,MAAM,IAAIiM,MAAM,6CAGlB,MAAM+b,EAAoD,CACxDxC,UAAW1kB,KAAKumB,KAAKtmB,IAAI,cAAckK,MACvCwa,oBAAqB3kB,KAAKumB,KAAKtmB,IAAI,wBAAwBkK,MAC3Dya,gBAAiB5kB,KAAKumB,KAAKtmB,IAAI,oBAAoBkK,OAGrDnK,KAAKmnB,YAAa,EAClBnnB,KAAKmmB,2BAA2BR,OAAO3lB,KAAKd,MAAME,GAAIY,KAAKsmB,QAAQlnB,GAAI8nB,GAAoBzjB,UAAU,CACnGf,KAAMA,KACJ1C,KAAKmnB,YAAa,EAClBnnB,KAAKsB,sBAAsBqC,QAAQV,4CAA8CA,EACjFjD,KAAK4mB,MAAM5f,KAAK,CAAE6f,SAAS,KAE7BjjB,MAAOA,KACL5D,KAAKmnB,YAAa,EAClBnnB,KAAKsB,sBAAsBsC,MAAMX,mCAAsCA,mDAnHlEgjB,GAAgCzlB,kFAAhCylB,EAAgCniB,oNDJLb,mFACW,GAUnCA,4IAAAA,GAOcA,iBAAAA,GAkBAA,qBAAAA,GAgBAA,2BAAAA,GAxBHA,oDAAAA,GAcMA,4FAAAA,GAgBNA,yEAAAA,GAoBGA,eAAAA,GAMAA,QAAAA,m/BAjG9BhC,wCAAeA,o2HCiBFglB,GAAgC,kBCPtC,IAAMmB,GAAqB,MAA5B,MAAOA,EACXxnB,YAAoBC,eAGpBI,IAAIuF,GACF,OAAOxF,KAAKH,KACTI,IAAa,GAAGC,6BAAmCsF,KACnDzG,MAAKqB,OAAgBmF,qDAPf6hB,GAAqB5mB,wCAArB4mB,EAAqB3mB,QAArB2mB,EAAqB,qBAFpB,SAEDA,GAAqB,GCHlC,MAAMC,GAAoD,CACxD1C,qBAAqB,EACrBD,UAAW,OACXE,iBAAiB,GAMZ,IAAM0C,GAAyB,MAAhC,MAAOA,EACX1nB,YAAoBC,eAGpBiN,OACElM,EACAqkB,EACAW,EAAyCyB,IAEzC,OAAOrnB,KAAKH,KAAK4E,KAA8B,GAAGvE,qBAA2BU,cAAoBqkB,IAAa,CAC5GY,WAAYD,EAAQlB,UACpBoB,uBAAwBF,EAAQjB,oBAChCoB,kBAAmBH,EAAQhB,gEAZpB0C,GAAyB9mB,wCAAzB8mB,EAAyB7mB,QAAzB6mB,EAAyB,qBAFxB,SAEDA,GAAyB,GCDzBC,GAAwB,MAA/B,MAAOA,EAUX3nB,YACU4nB,EACAC,EACAnmB,GAFAtB,6BACAA,iCACAA,6BAXAA,WAAQ,IAAI4G,MAKtB5G,WAAuC,QACvCA,WAAQ,GAQR0nB,UACE,IAAK1nB,KAAK2nB,SACR,MAAM,IAAIxc,MAAM,+BAGlB,GAAInL,KAAK2nB,SAASnN,KAAK8L,GAAWA,EAAQ9gB,QAAUxF,KAAKwF,OAEvD,YADAxF,KAAKsB,sBAAsBsC,MAAMX,gDAAwDA,EAI3F,IAAKjD,KAAK2Q,UACR,MAAM,IAAIxF,MAAM,iCAGlB,MAAMvK,EAAUZ,KAAK2Q,UAAUzR,MAAME,GAErCY,KAAK0J,MAAQ,UACb1J,KAAKwnB,sBAAsBvnB,IAAID,KAAKwF,OAAOzG,MACzC8C,OAAUiE,GAAQ9F,KAAKynB,0BAA0B3a,OAAOlM,EAASkF,EAAKlF,WACtE6C,UAAU,CACVf,KAAMA,KACJ1C,KAAK0J,MAAQ,QACb1J,KAAKsB,sBAAsBqC,QAAQV,sBAAyBA,EAC5DjD,KAAKwF,MAAQ,GACbxF,KAAK4nB,MAAM5gB,QAEbpD,MAAOA,IAGL,GAFA5D,KAAK0J,MAAQ,SAETme,SAAoBjkB,GACtB5D,KAAKsB,sBAAsBsC,MAAMX,yDAAyEA,OAAA,IACjG+d,SAAqBpd,GAC9B5D,KAAKsB,sBAAsBsC,MAAMX,yCAAsCA,OAAA,GAEvEjD,KAAKsB,sBAAsBwK,oBACrBlI,aAAiBmI,MAAoB,MAAMnI,mDAnD9C2jB,GAAwB/mB,yDAAxB+mB,EAAwBzjB,qKCf6Bb,qBAAAA,GAIyBA,oBAAAA,GASnEA,OAAAA,mSAbxBhC,mCAAiF,UAAjFA,CAAiF,aAK3EA,qDAHFA,QAMAA,kBACEA,eACFA,QACAA,sBAKEA,kCAAWgI,cACZhI,mBAZCA,kCAAmB,gCAUnBA,6zGDAOsmB,GAAwB,yBEdnCtmB,kEAEAA,uBAIEA,4DAAWA,uBACZA,aAFCA,oDAoBQA,2CADFA,iBACEA,wBACAA,iBAA8B,WAA9BA,CAA8B,YAE1BA,YAEAA,YAGJA,iBAA8B,WAA9BA,CAA8B,YAE1BA,YAEAA,YAGJA,kBAA0C,YAA1CA,CAA0C,aAEtCA,aAEAA,YAGJA,kBAA0C,YAA1CA,CAA0C,aAEtCA,aAEAA,YAGJA,kBACFA,+BA9BoBA,qKAwClBA,iBACEA,8BACFA,wCADoCA,iDAsBhCA,sCACAA,sCASAA,sCACAA,yDAIFA,qBAKEA,8EAASA,wCAEVA,uFA9CLA,iBACEA,wBAGAA,iBAIC,+BAIGA,gCACFA,UAEFA,iBACEA,SACFA,QACAA,iBAA0C,cAMtCA,wBACAA,wBACFA,UAEFA,kBAA0C,cAMtCA,wBACAA,wBACFA,UAEFA,kBACEA,6BAQFA,4DA/CEA,0BAA0B,yBACVA,0IASdA,2CAEAA,qDAIFA,0CAIEA,oFAIIA,8CACAA,6CAKJA,4EAIIA,0CACAA,yCAUHA,oLAOPA,cAA2C,UAA3CA,CAA2C,WAA3CA,CAA2C,eAOnCA,0DAASA,2BAEVA,4CARDA,4BAOEA,mEARRA,+DAAKA,4FAgBLA,kBACEA,iCACAA,mBAAyBA,0EAASA,0BAAlCA,YAEAA,QACAA,mBACAA,kBAA6B,aACrBA,2DAASA,uBACfA,4BAAiBA,QACfA,gBACFA,oDAHiCA,0GARvCA,sFAxHFA,uBAMEA,4FAMAA,6CAmCAA,8CAyDAA,4CAgBAA,uBAeFA,8DAnIEA,mDAAiD,SAAjDA,CAAiD,wBAAjDA,CAAiD,cAAjDA,CAAiD,iBAoHnCA,kKAkBdA,8BAEAA,kDAGJA,oCAIEA,0DAASA,qBACVA,gDAHCA,+BAAuB,yCAnJ3BA,SACEA,yBACEA,6BAyIAA,2CAKFA,QACAA,0CAMFA,mDAlJOA,kCAA2B,cA6I7BA,oLA5JPA,SACEA,gCAEAA,8BAOAA,iCAyJAA,2CAIEA,0DAASA,yCACVA,QACHA,yCAxK8BA,6CAGzBA,iCAMYA,8BA0JbA,0DAAyC,iDAAzCA,CAAyC,4BChJtC,IAAM6mB,GAAyB,MAAhC,MAAOA,EA2BXloB,YACUmoB,EACAC,EACA1mB,EACAwhB,EACAmF,EACA5mB,GALArB,+BACAA,iCACAA,6BACAA,uBACAA,mBACAA,2BA7BVA,eAAuB,GACvBA,wBAAoB,EACpBA,oCAAgC,EAGvBA,eAAY,IAAI8b,KAAU,CACjCC,MAAOA,CAACC,EAAUkM,KAChB,IAAKloB,KAAK2Q,UAAW,MAAM,IAAIxF,MAAM,cACrC,OAAOnL,KAAK+nB,wBAAwBjD,iBAAiB9kB,KAAK2Q,UAAUzR,MAAME,GAAI,CAAEse,MAAO1B,EAAU2B,OAAQuK,GAAe9oB,MAE1H4c,SArBkB,GAsBlBG,gBAAiBA,KACfnc,KAAKsB,sBAAsBsC,MAAMX,sFAA0EA,KAItGjD,YAASA,KAAKoc,UAAUC,MAAMtd,MACrCqkB,QAAauE,GAAYA,EAASnpB,IAAI8nB,IAAY,IAC7CA,EACH6B,gBAAiBnoB,KAAKooB,gBAAgB9B,QAa1C5e,YAAY0N,GACNpV,KAAK2Q,YACNyE,EAAQzE,WAAW2F,eAAyCpX,MAAME,KAAOY,KAAK2Q,WAAWzR,MAAME,GAC5FY,KAAKyM,YACLzM,KAAKqoB,iBAILD,gBAAgB9B,GACtB,OAAQA,EAAQ5B,eACT,OACH,OAAOzhB,cAAoBA,KACxB,cACH,OAAOA,eAAsBA,KAC1B,wBACH,OAAOA,0BAAgCA,EAI7CwJ,YACEzM,KAAKoc,UAAU5T,QACfxI,KAAKqoB,gBAEPA,gBACE,IAAKroB,KAAK2Q,UAAW,MAAM,IAAIxF,MAAM,cACrCnL,KAAKoc,UAAUM,OAGjB9S,YAAY+d,GAKV3nB,KAAK8G,UAJD9G,KAAK8G,UAAUxI,SAAWqpB,EAASrpB,OAItBqpB,EAHE,GAMrBhJ,SAAStc,GACP,GAA8B,IAA1BrC,KAAK8G,UAAUxI,OACjB,OAGF,MAAMwoB,EAAgB9mB,KAAKioB,YAAYlB,SAASuB,YAAY1nB,QAE5D,IAAKkmB,EACH,MAAM,IAAI3b,MAAM,sCAGdnL,KAAK8G,UAAU0T,KAAK8L,GAAWA,EAAQlnB,KAAO0nB,GAChD9mB,KAAKqB,oBAAoBuB,QAAQ,CAC/BC,OAAQR,EAAMQ,aAAUC,EACxBC,IAAK,cACLI,KAAM,6BACNH,QAASC,mJ,CAETG,YAAaH,yCAAiDA,CAC9DgkB,uBAAwB,kBACxB5I,WAAY,cACZ9a,YAAaN,IAAaA,CAC1BI,OAAQA,IAAMrD,KAAK6V,WAMvB7V,KAAK6V,SAGPA,SACE,IAAK7V,KAAK2Q,UACR,MAAM,IAAIxF,MAAM,gCAGlB,MAAM2b,EAAgB9mB,KAAKioB,YAAYlB,SAASuB,YAAY1nB,QAE5D,IAAKkmB,EACH,MAAM,IAAI3b,MAAM,sCAGlB,MAAMvK,EAAUZ,KAAK2Q,UAAUzR,MAAME,GAC/B8lB,EAAellB,KAAK8G,UAAUyhB,KAAKjC,GAAWA,EAAQlnB,KAAO0nB,IAAgB1nB,GAEnFY,KAAKwoB,mBAAoB,EAEzBxoB,KAAKgoB,0BAA0BrN,YAC7B/Z,EACAZ,KAAK8G,UAAUxG,OAAOgmB,GAAWA,EAAQlnB,KAAO8lB,GAAc1mB,IAAI8nB,GAAWA,EAAQlnB,IACrF8lB,GAECzhB,UAAU,CACTf,KAAMuC,KC9IR,YAAkDD,EAAwCC,GAC1FA,EAAOE,eAAiBF,EAAOG,cACjCJ,EAAgBrB,QAAQV,0DAA8DkC,EACrD,IAA5BkB,EAAWlB,aAChBH,EAAgBpB,MAAMX,kDAAqDA,CAAG,GAAGgC,EAAOsV,WAAa,MAErGvV,EAAgBM,QACdrC,uI,CACqB,GAAGgC,EAAOsV,WAAa,ODuIxCkO,CAAwCzoB,KAAKsB,sBAAuB2D,GACpEjF,KAAKwoB,mBAAoB,EAErBvjB,EAAOE,aAAe,IACxBnF,KAAK8G,UAAY,GACjB9G,KAAKyM,cAGT7I,MAAOiI,IAGL,GAFA7L,KAAKwoB,mBAAoB,EACzBxoB,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAKvD6c,0BAA0BpC,GACxBtmB,KAAK2oB,+BAAgC,EACrC3oB,KAAK4oB,cAAgBtC,EAGvBuC,2BAA2BxmB,GACzBrC,KAAK2oB,+BAAgC,EACrC3oB,KAAK4oB,mBAAgB9lB,EAEjBT,EAAMwkB,UACR7mB,KAAKyM,YACLzM,KAAK8iB,gBAAgBrT,gBAIzBqZ,UACE9oB,KAAKyM,0DA9JIqb,GAAyBtnB,yFAAzBsnB,EAAyBhkB,yJDfZb,0CAAAA,GAM4BA,kBAAAA,GAkBGA,OAAAA,GAOAA,gBAAAA,GAOAA,+BAAAA,GAOAA,0BAAAA,GAyErBA,sBAAAA,GAYsCA,YAAAA,GAMjDA,UAAAA,GASiBA,+CAAAA,m0DAtJ1ChC,wDAAeA,+qLCoBF6mB,GAAyB,4BEpBtC7mB,yDACEA,uDAKAA,4BAA6EA,SCGxE,IAAM8nB,GAAsB,MAA7B,MAAOA,8EAAsBjlB,kHDHOb,uCAAAA,4IAN1ChC,2CAKAA,kEAHGA,2MAAoG,glECO1F8nB,GAAsB,kBCAnC,MAAMC,IAA0BjqB,SAC9BkqB,MACAjqB,KAAYkqB,OACZlqB,KAAYmqB,QAGRC,GAA4BpqB,KAAS,CACzCE,MAAOF,KAAS,CACdI,GAAIJ,KACJK,KAAML,OAERqJ,KAAMrJ,KAAS,CACbI,GAAIJ,KACJ8kB,YAAa9kB,KACbqqB,sBAAuBrqB,KACvBuO,MAAOvO,KAAWA,QAEpBsqB,YAAaN,GACbO,YAAavqB,KAAS,CACpBI,GAAIJ,KACJK,KAAML,SAUH,IAAMwqB,GAAyB,MAAhC,MAAOA,EACX5pB,YAAoBC,eAGpBI,IAAIb,EAAYqqB,EAAc,GAC5B,MAAMnP,GAAa,IAAIjc,MAAaO,IAAI,cAAe6qB,GACvD,OAAOzpB,KAAKH,KAAKI,IAAa,GAAGC,qBAA4Bd,wBAA2B,CACtFhB,OAAQkc,IACPvb,MACDqB,OAAgBpB,KAAQoqB,oDATjBI,GAAyBhpB,wCAAzBgpB,EAAyB/oB,QAAzB+oB,EAAyB,qBAFxB,SAEDA,GAAyB,GCrCtC,MAAME,GAAsB,CAC1BC,KAAM1mB,OAAeA,CACrB4Z,SAAU5Z,mBAAmBA,CAC7B2mB,IAAK3mB,KAAcA,CACnB4mB,eAAgB5mB,gBAAyBA,CACzC6mB,MAAO7mB,OAAgBA,CACvB8mB,QAAS9mB,SAAkBA,CAC3B+mB,yBAA0B/mB,wBAAmCA,CAC7DgnB,SAAUhnB,cAAmBA,CAC7BinB,oBAAqBjnB,4BAA8BA,CACnDknB,KAAMlnB,MAAeA,CACrBgC,OAAQhC,UAAiBA,CACzBmnB,OAAQnnB,UAAiBA,CACzBonB,kBAAmBpnB,0BAA4BA,EAI1C,IAAMqnB,GAA0B,MAAjC,MAAOA,EACX1qB,eAEA2qB,UAAUpgB,GACR,OAAOuf,GAAoBvf,IAAUlH,aAAqBA,+CAJjDqnB,6DAA0BE,UAA1BF,GAA0B,6BCnBvCrpB,SACEA,gBAAqB,SAArBA,CAAqB,WAEIA,2CAA4DA,UAEnFA,gBAAyB,WACFA,2CAAuEA,UAE9FA,iBAAyB,YACFA,2BAA8DA,UAErFA,iBAAyB,YACFA,2BAAsDA,YAGjFA,8BAZ2BA,iEAGAA,4EAGAA,sFAGAA,gFCJpB,IAAMwpB,GAAyB,MAAhC,MAAOA,8EAAyB3mB,wLDRtC7C,wCAAeA,knFCQFwpB,GAAyB,0BCLhCxpB,iBACEA,yBACFA,kDAEAA,wBAKEA,4DAAWA,qBACZA,aAHCA,wDAMAA,SACEA,kBAAkB,SAEdA,gBACAA,kBAAQA,qBAAiCA,QAAgBA,SAAyCA,YAGxGA,oCAH+DA,mEAM7DA,2BAA0CA,mCAX9CA,SACEA,iCASAA,4CAGFA,8CAZiBA,8BAA8B,yCAdjDA,SACEA,wBAIAA,8BAQAA,iCAcFA,6BA1BwBA,oCAKnBA,iCAOYA,yDAsBfA,iBACEA,yBACFA,kDAEAA,wBAKEA,4DAAWA,gCACZA,aAHCA,qGAaIA,SAEIA,4BAAmBA,QACnBA,qCAIEA,SACFA,QACJA,wCAJMA,qEAEAA,mEAIJA,4BAA8BA,mCAjBlCA,kBAAyE,SAEvEA,gBACAA,kBACEA,SACFA,QACAA,iCAUAA,4CAGFA,QACAA,oCACFA,wDAjBMA,sCAGCA,wHAAkG,cAahFA,uEArBzBA,SACEA,yBAsBFA,oCAtBkDA,yDAyBhDA,2BAAiDA,mCA3BrDA,SACEA,iCAyBAA,4CAGFA,8CA5BiBA,uCAAuC,yCAd1DA,SACEA,wBAIAA,+BAQAA,iCA8BFA,6BA1CwBA,oCAKnBA,iCAOYA,4DAjDrBA,SACEA,oCACEA,kDA4BFA,QAEAA,yBAIEA,kDA4CFA,QACFA,8BAhFEA,yDACiBA,uDAkCAA,6EAgDjBA,4BAA6FA,SCvExF,IAAMypB,GAAoB,MAA3B,MAAOA,EAsBX9qB,YACUygB,EACAsK,GADA3qB,0BACAA,iCArBOA,YAAS,IAAIwB,IAAqB,GAE3CxB,cAAW,IAAIuB,IACvBvB,wBAAqBA,KAAKwQ,OAAOzR,MAC/B8C,OAAU,EAAGoiB,oBACNA,EAGEjkB,KAAKqgB,mBAAmBpgB,IAAIgkB,IAF1B3Z,QAAG,QAIdxI,QAAgB,CAAEC,SAAU/B,KAAKgC,YAG3BhC,yBAAsB,IAAIuB,IAClCvB,sBAAmBA,KAAKwQ,OAAOzR,MAC7B8C,OAAU3C,GAASc,KAAK2qB,0BAA0B1qB,IAAIf,EAAME,MAC5D0C,QAAgB,CAAEC,SAAU/B,KAAK4qB,uBASnCljB,cACM1H,KAAKd,OACPc,KAAKwQ,OAAO9N,KAAK1C,KAAKd,OAI1BgD,cACElC,KAAKwQ,OAAOrO,WACZnC,KAAKgC,SAASG,WAGhBuB,UACE1D,KAAKgC,SAASU,OAGhBmoB,qBACE7qB,KAAK4qB,oBAAoBloB,qDA5ChBgoB,GAAoBlqB,gDAApBkqB,EAAoB5mB,2IDZmBb,+CAAuB,GAiCrDA,6CAAAA,GAzBQA,2CAAAA,GAWWA,qBAAAA,GAMrBA,sCAAAA,GAiBUA,iCAAAA,GAgBHA,aAAAA,GASFA,wBAAAA,GAQLA,qCAAAA,GAQmBA,wDAAAA,iwBApFvChC,iCAmFAA,kEAnFeA,wEAA6C,s2ECa/CypB,GAAoB,6ICV7BzpB,2CACAA,0DAAkBA,oDAClBA,kEAEIA,gDAEJA,4DAGIA,2DA4DFA,iCAGEA,yEAAwBA,mCAAxBA,CAAiD,wDACpCA,wBACdA,qCAHCA,2DAIFA,oCAAmFA,yEAAwBA,mCAAxBA,CAAiD,yDAAeA,uBAAhEA,CAAiD,2DAA6CA,wBAAcA,sCAArIA,oDAC1DA,4DAAiDA,oDACjDA,yDAAgDA,wCAChDA,uKA/EJA,SACEA,wBACAA,sDACAA,8CAIAA,wCAOAA,iBAAyL,UAAzLA,CAAyL,WAErLA,aASAA,QACAA,iCASAA,QACAA,iCASAA,QACAA,iCASAA,QACAA,iCASAA,YAIJA,mBACEA,yCAMAA,4CACAA,wCACAA,uCACAA,oCACFA,QAEFA,uHAjFQA,oCACsCA,uEAEvCA,+EAKAA,2FAKAA,8IAOCA,oCAHAA,yBAAmB,wCAanBA,oCAJAA,+DAAmE,0BAcnEA,oCAJAA,iGAAuG,2BAcrGA,oCAJAA,yEAAwE,yBAc1EA,oCAJAA,oEAAqE,2BActEA,0HAKqBA,+CACHA,+CACFA,+CACFA,sEAKrBA,8CASEA,qBAEAA,gCAEEA,qBAAqDA,kDAXzDA,wBAKEA,4DAAWA,oCAEXA,kCAGAA,4CAGFA,gDAVEA,gDAIeA,4CAAwC,yCA/F3DA,SAEEA,mCAoFAA,gCAEAA,8BAeFA,6BArGiBA,sDAoFDA,6CAGXA,kCC1EE,IAAM6pB,GAAqB,MAA5B,MAAOA,EAoBXlrB,YACUkjB,EACAhV,EACA+U,GAFA7iB,uBACAA,qBACAA,6BArBVA,YAASA,KAAK8iB,gBAAgBK,OAAOpkB,MAAKqkB,QAAa1Z,IAAU,IAC5DA,EACHxK,OAAO0R,SAAwBlH,EAAMxK,WAEvCc,gBAAaA,KAAK8N,cAAcC,WAUhC0V,UACE,QAASzjB,KAAK+qB,WAAWtH,UAS3BU,aACEnkB,KAAK6iB,sBAAsBnU,qBAG7Bsc,yBACEhrB,KAAK8iB,gBAAgBrT,eACrBzP,KAAKmkB,2DAhCI2G,GAAqBtqB,yDAArBsqB,EAAqBhnB,ucDUzBb,SAAAA,GAUAA,WAAAA,GAUAA,OAAAA,GAUAA,UAAAA,GAUAA,cAAAA,GA8ByEA,+CAAAA,GAIzDA,yCAAAA,+lCAnGzBhC,wDAAeA,0OCeF6pB,GAAqB,kBCPlC,MAIMG,GAAmBjsB,KAJFA,MAQjBksB,GAA2BlsB,KAAS,CACxCsP,KAAM2c,KAMD,IAAME,GAAmB,MAA1B,MAAOA,EAEXvrB,YAAoBC,eAEpBurB,aAAaxqB,GACX,OAAOZ,KAAKH,KAAKI,IAAa,GAAGC,qBAA2BU,oBAA0B7B,MACpFqB,OAAgB8qB,KAEhB1sB,OAAI6sB,GAAOA,EAAI/c,KAAKY,MAAM,GAAE,mDARrBic,GAAmB3qB,wCAAnB2qB,EAAmB1qB,QAAnB0qB,EAAmB,qBAFlB,SAEDA,GAAmB,GCThC,MAAMG,GAAuBroB,SAAiBA,CAWvC,IAAMsoB,GAAkB,MAAzB,MAAOA,EAKX3rB,YACU4rB,EACA3d,EACAwC,EACAvC,EACAgV,EACAxV,EACA8d,GANAprB,sBACAA,sBACAA,mBACAA,qBACAA,uBACAA,mBACAA,oBAVFA,mBAAgC,GAChCA,oBAAgB,EAWtBA,KAAK8N,cAAcE,UAAU,CAAEC,iBAAiB,IAGhDjO,KAAKwrB,eAAeC,SAAShoB,UAAUrF,GAAU4B,KAAK0rB,kBAAkBttB,IAGxE4B,KAAK2rB,cAAczjB,KACjBlI,KAAK8iB,gBAAgBK,OAAOpkB,MAC1BskB,WACA7kB,OAAI,EAAGU,QAAO4P,QAAOV,kBAA6Bwd,QAAU,CAC1D9c,MAAOA,EACPV,YAAa,CACXC,SAAUid,GACVhd,KAAMF,EAAY5P,IAAIuQ,IAAe,CACnCxB,MAAOwB,EAAW1P,KAClBqO,WAAYA,IAAe1N,KAAKsN,YAAYue,IAAI9c,EAAWD,UAE7DP,eAAgBH,EAAY9P,OAAS,GAEvCiP,MAAOrO,EAAMG,SAEfoE,UAAUqoB,GAAK9rB,KAAK6N,eAAeK,QAAQ4d,IAE7C9rB,KAAKqQ,YAAYS,aAAa/R,MAC5BuB,OAAOrB,GAAU,CAAE8R,kBAAyBA,kBAAyBtF,SAASxM,KAC9E8sB,QAAkB/rB,KAAK6N,eAAeme,SAASjtB,MAAKuB,OAAO2rB,SAC3DxoB,UAAU,EAAGxE,EAAQ8qB,MACrB/pB,KAAKsN,YAAYI,WAAWqc,EAAQjb,MAAO,CAAEod,KAAM,CAAEjtB,IAAW8R,kBAA0B,OAAS,gBAKzG7O,cACElC,KAAK6N,eAAepF,QACpBzI,KAAK2rB,cAAc3gB,QAAQmhB,GAAKA,EAAE/Z,eAG5BsZ,kBAAkBttB,GACxB,MAAM0Q,GAAQsd,QAAqBhuB,GAEnC,IAAIiuB,QAAkBvd,GAAtB,CACE,IAAKA,EAAM1P,GAAI,MAAM,IAAI+L,MAAM,gDAC/B,GAAInL,KAAKssB,cAAe,MAAM,IAAInhB,MAAM,yBACnCnL,KAAKusB,wBAAwBzd,EAAM1P,SAI1CY,KAAKssB,eAAgB,EACrBtsB,KAAK6N,eAAeK,SAAQ0d,QAAU,CACpC9c,QACAV,YAAa,CAAEC,SAAUid,GAAsBhd,KAAM,GAAIC,gBAAgB,MAE3EvO,KAAK8iB,gBAAgBtT,WAAWV,GAG1Byd,wBAAwB3rB,GAC9BZ,KAAKorB,aAAaA,aAAaxqB,GAAS6C,UAAU,CAChDf,KAAM4L,IACJtO,KAAKssB,eAAgB,EACrBtsB,KAAKsN,YAAYI,YAAWuB,QAAW,CAAE7P,GAAIwB,EAAS2c,QAAQ,GAASjP,GAAO,CAAEke,UAAW,CAAEC,YAAY,MAE3G7oB,MAAOA,KACL5D,KAAKsN,YAAYI,YAAWuB,QAAW,CAAE7P,GAAIwB,EAAS2c,QAAQ,GAAS,IAAK,CAAEiP,UAAW,CAAEC,YAAY,sDA5ElGlB,GAAkB/qB,uGAAlB+qB,EAAkBznB,gDAFlB,CAAEqL,KAAiB4S,2CCvBhC9gB,gDDyBasqB,GAAkB,gFEzB/BtqB,SACEA,iBAAsB,UAAtBA,CAAsB,WAElBA,WAEAA,QACAA,sBAIEA,gEAASA,+BACVA,YAILA,iBAAsB,kBAAtBA,CAAsB,SAAtBA,CAAsB,SAAtBA,CAAsB,aAIdA,aAAmDA,QACnDA,oBAAuCA,UAAuBA,UAEhEA,iBAA+B,aAC7BA,aAAwDA,QACxDA,oBAAuCA,UAA2BA,UAEpEA,iBAA+B,aAC7BA,aAAuDA,QACvDA,oBAAuCA,UAA0BA,UAEnEA,iBAA+B,aAC7BA,aAAwDA,QACxDA,oBAAuCA,UAA2BA,UAEpEA,iBAA+B,aAC7BA,aAAwDA,QACxDA,oBAAuCA,UAA2BA,UAEpEA,iBAA+B,aAC7BA,aAAoDA,QACpDA,oBAAuCA,UAAqBA,UAE9DA,iBAA+B,aAC7BA,aAAyDA,QACzDA,oBAAuCA,UAA6BA,UAEtEA,iBAA+B,aAC7BA,aAA+DA,QAC/DA,oBAAuCA,UAAyBA,gBAMxEA,kBAAsB,oBAAtBA,CAAsB,UAAtBA,CAAsB,UAAtBA,CAAsB,aAIdA,aAAwDA,QACxDA,oBAAuCA,UAAuBA,UAEhEA,iBAA+B,aAC7BA,aAAwEA,QACxEA,oBAAuCA,UAAgCA,gBAM/EA,kBAAsB,oBAAtBA,CAAsB,UAAtBA,CAAsB,UAAtBA,CAAsB,aAIdA,aAA2DA,QAC3DA,oBAAuCA,UAAuBA,gBAKxEA,+BA3DiDA,yBAIAA,4BAIAA,2BAIAA,4BAIAA,4BAIAA,sBAIAA,8BAIAA,0BAWAA,wBAIAA,iCAWAA,yBC9D1C,IAAMyrB,GAAoB,MAA3B,MAAOA,EAGX9sB,YACU+sB,EACArrB,EACAsrB,GAFA5sB,0BACAA,6BACAA,gBALVA,kBAAeA,KAAK2sB,mBAAmBE,aAQvCC,SAASC,GACP,MAAMC,EAAUC,OAAOL,SAASM,OAASltB,KAAK4sB,SAASO,mBAAmB,uBAC1EF,OAAOG,KACL,GAAIltB,sCAA8C6sB,kBAAwBM,UAAUL,UACpFlqB,EACA,8BAGF,MAAMwqB,EAAmBA,KACvBttB,KAAK2sB,mBAAmBjpB,UAAUD,UAAU,CAC1CG,MAAOiI,IAEL,GADA7L,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,KAGnDohB,OAAOM,oBAAoB,iBAAkBD,IAG/CL,OAAOO,iBAAiB,iBAAkBF,iDA3BjCZ,GAAoBlsB,4DAApBksB,EAAoB5oB,kHDTiBb,wEAAAA,GAKxBA,UAAAA,GAQSA,oBAAAA,GAGqBA,eAAAA,GAIAA,KAAAA,GAIAA,SAAAA,GAIAA,eAAAA,GAIAA,2BAAAA,GAIAA,MAAAA,GAIAA,WAAAA,GAIAA,sBAAAA,GAQrBA,yBAAAA,GAGqBA,iBAAAA,IAIAA,aAAAA,IAQrBA,SAAAA,IAGqBA,+BAAAA,kcAzExDhC,0DAAeA,iRCYFyrB,GAAoB,6DCN7BzrB,iBACEA,eACAA,eAAmFA,SAAkBA,iCAA7DA,4CAA2CA,0DAGrFA,iBACEA,SACFA,+BADEA,kFAIJA,iCAMEA,yDAAQA,gCAARA,CAA8B,oDACrBA,sCADTA,CAA8B,wDAEjBA,uDACdA,iCAPCA,yBAAsB,wEAAtBA,CAAsB,kDAAtBA,CAAsB,iDAlB1BA,iBAA0C,QAA1CA,CAA0C,WAGpCA,gCACFA,QAEAA,wBAKAA,wBAGFA,QAEAA,uCAUFA,8BAvBMA,0CAGqCA,sCAKUA,uCAMhDA,2BCLE,IAAMwsB,GAAmB,MAA1B,MAAOA,EAQX7tB,YACU+P,EACAU,GADArQ,4BACAA,mBANVA,4BAAyBA,KAAK2P,qBAAqBE,cAAc9Q,MAC/DP,OAAIuR,MAAmBA,GAAgBA,EAAajB,MAAM1P,KAAOY,KAAK8F,MAAMlF,WAS9EiQ,sBACE7Q,KAAKqQ,YAAYS,aAAapO,KAAKqO,mBAGrCC,4BACEhR,KAAK2P,qBAAqB+d,kBAAkB1tB,KAAK8O,MAAO9O,KAAK8F,MAG/DqL,2BACEnR,KAAK2P,qBAAqB2B,6DAvBjBmc,GAAmBjtB,kDAAnBitB,EAAmB3pB,srBDZhC7C,6BAA8BA,mKCYjBwsB,GAAmB,sECZhCxsB,SACEA,iBAAsB,kBAAtBA,CAAsB,SAAtBA,CAAsB,SAAtBA,CAAsB,YAIdA,WAA+DA,QAC/DA,kBAAuC,2BAKjCA,+DAAcA,2BACjBA,kBAMbA,+BATgBA,gDAA2C,wBCEpD,IAAM0sB,GAAyB,MAAhC,MAAOA,EAGX/tB,YACU+sB,EACArrB,EACAssB,GAFA5tB,0BACAA,6BACAA,qBALVA,kBAAeA,KAAK2sB,mBAAmBE,aAQvCgB,aAAaxrB,GACXrC,KAAK2lB,OAAO,CAAEmI,iBAAkBzrB,IAGlCsjB,OAAOvQ,GACLpV,KAAK2sB,mBAAmBoB,kBAAkB3Y,GAAS3R,UAAU,CAC3Df,KAAMA,KACJ1C,KAAKsB,sBAAsBqC,QAAQV,mCAAsCA,EAErEmS,EAAQ0Y,kBACV9tB,KAAK4tB,cAAclgB,WAAW0H,EAAQ0Y,mBAG1ClqB,MAAOiI,IAEL,GADA7L,KAAKsB,sBAAsBwK,oBACrBD,aAAeE,MAAoB,MAAMF,mDAxB1C8hB,GAAyBntB,4DAAzBmtB,EAAyB7pB,wFDTHb,sBAAAA,GAGqBA,iBAAAA,4SALxDhC,wDAAeA,6ECWF0sB,GAAyB,mECTpC1sB,gEAEAA,uBAMEA,4DAAWA,qBACZA,aAHCA,uDAOAA,wDAAiBA,0BAAwB,4JAEzCA,iBAA8K,WAC5KA,WASAA,QACAA,iEAUAA,QACAA,oEAUAA,kFA1BIA,oCAHAA,yBAAmB,wCAanBA,oCAHAA,sCAAgC,uCAAhCA,CAAgC,gHAchCA,oCAHAA,iCAA2B,uCAA3BA,CAA2B,wIAa7BA,kBAAgF,oBAE5EA,iCAIFA,+CAHMA,6EAAgG,gDAJ1GA,SACEA,0CAQFA,+BARyBA,gFAWvBA,SACEA,4BACFA,mCAHFA,SACEA,mDAGFA,iEAHiBA,8EAAiE,sCAMhFA,SACEA,iCACFA,mCAHFA,SACEA,mDAGFA,iEAHiBA,8EAAiE,sCAMhFA,kBACEA,wBACFA,mCA3BJA,SACEA,iCAWAA,iCAMAA,iCAMAA,4CAKFA,6BA5BiBA,sCAWAA,2CAMAA,iEAzDnBA,SAEEA,qDAEAA,6EAmCAA,kDA8BFA,mDAnEwEA,sEAEhDA,mKAmCPA,6EApDnBA,SAEEA,gCAEAA,8BASAA,kCAsEFA,6BAjFgBA,oCAGXA,iCAQYA,kCCOV,IAAM+sB,GAAa,MAApB,MAAOA,EA2CXpuB,YACUkP,EACAsE,EACA6a,EACAtB,EACA9e,EACAC,EACAR,EACA+B,GAPArP,aACAA,cACAA,sBACAA,0BACAA,sBACAA,qBACAA,mBACAA,kCA/CFA,cAAW,IAAIuB,IACNvB,gBAAaA,KAAK8O,MAAM2c,SAAS1sB,MAChDP,OAAIJ,IACF,MAAQgB,KAAIkP,SAAS8d,QAAqBhuB,GAC1C,IAAKgB,EAAI,MAAM,IAAI+L,MAAM,sCACzB,MAAMjM,EAAQ,CAAEE,KAAIme,QAAQ,GAC5B,OAAOjP,GAAOW,QAAW/P,EAAOoP,IAAQX,QAAczO,MAIjDc,YAASA,KAAKkuB,WAAWnvB,MAChC8C,OAAUiN,GAAS9O,KAAKiuB,eAAeE,SAASrf,EAAM1P,IAAIL,MAAKP,OAAIsH,IAAS,CAAEgJ,MAAOA,EAAOhJ,KAAMA,QAClGhE,QAAgB,CAAEC,SAAU/B,KAAKgC,YACjCosB,WAGOpuB,yBAAsBA,KAAK2sB,mBAAmBE,aAAa9tB,MAClEsvB,QAAM,IACN7vB,OAAI8vB,GAAeA,EAAY1tB,UAGxBZ,gBAAaA,KAAK8N,cAAcC,WAEjC/N,UAAOA,KAAKoT,OAAOmb,OAAOxvB,MAChCuB,OAAO+B,GAASA,aAAiBmsB,OACjChwB,OAAI,IAAMwB,KAAKoT,OAAOyY,MACtBnqB,QAAU1B,KAAKoT,OAAOyY,MACtBlqB,UAEO3B,kBAAsEA,KAAKyuB,KAAK1vB,MACvFP,OAAIqtB,GAAO7rB,KAAK0uB,gBAAgB7C,KAGjB7rB,kBAAeA,KAAKkuB,WAAWnvB,MAC9C8C,OAAUiN,IAAU6f,QAAa7f,GAAS9O,KAAKqP,2BAA2BR,eAAeC,IAASxE,aAAGxH,KAerG9C,KAAK8N,cAAcE,UAAU,CAAEC,iBAAiB,IAGlD9E,WACEnJ,KAAK6Y,cAAetI,QAAc,CAChCvQ,KAAKkuB,WACLluB,KAAK4uB,aAAa7vB,MAAKP,OAAIstB,GAAK9rB,KAAK6uB,UAAU/C,KAC/C9rB,KAAKmjB,OAAOpkB,MAAKskB,WACjBrjB,KAAK8uB,aAAa/vB,MAAK6b,OAAW,KAAMtQ,aAAGxH,OAE1C/D,MACCP,OAAI,EAAGuwB,EAAkBC,EAAkBjuB,EAAMqN,MAAkB6gB,SAAY,CAC7E1hB,OAAOmZ,QAAW3lB,EAAK+E,MACvBsI,YAAa,CACXC,SAAUpL,YAAgBA,CAC1BqL,KAAM,KACAF,GAAac,MAAM,GAAE,IAAO,IAAI1Q,IAAI0wB,IAAM,CAAE3hB,MAAO2hB,EAAE7vB,KAAMqO,WAAY1N,KAAKsN,YAAYue,IAAIqD,EAAEpgB,UAClG,CAAEvB,OAAOmZ,QAAW3lB,EAAK+E,MAAO4H,WAAY1N,KAAKsN,YAAYue,IAAIkD,IACjE,CAAExhB,MAAOyhB,IAEXzgB,eAAgBH,EAAcA,EAAY9P,OAAS,OAGvDmF,UAAUwrB,IACVjvB,KAAK6N,eAAeK,QAAQ+gB,KAIlC/sB,cACElC,KAAK6N,eAAepF,QACpBzI,KAAK6Y,cAAczG,cACnBpS,KAAKgC,SAASG,WAGhBuB,UACE1D,KAAKgC,SAASU,OAMRmsB,UAAU3C,GAChB,OAAQA,OACD,WAAY,OAAOjpB,UAAmBA,KACtC,gBAAiB,OAAOA,gBAAwBA,KAChD,WAAY,OAAOA,YAAmBA,EAIvCyrB,gBAAgB7C,GACtB,OAAIA,EAAIsD,SAAS,kBACR,gBACEtD,EAAIsD,SAAS,aACf,WAEF,yDA5GEnB,GAAaxtB,qHAAbwtB,EAAalqB,0ODbAb,4CAAAA,GAkBnBA,YAAAA,GAWAA,kBAAAA,GAWAA,cAAAA,GAQ0DA,UAAAA,GAuBtBA,qDAAAA,6vBA9E3ChC,wDAAeA,gKCoBF+sB,GAAa,kBCZ1B,MAAMoB,GAAiB,CACrB,CACE9gB,KAAM,OACN+gB,UAAWzhB,IAEb,CACEU,KAAM,YACN+gB,UAAWrB,GACXnR,SAAU,CACR,CACEvO,KAAM,gBACNuO,SAAU,IAEZ,CACEvO,KAAM,WACNuO,SAAU,MAIhB,CACEvO,KAAM,YACN+gB,UAAW9D,GACX1O,SAAU,CACR,CACEvO,KAAM,UACN+gB,UAAWvE,GACXwE,cAAe,CAAEC,MACjB1S,SAAU,CACR,CACEvO,KAAM,GACNuO,SAAU,IAEZ,CACEvO,KAAM,UACNuO,SAAU,IAEZ,CACEvO,KAAM,WACNuO,SAAU,IAEZ,CACEvO,KAAM,WACNghB,cAAe,CAAEC,MACjB1S,SAAU,IAEZ,CACEvO,KAAM,SACNuO,SAAU,SAYf,IAAM2S,GAAkB,MAAzB,MAAOA,4GAHAC,cAAsBL,IACtBK,QAEAD,GAAkB,GCgDlBE,GAAW,MAAlB,MAAOA,6GANA,CACTH,KACAvN,IACD2N,SAjBCC,KACAJ,GACAK,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,QAWSV,GAAW","sources":["./src/app/shared/helpers/sort-options.ts","./src/app/core/http-services/joined-groups.service.ts","./src/app/core/http-services/group-leave.service.ts","./src/app/modules/group/components/joined-group-list/joined-group-list.component.html","./src/app/modules/group/components/joined-group-list/joined-group-list.component.ts","./src/app/modules/group/http-services/request-actions.service.ts","./src/app/modules/group/components/pending-request/pending-request-response-handling.ts","./src/app/modules/group/http-services/get-requests.service.ts","./src/app/modules/shared-components/components/grid/grid.component.html","./src/app/modules/shared-components/components/grid/grid.component.ts","./src/app/modules/group/components/pending-request/pending-request.component.html","./src/app/modules/group/components/pending-request/pending-request.component.ts","./src/app/modules/group/components/pending-join-requests/pending-join-requests.component.html","./src/app/modules/group/components/pending-join-requests/pending-join-requests.component.ts","./src/app/modules/group/components/user-group-invitations/user-group-invitations.component.ts","./src/app/modules/group/components/user-group-invitations/user-group-invitations.component.html","./src/app/modules/group/components/managed-group-list/managed-group-list.component.html","./src/app/modules/group/components/managed-group-list/managed-group-list.component.ts","./src/app/modules/group/http-services/group-creation.service.ts","./src/app/modules/group/components/add-group/add-group.component.ts","./src/app/modules/group/components/add-group/add-group.component.html","./src/app/modules/group/pages/my-groups/my-groups.component.html","./src/app/modules/group/pages/my-groups/my-groups.component.ts","./src/app/modules/group/http-services/get-group-breadcrumbs.service.ts","./src/app/modules/group/services/group-datasource.service.ts","./src/app/modules/group/components/suggestion-of-activities/suggestion-of-activities.component.html","./src/app/modules/group/components/suggestion-of-activities/suggestion-of-activities.component.ts","./src/app/modules/group/components/group-header/group-header.component.html","./src/app/modules/group/components/group-header/group-header.component.ts","./src/app/modules/group/components/group-log-view/group-log-view.component.html","./src/app/modules/group/components/group-log-view/group-log-view.component.ts","./src/app/modules/group/components/group-leave/group-leave.component.html","./src/app/modules/group/components/group-leave/group-leave.component.ts","./src/app/modules/group/pages/group-overview/group-overview.component.html","./src/app/modules/group/pages/group-overview/group-overview.component.ts","./src/app/modules/group/components/group-composition-filter/group-composition-filter.component.ts","./src/app/modules/group/components/group-composition-filter/group-composition-filter.component.html","./src/app/modules/group/components/group-no-permission/group-no-permission.component.ts","./src/app/modules/group/components/group-no-permission/group-no-permission.component.html","./src/app/modules/group/http-services/group-actions.service.ts","./src/app/modules/group/http-services/code-actions.service.ts","./src/app/modules/shared-components/components/code-token/code-token.component.html","./src/app/modules/shared-components/components/code-token/code-token.component.ts","./src/app/modules/group/components/group-join-by-code/group-join-by-code.component.html","./src/app/modules/group/components/group-join-by-code/group-join-by-code.component.ts","./src/app/modules/group/http-services/create-group-invitations.service.ts","./src/app/modules/shared-components/components/message/message.component.ts","./src/app/modules/shared-components/components/message/message.component.html","./src/app/modules/group/components/group-invite-users/group-invite-users.component.html","./src/app/modules/group/components/group-invite-users/group-invite-users.component.ts","./src/app/modules/group/http-services/group-users.service.ts","./src/app/modules/group/http-services/remove-group.service.ts","./src/app/modules/group/http-services/remove-subgroup.service.ts","./src/app/modules/group/components/member-list/member-list.component.html","./src/app/modules/group/components/member-list/member-list.component.ts","./src/app/modules/group/components/member-list/user-removal-response-handling.ts","./src/app/modules/group/components/member-list/group-removal-response-handling.ts","./src/app/modules/group/http-services/search-group.service.ts","./src/app/modules/group/components/add-sub-group/add-sub-group.component.ts","./src/app/modules/group/components/add-sub-group/add-sub-group.component.html","./src/app/modules/group/pages/group-composition/group-composition.component.html","./src/app/modules/group/pages/group-composition/group-composition.component.ts","./src/app/modules/group/components/associated-activity/associated-activity-types.ts","./src/app/modules/group/http-services/group-update.service.ts","./src/app/modules/group/components/associated-activity/associated-activity.component.html","./src/app/modules/group/components/associated-activity/associated-activity.component.ts","./src/app/modules/group/services/group-delete.service.ts","./src/app/modules/group/components/group-remove-button/group-remove-button.component.html","./src/app/modules/group/components/group-remove-button/group-remove-button.component.ts","./src/app/modules/group/pages/group-edit/group-edit.component.html","./src/app/modules/group/pages/group-edit/group-edit.component.ts","./src/app/modules/group/components/group-links/group-links.component.html","./src/app/modules/group/components/group-links/group-links.component.ts","./src/app/modules/group/components/group-indicator/group-indicator.component.html","./src/app/modules/group/components/group-indicator/group-indicator.component.ts","./src/app/modules/group/http-services/get-group-managers.service.ts","./src/app/modules/group/http-services/remove-group-manager.service.ts","./node_modules/rxjs/dist/esm/internal/operators/reduce.js","./src/app/modules/group/http-services/update-group-managers.service.ts","./src/app/modules/group/components/manager-permission-dialog/manager-permission-dialog.component.html","./src/app/modules/group/components/manager-permission-dialog/manager-permission-dialog.component.ts","./src/app/core/http-services/get-user-by-login.service.ts","./src/app/modules/group/http-services/group-create-manager.service.ts","./src/app/modules/group/components/group-manager-add/group-manager-add.component.ts","./src/app/modules/group/components/group-manager-add/group-manager-add.component.html","./src/app/modules/group/components/group-manager-list/group-manager-list.component.html","./src/app/modules/group/components/group-manager-list/group-manager-list.component.ts","./src/app/modules/group/components/group-manager-list/group-manager-removal-response-handling.ts","./src/app/modules/group/pages/group-managers/group-managers.component.html","./src/app/modules/group/pages/group-managers/group-managers.component.ts","./src/app/modules/group/http-services/granted-permissions.service.ts","./src/app/shared/pipes/groupPermissionCaption.ts","./src/app/modules/group/components/group-permissions/group-permissions.component.html","./src/app/modules/group/components/group-permissions/group-permissions.component.ts","./src/app/modules/group/pages/group-access/group-access.component.html","./src/app/modules/group/pages/group-access/group-access.component.ts","./src/app/modules/group/pages/group-details/group-details.component.html","./src/app/modules/group/pages/group-details/group-details.component.ts","./src/app/modules/group/http-services/get-group-path.service.ts","./src/app/modules/group/pages/group-by-id/group-by-id.component.ts","./src/app/modules/group/pages/group-by-id/group-by-id.component.html","./src/app/modules/group/pages/current-user/current-user.component.html","./src/app/modules/group/pages/current-user/current-user.component.ts","./src/app/modules/group/components/user-header/user-header.component.html","./src/app/modules/group/components/user-header/user-header.component.ts","./src/app/modules/group/pages/platform-settings/platform-settings.component.html","./src/app/modules/group/pages/platform-settings/platform-settings.component.ts","./src/app/modules/group/pages/user/user.component.html","./src/app/modules/group/pages/user/user.component.ts","./src/app/modules/group/group-routing.module.ts","./src/app/modules/group/group.module.ts"],"sourcesContent":["import { HttpParams } from '@angular/common/http';\r\nimport { SortEvent } from 'primeng/api';\r\n\r\nexport interface SortOption {\r\n  field: string,\r\n  ascending: boolean,\r\n}\r\nexport type SortOptions = readonly SortOption[];\r\n\r\nexport const NO_SORT: SortOptions = [];\r\n\r\nexport function multisortEventToOptions(event: SortEvent): SortOptions|undefined {\r\n  return event.multiSortMeta?.map(meta => ({ field: meta.field, ascending: meta.order >= 0 }));\r\n}\r\n\r\nexport function sortEquals(sort1: SortOptions, sort2: SortOptions): boolean {\r\n  return JSON.stringify(sort1) === JSON.stringify(sort2);\r\n}\r\n\r\nexport function sortOptionsToHTTP(opts: SortOptions): HttpParams {\r\n  let params = new HttpParams();\r\n  if (opts.length == 0) return params;\r\n  const apiFormatOpts = opts.map(opt => (opt.ascending ? opt.field : `-${opt.field}`));\r\n  params = params.set('sort', apiFormatOpts.join(','));\r\n  return params;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { SortOptions, sortOptionsToHTTP } from 'src/app/shared/helpers/sort-options';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { dateDecoder } from 'src/app/shared/helpers/decoders';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { map } from 'rxjs/operators';\r\n\r\nconst groupMembershipDecoder = pipe(\r\n  D.struct({\r\n    action: D.literal('invitation_accepted', 'join_request_accepted', 'joined_by_code', 'joined_by_badge', 'added_directly'),\r\n    group: D.struct({\r\n      description: D.nullable(D.string),\r\n      id: D.string,\r\n      name: D.string,\r\n      type: D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'Base', 'Session'),\r\n    }),\r\n    memberSince: D.nullable(dateDecoder),\r\n    isMembershipLocked: D.boolean,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      canLeaveTeam: D.literal('free_to_leave', 'frozen_membership', 'would_break_entry_conditions'),\r\n    })\r\n  ),\r\n);\r\n\r\nexport type GroupMembership = D.TypeOf<typeof groupMembershipDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JoinedGroupsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getJoinedGroups(sort: SortOptions): Observable<GroupMembership[]> {\r\n    return this.http\r\n      .get(`${appConfig.apiUrl}/current-user/group-memberships`, { params: sortOptionsToHTTP(sort) })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(groupMembershipDecoder)),\r\n        map(memberships => memberships.filter(membership => membership.group.type !== 'Base')),\r\n      );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\n\r\ninterface LeaveGroupResponseData {\r\n  changed: boolean,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupLeaveService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  leave(groupId: string): Observable<boolean> {\r\n    return this.http.delete<ActionResponse<LeaveGroupResponseData>>(`${appConfig.apiUrl}/current-user/group-memberships/${groupId}`)\r\n      .pipe(\r\n        map(successData),\r\n        map((data: LeaveGroupResponseData) => data.changed)\r\n      );\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    i18n-message message=\"Error while loading the group you joined\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n\r\n  <p-table\r\n    *ngIf=\"!state.isError\"\r\n    class=\"alg-table --joined-group-list\"\r\n    [value]=\"state.data || []\"\r\n    [customSort]=\"true\"\r\n    sortMode=\"multiple\"\r\n    (sortFunction)=\"onCustomSort($event)\"\r\n    [loading]=\"state.isFetching\"\r\n  >\r\n    <ng-template pTemplate=\"header\" let-columns>\r\n      <tr *ngIf=\"state.isReady && state.data.length > 0\">\r\n        <th i18n>Name</th>\r\n        <th i18n>Type</th>\r\n        <th pSortableColumn=\"member_since\">\r\n          <span i18n>Joined On</span>\r\n          <p-sortIcon field=\"member_since\"></p-sortIcon>\r\n        </th>\r\n        <th class=\"th-action\" i18n>\r\n          Action\r\n        </th>\r\n      </tr>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"body\" let-membership>\r\n      <tr>\r\n        <td>\r\n          <a class=\"alg-link\" routerLink=\"../by-id/{{ membership.group.id }}/details\">{{ membership.group.name }}</a>\r\n        </td>\r\n        <td>{{ membership.group.type }}</td>\r\n        <td>{{ membership.memberSince | date:'short' }}</td>\r\n        <td>\r\n          <div class=\"actions\">\r\n            <ng-container *ngIf=\"membership.isMembershipLocked || (membership.group.type === 'Team' && membership.canLeaveTeam !== 'free_to_leave'); then cannotLeaveActions else canLeaveActions\"></ng-container>\r\n            <ng-template #cannotLeaveActions>\r\n                <ng-container *ngIf=\"membership.group.type === 'Team'\" [ngSwitch]=\"membership.canLeaveTeam\">\r\n                  <div\r\n                    *ngSwitchCase=\"'frozen_membership'\"\r\n                    i18n-pTooltip pTooltip=\"This team membership is now frozen and cannot be modified.\"\r\n                    tooltipPosition=\"left\"\r\n                    tooltipEvent=\"hover\"\r\n                    class=\"fa fa-lock\"\r\n                  ></div>\r\n                  <div\r\n                    *ngSwitchCase=\"'would_break_entry_conditions'\"\r\n                    i18n-pTooltip pTooltip=\"You cannot leave this team as it would break entry condition to some content your team participating to.\"\r\n                    tooltipPosition=\"left\"\r\n                    tooltipEvent=\"hover\"\r\n                    class=\"fa fa-lock\"\r\n                  ></div>\r\n                  <div *ngSwitchDefault class=\"fa fa-lock\"></div>\r\n                </ng-container>\r\n\r\n                <ng-container *ngIf=\"membership.group.type !== 'Team'\">\r\n                  <div\r\n                    i18n-pTooltip pTooltip=\"You cannot leave the group for the moment. Contact the group manager for more information.\"\r\n                    tooltipPosition=\"left\"\r\n                    tooltipEvent=\"hover\"\r\n                    class=\"fa fa-lock\"\r\n                  ></div>\r\n                </ng-container>\r\n            </ng-template>\r\n            <ng-template #canLeaveActions>\r\n              <button\r\n                  pButton\r\n                  pRipple\r\n                  type=\"button\"\r\n                  icon=\"fa fa-sign-out-alt\"\r\n                  class=\"p-button-rounded p-button-outlined\"\r\n                  (click)=\"onGroupLeaveClick($event, membership)\"\r\n              ></button>\r\n            </ng-template>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"emptymessage\" let-columns>\r\n      <tr>\r\n        <td [attr.colspan]=\"columns?.length\">\r\n          <p class=\"empty-message\" i18n>This list is empty.</p>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </p-table>\r\n\r\n</ng-container>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { ConfirmationService, SortEvent } from 'primeng/api';\r\nimport { ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, startWith, switchMap } from 'rxjs/operators';\r\nimport { GroupMembership, JoinedGroupsService } from 'src/app/core/http-services/joined-groups.service';\r\nimport { NO_SORT, sortEquals, multisortEventToOptions, SortOptions } from 'src/app/shared/helpers/sort-options';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\nimport { GroupLeaveService } from 'src/app/core/http-services/group-leave.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\n\r\n@Component({\r\n  selector: 'alg-joined-group-list',\r\n  templateUrl: './joined-group-list.component.html',\r\n  styleUrls: [ './joined-group-list.component.scss' ]\r\n})\r\nexport class JoinedGroupListComponent implements OnDestroy {\r\n  private refresh$ = new Subject<void>();\r\n  private readonly sort$ = new ReplaySubject<SortOptions>(1);\r\n  readonly state$ = this.sort$.pipe(\r\n    startWith(NO_SORT),\r\n    distinctUntilChanged(sortEquals),\r\n    switchMap(sort => this.joinedGroupsService.getJoinedGroups(sort)),\r\n    mapToFetchState({ resetter: this.refresh$.asObservable() }),\r\n  );\r\n\r\n  constructor(private joinedGroupsService: JoinedGroupsService,\r\n              private groupLeaveService: GroupLeaveService,\r\n              private confirmationService: ConfirmationService,\r\n              private actionFeedbackService: ActionFeedbackService) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.sort$.complete();\r\n  }\r\n\r\n  onCustomSort(event: SortEvent): void {\r\n    const sort = multisortEventToOptions(event);\r\n    if (sort) this.sort$.next(sort);\r\n  }\r\n\r\n  onGroupLeaveClick(event: Event, membership: GroupMembership): void {\r\n    this.confirmationService.confirm({\r\n      target: event.target || undefined,\r\n      key: 'commonPopup',\r\n      message: $localize`Are you sure you want to leave this group?`,\r\n      header: $localize`Confirm Action`,\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: $localize`Yes, leave group`,\r\n      accept: () => {\r\n        this.leaveGroup(membership);\r\n      },\r\n      rejectLabel: $localize`No`,\r\n    });\r\n  }\r\n\r\n  leaveGroup(membership: GroupMembership): void {\r\n    const groupId = membership.group.id;\r\n    const groupName = membership.group.name;\r\n    this.groupLeaveService.leave(groupId)\r\n      .subscribe({\r\n        next: () => {\r\n          this.refresh();\r\n          this.actionFeedbackService.success($localize`You have left \"${groupName}\"`);\r\n        },\r\n        error: _err => {\r\n          this.actionFeedbackService.error($localize`Failed to leave \"${groupName}\"`);\r\n        }\r\n      });\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { forkJoin, Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\ntype Status = 'invalid'|'success'|'unchanged'|'not_found';\r\n\r\nexport enum Action {\r\n  Accept,\r\n  Reject,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RequestActionsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  processJoinRequests(ids: Map<string, string[]>, action: Action): Observable<Map<string, Status>[]> {\r\n    const type = action === Action.Accept ? 'accept' : 'reject';\r\n    return forkJoin(\r\n      Array.from(ids.entries()).map(groupMembersIds =>\r\n        this.http\r\n          .post<ActionResponse<{[user: string]: Status}>>(\r\n            `${appConfig.apiUrl}/groups/${groupMembersIds[0]}/join-requests/${type}`, null, {\r\n              params: {\r\n                group_ids: groupMembersIds[1].join(','),\r\n              },\r\n            })\r\n          .pipe(\r\n            map(successData),\r\n            map(data => new Map(Object.entries(data)))\r\n          )\r\n      )\r\n    );\r\n  }\r\n\r\n  processLeaveRequests(ids: Map<string, string[]>, action: Action): Observable<Map<string, Status>[]> {\r\n    const type = action === Action.Accept ? 'accept' : 'reject';\r\n    return forkJoin(\r\n      Array.from(ids.entries()).map(groupMembersIds =>\r\n        this.http\r\n          .post<ActionResponse<{[user: string]: Status}>>(\r\n            `${appConfig.apiUrl}/groups/${groupMembersIds[0]}/leave-requests/${type}`, null, {\r\n              params: {\r\n                group_ids: groupMembersIds[1].join(','),\r\n              },\r\n            })\r\n          .pipe(\r\n            map(successData),\r\n            map(data => new Map(Object.entries(data)))\r\n          )\r\n      )\r\n    );\r\n  }\r\n\r\n  processGroupInvitations(groupIds: string[], action: Action): Observable<{ changed: boolean }[]> {\r\n    const type = action === Action.Accept ? 'accept' : 'reject';\r\n    return forkJoin(\r\n      groupIds.map(groupId =>\r\n        this.http\r\n          .post<ActionResponse<{ changed: boolean }>>(`${appConfig.apiUrl}/current-user/group-invitations/${groupId}/${type}`, null)\r\n          .pipe(\r\n            map(successData),\r\n          )\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport function parseResults(data: Map<string, Status>[]): { countRequests: number, countSuccess: number } {\r\n  const res = { countRequests: 0, countSuccess: 0 };\r\n  data.forEach(elm => {\r\n    res.countRequests += elm.size;\r\n    res.countSuccess += Array.from(elm.values())\r\n      .map<number>(state => ([ 'success', 'unchanged' ].includes(state) ? 1 : 0))\r\n      .reduce((acc, res) => acc + res, 0);\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function parseGroupInvitationResults(data: { changed: boolean }[]): { countRequests: number, countSuccess: number } {\r\n  return {\r\n    countRequests: data.length,\r\n    countSuccess: data.filter(state => state.changed).length,\r\n  };\r\n}\r\n","import { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { Action } from '../../http-services/request-actions.service';\r\n\r\nexport interface Result {\r\n  countRequests: number,\r\n  countSuccess: number,\r\n}\r\n\r\nexport function displayResponseToast(feedbackService: ActionFeedbackService, result: Result, action: Action): void {\r\n  const msg = action === Action.Accept ? $localize`accepted` : $localize`declined`;\r\n\r\n  if (result.countSuccess === result.countRequests) {\r\n    feedbackService.success($localize`${result.countSuccess} request(s) have been ${msg}`);\r\n  } else if (result.countSuccess === 0) {\r\n    const detailMsg = action === Action.Accept ?\r\n      $localize`Unable to accept the selected request(s).` :\r\n      $localize`Unable to reject the selected request(s).`;\r\n    feedbackService.error(detailMsg);\r\n  } else {\r\n    const errCnt = result.countRequests - result.countSuccess;\r\n    feedbackService.partial($localize`${result.countSuccess} request(s) have been ${msg}, ${errCnt} could not be executed`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { map } from 'rxjs/operators';\r\nimport { pipe } from 'fp-ts/function';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\nimport { dateDecoder } from '../../../shared/helpers/decoders';\r\n\r\nconst userDecoder = pipe(\r\n  D.struct({\r\n    groupId: D.string,\r\n    login: D.string,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      firstName: D.nullable(D.string),\r\n      lastName: D.nullable(D.string),\r\n      grade: D.nullable(D.number),\r\n    }),\r\n  ),\r\n);\r\n\r\nconst groupPendingRequestDecoder = D.struct({\r\n  at: D.nullable(dateDecoder),\r\n  group: D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n  }),\r\n  type: D.literal('join_request', 'leave_request'),\r\n  user: userDecoder,\r\n});\r\n\r\nconst groupInvitationDecoder = D.struct({\r\n  action: D.literal('invitation_created', 'join_request_created', 'join_request_refused'),\r\n  at: dateDecoder,\r\n  group: D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n    description: D.nullable(D.string),\r\n    type: D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'Session', 'Base'),\r\n  }),\r\n  groupId: D.string,\r\n  invitingUser: D.nullable(D.struct({\r\n    id: D.string,\r\n    firstName: D.nullable(D.string),\r\n    lastName: D.nullable(D.string),\r\n    login: D.string,\r\n  })),\r\n});\r\n\r\nexport interface PendingRequest {\r\n  at: Date|null,\r\n  user: null | {\r\n    id: string,\r\n    login: string,\r\n    firstName: string|null,\r\n    lastName: string|null,\r\n  },\r\n  group: {\r\n    id: string,\r\n    name: string,\r\n  },\r\n}\r\n\r\nexport interface GroupPendingRequest extends PendingRequest {\r\n  user: {\r\n    id: string,\r\n    login: string,\r\n    firstName: string|null,\r\n    lastName: string|null,\r\n    grade: number|null,\r\n  },\r\n}\r\n\r\nexport interface GroupInvitation extends PendingRequest {\r\n  group: {\r\n    id: string,\r\n    name: string,\r\n    description: string|null,\r\n    type: 'Class' | 'Team' | 'Club' | 'Friends' | 'Other' | 'Session' | 'Base',\r\n  },\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetRequestsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getGroupPendingRequests(\r\n    groupId?: string,\r\n    includeSubgroup : boolean = false,\r\n    sort: string[] = [],\r\n  ): Observable<GroupPendingRequest[]> {\r\n    let params = new HttpParams();\r\n    if (groupId) {\r\n      params = params.set('group_id', groupId);\r\n      if (includeSubgroup) params = params.set('include_descendant_groups', '1');\r\n    }\r\n    if (sort.length > 0) params = params.set('sort', sort.join(','));\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/user-requests`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(groupPendingRequestDecoder)),\r\n        map(pendingRequests => pendingRequests.map(r => ({\r\n          at: r.at,\r\n          group: r.group,\r\n          user: {\r\n            id: r.user.groupId,\r\n            login: r.user.login,\r\n            firstName: r.user.firstName || null,\r\n            lastName: r.user.lastName || null,\r\n            grade: r.user.grade || null,\r\n          }\r\n        })))\r\n      );\r\n  }\r\n\r\n  getGroupInvitations(\r\n    sort: string[] = [],\r\n  ): Observable<GroupInvitation[]> {\r\n    let params = new HttpParams();\r\n    if (sort.length > 0) params = params.set('sort', sort.join(','));\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/current-user/group-invitations`, { params: params })\r\n      .pipe(\r\n        decodeSnakeCase(D.array(groupInvitationDecoder)),\r\n        map(groupInvitations => groupInvitations.filter(invitation => invitation.action === 'invitation_created').map(r => ({\r\n          at: r.at,\r\n          group: {\r\n            id: r.group.id,\r\n            name: r.group.name,\r\n            description: r.group.description,\r\n            type: r.group.type,\r\n          },\r\n          user: r.invitingUser,\r\n        }))),\r\n      );\r\n  }\r\n}\r\n","<p-table\r\n  #table\r\n  class=\"alg-table --grid\"\r\n  [ngClass]=\"tableStyle\"\r\n  [columns]=\"selectedColumns!\"\r\n  [value]=\"data!\"\r\n  [scrollable]=\"scrollWhenExpanded || scrollable\"\r\n  [selectionMode]=\"selectionMode!\"\r\n  [selection]=\"selection!\"\r\n  [dataKey]=\"dataKey!\"\r\n  [frozenWidth]=\"frozenWidth!\"\r\n  [sortMode]=\"sortMode\"\r\n  [multiSortMeta]=\"multiSortMeta\"\r\n  [customSort]=\"true\"\r\n  [loading]=\"loading\"\r\n  (selectionChange)=\"onSelectionChange($event)\"\r\n  (sortFunction)=\"sortFunction($event)\"\r\n  (onRowSelect)=\"onRowSelect()\"\r\n  (onRowUnselect)=\"onRowUnselect()\"\r\n  (onHeaderCheckboxToggle)=\"onHeaderCheckbox()\"\r\n>\r\n  <!-- <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container> -->\r\n  <ng-template *ngIf=\"frozenHeaderTemplate && frozenWidth && frozenWidth.length > 0\" pTemplate=\"frozenheader\">\r\n    <ng-container [ngTemplateOutlet]=\"frozenHeaderTemplate\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"frozenBodyTemplate && frozenWidth && frozenWidth.length > 0\" pTemplate=\"frozenbody\" let-rowIndex=\"rowIndex\">\r\n    <ng-container [ngTemplateOutlet]=\"frozenBodyTemplate\" [ngTemplateOutletContext]=\"{ $implicit: rowIndex }\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"headerTemplate\" pTemplate=\"header\" let-columns>\r\n    <ng-container [ngTemplateOutlet]=\"headerTemplate\" [ngTemplateOutletContext]=\"{ $implicit: columns }\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"bodyTemplate\" pTemplate=\"body\" let-rowData let-expanded=\"expanded\" let-columns=\"columns\" let-rowIndex=\"rowIndex\">\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"bodyTemplate\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: rowData, columns: columns, rowIndex: rowIndex, expanded: expanded }\"\r\n    ></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"footerTemplate\" pTemplate=\"footer\">\r\n    <ng-container [ngTemplateOutlet]=\"footerTemplate\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"rowExpansionTemplate\" pTemplate=\"rowexpansion\" let-rowData>\r\n    <ng-container [ngTemplateOutlet]=\"rowExpansionTemplate\" [ngTemplateOutletContext]=\"{ $implicit: rowData, columns: columns }\">\r\n    </ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"summaryTemplate\" pTemplate=\"summary\">\r\n    <ng-container [ngTemplateOutlet]=\"summaryTemplate\" [ngTemplateOutletContext]=\"{ $implicit: table }\"></ng-container>\r\n  </ng-template>\r\n  <ng-template *ngIf=\"emptymessageTemplate\" pTemplate=\"emptymessage\">\r\n    <ng-container [ngTemplateOutlet]=\"emptymessageTemplate\"></ng-container>\r\n  </ng-template>\r\n</p-table>\r\n<span\r\n  class=\"toggle-gear\"\r\n  (click)=\"showColumns()\"\r\n  *ngIf=\"!showColumnSelection && showGear\"\r\n>\r\n  <i class=\"fa fa-cog\"></i>\r\n</span>\r\n<div class=\"select-column\" *ngIf=\"showColumnSelection && showGear\">\r\n  <div class=\"header\" (click)=\"showColumns()\">\r\n    <span class=\"fold-icon\">\r\n      <i class=\"fa fa-caret-up\"></i>\r\n    </span>\r\n    <span i18n>Customize</span>\r\n  </div>\r\n  <div class=\"column-group\" *ngFor=\"let group of groupInfo\">\r\n    <p>{{group.name}}</p>\r\n    <ul>\r\n      <li *ngFor=\"let col of group.columns\">\r\n        <span [ngClass]=\"{ checked: selected[col.field] }\" (click)=\"handleColumnChanges(col)\">\r\n          {{ col.header }}\r\n        </span>\r\n        <alg-switch\r\n          [checked]=\"!!selected[col.field]\"\r\n          (change)=\"handleColumnChanges(col)\"\r\n        ></alg-switch>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</div>\r\n<div class=\"show-all\" *ngIf=\"showGear && (toShow > 0 || expand)\" (click)=\"showAll()\">\r\n  <span class=\"missing-title\" *ngIf=\"toShow > 0\">{{ toShow }}</span>\r\n  <span class=\"show-icon\">\r\n    <i *ngIf=\"!expand\" class=\"fa fa-caret-right\"></i>\r\n    <i *ngIf=\"expand\" class=\"fa fa-caret-left\"></i>\r\n  </span>\r\n</div>\r\n","import { Component, Input, OnChanges, SimpleChanges, ContentChild, ViewChild, Output, EventEmitter, TemplateRef } from '@angular/core';\r\nimport { DomHandler } from 'primeng/dom';\r\nimport { Table, TableService } from 'primeng/table';\r\nimport { SortEvent } from 'primeng/api/sortevent';\r\nimport { SortMeta } from 'primeng/api/sortmeta';\r\n\r\nexport function tableFactory(wrapper: GridComponent): Table|undefined {\r\n  return wrapper.table;\r\n}\r\n\r\nexport interface GridColumn {\r\n  field: string,\r\n  header: string,\r\n}\r\n\r\nexport interface GridColumnGroup {\r\n  columns: GridColumn[],\r\n  name?: string,\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-grid',\r\n  templateUrl: './grid.component.html',\r\n  styleUrls: [ './grid.component.scss' ],\r\n  providers: [\r\n    DomHandler,\r\n    TableService, // from old imports\r\n    {\r\n      provide: Table, // providing table class\r\n      useFactory: tableFactory, // using new function\r\n      deps: [ GridComponent ], // new function depends on your wrapper\r\n    },\r\n  ],\r\n})\r\nexport class GridComponent implements OnChanges {\r\n\r\n  @Input() selection?: any[];\r\n\r\n  constructor() {}\r\n  @ViewChild('table', { static: true }) table?: Table;\r\n\r\n  @Input() data?: any[];\r\n  @Input() selectedColumns?: GridColumn[];\r\n  @Input() columns: GridColumn[] = [];\r\n  @Input() groupInfo: GridColumnGroup[] = [];\r\n\r\n  @Input() sortMode = 'multiple';\r\n  @Input() multiSortMeta: SortMeta[] = [];\r\n  @Input() customSort = true;\r\n\r\n  @Input() scrollWhenExpanded = false;\r\n  @Input() scrollable = false;\r\n\r\n  @Input() selectionMode?: string;\r\n  @Input() dataKey?: string;\r\n  @Input() frozenWidth?: string;\r\n  @Input() showGear = true;\r\n  @Input() loading = false;\r\n  @Input() tableStyle = '';\r\n\r\n  @Output() expandWholeWidth = new EventEmitter<boolean>();\r\n  @Output() sort = new EventEmitter<SortEvent>();\r\n  @Output() selectionChange = new EventEmitter<any[]>();\r\n\r\n  @ContentChild('headerTemplate') headerTemplate?: TemplateRef<any>;\r\n  @ContentChild('bodyTemplate') bodyTemplate?: TemplateRef<any>;\r\n  @ContentChild('footerTemplate') footerTemplate?: TemplateRef<any>;\r\n  @ContentChild('summaryTemplate') summaryTemplate?: TemplateRef<any>;\r\n  @ContentChild('rowExpansionTemplate') rowExpansionTemplate?: TemplateRef<any>;\r\n  @ContentChild('frozenHeaderTemplate') frozenHeaderTemplate?: TemplateRef<any>;\r\n  @ContentChild('frozenBodyTemplate') frozenBodyTemplate?: TemplateRef<any>;\r\n  @ContentChild('emptymessageTemplate') emptymessageTemplate?: TemplateRef<any>;\r\n\r\n  showColumnSelection = false;\r\n\r\n  selected: {[k: string]: boolean} = {};\r\n  toShow = 0;\r\n  expand = false;\r\n\r\n  onSelectionChange(selection: any[]): void {\r\n    this.selection = selection;\r\n    this.selectionChange.emit(this.selection ?? []);\r\n  }\r\n\r\n  onRowSelect(): void {\r\n    this.selectionChange.emit(this.selection ?? []);\r\n  }\r\n\r\n  onRowUnselect(): void {\r\n    this.selectionChange.emit(this.selection ?? []);\r\n  }\r\n\r\n  detectSelected(): void {\r\n    const selectedCol = this.selectedColumns ?? [];\r\n\r\n    for (const col of this.columns) {\r\n      this.selected[col.field] = false;\r\n    }\r\n\r\n    for (const col of selectedCol) {\r\n      this.selected[col.field] = true;\r\n    }\r\n\r\n    this.toShow = this.columns.length - selectedCol.length;\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (this.showGear) {\r\n      this.detectSelected();\r\n    }\r\n  }\r\n\r\n  showColumns(): void {\r\n    this.showColumnSelection = !this.showColumnSelection;\r\n  }\r\n\r\n  showAll(): void {\r\n    this.selectedColumns = this.columns;\r\n    this.toShow = 0;\r\n    this.expand = !this.expand;\r\n\r\n    if (!this.expand) {\r\n      const newSel: GridColumn[] = [];\r\n      for (const col of this.columns) {\r\n        if (this.selected[col.field]) {\r\n          newSel.push(col);\r\n        }\r\n        this.selected[col.field] = true;\r\n      }\r\n\r\n      this.selectedColumns = newSel;\r\n\r\n      this.toShow = this.columns.length - this.selectedColumns.length;\r\n    }\r\n\r\n    for (const col of this.columns) {\r\n      this.selected[col.field] = true;\r\n    }\r\n    this.expandWholeWidth.emit(this.expand);\r\n  }\r\n\r\n  handleColumnChanges(item: GridColumn): void {\r\n    this.selected[item.field] = !this.selected[item.field];\r\n    const newSel: GridColumn[] = [];\r\n    for (const col of this.columns) {\r\n      if (this.selected[col.field] === true) {\r\n        newSel.push(col);\r\n      }\r\n    }\r\n\r\n    this.selectedColumns = newSel;\r\n\r\n    this.toShow = this.columns.length - this.selectedColumns.length;\r\n  }\r\n\r\n  sortFunction(event: SortEvent): void {\r\n    this.sort.emit(event);\r\n  }\r\n\r\n  onHeaderCheckbox(): void {\r\n    this.selectionChange.emit(this.selection);\r\n  }\r\n\r\n  public reset(): void {\r\n    this.table?.clear();\r\n  }\r\n\r\n}\r\n","<alg-section-paragraph\r\n  icon=\"fa fa-check\"\r\n  [label]=\"label\"\r\n  [collapsible]=\"true\"\r\n  [collapsed]=\"collapsed\"\r\n>\r\n\r\n  <ng-template #headerTemplate *ngIf=\"sectionHeaderTemplate\">\r\n    <ng-container [ngTemplateOutlet]=\"sectionHeaderTemplate\" [ngTemplateOutletContext]=\"{ $implicit: state }\"></ng-container>\r\n  </ng-template>\r\n\r\n  <alg-error\r\n    *ngIf=\"state === 'fetchingError'; else noFetchingError\"\r\n    class=\"dark\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    i18n-message message=\"Error while loading the pending requests.\"\r\n  ></alg-error>\r\n\r\n  <ng-template #noFetchingError>\r\n    <div class=\"pending-request-container\" #noError>\r\n      <alg-grid\r\n        *ngIf=\"requests.length > 0\"\r\n        [selectedColumns]=\"columns\"\r\n        [columns]=\"columns\"\r\n        [data]=\"requests\"\r\n        [groupInfo]=\"panel\"\r\n        tableStyle=\"--pending-request\"\r\n        [(selection)]=\"selection\"\r\n        (sort)=\"onCustomSort($event)\"\r\n        [loading]=\"state !== 'ready'\"\r\n      >\r\n        <ng-template #headerTemplate let-columns>\r\n          <tr>\r\n            <th></th>\r\n            <ng-container *ngFor=\"let col of columns\">\r\n              <th\r\n                [pSortableColumn]=\"col.field\"\r\n                [ngClass]=\"{'small-column' : ['at', 'group.name'].includes(col.field)}\"\r\n              >\r\n                <div class=\"header-container\">\r\n                  {{ col.header }}\r\n                  <p-sortIcon [field]=\"col.field\"></p-sortIcon>\r\n                </div>\r\n              </th>\r\n            </ng-container>\r\n          </tr>\r\n        </ng-template>\r\n        <ng-template\r\n          #bodyTemplate\r\n          let-rowData\r\n          let-columns=\"columns\"\r\n          let-rowIndex=\"rowIndex\"\r\n        >\r\n          <tr [pSelectableRow]=\"rowData\" [pSelectableRowIndex]=\"rowIndex\">\r\n            <td>\r\n              <p-tableCheckbox [value]=\"rowData\"></p-tableCheckbox>\r\n            </td>\r\n            <td *ngFor=\"let col of columns\">\r\n              <ng-container [ngSwitch]=\"col.field\">\r\n                <span class=\"group-name\" *ngSwitchCase=\"'group.name'\">\r\n                  {{ rowData.group.name }}\r\n                </span>\r\n                <ng-container *ngSwitchCase=\"'at'\">\r\n                  {{ rowData.at | date: \"d/MM/y\" }}\r\n                </ng-container>\r\n                <div class=\"grid-user-info-field\" *ngSwitchCase=\"'user.login'\">\r\n                  <!-- <img\r\n                    src=\"{{ rowData.user.image }}\"\r\n                    style=\"width: 7rem; height: 7rem;\"\r\n                  /> -->\r\n                  <div class=\"user-info\">\r\n                    <span class=\"user-info-name\">\r\n                      {{ rowData.user | userCaption }}\r\n                    </span>\r\n                    <span class=\"user-info-activity\" *ngIf=\"rowData.user.grade\">\r\n                      <em><span i18n>Grade: </span>{{ rowData.user.grade }}</em>\r\n                    </span>\r\n                    <!-- <div class=\"user-info-content\">\r\n                      {{ rowData.user.content }}\r\n                    </div> -->\r\n                  </div>\r\n                </div>\r\n                <ng-container *ngSwitchCase=\"'group.type'\">\r\n                  {{ rowData.group.type }}\r\n                </ng-container>\r\n                <ng-container *ngSwitchDefault>\r\n                  {{ rowData[col.field] }}\r\n                </ng-container>\r\n              </ng-container>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n        <ng-template #summaryTemplate let-table>\r\n          <div class=\"summary\">\r\n            <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\r\n            <span class=\"select-all\" (click)=\"onSelectAll()\" i18n>\r\n              Select all\r\n            </span>\r\n            <span class=\"filler\"></span>\r\n            <div class=\"summary-actions\">\r\n              <span [ngClass]=\"{disabled: selection.length === 0 || this.state !== 'ready'}\" (click)=\"onAccept()\">\r\n                <span i18n>Accept</span>\r\n              </span>\r\n              <span [ngClass]=\"{disabled: selection.length === 0 || this.state !== 'ready'}\" (click)=\"onReject()\">\r\n                <span i18n>Reject</span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </alg-grid>\r\n      <p class=\"no-pending-requests\" *ngIf=\"requests.length === 0\" i18n>\r\n        No pending requests\r\n      </p>\r\n    </div>\r\n  </ng-template>\r\n\r\n</alg-section-paragraph>\r\n\r\n<ng-template #loading>\r\n  <alg-loading></alg-loading>\r\n</ng-template>\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  ContentChild, TemplateRef, Output, EventEmitter\r\n} from '@angular/core';\r\nimport { SortEvent } from 'primeng/api/sortevent';\r\nimport { GridColumn, GridColumnGroup } from '../../../shared-components/components/grid/grid.component';\r\nimport { Action } from 'src/app/modules/group/http-services/request-actions.service';\r\n\r\n@Component({\r\n  selector: 'alg-pending-request',\r\n  templateUrl: './pending-request.component.html',\r\n  styleUrls: [ './pending-request.component.scss' ],\r\n})\r\nexport class PendingRequestComponent<T> implements OnInit, OnChanges {\r\n\r\n  @Input() columns: GridColumn[] = [];\r\n  @Input() requests: T[] = [];\r\n  @Input() state: 'fetching' | 'processing' | 'ready' | 'fetchingError' = 'fetching';\r\n  @Input() label = '';\r\n\r\n  @Output() sort = new EventEmitter<string[]>();\r\n  @Output() processRequests = new EventEmitter<{ data: T[], type: Action }>();\r\n\r\n  @ContentChild('sectionHeaderTemplate') sectionHeaderTemplate?: TemplateRef<any>;\r\n\r\n  selection: T[] = [];\r\n  panel: GridColumnGroup[] = [];\r\n  collapsed = true;\r\n\r\n  ngOnInit(): void {\r\n    this.panel.push({\r\n      columns: this.columns,\r\n    });\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    this.collapsed = this.requests.length === 0;\r\n  }\r\n\r\n  onAccept(): void {\r\n    this.onAcceptOrReject(Action.Accept);\r\n  }\r\n\r\n  onReject(): void {\r\n    this.onAcceptOrReject(Action.Reject);\r\n  }\r\n\r\n  private onAcceptOrReject(action: Action): void {\r\n    if (this.selection.length === 0 || this.state !== 'ready') {\r\n      return;\r\n    }\r\n    this.processRequests.emit({ data: this.selection, type: action });\r\n    this.selection = [];\r\n  }\r\n\r\n  onSelectAll(): void {\r\n    if (this.selection.length === this.requests.length) {\r\n      this.selection = [];\r\n    } else {\r\n      this.selection = this.requests;\r\n    }\r\n  }\r\n\r\n  onCustomSort(event: SortEvent): void {\r\n    const sortMeta = event.multiSortMeta?.map(meta => (meta.order === -1 ? `-${meta.field}` : meta.field));\r\n    if (sortMeta) this.sort.emit(sortMeta);\r\n  }\r\n}\r\n","<alg-pending-request\r\n  i18n-label label=\"Pending requests\"\r\n  [state]=\"state\"\r\n  [columns]=\"columns\"\r\n  [requests]=\"requests\"\r\n  (sort)=\"onFetch($event)\"\r\n  (processRequests)=\"onProcessRequests($event)\"\r\n>\r\n  <ng-template #sectionHeaderTemplate>\r\n    <div\r\n      *ngIf=\"showSwitch\"\r\n      class=\"group-switch\">\r\n      <alg-selection (change)=\"onSubgroupSwitch($event)\" [items]=\"subgroupSwitchItems\"></alg-selection>\r\n    </div>\r\n  </ng-template>\r\n\r\n</alg-pending-request>\r\n","import {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { GetRequestsService, PendingRequest } from '../../http-services/get-requests.service';\r\nimport { Action, parseResults, RequestActionsService } from '../../http-services/request-actions.service';\r\nimport { GridColumn } from '../../../shared-components/components/grid/grid.component';\r\nimport { merge, of, Subject } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { fetchingState, readyState } from 'src/app/shared/helpers/state';\r\nimport { displayResponseToast } from 'src/app/modules/group/components/pending-request/pending-request-response-handling';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { ensureDefined } from 'src/app/shared/helpers/assert';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nconst groupColumn = { field: 'group.name', header: $localize`GROUP` };\r\n\r\n@Component({\r\n  selector: 'alg-pending-join-requests',\r\n  templateUrl: './pending-join-requests.component.html',\r\n  styleUrls: [ './pending-join-requests.component.scss' ],\r\n})\r\nexport class PendingJoinRequestsComponent implements OnChanges, OnDestroy {\r\n\r\n  // if groupId is undefined, pending join requests from all managed group will be used.\r\n  @Input() groupId?: string;\r\n  @Input() showSwitch = true;\r\n\r\n  requests: PendingRequest[] = [];\r\n\r\n  columns: GridColumn[] = [\r\n    { field: 'user.login', header: $localize`USER` },\r\n    { field: 'at', header: $localize`REQUESTED ON` },\r\n  ];\r\n  readonly subgroupSwitchItems = [\r\n    { label: $localize`This group only`, value: false },\r\n    { label: $localize`All subgroups`, value: true }\r\n  ];\r\n  includeSubgroup = false;\r\n\r\n  state: 'fetching' | 'processing' | 'ready' | 'fetchingError' = 'fetching';\r\n  currentSort: string[] = [];\r\n\r\n  private dataFetching = new Subject<{ groupId?: string, includeSubgroup: boolean, sort: string[] }>();\r\n\r\n  constructor(\r\n    private getRequestsService: GetRequestsService,\r\n    private requestActionService: RequestActionsService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {\r\n    this.dataFetching.pipe(\r\n      switchMap(params =>\r\n        merge(\r\n          of(fetchingState()),\r\n          this.getRequestsService.getGroupPendingRequests(params.groupId, params.includeSubgroup, params.sort)\r\n            .pipe(map(readyState))\r\n        )\r\n      )\r\n    ).subscribe({\r\n      next: state => {\r\n        this.state = state.tag;\r\n        if (state.isReady) {\r\n          this.requests = state.data;\r\n        }\r\n      },\r\n      error: _err => {\r\n        this.state = 'fetchingError';\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (!this.showSwitch) this.columns = [ groupColumn ].concat(this.columns);\r\n    this.dataFetching.next({ groupId: this.groupId, includeSubgroup: this.includeSubgroup, sort: this.currentSort });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dataFetching.complete();\r\n  }\r\n\r\n\r\n  onProcessRequests(params: { data: PendingRequest[], type: Action }): void {\r\n    this.state = 'processing';\r\n\r\n    const requestMap = new Map<string, string[]>();\r\n    params.data.forEach(elm => {\r\n      const groupID = elm.group.id;\r\n\r\n      if (!elm.user) {\r\n        throw new Error('Unexpected: Missed user ID');\r\n      }\r\n\r\n      const memberID = elm.user.id;\r\n\r\n      const value = requestMap.get(groupID);\r\n      if (value) requestMap.set(groupID, value.concat([ memberID ]));\r\n      else requestMap.set(groupID, [ memberID ]);\r\n    });\r\n\r\n    this.requestActionService.processJoinRequests(requestMap, params.type)\r\n      .subscribe({\r\n        next: result => {\r\n          this.state = 'ready';\r\n          displayResponseToast(this.actionFeedbackService, parseResults(result), params.type);\r\n          this.dataFetching.next({ groupId: this.groupId, includeSubgroup: this.includeSubgroup, sort: this.currentSort });\r\n        },\r\n        error: err => {\r\n          this.state = 'ready';\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n  }\r\n\r\n  onSubgroupSwitch(selectedIdx: number): void {\r\n    this.includeSubgroup = ensureDefined(this.subgroupSwitchItems[selectedIdx]).value;\r\n\r\n    this.columns = this.columns.filter(elm => elm !== groupColumn);\r\n    if (this.includeSubgroup) this.columns = [ groupColumn ].concat(this.columns);\r\n\r\n    this.dataFetching.next({ groupId: this.groupId, includeSubgroup: this.includeSubgroup, sort: this.currentSort });\r\n  }\r\n\r\n  onFetch(sort: string[]): void {\r\n    if (JSON.stringify(sort) !== JSON.stringify(this.currentSort)) {\r\n      this.currentSort = sort;\r\n      this.dataFetching.next({ groupId: this.groupId, includeSubgroup: this.includeSubgroup, sort: this.currentSort });\r\n    }\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { merge, of, Subject } from 'rxjs';\r\nimport { switchMap, map } from 'rxjs/operators';\r\nimport { GridColumn } from 'src/app/modules/shared-components/components/grid/grid.component';\r\nimport { displayResponseToast } from 'src/app/modules/group/components/pending-request/pending-request-response-handling';\r\nimport { fetchingState, readyState } from 'src/app/shared/helpers/state';\r\nimport { GetRequestsService, PendingRequest } from '../../http-services/get-requests.service';\r\nimport { Action, parseGroupInvitationResults, RequestActionsService } from '../../http-services/request-actions.service';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'alg-user-group-invitations',\r\n  templateUrl: './user-group-invitations.component.html',\r\n  styleUrls: [ './user-group-invitations.component.scss' ]\r\n})\r\nexport class UserGroupInvitationsComponent implements OnDestroy, OnInit {\r\n  requests: PendingRequest[] = [];\r\n\r\n  readonly columns: GridColumn[] = [\r\n    { field: 'group.name', header: $localize`TITLE` },\r\n    { field: 'group.type', header: $localize`TYPE` },\r\n    { field: 'at', header: $localize`REQUESTED ON` },\r\n  ];\r\n\r\n  state: 'fetching' | 'processing' | 'ready' | 'fetchingError' = 'fetching';\r\n  currentSort: string[] = [];\r\n\r\n  private dataFetching = new Subject<{ sort: string[] }>();\r\n\r\n  constructor(\r\n    private getRequestsService: GetRequestsService,\r\n    private requestActionService: RequestActionsService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {\r\n    this.dataFetching.pipe(\r\n      switchMap(params =>\r\n        merge(\r\n          of(fetchingState()),\r\n          this.getRequestsService.getGroupInvitations(params.sort)\r\n            .pipe(map(readyState))\r\n        )\r\n      )\r\n    ).subscribe({\r\n      next: state => {\r\n        this.state = state.tag;\r\n        if (state.isReady) {\r\n          this.requests = state.data;\r\n        }\r\n      },\r\n      error: _err => {\r\n        this.state = 'fetchingError';\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.dataFetching.next({ sort: this.currentSort });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.dataFetching.complete();\r\n  }\r\n\r\n  onProcessRequests(params: { data: PendingRequest[], type: Action }): void {\r\n    this.state = 'processing';\r\n    this.requestActionService.processGroupInvitations(params.data.map(r => r.group.id), params.type)\r\n      .subscribe({\r\n        next: result => {\r\n          this.state = 'ready';\r\n          displayResponseToast(this.actionFeedbackService, parseGroupInvitationResults(result), params.type);\r\n          this.dataFetching.next({ sort: this.currentSort });\r\n        },\r\n        error: err => {\r\n          this.state = 'ready';\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n  }\r\n\r\n  onFetch(sort: string[]): void {\r\n    if (JSON.stringify(sort) !== JSON.stringify(this.currentSort)) {\r\n      this.currentSort = sort;\r\n      this.dataFetching.next({ sort: this.currentSort });\r\n    }\r\n  }\r\n}\r\n","<alg-pending-request\r\n  i18n-label label=\"Pending invitations\"\r\n  [state]=\"state\"\r\n  [columns]=\"columns\"\r\n  [requests]=\"requests\"\r\n  (sort)=\"onFetch($event)\"\r\n  (processRequests)=\"onProcessRequests($event)\"\r\n>\r\n</alg-pending-request>\r\n","<alg-error\r\n    *ngIf=\"state === 'error'; else noError\"\r\n    class=\"dark\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    i18n-message message=\"Error while loading the group you manage\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"fetchData()\"\r\n></alg-error>\r\n\r\n<ng-template #noError>\r\n  <p-table\r\n    #table\r\n    class=\"alg-table --managed-group-list\"\r\n    [value]=\"data\"\r\n    [customSort]=\"true\"\r\n    sortMode=\"multiple\"\r\n    [loading]=\"state === 'fetching'\"\r\n  >\r\n    <ng-template pTemplate=\"header\" let-columns>\r\n      <tr *ngIf=\"data.length > 0\">\r\n        <th i18n>Name</th>\r\n        <th class=\"small\" i18n>Type</th>\r\n        <th i18n>Can Manage</th>\r\n        <th class=\"small\" i18n>Can Watch Members</th>\r\n        <th class=\"small\" i18n>Can Grant Group Access</th>\r\n      </tr>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"body\" let-group>\r\n      <tr>\r\n        <td>\r\n          <a class=\"alg-link\" routerLink=\"../by-id/{{ group.id }}/details\">{{ group.name }}</a>\r\n        </td>\r\n        <td>{{ getType(group.type) }}</td>\r\n        <td>{{ getCanManage(group.canManage) }}</td>\r\n        <td>\r\n          <span class=\"table-icon\"\r\n            [ngClass]=\"{\r\n            locked: group.canWatchMembers,\r\n            unlocked: !group.canWatchMembers\r\n          }\">\r\n            <i *ngIf=\"!group.canWatchMembers\" class=\"fa fa-times\"></i>\r\n            <i *ngIf=\"group.canWatchMembers\" class=\"fa fa-check\"></i>\r\n          </span>\r\n        </td>\r\n        <td>\r\n          <span class=\"table-icon\"\r\n                [ngClass]=\"{\r\n                locked: group.canGrantGroupAccess,\r\n                unlocked: !group.canGrantGroupAccess\r\n              }\">\r\n              <i *ngIf=\"!group.canGrantGroupAccess\" class=\"fa fa-times\"></i>\r\n              <i *ngIf=\"group.canGrantGroupAccess\" class=\"fa fa-check\"></i>\r\n            </span>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"emptymessage\" let-columns>\r\n      <tr>\r\n        <td [attr.colspan]=\"columns?.length\">\r\n          <p class=\"empty-message\" i18n>You do not manage any group</p>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </p-table>\r\n</ng-template>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Group, GroupType, ManagedGroupsService, ManageType } from '../../../../core/http-services/managed-groups.service';\r\n\r\n@Component({\r\n  selector: 'alg-managed-group-list',\r\n  templateUrl: './managed-group-list.component.html',\r\n  styleUrls: [ './managed-group-list.component.scss' ],\r\n})\r\nexport class ManagedGroupListComponent implements OnInit {\r\n\r\n  state: 'error' | 'ready' | 'fetching' = 'fetching';\r\n  currentSort: string[] = [];\r\n\r\n  data: Group[] = [];\r\n\r\n  constructor(private managedGroupService: ManagedGroupsService) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.fetchData();\r\n  }\r\n\r\n  fetchData(): void {\r\n    this.state = 'fetching';\r\n    this.managedGroupService.getManagedGroups().subscribe({\r\n      next: data => {\r\n        this.state = 'ready';\r\n        this.data = data;\r\n      },\r\n      error: _err => this.state = 'error',\r\n    });\r\n  }\r\n\r\n  getType(value: GroupType): string {\r\n    switch (value) {\r\n      case 'Class':\r\n        return $localize`Class`;\r\n      case 'Base':\r\n        return $localize`Base`;\r\n      case 'Club':\r\n        return $localize`Club`;\r\n      case 'Friends':\r\n        return $localize`Friends`;\r\n      case 'Session':\r\n        return $localize`Session`;\r\n      case 'Team':\r\n        return $localize`Team`;\r\n      default:\r\n        return $localize`Other`;\r\n    }\r\n  }\r\n\r\n  getCanManage(value: ManageType): string {\r\n    switch (value) {\r\n      case 'memberships':\r\n        return $localize`Memberships`;\r\n      case 'memberships_and_group':\r\n        return $localize`Memberships & Group`;\r\n      default:\r\n        return $localize`None`;\r\n    }\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ActionResponse, assertSuccess, SimpleActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\n\r\ninterface NewGroupData {\r\n  id: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupCreationService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  create(name: string, type: 'Class'|'Team'|'Club'|'Friends'|'Other'|'Session'): Observable<string> {\r\n    const body = {\r\n      name: name,\r\n      type: type\r\n    };\r\n    return this.http\r\n      .post<ActionResponse<NewGroupData>>(`${appConfig.apiUrl}/groups`, body, {})\r\n      .pipe(\r\n        map(successData),\r\n        map(response => response.id),\r\n      );\r\n  }\r\n\r\n  addSubgroup(parentId: string, childId: string): Observable<void> {\r\n    return this.http\r\n      .post<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${parentId}/relations/${childId}`, null, {})\r\n      .pipe(map(assertSuccess));\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { AddedContent, NewContentType } from 'src/app/modules/shared-components/components/add-content/add-content.component';\r\nimport { GroupCreationService } from '../../http-services/group-creation.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { GroupRouter } from 'src/app/shared/routing/group-router';\r\nimport { rawGroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\ntype GroupType = 'Class'|'Team'|'Club'|'Friends'|'Other'|'Session';\r\n\r\n@Component({\r\n  selector: 'alg-add-group',\r\n  templateUrl: 'add-group.component.html',\r\n  styleUrls: [ 'add-group.component.scss' ],\r\n})\r\nexport class AddGroupComponent {\r\n  allowedNewGroupTypes: NewContentType<GroupType>[] = [\r\n    {\r\n      type: 'Class',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Class`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Club',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Club`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Friends',\r\n      icon: 'fa fa-users',\r\n      title: $localize`Friends`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Other',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Other`,\r\n      description: '',\r\n    },\r\n  ];\r\n\r\n  state: 'addingGroup' | 'ready' = 'ready';\r\n\r\n  constructor(\r\n    private groupCreationService: GroupCreationService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private groupRouter: GroupRouter,\r\n  ) {}\r\n\r\n  addChild(group: AddedContent<GroupType>): void {\r\n    this.state = 'addingGroup';\r\n    this.groupCreationService.create(group.title, group.type).subscribe({\r\n      next: createdId => {\r\n        this.state = 'ready';\r\n        this.actionFeedbackService.success($localize`Group successfully created`);\r\n        this.groupRouter.navigateTo(rawGroupRoute({ ...group, id: createdId }));\r\n      },\r\n      error: err => {\r\n        this.state = 'ready';\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n}\r\n","<alg-section icon=\"fa fa-sign-in-alt\" i18n-label label=\"Create a new group\">\r\n  <alg-add-content\r\n      [allowedTypesForNewContent]=\"allowedNewGroupTypes\"\r\n      (contentAdded)=\"addChild($event)\"\r\n      [loading]=\"state === 'addingGroup'\"\r\n      [showSearchUI]=\"false\"\r\n      i18n-inputCreatePlaceholder inputCreatePlaceholder=\"Enter a title to create a new group\"\r\n  ></alg-add-content>\r\n</alg-section>\r\n","<div class=\"alg-page-header my-groups\" *ngIf=\"!(fullFrame$ | async)?.active\">\r\n  <span class=\"alg-page-header-title\" i18n>My groups</span>\r\n  <span class=\"alg-page-header-subtitle\" i18n>All the groups you have joined and you manage</span>\r\n</div>\r\n\r\n<alg-user-group-invitations></alg-user-group-invitations>\r\n\r\n<alg-pending-join-requests [showSwitch]=\"false\"></alg-pending-join-requests>\r\n\r\n<div class=\"bg-white\">\r\n  <alg-section i18n-label label=\"The groups you joined\" icon=\"fa fa-users\">\r\n    <alg-joined-group-list #joinedGroupList></alg-joined-group-list>\r\n  </alg-section>\r\n  <alg-access-code-view\r\n      sectionStyleClass=\"no-rounded-borders\"\r\n      i18n-sectionLabel sectionLabel=\"Join a group by code\"\r\n      i18n-buttonLabel=\"Button label for joining a group\" buttonLabel=\"Join\"\r\n      (groupJoined)=\"onGroupJoined()\"\r\n  ></alg-access-code-view>\r\n  <alg-section label=\"The groups you manage\" icon=\"fa fa-users\">\r\n    <alg-managed-group-list></alg-managed-group-list>\r\n  </alg-section>\r\n</div>\r\n\r\n<div class=\"bg-section\">\r\n  <alg-add-group></alg-add-group>\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n","import { Component, OnDestroy, ViewChild } from '@angular/core';\r\nimport { myGroupsInfo } from 'src/app/shared/models/content/group-info';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\nimport { JoinedGroupListComponent } from '../../components/joined-group-list/joined-group-list.component';\r\nimport { LayoutService } from '../../../../shared/services/layout.service';\r\n\r\n@Component({\r\n  selector: 'alg-my-groups',\r\n  templateUrl: './my-groups.component.html',\r\n  styleUrls: [ './my-groups.component.scss' ]\r\n})\r\nexport class MyGroupsComponent implements OnDestroy {\r\n  @ViewChild('joinedGroupList') joinedGroupList?: JoinedGroupListComponent;\r\n\r\n  fullFrame$ = this.layoutService.fullFrame$;\r\n\r\n  constructor(\r\n    private currentContent: CurrentContentService,\r\n    private layoutService: LayoutService,\r\n  ) {\r\n    this.layoutService.configure({ fullFrameActive: false });\r\n    this.currentContent.replace(myGroupsInfo({\r\n      title: $localize`My groups`,\r\n      breadcrumbs: {\r\n        category: $localize`My groups`,\r\n        path: [],\r\n        currentPageIdx: -1\r\n      }\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.currentContent.clear();\r\n  }\r\n\r\n  onGroupJoined(): void {\r\n    this.joinedGroupList?.refresh();\r\n    this.currentContent.forceNavMenuReload();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { groupRoute, GroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\n\r\nconst breadcrumbDecoder = D.struct({\r\n  id: D.string,\r\n  name: D.string,\r\n  type: D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'User', 'Session', 'Base'),\r\n});\r\n\r\ntype Breadcrumb = D.TypeOf<typeof breadcrumbDecoder>;\r\n\r\nexport interface GroupBreadcrumb extends Breadcrumb {\r\n  route: GroupRoute,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupBreadcrumbsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getBreadcrumbs(route: GroupRoute): Observable<GroupBreadcrumb[]> {\r\n    const groupIds = [ ...route.path, route.id ];\r\n\r\n    return this.http.get<unknown>(`${appConfig.apiUrl}/groups/${groupIds.join('/')}/breadcrumbs`).pipe(\r\n      decodeSnakeCase(D.array(breadcrumbDecoder)),\r\n      map(breadcrumbs => breadcrumbs.map((breadcrumb, index) => ({\r\n        ...breadcrumb,\r\n        route: groupRoute(breadcrumb, breadcrumbs.slice(0, index).map(({ id }) => id)),\r\n      }))),\r\n    );\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { forkJoin, ReplaySubject, Subject } from 'rxjs';\r\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\nimport { GroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { GetGroupBreadcrumbsService, GroupBreadcrumb } from '../http-services/get-group-breadcrumbs.service';\r\nimport { GetGroupByIdService, Group } from '../http-services/get-group-by-id.service';\r\n\r\nexport interface GroupData {\r\n  route: GroupRoute,\r\n  group: Group,\r\n  breadcrumbs: GroupBreadcrumb[],\r\n}\r\n\r\n/**\r\n * A datasource which allows fetching a group using a proper state and sharing it among several components.\r\n * The only interactions with this class are:\r\n * - trigger actions by calling public functions\r\n * - listen state change by listening the state\r\n */\r\n@Injectable()\r\nexport class GroupDataSource implements OnDestroy {\r\n\r\n  private fetchOperation = new ReplaySubject<GroupRoute>(1); // trigger item fetching\r\n  private refresh$ = new Subject<void>();\r\n\r\n  state$ = this.fetchOperation.pipe(\r\n    // switchMap does cancel the previous ongoing processing if a new one comes\r\n    // on new fetch operation to be done: set \"fetching\" state and fetch the data which will result in a ready or error state\r\n    switchMap(route => forkJoin({\r\n      group: this.getGroupByIdService.get(route.id),\r\n      breadcrumbs: this.getGroupBreadcrumbsService.getBreadcrumbs(route),\r\n    }).pipe(\r\n      map(({ group, breadcrumbs }) => ({ route, group, breadcrumbs })),\r\n      mapToFetchState({ resetter: this.refresh$ }),\r\n    )),\r\n    shareReplay(1),\r\n  );\r\n\r\n  constructor(\r\n    private getGroupByIdService: GetGroupByIdService,\r\n    private getGroupBreadcrumbsService: GetGroupBreadcrumbsService,\r\n  ) {}\r\n\r\n  fetchGroup(route: GroupRoute): void {\r\n    this.fetchOperation.next(route);\r\n  }\r\n\r\n  // If (and only if) a group is currently fetched (so we are not currently loading or in error), refetch it.\r\n  refetchGroup(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n    this.fetchOperation.complete();\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <div class=\"spinner-container\" *ngIf=\"state.isFetching\">\r\n    <alg-loading size=\"small\"></alg-loading>\r\n  </div>\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    i18n-message message=\"Error while loading the activities\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n  <div *ngIf=\"state.isReady && state.data.length === 0\" i18n>\r\n    There are no activities\r\n  </div>\r\n  <p-table\r\n      class=\"alg-table --overlay-panel\"\r\n      [value]=\"state.data\"\r\n      *ngIf=\"state.isReady && state.data.length > 0\"\r\n  >\r\n    <ng-template pTemplate=\"body\" let-item>\r\n      <tr>\r\n        <td><span class=\"type\">{{ item.activity.type }}</span></td>\r\n        <td>\r\n          <a class=\"alg-link dots\" [routerLink]=\"item.activity | rawItemLink\">\r\n            {{ item.activity.string.title }} ({{ item.name }})\r\n          </a>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </p-table>\r\n</ng-container>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { ItemNavigationService } from '../../../../core/http-services/item-navigation.service';\r\nimport { switchMap, filter, map } from 'rxjs/operators';\r\nimport { isNotNull } from '../../../../shared/helpers/null-undefined-predicates';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { Subject } from 'rxjs';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\n\r\n@Component({\r\n  selector: 'alg-suggestion-of-activities',\r\n  templateUrl: './suggestion-of-activities.component.html',\r\n  styleUrls: [ './suggestion-of-activities.component.scss' ],\r\n})\r\nexport class SuggestionOfActivitiesComponent implements OnDestroy {\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.groupWatchingService.watchedGroup$.pipe(\r\n    filter(isNotNull),\r\n    switchMap(watchedGroup =>\r\n      this.itemNavigationService.getRootActivities(watchedGroup.route.id).pipe(\r\n        map(rootActivities => [\r\n          ...rootActivities.filter(act => act.groupId === watchedGroup.route.id),\r\n          ...rootActivities.filter(act => act.groupId !== watchedGroup.route.id),\r\n        ].slice(0, 4))\r\n      )\r\n    ),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private groupWatchingService: GroupWatchingService,\r\n    private itemNavigationService: ItemNavigationService) {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n}\r\n","<div class=\"group-header-container\">\r\n  <div class=\"group-header unfolded\">\r\n    <div class=\"user-info\">\r\n      <div class=\"user-name\">\r\n        <span>{{ groupData?.group?.name }}</span>\r\n      </div>\r\n    </div>\r\n    <ng-container *ngIf=\"navigationNeighbors$ | async as navigationNeighbors\">\r\n      <alg-page-navigator\r\n        *ngIf=\"!!groupWithManagement\"\r\n        [allowWatching]=\"!!groupWithManagement.currentUserCanWatchMembers\"\r\n        [isWatched]=\"!!(isCurrentGroupWatched$ | async)\"\r\n        [allowFullScreen]=\"false\"\r\n        [navigationMode]=\"{\r\n          parent: !!navigationNeighbors?.isReady && !!navigationNeighbors?.data?.parent,\r\n          left: !!navigationNeighbors?.isReady && !!navigationNeighbors?.data?.previous,\r\n          right: !!navigationNeighbors?.isReady && !!navigationNeighbors?.data?.next\r\n        }\"\r\n        (parent)=\"navigationNeighbors?.data?.parent?.navigateTo()\"\r\n        (left)=\"navigationNeighbors?.data?.previous?.navigateTo()\"\r\n        (right)=\"navigationNeighbors?.data?.next?.navigateTo()\"\r\n        (edit)=\"onEditButtonClicked()\"\r\n        (watch)=\"onStartWatchButtonClicked($event)\"\r\n        (stopWatch)=\"onStopWatchButtonClicked()\"\r\n      ></alg-page-navigator>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n\r\n<p-overlayPanel\r\n    #op\r\n    [style]=\"{ width: '450px' }\"\r\n    appendTo=\"body\"\r\n>\r\n  <alg-suggestion-of-activities *ngIf=\"op.overlayVisible\"></alg-suggestion-of-activities>\r\n</p-overlayPanel>\r\n","import { Component, Input, OnChanges, OnDestroy, ViewChild } from '@angular/core';\r\nimport { ModeAction, ModeService } from 'src/app/shared/services/mode.service';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { withManagementAdditions, ManagementAdditions } from '../../helpers/group-management';\r\nimport { map } from 'rxjs/operators';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\nimport { ReplaySubject, combineLatest } from 'rxjs';\r\nimport { GroupNavTreeService } from '../../../../core/services/navigation/group-nav-tree.service';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-header',\r\n  templateUrl: './group-header.component.html',\r\n  styleUrls: [ './group-header.component.scss' ],\r\n})\r\nexport class GroupHeaderComponent implements OnChanges, OnDestroy {\r\n  @Input() groupData?: GroupData;\r\n\r\n  @ViewChild('op') op?: OverlayPanel;\r\n\r\n  private readonly group$ = new ReplaySubject<Group>(1);\r\n\r\n  groupWithManagement?: Group & ManagementAdditions;\r\n  isCurrentGroupWatched$ = combineLatest([ this.groupWatchingService.watchedGroup$, this.group$ ]).pipe(\r\n    map(([ watchedGroup, group ]) => !!(watchedGroup && watchedGroup.route.id === group.id)),\r\n  );\r\n\r\n  navigationNeighbors$ = this.groupNavTreeService.navigationNeighbors$;\r\n\r\n  constructor(\r\n    private modeService: ModeService,\r\n    private groupWatchingService: GroupWatchingService,\r\n    private groupNavTreeService: GroupNavTreeService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    this.groupWithManagement = this.groupData?.group ? withManagementAdditions(this.groupData.group) : undefined;\r\n\r\n    if (this.groupData) {\r\n      this.group$.next(this.groupData.group);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.group$.complete();\r\n  }\r\n\r\n  onEditButtonClicked(): void {\r\n    this.modeService.modeActions$.next(ModeAction.StartEditing);\r\n  }\r\n\r\n  onStartWatchButtonClicked(event: Event): void {\r\n    if (!this.groupData?.group) throw new Error(\"unexpected group not set in 'onWatchButtonClicked'\");\r\n    this.groupWatchingService.startGroupWatching(this.groupData.route, this.groupData.group);\r\n    this.openSuggestionOfActivitiesOverlayPanel(event);\r\n  }\r\n\r\n  onStopWatchButtonClicked(): void {\r\n    this.op?.hide();\r\n    this.groupWatchingService.stopWatching();\r\n  }\r\n\r\n  openSuggestionOfActivitiesOverlayPanel(event: Event): void {\r\n    this.op?.show(event);\r\n\r\n    // Align method needs to be called because top banner of observing group\r\n    // changes position of the page and as result we have a bug with wrong tooltip positioning.\r\n    // Async function/wrapper setTimeout - guarantees to call align method after position of page changed\r\n    setTimeout(() => {\r\n      this.op?.align();\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-loading size=\"medium\" *ngIf=\"state.isFetching && !state.data\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    [class.dark]=\"$any(state).error.status !== 403\"\r\n    [icon]=\"$any(state).error.status !== 403 ? 'fa fa-exclamation-triangle' : undefined\"\r\n    [showRefreshButton]=\"$any(state).error.status !== 403\"\r\n    (refresh)=\"refresh()\"\r\n  >\r\n    <span i18n *ngIf=\"$any(state).error.status === 403; else unknownError\">\r\n      You are not allowed to see activities of this user.\r\n    </span>\r\n    <ng-template #unknownError>\r\n      <span i18n>Unable to load the recent activity</span>\r\n    </ng-template>\r\n  </alg-error>\r\n\r\n  <ng-container *ngIf=\"state.data\">\r\n    <p-table class=\"alg-table\" [columns]=\"state.data.columns\" [value]=\"state.data.rowData\" [loading]=\"state.isFetching\">\r\n      <ng-template pTemplate=\"header\" let-rowData let-columns>\r\n        <tr>\r\n          <th [colSpan]=\"columns.length\">\r\n            <div class=\"header-container header-refresh\">\r\n              <p-button icon=\"pi pi-refresh\" (click)=\"refresh()\"></p-button>\r\n            </div>\r\n          </th>\r\n        </tr>\r\n        <tr *ngIf=\"rowData.length > 0\">\r\n          <ng-container *ngFor=\"let col of columns\">\r\n            <th>\r\n              <div class=\"header-container\">\r\n                {{ col.header }}\r\n              </div>\r\n            </th>\r\n          </ng-container>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template\r\n          pTemplate=\"body\"\r\n          let-rowData\r\n          let-columns=\"columns\"\r\n          let-index=\"rowIndex\"\r\n      >\r\n        <tr>\r\n          <td *ngFor=\"let col of columns\" (mouseleave)=\"onMouseLeave($event, col.field)\">\r\n            <ng-container [ngSwitch]=\"col.field\">\r\n              <ng-container *ngSwitchCase=\"'activityType'\">\r\n                {{ rowData.activityType | logActionDisplay : rowData.score }}\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'item.string.title'\">\r\n                <a\r\n                  class=\"alg-link\"\r\n                  [ngClass]=\"{'disabled': !rowData.item}\"\r\n                  [routerLink]=\"rowData.item | rawItemLink\"\r\n                  (mouseenter)=\"onMouseEnter($event, rowData.item.id, index)\"\r\n                  #contentRef\r\n                >\r\n                  {{ rowData.item.string.title }}\r\n                </a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'item.user'\">\r\n                <a class=\"alg-link\" [routerLink]=\"rowData.user | groupLink\">{{ rowData.user | userCaption }}</a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'at'\">\r\n                {{ rowData.at | date:'short' }}\r\n              </ng-container>\r\n              <ng-container *ngSwitchDefault>\r\n                {{ rowData[col.field] }}\r\n              </ng-container>\r\n            </ng-container>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"emptymessage\" let-columns>\r\n        <tr>\r\n          <td [attr.colspan]=\"columns.length\">\r\n            <span i18n>There is no progress to report for this group/user.</span>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n    </p-table>\r\n  </ng-container>\r\n</ng-container>\r\n\r\n<p-overlayPanel\r\n    styleClass=\"alg-path-suggestion-overlay\"\r\n    #op\r\n>\r\n  <ng-container *ngIf=\"op.overlayVisible\">\r\n    <alg-path-suggestion [itemId]=\"(showOverlay$ | async)?.itemId\" (mouseleave)=\"closeOverlay()\"></alg-path-suggestion>\r\n  </ng-container>\r\n</p-overlayPanel>\r\n","import { Component, ElementRef, Input, OnChanges, OnDestroy, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { BehaviorSubject, debounceTime, merge, Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, shareReplay, switchMap } from 'rxjs/operators';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { ActivityLog, ActivityLogService } from '../../../../shared/http-services/activity-log.service';\r\nimport { OverlayPanel } from 'primeng/overlaypanel';\r\nimport { canCloseOverlay } from '../../../../shared/helpers/overlay';\r\n\r\ninterface Column {\r\n  field: string,\r\n  header: string,\r\n}\r\n\r\ninterface Data {\r\n  columns: Column[],\r\n  rowData: ActivityLog[],\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-group-log-view',\r\n  templateUrl: './group-log-view.component.html',\r\n  styleUrls: [ './group-log-view.component.scss' ],\r\n})\r\nexport class GroupLogViewComponent implements OnChanges, OnDestroy {\r\n\r\n  @Input() groupId?: string;\r\n  @Input() showUserColumn = true;\r\n\r\n  @ViewChild('op') op?: OverlayPanel;\r\n  @ViewChildren('contentRef') contentRef?: QueryList<ElementRef<HTMLElement>>;\r\n\r\n  private readonly groupId$ = new ReplaySubject<string | undefined>(1);\r\n  private readonly refresh$ = new Subject<void>();\r\n  readonly state$ = this.groupId$.pipe(\r\n    switchMap((groupId: string | undefined) => this.getData$(groupId)),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n  private readonly showOverlaySubject$ = new BehaviorSubject<{ event: Event, itemId: string, target: HTMLElement }|undefined>(undefined);\r\n  showOverlay$ = merge(\r\n    this.showOverlaySubject$.pipe(debounceTime(750)),\r\n    this.showOverlaySubject$.pipe(filter(value => !value)), // this allows to close the overlay immediately and not after debounce delay\r\n  ).pipe(distinctUntilChanged(), shareReplay(1));\r\n\r\n  private readonly showOverlaySubscription = this.showOverlay$.subscribe(data => {\r\n    data ? this.op?.toggle(data.event, data.target) : this.op?.hide();\r\n  });\r\n\r\n  constructor(\r\n    private activityLogService: ActivityLogService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    this.groupId$.next(this.groupId);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.groupId$.complete();\r\n    this.refresh$.complete();\r\n    this.showOverlaySubject$.complete();\r\n    this.showOverlaySubscription.unsubscribe();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  private getData$(groupId?: string): Observable<Data> {\r\n    return this.activityLogService.getAllActivityLog(groupId).pipe(\r\n      map((data: ActivityLog[]) => ({\r\n        columns: this.getLogColumns(),\r\n        rowData: data\r\n      }))\r\n    );\r\n  }\r\n\r\n  private getLogColumns(): Column[] {\r\n    const columns = [\r\n      {\r\n        field: 'activityType',\r\n        header: $localize`Action`,\r\n      },\r\n      {\r\n        field: 'item.string.title',\r\n        header: $localize`Content`,\r\n      },\r\n      {\r\n        field: 'item.user',\r\n        header: $localize`:User column label:User`,\r\n        disabled: !this.showUserColumn,\r\n      },\r\n      {\r\n        field: 'at',\r\n        header: $localize`Time`,\r\n      }\r\n    ];\r\n\r\n    return columns.filter(col => !col.disabled).map(col => ({\r\n      field: col.field,\r\n      header: col.header,\r\n    }));\r\n  }\r\n\r\n  onMouseEnter(event: Event, itemId: string, index: number): void {\r\n    const targetRef = this.contentRef?.get(index);\r\n    if (!targetRef) {\r\n      throw new Error('Unexpected: Target is not found');\r\n    }\r\n    this.showOverlaySubject$.next({ event, itemId, target: targetRef.nativeElement });\r\n  }\r\n\r\n  onMouseLeave(event: MouseEvent, field: string): void {\r\n    if (field === 'item.string.title' && canCloseOverlay(event)) {\r\n      this.closeOverlay();\r\n    }\r\n  }\r\n\r\n  closeOverlay(): void {\r\n    this.showOverlaySubject$.next(undefined);\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"group\">\r\n  <p>\r\n    <ng-container *ngIf=\"group.isMembershipLocked; else allow\" i18n>\r\n      You are currently not allowed to leave this group.\r\n    </ng-container>\r\n    <ng-template #allow>\r\n      <ng-container i18n>\r\n        You can freely leave this group. Note that you may lose access to content if this group was granting some permissions to its members.\r\n      </ng-container>\r\n    </ng-template>\r\n  </p>\r\n\r\n  <div class=\"button\">\r\n    <p-button\r\n      styleClass=\"alg-button p-button-rounded-full\"\r\n      icon=\"fa fa-times\"\r\n      i18n-label label=\"Leave this group\"\r\n      (onClick)=\"leaveGroup()\"\r\n      [disabled]=\"group.isMembershipLocked\"\r\n    ></p-button>\r\n  </div>\r\n</ng-container>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GroupLeaveService } from '../../../../core/http-services/group-leave.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-leave',\r\n  templateUrl: './group-leave.component.html',\r\n  styleUrls: [ './group-leave.component.scss' ],\r\n})\r\nexport class GroupLeaveComponent {\r\n  @Output() leave = new EventEmitter<void>();\r\n\r\n  @Input() group?: Group;\r\n\r\n  constructor(\r\n    private groupLeaveService: GroupLeaveService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {\r\n  }\r\n\r\n  leaveGroup(): void {\r\n    if (!this.group) {\r\n      throw new Error('Unexpected: missed group');\r\n    }\r\n\r\n    this.groupLeaveService.leave(this.group.id).subscribe({\r\n      next: () => {\r\n        this.actionFeedbackService.success($localize`You've left group`);\r\n        this.leave.emit();\r\n      },\r\n      error: err => {\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      },\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"group\">\r\n  <alg-section icon=\"fa fa-users\" i18n-label label=\"Presentation\">\r\n    <p *ngIf=\"group.description ; else noDesc\">{{ group.description }}</p>\r\n    <ng-template #noDesc i18n>This group has no description</ng-template>\r\n  </alg-section>\r\n\r\n  <alg-section icon=\"fa fa-chart-line\" i18n-label label=\"Progress\" *ngIf=\"group.currentUserCanWatchMembers\">\r\n    <alg-group-log-view [groupId]=\"group.id\"></alg-group-log-view>\r\n  </alg-section>\r\n\r\n  <alg-section icon=\"fa fa-sign-out-alt\" i18n-label label=\"Leave the group?\" *ngIf=\"group.currentUserMembership !== 'none'\">\r\n    <alg-group-leave [group]=\"group\" (leave)=\"onLeave()\"></alg-group-leave>\r\n  </alg-section>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'alg-group-overview',\r\n  templateUrl: './group-overview.component.html',\r\n  styleUrls: [ './group-overview.component.scss' ],\r\n})\r\nexport class GroupOverviewComponent {\r\n  @Output() groupRefreshRequired = new EventEmitter<void>();\r\n  @Output() leftGroup = new EventEmitter<void>();\r\n\r\n  @Input() group?: Group;\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  onLeave(): void {\r\n    if (this.group?.isPublic) {\r\n      this.groupRefreshRequired.emit();\r\n      return;\r\n    }\r\n    this.leftGroup.emit();\r\n    void this.router.navigate([ '/groups/mine' ]);\r\n  }\r\n\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ensureDefined } from 'src/app/shared/helpers/assert';\r\n\r\nexport enum TypeFilter {\r\n  Groups = 'groups',\r\n  Sessions = 'sessions',\r\n  Teams = 'teams',\r\n  Users = 'users',\r\n}\r\nexport interface Filter {\r\n  directChildren: boolean,\r\n  type: TypeFilter,\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-group-composition-filter',\r\n  templateUrl: './group-composition-filter.component.html',\r\n  styleUrls: [ './group-composition-filter.component.scss' ]\r\n})\r\nexport class GroupCompositionFilterComponent implements OnInit{\r\n\r\n  @Input() defaultValue?: Filter;\r\n\r\n  @Output() change = new EventEmitter<Filter>();\r\n\r\n  value: Filter = { type: TypeFilter.Users, directChildren: true };\r\n\r\n  selectedChildrenFilter = 0;\r\n  selectedTypeFilter = 0;\r\n\r\n  readonly childrenFilters: { label:string, value: boolean }[] = [\r\n    {\r\n      label: $localize`Direct Children Only`,\r\n      value: true,\r\n    },\r\n    {\r\n      label: $localize`All Descendants`,\r\n      value: false,\r\n    },\r\n  ];\r\n\r\n  readonly allDescendantsTypeFilters: { icon: string, label: string, value: TypeFilter }[] = [\r\n    {\r\n      icon: 'fa fa-users',\r\n      label: $localize`teams`,\r\n      value: TypeFilter.Teams\r\n    },\r\n    {\r\n      icon: 'fa fa-user',\r\n      label: $localize`users`,\r\n      value: TypeFilter.Users\r\n    },\r\n  ];\r\n\r\n  readonly directChildrenTypeFilters: { icon: string, label: string, value: TypeFilter }[] = [\r\n    {\r\n      icon: 'fa fa-users',\r\n      label: $localize`sub-groups`,\r\n      value: TypeFilter.Groups\r\n    },\r\n    {\r\n      icon: 'fa fa-calendar',\r\n      label: $localize`sessions`,\r\n      value: TypeFilter.Sessions\r\n    },\r\n    {\r\n      icon: 'fa fa-users',\r\n      label: $localize`teams`,\r\n      value: TypeFilter.Teams\r\n    },\r\n    {\r\n      icon: 'fa fa-user',\r\n      label: $localize`users`,\r\n      value: TypeFilter.Users\r\n    },\r\n  ];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    if (this.defaultValue) {\r\n      this.setFilter(this.defaultValue);\r\n    }\r\n  }\r\n\r\n  public setFilter(filter: Filter): void {\r\n    this.value = filter;\r\n    this.selectedChildrenFilter = this.childrenFilters.findIndex(childrenFilter => childrenFilter.value === this.value.directChildren);\r\n    const typeFilters = this.value.directChildren ? this.directChildrenTypeFilters : this.allDescendantsTypeFilters;\r\n    this.selectedTypeFilter = Math.max(0, typeFilters.findIndex(typeFilter => typeFilter.value === this.value.type));\r\n  }\r\n\r\n  onTypeFilterChanged(index: number): void {\r\n    const typeFilters = this.value.directChildren ? this.directChildrenTypeFilters : this.allDescendantsTypeFilters;\r\n    this.selectedTypeFilter = index;\r\n    this.value.type = ensureDefined(typeFilters[index]).value;\r\n    this.change.emit(this.value);\r\n  }\r\n\r\n  onChildrenFilterChanged(index: number): void {\r\n    this.value.directChildren = ensureDefined(this.childrenFilters[index]).value;\r\n    this.selectedChildrenFilter = index;\r\n\r\n    const typeFilters = this.value.directChildren ? this.directChildrenTypeFilters : this.allDescendantsTypeFilters;\r\n    this.selectedTypeFilter = typeFilters.findIndex(typeFilter => typeFilter.value ===\r\n      (this.value.type === 'teams' ? 'teams' : 'users'));\r\n    this.value.type = ensureDefined(typeFilters[this.selectedTypeFilter]).value;\r\n\r\n    this.change.emit(this.value);\r\n  }\r\n}\r\n","<div class=\"selection-tool\">\r\n  <alg-selection style=\"margin: 10px;\"\r\n    [items]=\"childrenFilters\"\r\n    [selected]=\"selectedChildrenFilter\"\r\n    (change)=\"onChildrenFilterChanged($event)\"\r\n  ></alg-selection>\r\n  <alg-selection\r\n    [items]=\"value.directChildren ? directChildrenTypeFilters : allDescendantsTypeFilters\"\r\n    [selected]=\"selectedTypeFilter\"\r\n    type=\"square\"\r\n    (change)=\"onTypeFilterChanged($event)\"\r\n  ></alg-selection>\r\n</div>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-group-no-permission',\r\n  templateUrl: './group-no-permission.component.html',\r\n  styleUrls: [ './group-no-permission.component.scss' ]\r\n})\r\nexport class GroupNoPermissionComponent {\r\n\r\n}\r\n","<p class=\"error alg-error-text\" i18n>You are not allowed to see this page.</p>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { SimpleActionResponse, assertSuccess } from 'src/app/shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupActionsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  updateGroup(id: string, changes: object): Observable<void> {\r\n    return this.http\r\n      .put<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${id}`, changes)\r\n      .pipe(\r\n        map(assertSuccess)\r\n      );\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { SimpleActionResponse, assertSuccess } from 'src/app/shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\nexport interface NewCodeSuccessResponse {\r\n  code: string,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CodeActionsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createNewCode(id: string): Observable<string> {\r\n    return this.http\r\n      .post<NewCodeSuccessResponse|SimpleActionResponse>(`${appConfig.apiUrl}/groups/${id}/code`, null, {})\r\n      .pipe(\r\n        map(resp => {\r\n          const code = (resp as NewCodeSuccessResponse).code;\r\n          if (!code) throw new Error('The backend has returned an error (no code)');\r\n          return code;\r\n        })\r\n      );\r\n  }\r\n\r\n  removeCode(id: string): Observable<void> {\r\n    return this.http\r\n      .delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${id}/code`)\r\n      .pipe(\r\n        map(assertSuccess),\r\n      );\r\n  }\r\n\r\n}\r\n","<div class=\"code-generator\">\r\n  <span class=\"code\" [ngClass]=\"{'no-button': !showRefresh && !showRemove}\">{{code}}</span>\r\n  <span\r\n    *ngIf=\"showRefresh\"\r\n    class=\"refresh\"\r\n    [ngClass]=\"{'no-remove': !showRemove}\"\r\n    (click)=\"refreshCode()\"\r\n    i18n-pTooltip pTooltip=\"Generate a new code and reset expiration\"\r\n    tooltipPosition=\"top\"\r\n    tooltipEvent=\"hover\"\r\n  >\r\n    <i class=\"fa fa-redo\"></i>\r\n  </span>\r\n  <span\r\n    *ngIf=\"showRemove\"\r\n    class=\"remove\"\r\n    (click)=\"removeCode()\"\r\n    i18n-pTooltip pTooltip=\"Disable code access\"\r\n    tooltipPosition=\"top\"\r\n    tooltipEvent=\"hover\"\r\n  >\r\n    <i class=\"fa fa-times \"></i>\r\n  </span>\r\n</div>\r\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'alg-code-token',\r\n  templateUrl: './code-token.component.html',\r\n  styleUrls: [ './code-token.component.scss' ],\r\n})\r\nexport class CodeTokenComponent {\r\n  @Input() showRefresh = true;\r\n  @Input() showRemove = false;\r\n  @Input() code = '...';\r\n\r\n  @Output() refresh = new EventEmitter<void>();\r\n  @Output() remove = new EventEmitter<void>();\r\n\r\n  refreshCode(): void {\r\n    this.refresh.emit();\r\n  }\r\n\r\n  removeCode(): void {\r\n    this.remove.emit();\r\n  }\r\n}\r\n","<div *ngIf=\"processing\" class=\"block-ui\"></div>\r\n<alg-section-paragraph\r\n  icon=\"fa fa-user-plus\"\r\n  i18n-label label=\"Let user join using a code\"\r\n  [collapsible]=\"true\"\r\n>\r\n  <div class=\"invitation-code\">\r\n    <span class=\"content-title\" i18n>Let users access this group using a password you send them.</span>\r\n\r\n    <div class=\"code-state\" *ngIf=\"codeInfo\">\r\n      <span class=\"label\" *ngIf=\"codeInfo.hasCodeNotSet\" i18n>There is currently no code set.</span>\r\n      <span class=\"label\" *ngIf=\"codeInfo.hasCodeUnused\" i18n>This code has not been used yet (or usage resetted).</span>\r\n      <span class=\"label\" *ngIf=\"codeInfo.hasUnexpiringCode\" i18n>This code can be used multiple times without expiring.</span>\r\n      <ng-container *ngIf=\"codeInfo.hasCodeInUse && codeInfo.durationSinceFirstCodeUse && codeInfo.durationBeforeCodeExpiration\">\r\n        <span class=\"label green\" i18n *ngIf=\"codeInfo.durationSinceFirstCodeUse.ms > 0; else disabledUntil\">\r\n          This code has been activated {{ codeInfo.durationSinceFirstCodeUse | toMin | number:'1.0-0' }} minutes ago,\r\n          it will be disabled in {{ codeInfo.durationBeforeCodeExpiration | toMin | number:'1.0-0' }} minutes.\r\n        </span>\r\n        <ng-template #disabledUntil>\r\n          <span class=\"label green\" i18n>This code will be disabled in {{ codeInfo.durationBeforeCodeExpiration | toMin | number:'1.0-0' }} minutes.</span>\r\n        </ng-template>\r\n      </ng-container>\r\n      <span class=\"label red\" *ngIf=\"!codeInfo.hasCodeNotSet && codeInfo.hasCodeExpired\" i18n>\r\n        This code has expired on {{ codeInfo.codeExpiration | date:'medium' }}\r\n      </span>\r\n      <p-button\r\n        i18n-label label=\"Generate a code\"\r\n        icon=\"fa fa-plus\"\r\n        styleClass=\"alg-button p-button-rounded\"\r\n        (onClick)=\"generateNewCode()\"\r\n        [disabled]=\"processing\"\r\n        *ngIf=\"codeInfo.hasCodeNotSet\"\r\n      ></p-button>\r\n    </div>\r\n\r\n    <div class=\"code-info\" *ngIf=\"group && group.code\">\r\n      <div class=\"code-show\">\r\n        <span class=\"label\" i18n>Code</span>\r\n        <alg-code-token\r\n          [code]=\"group.code\"\r\n          [showRefresh]=\"true\"\r\n          [showRemove]=\"true\"\r\n          (refresh)=\"generateNewCode()\"\r\n          (remove)=\"removeCode()\"\r\n        ></alg-code-token>\r\n      </div>\r\n      <div class=\"validity-selector\">\r\n        <span class=\"label\" i18n>Validity</span>\r\n        <alg-selection\r\n          [items]=\"codeLifetimeOptions\"\r\n          [selected]=\"selectedCodeLifetimeOption\"\r\n          (change)=\"changeCodeLifetime($event)\"\r\n        ></alg-selection>\r\n\r\n        <div class=\"duration-form-group\" *ngIf=\"selectedCodeLifetimeOption === customCodeLifetimeOption\">\r\n          <alg-duration\r\n            class=\"alg-duration\"\r\n            ngDefaultControl\r\n            layout=\"DHM\"\r\n            [(ngModel)]=\"codeLifetimeControlValue\"\r\n            #control=\"ngModel\"\r\n            required\r\n          ></alg-duration>\r\n          <p-button\r\n            icon=\"fa fa-check\"\r\n            styleClass=\"alg-button submit-duration-button\"\r\n            (onClick)=\"codeLifetimeControlValue && submitCodeLifetime(codeLifetimeControlValue.ms)\"\r\n            [disabled]=\"processing || !codeLifetimeControlValue || !control.dirty || codeLifetimeControlValue.ms === group.codeLifetime?.ms\"\r\n            [pTooltip]=\"durationTooltip\"\r\n            tooltipPosition=\"right\"\r\n            tooltipEvent=\"hover\"\r\n          ></p-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n</alg-section-paragraph>\r\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { Duration } from '../../../../shared/helpers/duration';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { codeInfo, CodeInfo } from '../../helpers/group-code';\r\nimport { GroupActionsService } from '../../http-services/group-actions.service';\r\nimport { CodeActionsService } from '../../http-services/code-actions.service';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { of } from 'rxjs';\r\nimport { CodeLifetime } from '../../helpers/code-lifetime';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'alg-group-join-by-code',\r\n  templateUrl: './group-join-by-code.component.html',\r\n  styleUrls: [ './group-join-by-code.component.scss' ],\r\n})\r\n\r\nexport class GroupJoinByCodeComponent implements OnChanges {\r\n\r\n  @Input() group?: Group;\r\n  @Output() refreshRequired = new EventEmitter<void>();\r\n\r\n  codeInfo?: CodeInfo;\r\n  codeLifetimeControlValue?: Duration;\r\n  processing = false;\r\n\r\n  codeLifetimeOptions = [\r\n    {\r\n      label: $localize`Infinite`,\r\n      value: 'infinite',\r\n      tooltip: $localize`This code will never expire ` + $localize`:@@resetCurrentExpiration:(reset current expiration)`,\r\n    },\r\n    {\r\n      label: $localize`Usable once`,\r\n      value: 'usable_once',\r\n      tooltip: $localize`This code will be usable only once ` + $localize`:@@resetCurrentExpiration:(reset current expiration)`,\r\n    },\r\n    {\r\n      label: $localize`Custom`,\r\n      value: 'custom',\r\n      tooltip: $localize`:@@expireDuration:This code will expire after the given duration ` +\r\n        $localize`:@@resetCurrentExpiration:(reset current expiration)`,\r\n    },\r\n  ];\r\n  customCodeLifetimeOption = this.codeLifetimeOptions.findIndex(({ value }) => value === 'custom');\r\n  selectedCodeLifetimeOption = 0;\r\n  durationTooltip = $localize`:@@expireDuration:This code will expire after the given duration ` +\r\n    $localize`:@@resetCurrentExpiration:(reset current expiration)`;\r\n\r\n  constructor(\r\n    private groupActionsService: GroupActionsService,\r\n    private codeActionsService: CodeActionsService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.group && !this.group) this.codeInfo = undefined;\r\n    if (changes.group && this.group) {\r\n      this.codeInfo = codeInfo(this.group);\r\n\r\n      const codeLifetimeHasChanged = (changes.group.previousValue as Group | undefined)?.codeLifetime?.valueInSeconds !==\r\n        (changes.group.currentValue as Group | undefined)?.codeLifetime?.valueInSeconds;\r\n\r\n      if (codeLifetimeHasChanged) {\r\n        this.codeLifetimeControlValue = this.group.codeLifetime?.asDuration;\r\n        this.selectedCodeLifetimeOption = this.getSelectedCodeLifetimeOption(this.group.codeLifetime);\r\n      }\r\n    }\r\n  }\r\n\r\n  /* events */\r\n\r\n  generateNewCode(): void {\r\n    if (!this.group) return;\r\n\r\n    // disable UI\r\n    this.processing = true;\r\n\r\n    const groupId = this.group.id;\r\n    const expiresAt = this.group.codeExpiresAt;\r\n    // call code refresh service, then group refresh data\r\n    this.codeActionsService.createNewCode(groupId)\r\n      .pipe(\r\n        switchMap(() =>\r\n        // if a code expiration was defined, reset it to null\r\n          (expiresAt === null ? of(undefined) : this.groupActionsService.updateGroup(groupId, { code_expires_at: null }))\r\n        ),\r\n      )\r\n      .subscribe({\r\n        next: () => {\r\n          this.actionFeedbackService.success($localize`A new code has been generated`);\r\n          this.processing = false;\r\n          this.refreshRequired.emit();\r\n        },\r\n        error: err => {\r\n          this.processing = false;\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        },\r\n      });\r\n  }\r\n\r\n  submitCodeLifetime(ms: number): void {\r\n    if (!this.group || !this.codeInfo) throw new Error('cannot submit new code lifetime when group is undefined');\r\n    if (this.codeInfo.hasCodeNotSet) throw new Error('cannot submit code lifetime when no code is set');\r\n    const newCodeLifetime = new CodeLifetime(ms);\r\n    if (this.group.codeLifetime?.valueInSeconds === newCodeLifetime.valueInSeconds) return;\r\n\r\n    // disable UI\r\n    this.processing = true;\r\n\r\n    // call code refresh service, then group refresh data\r\n    this.groupActionsService.updateGroup(this.group.id, {\r\n      code_lifetime: newCodeLifetime.valueInSeconds,\r\n      code_expires_at: null,\r\n    }).subscribe({\r\n      next: () => {\r\n        this.actionFeedbackService.success($localize`The validity has been changed`);\r\n        this.processing = false;\r\n        this.refreshRequired.emit();\r\n      },\r\n      error: err => {\r\n        this.processing = false;\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      },\r\n    });\r\n  }\r\n\r\n  removeCode(): void {\r\n    if (!this.group) throw new Error('cannot remove code when group is undefined');\r\n\r\n    // disable UI\r\n    this.processing = true;\r\n\r\n    const groupId = this.group.id;\r\n    const expiresAt = this.group.codeExpiresAt;\r\n    // call code refresh service, then group refresh data\r\n    this.codeActionsService.removeCode(groupId)\r\n      .pipe(\r\n        switchMap(() =>\r\n          // if a code expiration was defined, reset it to null\r\n          (expiresAt === null ? of(undefined) : this.groupActionsService.updateGroup(groupId, { code_expires_at: null }))\r\n        ),\r\n      )\r\n      .subscribe({\r\n        next: () => {\r\n          this.actionFeedbackService.success($localize`Users will not be able to join with the former code.`);\r\n          this.processing = false;\r\n          this.refreshRequired.emit();\r\n        },\r\n        error: err => {\r\n          this.processing = false;\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        },\r\n      });\r\n  }\r\n\r\n  changeCodeLifetime(selected: number): void {\r\n    const optionValue = this.codeLifetimeOptions[selected]?.value;\r\n    if (optionValue === 'infinite') this.submitCodeLifetime(CodeLifetime.infiniteValue);\r\n    if (optionValue === 'usable_once') this.submitCodeLifetime(CodeLifetime.usableOnceValue);\r\n\r\n    this.selectedCodeLifetimeOption = selected;\r\n  }\r\n\r\n  private getSelectedCodeLifetimeOption(codeLifetime?: CodeLifetime): number {\r\n    if (codeLifetime?.isUsableOnce) return this.codeLifetimeOptions.findIndex(({ value }) => value === 'usable_once');\r\n    if (codeLifetime?.isInfinite) return this.codeLifetimeOptions.findIndex(({ value }) => value === 'infinite');\r\n    return this.codeLifetimeOptions.findIndex(({ value }) => value === 'custom');\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\n\r\nexport enum InvitationResult {\r\n  Success,\r\n  Error,\r\n  AlreadyInvited,\r\n  NotFound,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CreateGroupInvitationsService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createInvitations(\r\n    groupId: string,\r\n    logins : string[]\r\n  ) : Observable<Map<string, InvitationResult>> {\r\n    return this.http\r\n      .post<ActionResponse<Object>>(\r\n        `${appConfig.apiUrl}/groups/${groupId}/invitations`,\r\n        { logins: logins }, {})\r\n      .pipe(\r\n        map(successData),\r\n        map(function (data: Object): Map<string, InvitationResult> {\r\n          return new Map<string, InvitationResult>(\r\n            Object.entries(data).map(\r\n              ([ key, value ]) => {\r\n                switch (value) {\r\n                  case 'success':\r\n                    return [ key, InvitationResult.Success ];\r\n                  case 'unchanged':\r\n                    return [ key, InvitationResult.AlreadyInvited ];\r\n                  case 'not_found':\r\n                    return [ key, InvitationResult.NotFound ];\r\n                  case 'cycle':\r\n                  case 'invalid':\r\n                    return [ key, InvitationResult.Error ];\r\n                  default:\r\n                    throw new Error(`Invitation of user ${key} returned an unexpected result (${JSON.stringify(value)})`);\r\n                }\r\n              }));\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Component, OnChanges, Input, SimpleChanges } from '@angular/core';\r\nimport { Message } from 'primeng/api';\r\n\r\n@Component({\r\n  selector: 'alg-message',\r\n  templateUrl: './message.component.html',\r\n  styleUrls: [ './message.component.scss' ]\r\n})\r\nexport class MessageComponent implements OnChanges {\r\n\r\n  @Input() type: 'success' | 'info' | 'error' = 'info';\r\n  @Input() summary?: string;\r\n  @Input() detail = '';\r\n  @Input() closable = true;\r\n\r\n  msgs : Message[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    this.msgs = [{\r\n      severity: this.type,\r\n      summary: this.summary,\r\n      detail: this.detail\r\n    }];\r\n  }\r\n}\r\n","<p-messages styleClass=\"alg-messages\" [value]=\"msgs\" [closable]=\"closable\"></p-messages>\r\n","<alg-section-paragraph icon=\"fa fa-user-plus\" i18n-label label=\"Invite users\" [collapsible]=\"true\">\r\n  <span i18n>Add users name list, separated by commas.</span>\r\n  <div class=\"invite-users\">\r\n    <alg-textarea [parentForm]=\"inviteForm\" inputName=\"logins\" icon=\"show\" i18n-placeholder placeholder=\"login_1, login_2...\">\r\n    </alg-textarea>\r\n\r\n    <alg-message *ngIf=\"state === 'too_many'\" type=\"error\" i18n-detail detail=\"You cannot invite more than 100 users at once\"\r\n      [closable]=\"false\">\r\n    </alg-message>\r\n\r\n    <p-button\r\n      i18n-label label=\"Invite\"\r\n      styleClass=\"p-button-rounded\"\r\n      (onClick)=\"onInviteClicked()\"\r\n      [disabled]=\"state !== 'ready'\"\r\n    ></p-button>\r\n\r\n    <alg-message *ngFor=\"let message of messages\" [type]=\"message.type\" [detail]=\"message.detail\"\r\n      summary={{message.summary}}></alg-message>\r\n\r\n  </div>\r\n</alg-section-paragraph>\r\n","import { Component, Input, Output, EventEmitter, OnDestroy, OnInit } from '@angular/core';\r\nimport { CreateGroupInvitationsService, InvitationResult } from '../../http-services/create-group-invitations.service';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { UntypedFormBuilder } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\ninterface Message\r\n{\r\n  type: 'success' | 'info' | 'error',\r\n  summary?: string,\r\n  detail: string,\r\n}\r\n\r\ntype GroupInviteState = 'empty'|'too_many'|'loading'|'ready';\r\n\r\n@Component({\r\n  selector: 'alg-group-invite-users',\r\n  templateUrl: './group-invite-users.component.html',\r\n  styleUrls: [ './group-invite-users.component.scss' ],\r\n})\r\nexport class GroupInviteUsersComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() group?: Group;\r\n  @Output() refreshRequired = new EventEmitter<void>();\r\n\r\n  inviteForm = this.formBuilder.group({ logins: '' });\r\n  state: GroupInviteState = 'empty';\r\n\r\n  messages: Message[] = [];\r\n  subscription?: Subscription;\r\n\r\n  constructor(\r\n    private createGroupInvitationsService: CreateGroupInvitationsService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private formBuilder: UntypedFormBuilder,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = this.inviteForm.get('logins')?.valueChanges.subscribe((change: string) => this.loginListChanged(change));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription?.unsubscribe();\r\n  }\r\n\r\n  setState(newState: GroupInviteState): void {\r\n    if (this.state === newState) return;\r\n    if (this.state === 'loading') this.inviteForm.enable(); // enable the form only if the previous state was disabled\r\n    if (newState === 'loading') this.inviteForm.disable();\r\n    this.state = newState;\r\n  }\r\n\r\n  loginListChanged(newValue: string): void {\r\n    if (this.state === 'loading') return;\r\n    this.setState('ready');\r\n\r\n    const logins = newValue.split(',').filter(login => login.length > 0);\r\n\r\n    if (logins.length === 0) {\r\n      this.setState('empty');\r\n    } else if (logins.length >= 100) {\r\n      this.setState('too_many');\r\n    }\r\n  }\r\n\r\n  private displayResponse(response: Map<string, InvitationResult>): void {\r\n\r\n    const successInvites: string[] = Array.from(response.entries()).filter(e => e[1] === InvitationResult.Success).map(e => e[0]);\r\n    const alreadyInvited: string[] = Array.from(response.entries()).filter(e => e[1] === InvitationResult.AlreadyInvited).map(e => e[0]);\r\n    const notFoundUsers: string[] = Array.from(response.entries()).filter(e => e[1] === InvitationResult.NotFound).map(e => e[0]);\r\n    const invalidInvites: string[] = Array.from(response.entries()).filter(e => e[1] === InvitationResult.Error).map(e => e[0]);\r\n\r\n    if (successInvites.length > 0)\r\n      this.messages.push({\r\n        type: 'success',\r\n        summary: $localize`${successInvites.length} user(s) invited successfully: `,\r\n        detail: `${successInvites.join(', ')}`,\r\n      });\r\n\r\n    if (alreadyInvited.length > 0)\r\n      this.messages.push({\r\n        type: 'info',\r\n        summary: $localize`${alreadyInvited.length} user(s) have already been invited: `,\r\n        detail: `${alreadyInvited.join(', ')}`,\r\n      });\r\n\r\n    if (notFoundUsers.length > 0)\r\n      this.messages.push({\r\n        type: 'error',\r\n        summary: $localize`${notFoundUsers.length} user login(s) not found: `,\r\n        detail: `${notFoundUsers.join(', ')}`,\r\n      });\r\n\r\n    if (invalidInvites.length > 0)\r\n      this.messages.push({\r\n        type: 'error',\r\n        summary: $localize`${invalidInvites.length} user login(s) could not be invited: `,\r\n        detail: `${invalidInvites.join(', ')}`,\r\n      });\r\n  }\r\n\r\n  /* events */\r\n  onInviteClicked(): void {\r\n    if (!this.group || this.state !== 'ready') return;\r\n\r\n    // clear the messages\r\n    this.messages = [];\r\n\r\n    // remove empty logins and duplicates\r\n    const control = this.inviteForm.get('logins');\r\n    if (!control) return;\r\n\r\n    const logins = (control.value as string).split(',')\r\n      .map(login => login.trim())\r\n      .filter(function (login, index, self) {\r\n        return self.indexOf(login) === index && login !== '';\r\n      });\r\n\r\n    // disable UI\r\n    this.setState('loading');\r\n\r\n    this.createGroupInvitationsService.createInvitations(this.group.id, logins).subscribe({\r\n      next: res => {\r\n        this.displayResponse(res);\r\n\r\n        // Clear the textarea\r\n        control.setValue('');\r\n\r\n        this.setState('empty');\r\n      },\r\n      error: err => {\r\n        this.setState('ready');\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ActionResponse, successData } from 'src/app/shared/http-services/action-response';\r\n\r\ntype Status = 'invalid'|'success'|'unchanged'|'not_found';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupUsersService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  removeUsers(groupId: string, usersId: string[]): Observable<Map<string, Status>> {\r\n    const httpParams = new HttpParams().set('user_ids', usersId.join(','));\r\n    return this.http.delete<ActionResponse<{[user: string]: Status}>>(`${appConfig.apiUrl}/groups/${groupId}/members`, {\r\n      params: httpParams\r\n    }).pipe(\r\n      map(successData),\r\n      map(data => new Map(Object.entries(data)))\r\n    );\r\n  }\r\n}\r\n\r\nexport function parseResults(data: Map<string, Status>): { countRequests: number, countSuccess: number } {\r\n  const res = {\r\n    countRequests: data.size,\r\n    countSuccess: Array.from(data.values())\r\n      .map<number>(state => ([ 'success', 'unchanged' ].includes(state) ? 1 : 0))\r\n      .reduce((acc, res) => acc + res, 0) };\r\n  return res;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { Result } from '../components/member-list/group-removal-response-handling';\r\n\r\nexport function parseResults(data: SimpleActionResponse[]): Result {\r\n  return {\r\n    countRequests: data.length,\r\n    countSuccess: data.filter(state => state.success).length,\r\n    errorText: data.some(state => !!state.error_text) ? $localize`The group(s) must be empty` : undefined,\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RemoveGroupService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  remove(id: string): Observable<SimpleActionResponse> {\r\n    return this.http.delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${id}`);\r\n  }\r\n\r\n  removeBatch(ids: string[]): Observable<Result> {\r\n    return forkJoin(\r\n      ids.map(id => this.remove(id).pipe(catchError(({ error }) => of(error))))\r\n    ).pipe(\r\n      map(parseResults),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { forkJoin, Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { parseResults } from './remove-group.service';\r\nimport { Result } from '../components/member-list/group-removal-response-handling';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RemoveSubgroupService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  remove(parentGroupId: string, childGroupId: string): Observable<SimpleActionResponse> {\r\n    return this.http.delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${parentGroupId}/relations/${childGroupId}`);\r\n  }\r\n\r\n  removeBatch(parentGroupId: string, ids: string[]): Observable<Result> {\r\n    return forkJoin(\r\n      ids.map(id => this.remove(parentGroupId, id).pipe(catchError(({ error }) => of(error))))\r\n    ).pipe(\r\n      map(parseResults)\r\n    );\r\n  }\r\n}\r\n","<alg-group-composition-filter #compositionFilter (change)=\"onFilterChange($event)\" [defaultValue]=\"defaultFilter\"></alg-group-composition-filter>\r\n<ng-container *ngIf=\"rows$ | async as state\">\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError; else noError\"\r\n    class=\"error dark\"\r\n    i18n-message message=\"Error while loading the group members\"\r\n    icon=\"fa fa-exclamation-triangle\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"fetchRows()\"\r\n  ></alg-error>\r\n\r\n  <ng-template #noError>\r\n    <p-table #table\r\n      class=\"alg-table --member-list\"\r\n      [columns]=\"columns\"\r\n      [value]=\"state?.data ?? []\"\r\n      [customSort]=\"true\"\r\n      sortMode=\"multiple\"\r\n      (sortFunction)=\"onCustomSort($event)\"\r\n      [loading]=\"(removalInProgress$ | async) || state.isFetching\"\r\n      [(selection)]=\"selection\"\r\n      selectionMode=\"multiple\"\r\n      dataKey=\"id\"\r\n    >\r\n      <ng-template pTemplate=\"header\" let-columns>\r\n        <tr *ngIf=\"state.data && state.data.length > 0\">\r\n          <th class=\"thin\" *ngIf=\"groupData?.group?.currentUserCanManage !== 'none'\"></th>\r\n          <ng-container *ngFor=\"let col of columns\">\r\n            <th [pSortableColumn]=\"col.field\" *ngIf=\"col.sortable\">\r\n              <div class=\"header-container\">\r\n                {{ col.header }}\r\n                <p-sortIcon [field]=\"col.field\"></p-sortIcon>\r\n              </div>\r\n            </th>\r\n            <th *ngIf=\"!col.sortable\">\r\n              <div class=\"header-container\">\r\n                {{ col.header }}\r\n              </div>\r\n            </th>\r\n          </ng-container>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template\r\n        pTemplate=\"body\"\r\n        let-rowData\r\n        let-columns=\"columns\"\r\n      >\r\n        <tr>\r\n          <td class=\"thin\" *ngIf=\"groupData?.group?.currentUserCanManage !== 'none'\">\r\n            <p-tableCheckbox class=\"p-chkbox\" [value]=\"rowData\"></p-tableCheckbox>\r\n          </td>\r\n          <td *ngFor=\"let col of columns\">\r\n            <ng-container [ngSwitch]=\"col.field\">\r\n              <ng-container *ngSwitchCase=\"'user.login'\">\r\n                <ng-container *ngIf=\"rowData.user\">\r\n                  <a\r\n                    class=\"alg-link\"\r\n                    [routerLink]=\"rowData.route | groupLink\"\r\n                  >\r\n                    {{ rowData.user | userCaption }}\r\n                  </a>\r\n                </ng-container>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'name'\">\r\n                <a\r\n                  class=\"alg-link\"\r\n                  [routerLink]=\"rowData.route | groupLink\"\r\n                >\r\n                  {{ rowData.name }}\r\n                </a>\r\n              </ng-container>\r\n              <ng-container *ngSwitchCase=\"'member_since'\">\r\n                <ng-container *ngIf=\"rowData.memberSince\">\r\n                  {{ rowData.memberSince | date:'short' }}\r\n                </ng-container>\r\n              </ng-container>\r\n              <ng-container *ngSwitchDefault>\r\n                {{ rowData[col.field] }}\r\n              </ng-container>\r\n            </ng-container>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"footer\">\r\n        <tr *ngIf=\"datapager.canLoadMore$ | async\">\r\n          <td colspan=\"3\">\r\n            <div class=\"text-center\">\r\n              <button\r\n                pButton\r\n                class=\"p-button-rounded\"\r\n                i18n-label label=\"Load more\"\r\n                (click)=\"fetchMoreRows()\"\r\n                [disabled]=\"state.isFetching\"\r\n              ></button>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"emptymessage\" let-columns>\r\n        <tr>\r\n          <td [attr.colspan]=\"columns.length\">\r\n            <p class=\"empty-message\" i18n>This list is empty. Check below the different ways to add members or sub-groups.</p>\r\n          </td>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate=\"summary\" *ngIf=\"groupData?.group?.currentUserCanManage !== 'none'\">\r\n        <div class=\"summary\">\r\n          <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\r\n          <span class=\"select-all\" (click)=\"onSelectAll(state.data ?? [])\" i18n>\r\n            Select all\r\n          </span>\r\n          <span class=\"filler\"></span>\r\n          <div class=\"summary-actions\">\r\n              <span (click)=\"onRemove($event)\" [class.disabled]=\"(removalInProgress$ | async) || !state.isReady || selection.length === 0\">\r\n              <span i18n>{{ currentFilter.type === 'users' ? 'Remove': 'Remove from group' }}</span>\r\n              <i class=\"fa fa-trash-alt\"></i>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </p-table>\r\n  </ng-template>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { ConfirmationService, SortEvent } from 'primeng/api';\r\nimport { Table } from 'primeng/table';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GetGroupDescendantsService } from 'src/app/shared/http-services/get-group-descendants.service';\r\nimport { groupRoute, rawGroupRoute, RawGroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { GetGroupChildrenService, GroupChild } from '../../http-services/get-group-children.service';\r\nimport { GetGroupMembersService, Member } from '../../http-services/get-group-members.service';\r\nimport { GroupUsersService, parseResults } from '../../http-services/group-users.service';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\nimport { Filter, GroupCompositionFilterComponent, TypeFilter } from '../group-composition-filter/group-composition-filter.component';\r\nimport { displayResponseToast } from './user-removal-response-handling';\r\nimport { displayGroupRemovalResponseToast } from './group-removal-response-handling';\r\nimport { RemoveSubgroupService } from '../../http-services/remove-subgroup.service';\r\nimport { RemoveGroupService } from '../../http-services/remove-group.service';\r\nimport { FetchState } from 'src/app/shared/helpers/state';\r\nimport { DataPager } from 'src/app/shared/helpers/data-pager';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nfunction getSelectedGroupChildCaptions(selection: GroupChild[]): string {\r\n  return selection.map(selected => selected.name).join(', ');\r\n}\r\n\r\ninterface Column {\r\n  sortable?: boolean,\r\n  field: string,\r\n  header: string,\r\n}\r\n\r\nconst usersColumns: Column[] = [\r\n  { field: 'user.login', header: $localize`Name`, sortable: true },\r\n  { field: 'member_since', header: $localize`Member Since`, sortable: true },\r\n];\r\n\r\nconst groupsColumns: Column[] = [\r\n  { field: 'name', header: $localize`Name`, sortable: true },\r\n  { field: 'type', header: $localize`Type` },\r\n  { field: 'userCount', header: $localize`User Count` },\r\n];\r\n\r\nconst nameUserCountColumns: Column[] = [\r\n  { field: 'name', header: $localize`Name`, sortable: true },\r\n  { field: 'userCount', header: $localize`User Count` },\r\n];\r\n\r\nconst descendantUsersColumns: Column[] = [\r\n  { field: 'user.login', header: $localize`Name` },\r\n  { field: 'parentGroups', header: $localize`Parent group(s)` },\r\n];\r\n\r\nconst descendantTeamsColumns: Column[] = [\r\n  { field: 'name', header: $localize`Name`, sortable: true },\r\n  { field: 'parentGroups', header: $localize`Parent group(s)` },\r\n  { field: 'members', header: $localize`Member(s)` },\r\n];\r\n\r\nconst membersLimit = 25;\r\n\r\ntype Row = (Member|GroupChild|{ login: string, parentGroups: string }|{ name: string, parentGroups: string, members: string }) &\r\n { route: RawGroupRoute };\r\n\r\n@Component({\r\n  selector: 'alg-member-list',\r\n  templateUrl: './member-list.component.html',\r\n  styleUrls: [ './member-list.component.scss' ]\r\n})\r\nexport class MemberListComponent implements OnChanges, OnDestroy {\r\n\r\n  @Input() groupData? : GroupData;\r\n  @Output() removedGroup = new EventEmitter<void>();\r\n\r\n  defaultFilter: Filter = { type: TypeFilter.Users, directChildren: true };\r\n\r\n  currentSort: string[] = [];\r\n  currentFilter: Filter = this.defaultFilter;\r\n\r\n  selection: (Member | (GroupChild & { isEmpty: boolean }))[] = [];\r\n\r\n  columns: Column[] = [];\r\n  datapager = new DataPager({\r\n    fetch: (pageSize, latestRow?: Row): Observable<Row[]> => this.getRows(pageSize, latestRow),\r\n    pageSize: membersLimit,\r\n    onLoadMoreError: (): void => {\r\n      this.actionFeedbackService.error($localize`Could not load more members, are you connected to the internet?`);\r\n    },\r\n  });\r\n  rows$: Observable<FetchState<Row[]>> = this.datapager.list$;\r\n\r\n  @ViewChild('table') private table?: Table;\r\n  @ViewChild('compositionFilter') private compositionFilter?: GroupCompositionFilterComponent;\r\n\r\n  removalInProgress$ = new ReplaySubject<boolean>();\r\n\r\n  constructor(\r\n    private getGroupMembersService: GetGroupMembersService,\r\n    private getGroupChildrenService: GetGroupChildrenService,\r\n    private getGroupDescendantsService: GetGroupDescendantsService,\r\n    private groupUsersService: GroupUsersService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private removeSubgroupService: RemoveSubgroupService,\r\n    private confirmationService: ConfirmationService,\r\n    private removeGroupService: RemoveGroupService,\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.removalInProgress$.complete();\r\n  }\r\n\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    if (!this.groupData) return;\r\n\r\n    this.currentFilter = { ...this.defaultFilter };\r\n    this.columns = this.getColumns(this.currentFilter);\r\n    this.currentSort = [];\r\n    this.table?.clear();\r\n    this.fetchRows();\r\n  }\r\n\r\n  fetchRows(): void {\r\n    this.datapager.reset();\r\n    this.datapager.load();\r\n  }\r\n\r\n  fetchMoreRows(): void {\r\n    this.datapager.load();\r\n  }\r\n\r\n  getRows(pageSize: number, latestRow?: Row): Observable<Row[]> {\r\n    if (!this.groupData) throw new Error('group data must be defined to fetch data');\r\n    const route = this.groupData.route;\r\n\r\n    switch (this.currentFilter.type) {\r\n      case TypeFilter.Groups:\r\n        return this.getGroupChildrenService.getGroupChildrenWithSubgroupCount(\r\n          route.id,\r\n          this.currentSort,\r\n          [],\r\n          [ 'Team', 'Session', 'User' ],\r\n        ).pipe(map(children => children.map(child => ({\r\n          ...child,\r\n          route: groupRoute(child, [ ...route.path, route.id ]),\r\n        }))));\r\n      case TypeFilter.Sessions:\r\n        return this.getGroupChildrenService.getGroupChildrenWithSubgroupCount(route.id, this.currentSort, [ 'Session' ])\r\n          .pipe(map(children => children.map(child => ({\r\n            ...child,\r\n            route: groupRoute(child, [ ...route.path, route.id ]),\r\n          }))));\r\n      case TypeFilter.Teams:\r\n        if (!this.currentFilter.directChildren) {\r\n          return this.getGroupDescendantsService.getTeamDescendants(route.id, this.currentSort)\r\n            .pipe(map(descendantTeams => descendantTeams.map(descendantTeam => ({\r\n              id: descendantTeam.id,\r\n              name: descendantTeam.name,\r\n              parentGroups: descendantTeam.parents.map(parent => parent.name).join(', '),\r\n              members: descendantTeam.members.map(member => member.login).join(', '),\r\n              route: rawGroupRoute({ id: descendantTeam.id, isUser: false }),\r\n            }))));\r\n        } else {\r\n          return this.getGroupChildrenService.getGroupChildrenWithSubgroupCount(route.id, this.currentSort, [ 'Team' ])\r\n            .pipe(map(children => children.map(child => ({\r\n              ...child,\r\n              route: groupRoute(child, [ ...route.path, route.id ]),\r\n            }))));\r\n        }\r\n      case TypeFilter.Users:\r\n        if (this.currentFilter.directChildren) {\r\n          return this.getGroupMembersService.getGroupMembers(\r\n            route.id,\r\n            this.currentSort,\r\n            membersLimit,\r\n            (latestRow as Member|undefined)?.id,\r\n          ).pipe(\r\n            map(members => members.map(member => ({\r\n              ...member,\r\n              route: groupRoute({ id: member.id, isUser: true }, [ ...route.path, route.id ]),\r\n            }))));\r\n        } else {\r\n          return this.getGroupDescendantsService.getUserDescendants(route.id, {\r\n            sort: this.currentSort,\r\n            limit: pageSize,\r\n            fromId: (latestRow as Member|undefined)?.id,\r\n          }).pipe(map(descendantUsers => descendantUsers.map(descendantUser => ({\r\n            id: descendantUser.id,\r\n            login: descendantUser.user.login,\r\n            user: descendantUser.user,\r\n            parentGroups: descendantUser.parents.map(parent => parent.name).join(', '),\r\n            route: rawGroupRoute({ id: descendantUser.id, isUser: true }),\r\n          }))));\r\n        }\r\n    }\r\n  }\r\n\r\n  onCustomSort(event: SortEvent): void {\r\n    if (!this.groupData) return;\r\n\r\n    const sortMeta = event.multiSortMeta?.map(meta => (meta.order === -1 ? `-${meta.field}` : meta.field));\r\n\r\n    if (sortMeta && JSON.stringify(sortMeta) !== JSON.stringify(this.currentSort)) {\r\n      this.currentSort = sortMeta;\r\n      this.fetchRows();\r\n    }\r\n  }\r\n\r\n  onFilterChange(filter: Filter): void {\r\n    if (!this.groupData) return;\r\n\r\n    if (filter !== this.currentFilter) {\r\n      this.currentFilter = { ...filter };\r\n      this.columns = this.getColumns(filter);\r\n      this.table?.clear();\r\n      this.currentSort = [];\r\n      this.fetchRows();\r\n    }\r\n  }\r\n\r\n  setFilter(filter: Filter): void {\r\n    this.compositionFilter?.setFilter(filter);\r\n    this.onFilterChange(filter);\r\n  }\r\n\r\n  onSelectAll(rows: Row[]): void {\r\n    if (this.selection.length === rows.length) {\r\n      this.selection = [];\r\n    } else {\r\n      this.selection = rows as (Member | (GroupChild & { isEmpty: boolean }))[];\r\n    }\r\n  }\r\n\r\n  unselectAll(): void {\r\n    this.selection = [];\r\n  }\r\n\r\n  removeUsers(groupId: string): void {\r\n    if (this.selection.length === 0) {\r\n      throw new Error('Unexpected: Missed selected members');\r\n    }\r\n\r\n    const selectedMemberIds = this.selection.map(member => member.id);\r\n\r\n    this.removalInProgress$.next(true);\r\n    this.groupUsersService.removeUsers(groupId, selectedMemberIds)\r\n      .subscribe({\r\n        next: result => {\r\n          displayResponseToast(this.actionFeedbackService, parseResults(result));\r\n          this.table?.clear();\r\n          this.unselectAll();\r\n          this.fetchRows();\r\n          this.removalInProgress$.next(false);\r\n        },\r\n        error: err => {\r\n          this.removalInProgress$.next(false);\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n  }\r\n\r\n  onRemoveGroup(event: Event): void {\r\n    this.confirmationService.confirm({\r\n      target: event.target || undefined,\r\n      key: 'commonPopup',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      message: $localize`Are you sure you want to permanently delete ${getSelectedGroupChildCaptions(this.selection as GroupChild[])}?\r\n       This operation cannot be undone.`,\r\n      acceptLabel: $localize`Yes`,\r\n      acceptIcon: 'fa fa-check',\r\n      rejectLabel: $localize`No`,\r\n      accept: () => this.removeGroupsOrSubgroups(),\r\n    });\r\n  }\r\n\r\n  onRemoveSubgroups(event: Event, groupId: string): void {\r\n    this.confirmationService.confirm({\r\n      target: event.target || undefined,\r\n      key: 'commonPopup',\r\n      icon: 'pi pi-exclamation-triangle',\r\n      message: $localize`By removing ${getSelectedGroupChildCaptions(this.selection as GroupChild[])} from the group, you may loose\r\n       manager access to them (if no explicit permission or through other parent group). Are you sure you want to proceed?`,\r\n      acceptLabel: $localize`Yes`,\r\n      acceptIcon: 'fa fa-check',\r\n      rejectLabel: $localize`No`,\r\n      accept: () => this.removeGroupsOrSubgroups(groupId),\r\n    });\r\n  }\r\n\r\n  removeGroupsOrSubgroups(groupId?: string): void {\r\n    if (this.selection.length === 0) {\r\n      throw new Error('Unexpected: Missed selected groups');\r\n    }\r\n\r\n    const selectedGroupIds = this.selection.map(group => group.id);\r\n\r\n    this.removalInProgress$.next(true);\r\n    const request$ = groupId ?\r\n      this.removeSubgroupService.removeBatch(groupId, selectedGroupIds) : this.removeGroupService.removeBatch(selectedGroupIds);\r\n\r\n    request$.subscribe({\r\n      next: response => {\r\n        displayGroupRemovalResponseToast(this.actionFeedbackService, response);\r\n        this.table?.clear();\r\n        this.unselectAll();\r\n        this.fetchRows();\r\n        this.removalInProgress$.next(false);\r\n        this.removedGroup.emit();\r\n      },\r\n      error: err => {\r\n        this.removalInProgress$.next(false);\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n  onRemove(event: Event): void {\r\n    if (this.selection.length === 0 || !this.groupData) {\r\n      throw new Error('Unexpected: Missed group data or selected models');\r\n    }\r\n\r\n    const groupId = this.groupData.group.id;\r\n\r\n    if (this.currentFilter.type === 'users') {\r\n      this.removeUsers(groupId);\r\n      return;\r\n    }\r\n\r\n    const isSubgroupsEmpty = !(this.selection as (GroupChild & { isEmpty: boolean })[]).some(g => !g.isEmpty);\r\n\r\n    if (!isSubgroupsEmpty) {\r\n      this.onRemoveSubgroups(event, groupId);\r\n      return;\r\n    }\r\n\r\n    this.confirmationService.confirm({\r\n      target: event.target || undefined,\r\n      key: 'commonPopup',\r\n      icon: 'pi pi-question-circle',\r\n      message: this.selection.length === 1 ?\r\n        $localize`Do you also want to delete the group?` :\r\n        $localize`These groups are all empty. Do you also want to delete them?`,\r\n      acceptLabel: $localize`Yes`,\r\n      acceptIcon: 'fa fa-check',\r\n      rejectLabel: $localize`No`,\r\n      accept: () => {\r\n        // ISSUE: https://github.com/primefaces/primeng/issues/10589\r\n        setTimeout(() => {\r\n          this.onRemoveGroup(event);\r\n        }, 250);\r\n      },\r\n      reject: () => {\r\n        setTimeout(() => {\r\n          this.onRemoveSubgroups(event, groupId);\r\n        }, 250);\r\n      }\r\n    });\r\n  }\r\n\r\n  private getColumns(filter: Filter): Column[] {\r\n    switch (filter.type) {\r\n      case TypeFilter.Groups: return groupsColumns;\r\n      case TypeFilter.Sessions: return nameUserCountColumns;\r\n      case TypeFilter.Teams: return this.currentFilter.directChildren ? nameUserCountColumns : descendantTeamsColumns;\r\n      case TypeFilter.Users: return this.currentFilter.directChildren ? usersColumns : descendantUsersColumns;\r\n    }\r\n  }\r\n}\r\n","import { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\n\r\nexport interface Result {\r\n  countRequests: number,\r\n  countSuccess: number,\r\n}\r\n\r\nexport function displayResponseToast(feedbackService: ActionFeedbackService, result: Result): void {\r\n  if (result.countSuccess === result.countRequests) {\r\n    feedbackService.success($localize`${result.countSuccess} user(s) have been removed`);\r\n  } else if (result.countSuccess === 0) {\r\n    feedbackService.error($localize`Unable to remove the selected user(s)`);\r\n  } else {\r\n    feedbackService.partial(\r\n      $localize`${result.countSuccess} user(s) have been removed, ${result.countRequests - result.countSuccess} could not be removed`\r\n    );\r\n  }\r\n}\r\n","import { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\n\r\nexport interface Result {\r\n  countRequests: number,\r\n  countSuccess: number,\r\n  errorText?: string,\r\n}\r\n\r\nexport function displayGroupRemovalResponseToast(feedbackService: ActionFeedbackService, result: Result): void {\r\n  if (result.countSuccess === result.countRequests) {\r\n    feedbackService.success($localize`${result.countSuccess} group(s) have been removed`);\r\n  } else if (result.countSuccess === 0) {\r\n    feedbackService.error($localize`Unable to remove the selected group(s). ` + `${result.errorText || ''}`);\r\n  } else {\r\n    feedbackService.partial(\r\n      $localize`${result.countSuccess} group(s) have been removed, ${result.countRequests - result.countSuccess} could\r\n       not be removed. ` + `${result.errorText || ''}`\r\n    );\r\n  }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\n\r\nconst groupInfoDecoder = D.struct({\r\n  id: D.string,\r\n  name: D.string,\r\n  description: D.nullable(D.string),\r\n  type: D.literal('Class', 'Team', 'Club', 'Friends', 'Other', 'User', 'Base', 'Session'),\r\n});\r\n\r\nexport type Group = D.TypeOf<typeof groupInfoDecoder>;\r\n\r\nexport interface GroupFound extends Group {\r\n  type: 'Class'|'Team'|'Club'|'Friends'|'Other',\r\n}\r\n\r\nfunction notBase(group: Group): group is GroupFound {\r\n  return group.type !== 'Base';\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchGroupService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  search(\r\n    searchString: string,\r\n    limit = 5,\r\n  ): Observable<GroupFound[]> {\r\n    const params = new HttpParams({ fromObject: { search: searchString, limit: limit.toString() } });\r\n    return this.http.get<Group[]>(\r\n      `${appConfig.apiUrl}/current-user/available-groups`,\r\n      { params: params },\r\n    ).pipe(\r\n      decodeSnakeCase(D.array(groupInfoDecoder)),\r\n      map(groups => groups.filter(notBase)),\r\n    );\r\n  }\r\n\r\n  searchPossibleSubgroups(\r\n    searchString: string,\r\n    limit = 5,\r\n  ): Observable<GroupFound[]> {\r\n    const params = new HttpParams({ fromObject: { search: searchString, limit: limit.toString() } });\r\n    return this.http.get<Group[]>(\r\n      `${appConfig.apiUrl}/groups/possible-subgroups`,\r\n      { params: params },\r\n    ).pipe(\r\n      decodeSnakeCase(D.array(groupInfoDecoder)),\r\n      map(groups => groups.filter(notBase))\r\n    );\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { AddedContent, NewContentType } from 'src/app/modules/shared-components/components/add-content/add-content.component';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { SearchGroupService } from '../../http-services/search-group.service';\r\n\r\ntype GroupType = 'Class'|'Team'|'Club'|'Friends'|'Other';\r\n\r\n@Component({\r\n  selector: 'alg-add-sub-group',\r\n  templateUrl: './add-sub-group.component.html',\r\n  styleUrls: [ './add-sub-group.component.scss' ]\r\n})\r\nexport class AddSubGroupComponent {\r\n\r\n  @Input() group?: Group;\r\n  @Input() loading = false;\r\n\r\n  @Output() addGroup = new EventEmitter<AddedContent<GroupType>>();\r\n\r\n  groupsFound: {\r\n    type: GroupType,\r\n    title: string,\r\n    description: string|null,\r\n  }[] = [];\r\n\r\n  allowedNewGroupTypes: NewContentType<GroupType>[] = [\r\n    {\r\n      type: 'Class',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Class`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Club',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Club`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Friends',\r\n      icon: 'fa fa-users',\r\n      title: $localize`Friends`,\r\n      description: '',\r\n    },\r\n    {\r\n      type: 'Other',\r\n      icon: 'fa fa-book',\r\n      title: $localize`Other`,\r\n      description: '',\r\n    },\r\n  ];\r\n\r\n  searchFunction = (value: string): Observable<AddedContent<GroupType>[]> =>\r\n    this.searchGroupService.searchPossibleSubgroups(value).pipe(map(groups => groups.map(group => ({\r\n      id: group.id,\r\n      type: group.type,\r\n      title: group.name,\r\n      description: group.description,\r\n    }))));\r\n\r\n  constructor(\r\n    private searchGroupService: SearchGroupService,\r\n  ) {}\r\n\r\n  addChild(group: AddedContent<GroupType>): void {\r\n    this.addGroup.emit(group);\r\n  }\r\n}\r\n","<alg-sub-section icon=\"sign-in-alt\" i18n-label label=\"Add subgroups\">\r\n  <alg-add-content\r\n    [allowedTypesForNewContent]=\"allowedNewGroupTypes\"\r\n    [searchFunction]=\"searchFunction\"\r\n    (contentAdded)=\"addChild($event)\"\r\n    [loading]=\"loading\"\r\n  ></alg-add-content>\r\n</alg-sub-section>\r\n","<ng-container *ngIf=\"groupWithPermissions\">\r\n  <ng-container *ngIf=\"groupWithPermissions.isCurrentUserManager; else noPermission\">\r\n    <alg-section icon=\"fa fa-users\" i18n-label label=\"Current Composition\">\r\n      <alg-member-list #memberList [groupData]=\"groupData\" (removedGroup)=\"removedGroup.emit()\"></alg-member-list>\r\n      <alg-add-sub-group\r\n          *ngIf=\"groupData?.group?.currentUserCanManage !== 'none'\"\r\n          [loading]=\"state === 'addingGroup'\"\r\n          (addGroup)=\"addGroup($event)\"\r\n      ></alg-add-sub-group>\r\n    </alg-section>\r\n    <alg-group-join-by-code [group]=\"groupData?.group\" (refreshRequired)=\"refreshGroupInfo()\" *ngIf=\"groupWithPermissions.canCurrentUserManageMembers\">\r\n    </alg-group-join-by-code>\r\n\r\n    <alg-group-invite-users [group]=\"groupData?.group\" (refreshRequired)=\"refreshGroupInfo()\" *ngIf=\"groupWithPermissions.canCurrentUserManageMembers\">\r\n    </alg-group-invite-users>\r\n  </ng-container>\r\n  <ng-template #noPermission>\r\n    <alg-group-no-permission></alg-group-no-permission>\r\n  </ng-template>\r\n</ng-container>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewChild } from '@angular/core';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { TypeFilter } from '../../components/group-composition-filter/group-composition-filter.component';\r\nimport { MemberListComponent } from '../../components/member-list/member-list.component';\r\nimport { ManagementAdditions, withManagementAdditions } from '../../helpers/group-management';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { GroupCreationService } from '../../http-services/group-creation.service';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\n\r\nexport interface GroupChildData {\r\n  id?: string,\r\n  title: string,\r\n  type: 'Class'|'Team'|'Club'|'Friends'|'Other',\r\n}\r\n\r\n@Component({\r\n  selector: 'alg-group-composition',\r\n  templateUrl: './group-composition.component.html',\r\n  styleUrls: [ './group-composition.component.scss' ]\r\n})\r\nexport class GroupCompositionComponent implements OnChanges {\r\n\r\n  @Input() groupData?: GroupData;\r\n\r\n  @Output() groupRefreshRequired = new EventEmitter<void>();\r\n  @Output() addedGroup = new EventEmitter<void>();\r\n  @Output() removedGroup = new EventEmitter<void>();\r\n\r\n  groupWithPermissions?: Group & ManagementAdditions;\r\n\r\n  @ViewChild('memberList') private memberList?: MemberListComponent;\r\n\r\n  state: 'addingGroup' | 'ready' = 'ready';\r\n\r\n  constructor(\r\n    private groupCreationService: GroupCreationService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    this.groupWithPermissions = this.groupData ? withManagementAdditions(this.groupData.group) : undefined;\r\n  }\r\n\r\n  refreshGroupInfo(): void {\r\n    this.groupRefreshRequired.emit();\r\n  }\r\n\r\n  addGroup(group: GroupChildData): void {\r\n    if (!this.groupData) throw Error('Tried to add a subgroup to an undefined group');\r\n\r\n    this.state = 'addingGroup';\r\n\r\n    forkJoin({\r\n      parentGroupId: of(this.groupData.group.id),\r\n      childGroupId: group.id ? of(group.id) : this.groupCreationService.create(group.title, group.type),\r\n    }).pipe(switchMap(ids => this.groupCreationService.addSubgroup(ids.parentGroupId, ids.childGroupId))).subscribe({\r\n      next: _ => {\r\n        this.actionFeedbackService.success($localize`Group successfully added as child group`);\r\n        this.memberList?.setFilter({ directChildren: true, type: TypeFilter.Groups });\r\n        this.state = 'ready';\r\n        this.addedGroup.emit();\r\n      },\r\n      error: err => {\r\n        this.state = 'ready';\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { ItemFound } from 'src/app/modules/item/http-services/search-item.service';\r\nimport { ActivityType, ItemType } from 'src/app/shared/helpers/item-type';\r\n\r\ntype ActivityId = string;\r\n\r\nexport interface NoActivity { tag: 'no-activity' }\r\n\r\nexport interface NewActivity { tag: 'new-activity', name: string, activityType: ActivityType }\r\n\r\nexport interface ExistingActivity { tag: 'existing-activity', id: ActivityId }\r\n\r\nexport function isExistingActivity(activity: NoActivity|NewActivity|ExistingActivity): activity is ExistingActivity {\r\n  return activity.tag === 'existing-activity';\r\n}\r\n\r\nexport function isNewActivity(activity: NoActivity|NewActivity|ExistingActivity): activity is NewActivity {\r\n  return activity.tag === 'new-activity';\r\n}\r\n\r\nexport function isActivityFound(itemFound: ItemFound<ItemType>): itemFound is ItemFound<ActivityType> {\r\n  return itemFound.type !== 'Skill';\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { assertSuccess, SimpleActionResponse } from 'src/app/shared/http-services/action-response';\r\n\r\nexport interface GroupChanges {\r\n  name?: string,\r\n  description?: string|null,\r\n  root_activity_id?: string|null,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GroupUpdateService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  updateGroup(groupId: string, changes: GroupChanges) : Observable<void> {\r\n    return this.http.put<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${groupId}`, changes).pipe(\r\n      map(assertSuccess),\r\n    );\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-section i18n-label label=\"Associated Activity\" icon=\"fa fa-book\" styleClass=\"associated-activity\">\r\n\r\n    <alg-loading size=\"medium\" *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n    <alg-error\r\n      *ngIf=\"state.isError\"\r\n      class=\"dark\"\r\n      icon=\"fa fa-exclamation-triangle\"\r\n      i18n-message message=\"Error while loading the root activity\"\r\n      [showRefreshButton]=\"true\"\r\n      refreshButtonType=\"refresh\"\r\n      (refresh)=\"refresh()\"\r\n    ></alg-error>\r\n\r\n    <ng-container *ngIf=\"state.isReady\">\r\n      <ng-container [ngSwitch]=\"state.data.tag\">\r\n\r\n        <ng-container *ngSwitchCase=\"'no-activity'\">\r\n          <p>There are currently no activities associated with this group.</p>\r\n          <alg-add-content\r\n            [allowedTypesForNewContent]=\"allowedNewItemTypes\"\r\n            [searchFunction]=\"searchFunction\"\r\n            (contentAdded)=\"setRootActivity($event)\"\r\n            i18n-selectExistingText selectExistingText=\"Select\"\r\n          ></alg-add-content>\r\n        </ng-container>\r\n\r\n        <div class=\"activity\" *ngSwitchCase=\"'new-activity'\">\r\n          <span class=\"activity-name\">\r\n            {{state.data.name}}\r\n          </span>\r\n          <span class=\"remove\" (click)=\"onRemove()\">\r\n            <span i18n>Remove</span>\r\n            <i class=\"fa fa-trash-alt\"></i>\r\n          </span>\r\n        </div>\r\n\r\n        <div class=\"activity\" *ngSwitchCase=\"'existing-activity'\">\r\n          <!--When rootActivity is an existing activity, rootActivityData is not null-->\r\n          <i class=\"fa fa-lock\" *ngIf=\"!state.data.path\"></i>\r\n          <span class=\"activity-name\"\r\n            [routerLink]=\"state.data.path\"\r\n            [ngClass]=\"{clickable: !!state.data.path}\"\r\n          >{{state.data.name}}</span>\r\n          <span class=\"remove\" (click)=\"onRemove()\">\r\n            <span i18n>Remove</span>\r\n            <i class=\"fa fa-trash-alt\"></i>\r\n          </span>\r\n        </div>\r\n\r\n      </ng-container>\r\n    </ng-container>\r\n  </alg-section>\r\n</ng-container>\r\n","import { Component, forwardRef, OnDestroy } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Observable, of, ReplaySubject, Subject } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, switchMap } from 'rxjs/operators';\r\nimport { GetItemByIdService } from 'src/app/modules/item/http-services/get-item-by-id.service';\r\nimport { rawItemRoute, urlArrayForItemRoute } from 'src/app/shared/routing/item-route';\r\nimport { SearchItemService } from 'src/app/modules/item/http-services/search-item.service';\r\nimport { AddedContent } from 'src/app/modules/shared-components/components/add-content/add-content.component';\r\nimport { ActivityType } from 'src/app/shared/helpers/item-type';\r\nimport { allowedNewActivityTypes } from 'src/app/shared/helpers/new-item-types';\r\nimport { NoActivity, NewActivity, ExistingActivity, isActivityFound, isExistingActivity, isNewActivity } from './associated-activity-types';\r\nimport { errorIsHTTPForbidden } from 'src/app/shared/helpers/errors';\r\nimport { mapToFetchState } from 'src/app/shared/operators/state';\r\n\r\n@Component({\r\n  selector: 'alg-associated-activity',\r\n  templateUrl: './associated-activity.component.html',\r\n  styleUrls: [ './associated-activity.component.scss' ],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => AssociatedActivityComponent),\r\n      multi: true,\r\n    }\r\n  ]\r\n})\r\nexport class AssociatedActivityComponent implements ControlValueAccessor, OnDestroy {\r\n\r\n  readonly allowedNewItemTypes = allowedNewActivityTypes;\r\n\r\n  private readonly activityChanges$ = new ReplaySubject<{\r\n    activity: NoActivity|NewActivity|(ExistingActivity&{ name?: string }),\r\n    triggerChange: boolean,\r\n  }>();\r\n\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.activityChanges$.pipe(\r\n    distinctUntilChanged(),\r\n    switchMap(data => {\r\n      if (data.triggerChange) this.onChange(data.activity);\r\n\r\n      if (!isExistingActivity(data.activity)) {\r\n        return of({\r\n          tag: data.activity.tag, id: undefined, path: null,\r\n          name: isNewActivity(data.activity) ? data.activity.name : undefined\r\n        });\r\n      }\r\n\r\n      const id = data.activity.id;\r\n      const name = data.activity.name !== undefined ? of(data.activity.name) :\r\n        this.getItemByIdService.get(id).pipe(map(item => item.string.title));\r\n\r\n      return name.pipe(\r\n        map(name => ({ tag: 'existing-activity', id: id, name, path: urlArrayForItemRoute(rawItemRoute('activity', id)) })),\r\n        catchError(err => {\r\n          if (errorIsHTTPForbidden(err)) return of({\r\n            tag: 'existing-activity', name: $localize`You don't have access to this activity.`, path: null\r\n          });\r\n          throw err;\r\n        })\r\n      );\r\n    }),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  private onChange: (value: NoActivity|NewActivity|ExistingActivity) => void = () => {};\r\n\r\n  searchFunction = (value: string): Observable<AddedContent<ActivityType>[]> =>\r\n    this.searchItemService.search(value, [ 'Chapter', 'Course', 'Task' ])\r\n      .pipe(map(items => items.filter(isActivityFound)));\r\n\r\n  constructor(\r\n    private getItemByIdService: GetItemByIdService,\r\n    private searchItemService: SearchItemService,\r\n  ) { }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  writeValue(rootActivity: NoActivity|NewActivity|ExistingActivity): void {\r\n    this.activityChanges$.next({ activity: rootActivity, triggerChange: false });\r\n  }\r\n\r\n  registerOnChange(fn: (value: NoActivity|NewActivity|ExistingActivity) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(_fn: () => void): void {\r\n  }\r\n\r\n  onRemove(): void {\r\n    this.activityChanges$.next({\r\n      activity: { tag: 'no-activity' }, triggerChange: true });\r\n  }\r\n\r\n  setRootActivity(activity: AddedContent<ActivityType>): void {\r\n    this.activityChanges$.next({\r\n      activity: activity.id !== undefined ?\r\n        { tag: 'existing-activity', id: activity.id, name: activity.title } :\r\n        { tag: 'new-activity', name: activity.title, activityType: activity.type },\r\n      triggerChange: true\r\n    });\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport { assertSuccess, SimpleActionResponse } from '../../../shared/http-services/action-response';\r\n\r\n@Injectable()\r\nexport class GroupDeleteService {\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  delete(groupId: string): Observable<void> {\r\n    return this.http.delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${groupId}`).pipe(\r\n      map(assertSuccess),\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"container\" *ngIf=\"state$ | async as state\">\r\n\r\n  <alg-loading size=\"small\" *ngIf=\"state.isFetching || (deletionInProgress$ | async)\"></alg-loading>\r\n\r\n  <button\r\n      pButton\r\n      type=\"button\"\r\n      class=\"alg-button p-button-rounded p-button-danger\"\r\n      i18n-label label=\"Delete this group\"\r\n      (click)=\"onDeleteGroup()\"\r\n      [disabled]=\"(state.isReady && state.data) || state.isFetching || state.isError || (deletionInProgress$ | async)\"\r\n  ></button>\r\n\r\n  <span class=\"has-children\" *ngIf=\"state.isReady && state.data\" i18n>\r\n    Only an empty group can be deleted.\r\n  </span>\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"warning small\"\r\n    i18n-message message=\"Error while loading the group info\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { distinctUntilChanged, switchMap, map } from 'rxjs/operators';\r\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\r\nimport { GetGroupChildrenService, GroupChild } from '../../http-services/get-group-children.service';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { GroupDeleteService } from '../../services/group-delete.service';\r\nimport { Router } from '@angular/router';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\n\r\n@Component({\r\n  selector: 'alg-group-remove-button',\r\n  templateUrl: './group-remove-button.component.html',\r\n  styleUrls: [ './group-remove-button.component.scss' ]\r\n})\r\nexport class GroupRemoveButtonComponent implements OnChanges, OnDestroy {\r\n  @Input() group?: Group;\r\n\r\n  @Output() groupDeleted = new EventEmitter<void>();\r\n\r\n  deletionInProgress$ = new Subject<boolean>();\r\n\r\n  private readonly id$ = new ReplaySubject<string>(1);\r\n  private refresh$ = new Subject<void>();\r\n  readonly state$ = this.id$.pipe(\r\n    distinctUntilChanged(),\r\n    switchMap(id => this.hasGroupChildren$(id)),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private confirmationService: ConfirmationService,\r\n    private getGroupChildrenService: GetGroupChildrenService,\r\n    private groupDeleteService: GroupDeleteService,\r\n    private router: Router,\r\n  ) { }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.group) {\r\n      this.id$.next(this.group.id);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.id$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  hasGroupChildren$(groupId: string): Observable<boolean> {\r\n    return this.getGroupChildrenService.getGroupChildren(groupId).pipe(\r\n      map((groupChild: GroupChild[]) => groupChild.length > 0)\r\n    );\r\n  }\r\n\r\n  onDeleteGroup(): void {\r\n    if (!this.group) {\r\n      return;\r\n    }\r\n\r\n    this.confirmationService.confirm({\r\n      message: $localize`Are you sure you want to delete the group \"${ this.group.name }\"`,\r\n      header: $localize`Confirm Action`,\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: $localize`Delete it`,\r\n      accept: () => {\r\n        this.deleteGroup();\r\n      },\r\n      rejectLabel: $localize`No`,\r\n    });\r\n  }\r\n\r\n  deleteGroup(): void {\r\n    if (!this.group) {\r\n      return;\r\n    }\r\n\r\n    const id = this.group.id;\r\n    const groupName = this.group.name;\r\n\r\n    this.deletionInProgress$.next(true);\r\n    this.groupDeleteService.delete(id)\r\n      .subscribe({\r\n        next: () => {\r\n          this.deletionInProgress$.next(false);\r\n          this.actionFeedbackService.success($localize`You have deleted \"${groupName}\"`);\r\n          this.groupDeleted.emit();\r\n          this.navigateToMyGroups();\r\n        },\r\n        error: _err => {\r\n          this.deletionInProgress$.next(false);\r\n          this.actionFeedbackService.error($localize`Failed to delete \"${groupName}\"`);\r\n        }\r\n      });\r\n  }\r\n\r\n  navigateToMyGroups(): void {\r\n    void this.router.navigate([ '/groups/mine' ]);\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    i18n-message message=\"Error while loading the group\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refreshGroup()\"\r\n  ></alg-error>\r\n\r\n  <ng-container *ngIf=\"state.isReady\">\r\n    <form class=\"group-edition\" [formGroup]=\"groupForm\" *ngIf=\"state.data.isCurrentUserManager && state.data.canCurrentUserManageGroup; else notAuthorized\">\r\n      <alg-section icon=\"fa fa-cog\" i18n-label label=\"Group information\">\r\n        <div class=\"field\">\r\n          <div class=\"field-name\">\r\n            <label i18n>Name</label>\r\n          </div>\r\n          <div class=\"field-value\">\r\n            <alg-input [parentForm]=\"groupForm\" name=\"name\" size=\"large\"></alg-input>\r\n          </div>\r\n        </div>\r\n        <div class=\"field\">\r\n          <div class=\"field-name\">\r\n            <label i18n>Description</label>\r\n          </div>\r\n          <div class=\"field-value\">\r\n            <alg-textarea [parentForm]=\"groupForm\" inputName=\"description\" size=\"large\"></alg-textarea>\r\n          </div>\r\n        </div>\r\n      </alg-section>\r\n      <alg-associated-activity formControlName=\"rootActivity\"></alg-associated-activity>\r\n\r\n      <div class=\"remove-button-section\">\r\n        <alg-group-remove-button [group]=\"state.data\" (groupDeleted)=\"refreshNav()\"></alg-group-remove-button>\r\n      </div>\r\n    </form>\r\n\r\n    <alg-floating-save\r\n      *ngIf=\"groupForm.dirty\"\r\n      [saving]=\"groupForm.disabled\"\r\n      (save)=\"save()\"\r\n      (cancel)=\"resetForm()\"\r\n    ></alg-floating-save>\r\n\r\n    <ng-template #notAuthorized>\r\n      <alg-error i18n-message message=\"You do not have the permissions to edit this content.\"></alg-error>\r\n    </ng-template>\r\n  </ng-container>\r\n</ng-container>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormBuilder, Validators } from '@angular/forms';\r\nimport { mapStateData, readyData } from 'src/app/shared/operators/state';\r\nimport { ModeService } from 'src/app/shared/services/mode.service';\r\nimport { of, Subscription } from 'rxjs';\r\nimport { concatMap } from 'rxjs/operators';\r\nimport { CreateItemService } from 'src/app/modules/item/http-services/create-item.service';\r\nimport { PendingChangesComponent } from 'src/app/shared/guards/pending-changes-guard';\r\nimport { NoActivity, NewActivity, ExistingActivity,\r\n  isNewActivity, isExistingActivity } from '../../components/associated-activity/associated-activity-types';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { GroupUpdateService } from '../../http-services/group-update.service';\r\nimport { GroupDataSource } from '../../services/group-datasource.service';\r\nimport { withManagementAdditions } from '../../helpers/group-management';\r\nimport { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { PendingChangesService } from '../../../../shared/services/pending-changes-service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-edit',\r\n  templateUrl: './group-edit.component.html',\r\n  styleUrls: [ './group-edit.component.scss' ]\r\n})\r\nexport class GroupEditComponent implements OnInit, OnDestroy, PendingChangesComponent {\r\n  groupForm = this.formBuilder.group({\r\n    // eslint-disable-next-line @typescript-eslint/unbound-method\r\n    name: [ '', [ Validators.required, Validators.minLength(3) ] ],\r\n    description: [ '', [] ],\r\n    rootActivity: [ '', [] ],\r\n  });\r\n  initialFormData?: Group;\r\n\r\n  state$ = this.groupDataSource.state$.pipe(mapStateData(state => withManagementAdditions(state.group)));\r\n\r\n  subscription?: Subscription;\r\n\r\n  constructor(\r\n    private modeService: ModeService,\r\n    private currentContentService: CurrentContentService,\r\n    private groupDataSource: GroupDataSource,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private formBuilder: UntypedFormBuilder,\r\n    private groupUpdateService: GroupUpdateService,\r\n    private createItemService: CreateItemService,\r\n    private pendingChangesService: PendingChangesService\r\n  ) {\r\n    this.subscription = this.state$\r\n      .pipe(readyData())\r\n      .subscribe(item => {\r\n        this.initialFormData = item;\r\n        this.resetFormWith(item);\r\n      });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.pendingChangesService.set(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.modeService.stopEditing();\r\n    this.subscription?.unsubscribe();\r\n    this.pendingChangesService.clear();\r\n  }\r\n\r\n  isDirty(): boolean {\r\n    return this.groupForm.dirty;\r\n  }\r\n\r\n  save(): void {\r\n    if (!this.initialFormData) return;\r\n\r\n    if (this.groupForm.invalid) {\r\n      this.actionFeedbackService.error($localize`You need to solve all the errors displayed in the form to save changes.`);\r\n      return;\r\n    }\r\n    this.groupForm.disable();\r\n\r\n    const id = this.initialFormData.id;\r\n    const name = this.groupForm.get('name')?.value as string;\r\n    const description = this.groupForm.get('description')?.value as string;\r\n\r\n    const rootActivity = this.groupForm.get('rootActivity')?.value as NoActivity|NewActivity|ExistingActivity;\r\n    const rootActivityId = !isNewActivity(rootActivity) ? of(isExistingActivity(rootActivity) ? rootActivity.id : null) :\r\n      this.createItemService.create({\r\n        title: rootActivity.name,\r\n        type: rootActivity.activityType,\r\n        languageTag: 'en',// FIXME\r\n        asRootOfGroupId: this.initialFormData.id,\r\n      });\r\n\r\n    rootActivityId.pipe(\r\n      concatMap(rootActivityId => this.groupUpdateService.updateGroup(id, {\r\n        name,\r\n        description: description === '' ? null : description,\r\n        root_activity_id: rootActivityId\r\n      }))\r\n    ).subscribe({\r\n      next: () => {\r\n        this.groupDataSource.refetchGroup(); // will re-enable the form\r\n        this.refreshNav();\r\n        this.actionFeedbackService.success($localize`Changes successfully saved.`);\r\n      },\r\n      error: err => {\r\n        this.groupForm.enable();\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n\r\n  refreshNav(): void {\r\n    this.currentContentService.forceNavMenuReload();\r\n  }\r\n\r\n  resetForm(): void {\r\n    if (this.initialFormData) this.resetFormWith(this.initialFormData);\r\n  }\r\n\r\n  private resetFormWith(group: Group): void {\r\n\r\n    const rootActivity = group.rootActivityId === null ?\r\n      { tag: 'no-activity' } :\r\n      { tag: 'existing-activity', id: group.rootActivityId };\r\n\r\n    this.groupForm.reset({\r\n      name: group.name,\r\n      description: group.description,\r\n      rootActivity: rootActivity,\r\n    });\r\n    this.groupForm.enable();\r\n  }\r\n\r\n  refreshGroup(): void {\r\n    this.groupDataSource.refetchGroup();\r\n  }\r\n}\r\n","<ng-container\r\n    *ngFor=\"let item of items | slice : 0 : (items || []).length > maxItemsDisplay ? maxItemsDisplay - 1 : maxItemsDisplay; let i = index; last as isLast;\">\r\n  <a\r\n    class=\"alg-link base-color\"\r\n    (click)=\"onButtonClick(item)\"\r\n  >\r\n    <strong>{{ item.name }}</strong>\r\n  </a>\r\n  <span class=\"separator\">\r\n    <span *ngIf=\"(items || []).length > maxItemsDisplay && !isLast || (items || []).length === 1 || (items || []).length <= maxItemsDisplay && i < (items || []).length - 2\">,</span>\r\n    <span\r\n      *ngIf=\"(items || []).length <= maxItemsDisplay && i >= (items || []).length - 2 && !isLast || (items || []).length > maxItemsDisplay && isLast\"\r\n      i18n\r\n    >, and</span>\r\n  </span>\r\n  <span class=\"more\" *ngIf=\"(items || []).length > maxItemsDisplay && isLast\" i18n>\r\n    {{ (items || []).length - maxItemsDisplay + 1 }} more\r\n  </span>\r\n</ng-container>\r\n","import { Component, Input } from '@angular/core';\r\nimport { rawGroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { GroupRouter } from 'src/app/shared/routing/group-router';\r\nimport { GroupShortInfo } from '../../http-services/get-group-by-id.service';\r\n\r\nconst MAX_ITEMS_DISPLAY = 4;\r\n\r\n@Component({\r\n  selector: 'alg-group-links',\r\n  templateUrl: './group-links.component.html',\r\n  styleUrls: [ './group-links.component.scss' ]\r\n})\r\nexport class GroupLinksComponent {\r\n  @Input() items?: GroupShortInfo[];\r\n\r\n  maxItemsDisplay = MAX_ITEMS_DISPLAY;\r\n\r\n  constructor(private groupRouter: GroupRouter) { }\r\n\r\n  onButtonClick(item: GroupShortInfo): void {\r\n    this.groupRouter.navigateTo(rawGroupRoute({ id: item.id, isUser: false }));\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n  <ng-container [ngSwitch]=\"group?.currentUserMembership\">\r\n    <div class=\"content\" *ngSwitchCase=\"'direct'\" i18n>\r\n      You are a member of this group.\r\n    </div>\r\n\r\n    <div class=\"content\" *ngSwitchCase=\"'descendant'\" i18n>\r\n      As a member of <alg-group-links class=\"links\" [items]=\"group?.descendantsCurrentUserIsMemberOf\"></alg-group-links>\r\n      you are a member of this group.\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-container [ngSwitch]=\"group?.currentUserManagership\">\r\n    <div class=\"content\" *ngSwitchCase=\"'direct'\" i18n>\r\n      You are a manager of this group.\r\n    </div>\r\n\r\n    <div class=\"content\" *ngSwitchCase=\"'ancestor'\" i18n>\r\n      As a manager of <alg-group-links class=\"links\" [items]=\"group?.ancestorsCurrentUserIsManagerOf\"></alg-group-links>\r\n      you can manage this group.\r\n    </div>\r\n\r\n    <div class=\"content\" *ngSwitchCase=\"'descendant'\" i18n>\r\n      As a manager of <alg-group-links class=\"links\" [items]=\"group?.descendantsCurrentUserIsManagerOf\"></alg-group-links>\r\n      you can view this group.\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-indicator',\r\n  templateUrl: './group-indicator.component.html',\r\n  styleUrls: [ './group-indicator.component.scss' ]\r\n})\r\nexport class GroupIndicatorComponent {\r\n  @Input() group?: Group;\r\n\r\n  constructor() { }\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\n\r\nexport const managerDecoder = pipe(\r\n  D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n    canManage: D.literal('none', 'memberships', 'memberships_and_group'),\r\n    canGrantGroupAccess: D.boolean,\r\n    canWatchMembers: D.boolean,\r\n  }),\r\n  D.intersect(\r\n    D.partial({\r\n      login: D.string,\r\n      firstName: D.nullable(D.string),\r\n      lastName: D.nullable(D.string),\r\n    }),\r\n  )\r\n);\r\n\r\nexport type Manager = D.TypeOf<typeof managerDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupManagersService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getGroupManagers(\r\n    groupId: string,\r\n    options?: {\r\n      sort?: string[],\r\n      limit?: number,\r\n      fromId?: string,\r\n    },\r\n  ): Observable<Manager[]> {\r\n    let params = new HttpParams();\r\n    if (options?.sort) params = params.set('sort', options.sort.join(','));\r\n    if (options?.limit !== undefined) params = params.set('limit', options.limit);\r\n    if (options?.fromId !== undefined) params = params.set('from.id', options.fromId);\r\n\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/managers`, { params: params }).pipe(\r\n        decodeSnakeCase(D.array(managerDecoder)),\r\n      );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { merge, Observable, of } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { assertSuccess, SimpleActionResponse } from '../../../shared/http-services/action-response';\r\nimport { reduce, map, switchMap, catchError } from 'rxjs/operators';\r\n\r\nexport interface Result {\r\n  countRequests: number,\r\n  countSuccess: number,\r\n  errorText?: string,\r\n}\r\n\r\nexport function parseResults(data: boolean[]): Result {\r\n  return {\r\n    countRequests: data.length,\r\n    countSuccess: data.filter(success => success).length,\r\n  };\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RemoveGroupManagerService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  remove(groupId: string, managerId: string): Observable<void> {\r\n    return this.http\r\n      .delete<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${groupId}/managers/${managerId}`)\r\n      .pipe(\r\n        map(assertSuccess),\r\n      );\r\n  }\r\n\r\n  removeBatch(parentGroupId: string, ids: string[], ownManagerId?: string): Observable<Result> {\r\n    return merge(\r\n      ...ids.map(id => this.remove(parentGroupId, id).pipe(\r\n        map(() => true),\r\n        catchError(() => of(false))),\r\n      ),\r\n    ).pipe(\r\n      reduce<boolean, boolean[]>((removedManagers, success) =>\r\n        [ ...removedManagers, success ], []\r\n      ),\r\n      switchMap(removedManagers =>\r\n        (ownManagerId ?\r\n          removedManagers.some(removedManager => !removedManager) ?\r\n            of([ ...removedManagers, false ]) : this.remove(parentGroupId, ownManagerId).pipe(\r\n              map(() => true),\r\n              catchError(() => of(false)),\r\n              map(success => [ ...removedManagers, success ]),\r\n            )\r\n          : of(removedManagers))\r\n      ),\r\n    ).pipe(\r\n      map(parseResults),\r\n    );\r\n  }\r\n}\r\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { SimpleActionResponse } from '../../../shared/http-services/action-response';\r\n\r\nexport interface GroupManagerPermissionChanges {\r\n  canManage?: 'none'|'memberships'|'memberships_and_group',\r\n  canGrantGroupAccess?: boolean,\r\n  canWatchMembers?: boolean,\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UpdateGroupManagersService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  update(\r\n    groupId: string,\r\n    managerId: string,\r\n    payload: GroupManagerPermissionChanges\r\n  ): Observable<SimpleActionResponse> {\r\n    return this.http.put<SimpleActionResponse>(`${appConfig.apiUrl}/groups/${groupId}/managers/${managerId}`, {\r\n      can_manage: payload.canManage,\r\n      can_grant_group_access: payload.canGrantGroupAccess,\r\n      can_watch_members: payload.canWatchMembers,\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"userCaption\">\r\n  <p-dialog\r\n      [(visible)]=\"visible\"\r\n      [modal]=\"true\"\r\n      [draggable]=\"false\"\r\n      [closable]=\"false\"\r\n      styleClass=\"alg-permissions-edit-dialog\">\r\n\r\n    <p-header>\r\n      <div class=\"dialog-header\">\r\n      <span class=\"dialog-handler\">\r\n        <i class=\"fa fa-lock\"></i>\r\n      </span>\r\n        <span class=\"dialog-title\" i18n>\r\n        {{ group?.name }}: manager access given to {{ userCaption }}\r\n      </span>\r\n        <span class=\"dialog-close\" (click)=\"onClose()\">\r\n        <img src=\"assets/images/close.svg\" alt=\"close\">\r\n      </span>\r\n      </div>\r\n    </p-header>\r\n\r\n    <div class=\"dialog-container\">\r\n      <div class=\"dialog-content\">\r\n        <p i18n>\r\n          This panel lets you select what you allow the selected user or group of users to do on the current group and its descendants.\r\n        </p>\r\n\r\n      <form [formGroup]=\"form\">\r\n        <alg-collapsible-section\r\n          [collapsible]=\"false\"\r\n          i18n-header header=\"Management level\"\r\n          icon=\"fa fa-users-cog\"\r\n        >\r\n          <ng-template #content let-collapsed>\r\n            <alg-progress-select\r\n              formControlName=\"canManage\"\r\n              [values]=\"managementLevelValues\"\r\n              [collapsed]=\"collapsed\"\r\n            >\r\n              <ng-template #description>\r\n                <span i18n>The permissions that the user(s) has on this group</span>\r\n              </ng-template>\r\n            </alg-progress-select>\r\n          </ng-template>\r\n        </alg-collapsible-section>\r\n\r\n        <alg-collapsible-section\r\n          [collapsible]=\"false\"\r\n          i18n-header header=\"Can grant access\"\r\n          icon=\"fa fa-key\"\r\n        >\r\n          <ng-template #content let-collapsed>\r\n            <alg-switch-field [collapsed]=\"collapsed\" formControlName=\"canGrantGroupAccess\">\r\n              <ng-template #label>\r\n                <span label i18n>\r\n                  User(s) can give and revoke members access to some content\r\n                </span>\r\n                </ng-template>\r\n              </alg-switch-field>\r\n            </ng-template>\r\n          </alg-collapsible-section>\r\n\r\n        <alg-collapsible-section\r\n          [collapsible]=\"false\"\r\n          i18n-header header=\"Can watch members\"\r\n          icon=\"fa fa-binoculars\"\r\n        >\r\n          <ng-template #content let-collapsed>\r\n            <alg-switch-field [collapsed]=\"collapsed\" formControlName=\"canWatchMembers\">\r\n              <ng-template #label>\r\n                <span i18n>\r\n                  User(s) can watch the members' activity on some content\r\n                </span>\r\n                </ng-template>\r\n              </alg-switch-field>\r\n            </ng-template>\r\n          </alg-collapsible-section>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <p-footer>\r\n      <div class=\"footer\">\r\n        <ng-container *ngIf=\"isUpdating; else buttons\">\r\n          <alg-loading size=\"medium\"></alg-loading>\r\n        </ng-container>\r\n\r\n        <ng-template #buttons>\r\n          <p-button\r\n            icon=\"fa fa-times\"\r\n            i18n-label label=\"Cancel\"\r\n            styleClass=\"alg-button p-button-rounded p-button-danger\"\r\n            (onClick)=\"onClose()\"\r\n          ></p-button>\r\n          <p-button\r\n            icon=\"fa fa-check\"\r\n            i18n-label label=\"Save\"\r\n            styleClass=\"alg-button p-button-rounded\"\r\n            (onClick)=\"onAccept()\"\r\n            [disabled]=\"!form.dirty\"\r\n          ></p-button>\r\n        </ng-template>\r\n      </div>\r\n    </p-footer>\r\n  </p-dialog>\r\n</ng-container>\r\n","import { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { Manager } from '../../http-services/get-group-managers.service';\r\nimport { ProgressSelectValue } from\r\n  '../../../shared-components/components/collapsible-section/progress-select/progress-select.component';\r\nimport { GroupManagerPermissionChanges, UpdateGroupManagersService } from '../../http-services/update-group-managers.service';\r\nimport { formatUser } from '../../../../shared/helpers/user';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { UntypedFormBuilder } from '@angular/forms';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { UserSessionService } from '../../../../shared/services/user-session.service';\r\n\r\n@Component({\r\n  selector: 'alg-manager-permission-dialog',\r\n  templateUrl: './manager-permission-dialog.component.html',\r\n  styleUrls: [ './manager-permission-dialog.component.scss' ],\r\n})\r\nexport class ManagerPermissionDialogComponent implements OnChanges {\r\n  @Input() visible?: boolean;\r\n  @Input() group?: Group;\r\n  @Input() manager?: Manager;\r\n\r\n  @Output() close = new EventEmitter<{ updated: boolean }>();\r\n\r\n  managementLevelValues: ProgressSelectValue<GroupManagerPermissionChanges['canManage']>[] = [\r\n    {\r\n      value: 'none',\r\n      label: $localize`Read-only`,\r\n      comment: $localize`Can list the members`\r\n    },\r\n    {\r\n      value: 'memberships',\r\n      label: $localize`Membership`,\r\n      comment: $localize`Can manage (add, remove, invite, ...) members`\r\n    },\r\n    {\r\n      value: 'memberships_and_group',\r\n      label: $localize`Memberships and group`,\r\n      comment: $localize`Can manage members, managers, and change group settings`\r\n    },\r\n  ];\r\n\r\n  userCaption?: string;\r\n  isUpdating = false;\r\n\r\n  form = this.fb.group({\r\n    canManage: [ 'none' ],\r\n    canGrantGroupAccess: [ false ],\r\n    canWatchMembers: [ false ],\r\n  });\r\n\r\n  constructor(\r\n    private sessionService: UserSessionService,\r\n    private updateGroupManagersService: UpdateGroupManagersService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private fb: UntypedFormBuilder,\r\n    private confirmationService: ConfirmationService,\r\n  ) {}\r\n\r\n  ngOnChanges(): void {\r\n    if (this.manager) {\r\n      this.form.reset({\r\n        canManage: this.manager.canManage,\r\n        canGrantGroupAccess: this.manager.canGrantGroupAccess,\r\n        canWatchMembers: this.manager.canWatchMembers,\r\n      }, { emitEvent: false });\r\n\r\n      this.userCaption = this.manager.login ? formatUser({\r\n        login: this.manager.login,\r\n        firstName: this.manager.firstName,\r\n        lastName: this.manager.lastName,\r\n      }) : this.manager.name;\r\n    }\r\n  }\r\n\r\n  onClose(): void {\r\n    this.close.emit({ updated: false });\r\n  }\r\n\r\n  onAccept(): void {\r\n    if (!this.manager) {\r\n      throw new Error('Unexpected: Missed manager data');\r\n    }\r\n\r\n    const currentUserId = this.sessionService.session$.value?.groupId;\r\n\r\n    if (!currentUserId) {\r\n      throw new Error('Unexpected: Missed current used ID');\r\n    }\r\n\r\n    const canManageValue = this.form.get('canManage')?.value as GroupManagerPermissionChanges['canManage'];\r\n\r\n    if (this.manager.id !== currentUserId || this.manager.id === currentUserId &&\r\n      (this.manager.canManage !== 'memberships_and_group') || canManageValue === 'memberships_and_group') {\r\n      this.update();\r\n      return;\r\n    }\r\n\r\n    this.confirmationService.confirm({\r\n      message: $localize`Are you sure to remove from yourself the permission to edit group settings and edit managers?\r\n        You may lose manager access and not be able to restore it.`,\r\n      header: $localize`Confirm Action`,\r\n      icon: 'pi pi-exclamation-triangle',\r\n      acceptLabel: $localize`Yes, save these changes.`,\r\n      acceptButtonStyleClass: 'p-button-danger',\r\n      accept: () => {\r\n        this.update();\r\n      },\r\n      rejectLabel: $localize`No`,\r\n    });\r\n  }\r\n\r\n  update(): void {\r\n    if (!this.manager || !this.group) {\r\n      throw new Error('Unexpected: Missed input component params');\r\n    }\r\n\r\n    const managerPermissions: GroupManagerPermissionChanges = {\r\n      canManage: this.form.get('canManage')?.value as GroupManagerPermissionChanges['canManage'],\r\n      canGrantGroupAccess: this.form.get('canGrantGroupAccess')?.value as GroupManagerPermissionChanges['canGrantGroupAccess'],\r\n      canWatchMembers: this.form.get('canWatchMembers')?.value as GroupManagerPermissionChanges['canWatchMembers'],\r\n    };\r\n\r\n    this.isUpdating = true;\r\n    this.updateGroupManagersService.update(this.group.id, this.manager.id, managerPermissions).subscribe({\r\n      next: () => {\r\n        this.isUpdating = false;\r\n        this.actionFeedbackService.success($localize`New permissions successfully saved.`);\r\n        this.close.emit({ updated: true });\r\n      },\r\n      error: () => {\r\n        this.isUpdating = false;\r\n        this.actionFeedbackService.error($localize`Failed to save permissions.`);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../../shared/helpers/config';\r\nimport { decodeSnakeCase } from '../../shared/operators/decode';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { User, userDecoder } from '../../modules/group/http-services/get-user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetUserByLoginService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  get(login: string): Observable<User> {\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/users/by-login/${login}`)\r\n      .pipe(decodeSnakeCase(userDecoder));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ActionResponse } from '../../../shared/http-services/action-response';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { Observable } from 'rxjs';\r\nimport { GroupManagerPermissionChanges } from './update-group-managers.service';\r\n\r\nconst defaultPermissions: GroupManagerPermissionChanges = {\r\n  canGrantGroupAccess: false,\r\n  canManage: 'none',\r\n  canWatchMembers: false,\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class GroupCreateManagerService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  create(\r\n    groupId: string,\r\n    managerId: string,\r\n    payload: GroupManagerPermissionChanges = defaultPermissions,\r\n  ): Observable<ActionResponse<unknown>> {\r\n    return this.http.post<ActionResponse<unknown>>(`${appConfig.apiUrl}/groups/${groupId}/managers/${managerId}`, {\r\n      can_manage: payload.canManage,\r\n      can_grant_group_access: payload.canGrantGroupAccess,\r\n      can_watch_members: payload.canWatchMembers,\r\n    });\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { Manager } from '../../http-services/get-group-managers.service';\r\nimport { GetUserByLoginService } from '../../../../core/http-services/get-user-by-login.service';\r\nimport { GroupCreateManagerService } from '../../http-services/group-create-manager.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { errorIsHTTPForbidden, errorIsHTTPNotFound } from '../../../../shared/helpers/errors';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'alg-group-manager-add',\r\n  templateUrl: './group-manager-add.component.html',\r\n  styleUrls: [ './group-manager-add.component.scss' ]\r\n})\r\nexport class GroupManagerAddComponent {\r\n\r\n  @Output() added = new EventEmitter<void>();\r\n\r\n  @Input() groupData?: GroupData;\r\n  @Input() managers?: Manager[];\r\n\r\n  state: 'ready' | 'error' | 'loading' = 'ready';\r\n  login = '';\r\n\r\n  constructor(\r\n    private getUserByLoginService: GetUserByLoginService,\r\n    private groupCreateManagerService: GroupCreateManagerService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n  ) {}\r\n\r\n  onClick(): void {\r\n    if (!this.managers) {\r\n      throw new Error('Unexpected: Missed managers');\r\n    }\r\n\r\n    if (this.managers.some(manager => manager.login === this.login)) {\r\n      this.actionFeedbackService.error($localize`This user is already a manager of this group.`);\r\n      return;\r\n    }\r\n\r\n    if (!this.groupData) {\r\n      throw new Error('Unexpected: missed group data');\r\n    }\r\n\r\n    const groupId = this.groupData.group.id;\r\n\r\n    this.state = 'loading';\r\n    this.getUserByLoginService.get(this.login).pipe(\r\n      switchMap(user => this.groupCreateManagerService.create(groupId, user.groupId)),\r\n    ).subscribe({\r\n      next: () => {\r\n        this.state = 'ready';\r\n        this.actionFeedbackService.success($localize`Manager added!`);\r\n        this.login = '';\r\n        this.added.emit();\r\n      },\r\n      error: error => {\r\n        this.state = 'error';\r\n\r\n        if (errorIsHTTPNotFound(error)) {\r\n          this.actionFeedbackService.error($localize`The login you entered does not exist or is not visible to you.`);\r\n        } else if (errorIsHTTPForbidden(error)) {\r\n          this.actionFeedbackService.error($localize`Unable to add this manager.`);\r\n        } else {\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(error instanceof HttpErrorResponse)) throw error;\r\n        }\r\n      },\r\n    });\r\n  }\r\n}\r\n","<alg-section-paragraph icon=\"fa fa-sign-in-alt\" i18n-label label=\"Add a manager\">\r\n  <div class=\"input-wrapper\">\r\n    <input\r\n      type=\"text\"\r\n      i18n-placeholder=\"Placeholder of field for searching for user by login\" placeholder=\"Login of a user\"\r\n      [(ngModel)]=\"login\"\r\n      [disabled]=\"state === 'loading'\"\r\n    >\r\n    <span class=\"icon\">\r\n      <i class=\"fa fa-font\"></i>\r\n    </span>\r\n    <p-button\r\n      styleClass=\"alg-button p-button-rounded\"\r\n      i18n-label label=\"Add\"\r\n      icon=\"fa fa-plus\"\r\n      [disabled]=\"login === '' || state === 'loading'\"\r\n      (onClick)=\"onClick()\"\r\n    ></p-button>\r\n  </div>\r\n</alg-section-paragraph>\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n  <alg-loading size=\"medium\" *ngIf=\"state.isFetching && !state.data\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    i18n-message message=\"Error while loading the group managers\"\r\n    [showRefreshButton]=\"true\"\r\n    (refresh)=\"fetchData()\"\r\n  ></alg-error>\r\n\r\n  <ng-container *ngIf=\"state.data as managers\">\r\n    <alg-section icon=\"fa fa-users\" i18n-label label=\"Managers of this group\">\r\n      <alg-grid\r\n        tableStyle=\"--group-manager-list\"\r\n        class=\"slanted-grid\"\r\n        *ngIf=\"managers.length > 0; else noManagers\"\r\n        [loading]=\"removalInProgress || state.isFetching\"\r\n        [data]=\"managers\"\r\n        [(selection)]=\"selection\"\r\n        sortMode=\"single\"\r\n        [showGear]=\"false\"\r\n        [scrollable]=\"false\"\r\n        dataKey=\"id\"\r\n      >\r\n        <ng-template #headerTemplate let-columns>\r\n          <tr style=\"border: none; height: 100%\">\r\n            <th class=\"thin\" *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\"></th>\r\n            <th style=\"min-width: 160px;\">\r\n              <div class=\"slanted-header\">\r\n                <div class=\"slanted-header-content\" i18n>\r\n                  Name\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th style=\"min-width: 110px;\">\r\n              <div class=\"slanted-header\">\r\n                <div class=\"slanted-header-content\" i18n>\r\n                  Can Manage\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th style=\"width: 5rem; max-width: 5rem;\">\r\n              <div class=\"slanted-header\">\r\n                <div class=\"slanted-header-content\" i18n>\r\n                  Can grant group access\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th style=\"width: 5rem; max-width: 5rem;\">\r\n              <div class=\"slanted-header\">\r\n                <div class=\"slanted-header-content\" i18n>\r\n                  Can watch members\r\n                </div>\r\n              </div>\r\n            </th>\r\n            <th style=\"width: 11rem; max-width: 11rem;\"></th>\r\n          </tr>\r\n        </ng-template>\r\n\r\n        <ng-template\r\n          #bodyTemplate\r\n          let-rowData\r\n          let-columns=\"columns\"\r\n          let-rowIndex=\"rowIndex\"\r\n        >\r\n          <tr [pSelectableRow]=\"rowData\" [pSelectableRowIndex]=\"rowIndex\">\r\n            <td class=\"thin\" *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\">\r\n              <p-tableCheckbox class=\"p-chkbox\" [value]=\"rowData\"></p-tableCheckbox>\r\n            </td>\r\n            <td\r\n              style=\"text-align: left; min-width: 160px; padding-left: 0.5rem; justify-content: left\"\r\n              tooltipPosition=\"top\"\r\n              tooltipStyleClass=\"tooltip-custom\"\r\n            >\r\n              <a class=\"alg-link\"\r\n                [routerLink]=\"rowData | groupLink\"\r\n              >\r\n                {{ rowData.login ? (rowData | userCaption) : rowData.name }}\r\n              </a>\r\n            </td>\r\n            <td style=\"min-width: 110px;\">\r\n              {{ rowData.canManageAsText }}\r\n            </td>\r\n            <td style=\"width: 5rem; max-width: 5rem;\">\r\n              <span class=\"table-icon\"\r\n                [ngClass]=\"{\r\n                  locked: rowData.canGrantGroupAccess,\r\n                  unlocked: !rowData.canGrantGroupAccess\r\n                }\">\r\n                <i *ngIf=\"!rowData.canGrantGroupAccess\" class=\"fa fa-times\"></i>\r\n                <i *ngIf=\"rowData.canGrantGroupAccess\" class=\"fa fa-check\"></i>\r\n              </span>\r\n            </td>\r\n            <td style=\"width: 5rem; max-width: 5rem;\">\r\n              <span class=\"table-icon\"\r\n                [ngClass]=\"{\r\n                  locked: rowData.canWatchMembers,\r\n                  unlocked: !rowData.canWatchMembers\r\n                }\">\r\n                <i *ngIf=\"!rowData.canWatchMembers\" class=\"fa fa-times\"></i>\r\n                <i *ngIf=\"rowData.canWatchMembers\" class=\"fa fa-check\"></i>\r\n              </span>\r\n            </td>\r\n            <td style=\"width: 11rem; max-width: 11rem;\">\r\n              <button\r\n                pButton\r\n                type=\"button\"\r\n                icon=\"pi pi-pencil\"\r\n                class=\"p-button-text\"\r\n                (click)=\"openPermissionsEditDialog(rowData)\"\r\n                *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\"\r\n              ></button>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n\r\n        <ng-template #footerTemplate>\r\n          <tr *ngIf=\"datapager.canLoadMore$ | async\">\r\n            <td [colSpan]=\"6\">\r\n              <div class=\"text-center\">\r\n                <button\r\n                  pButton\r\n                  class=\"p-button-rounded\"\r\n                  i18n-label label=\"Load more\"\r\n                  (click)=\"fetchMoreData()\"\r\n                  [disabled]=\"state.isFetching\"\r\n                ></button>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        </ng-template>\r\n\r\n        <ng-template *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\" #summaryTemplate>\r\n          <div class=\"summary\">\r\n            <p-tableHeaderCheckbox></p-tableHeaderCheckbox>\r\n            <span class=\"select-all\" (click)=\"onSelectAll(managers)\" i18n>\r\n              Select all\r\n            </span>\r\n            <span class=\"filler\"></span>\r\n            <div class=\"summary-actions\">\r\n              <span (click)=\"onRemove($event)\" [class.disabled]=\"removalInProgress || !state.isReady || selection.length === 0\">\r\n              <span i18n>Remove</span>\r\n                <i class=\"fa fa-trash-alt\"></i>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </alg-grid>\r\n\r\n      <ng-template #noManagers>\r\n        <div class=\"validation-text\" i18n>\r\n          This group has no dedicated managers.\r\n        </div>\r\n      </ng-template>\r\n    </alg-section>\r\n    <alg-group-manager-add\r\n      *ngIf=\"groupData?.group?.currentUserCanManage === 'memberships_and_group'\"\r\n      [groupData]=\"groupData\"\r\n      [managers]=\"managers\"\r\n      (added)=\"onAdded()\"\r\n    ></alg-group-manager-add>\r\n  </ng-container>\r\n\r\n  <alg-manager-permission-dialog\r\n    [visible]=\"isPermissionsEditDialogOpened\"\r\n    [group]=\"groupData?.group\"\r\n    [manager]=\"dialogManager\"\r\n    (close)=\"closePermissionsEditDialog($event)\"\r\n  ></alg-manager-permission-dialog>\r\n</ng-container>\r\n","import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { GetGroupManagersService, Manager } from '../../http-services/get-group-managers.service';\r\nimport { GroupData, GroupDataSource } from '../../services/group-datasource.service';\r\nimport { RemoveGroupManagerService } from '../../http-services/remove-group-manager.service';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { mapStateData } from '../../../../shared/operators/state';\r\nimport { UserSessionService } from '../../../../shared/services/user-session.service';\r\nimport { ConfirmationService } from 'primeng/api';\r\nimport { displayGroupManagerRemovalResponseToast } from './group-manager-removal-response-handling';\r\nimport { DataPager } from 'src/app/shared/helpers/data-pager';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nconst managersLimit = 25;\r\n\r\n@Component({\r\n  selector: 'alg-group-manager-list',\r\n  templateUrl: './group-manager-list.component.html',\r\n  styleUrls: [ './group-manager-list.component.scss' ]\r\n})\r\nexport class GroupManagerListComponent implements OnChanges {\r\n\r\n  @Input() groupData?: GroupData;\r\n\r\n  selection: Manager[] = [];\r\n  removalInProgress = false;\r\n  isPermissionsEditDialogOpened = false;\r\n  dialogManager?: Manager & { canManageAsText: string };\r\n\r\n  readonly datapager = new DataPager({\r\n    fetch: (pageSize, latestManager?: Manager): Observable<Manager[]> => {\r\n      if (!this.groupData) throw new Error('unexpected');\r\n      return this.getGroupManagersService.getGroupManagers(this.groupData.group.id, { limit: pageSize, fromId: latestManager?.id });\r\n    },\r\n    pageSize: managersLimit,\r\n    onLoadMoreError: (): void => {\r\n      this.actionFeedbackService.error($localize`Could not load more results, are you connected to the internet?`);\r\n    },\r\n  });\r\n\r\n  readonly state$ = this.datapager.list$.pipe(\r\n    mapStateData(managers => managers.map(manager => ({\r\n      ...manager,\r\n      canManageAsText: this.getManagerLevel(manager),\r\n    }))),\r\n  );\r\n\r\n  constructor(\r\n    private getGroupManagersService: GetGroupManagersService,\r\n    private removeGroupManagerService: RemoveGroupManagerService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private groupDataSource: GroupDataSource,\r\n    private userService: UserSessionService,\r\n    private confirmationService: ConfirmationService,\r\n  ) {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.groupData) {\r\n      (changes.groupData?.previousValue as GroupData | undefined)?.group.id !== this.groupData?.group.id\r\n        ? this.fetchData()\r\n        : this.fetchMoreData();\r\n    }\r\n  }\r\n\r\n  private getManagerLevel(manager: Manager): string {\r\n    switch (manager.canManage) {\r\n      case 'none':\r\n        return $localize`Read-only`;\r\n      case 'memberships':\r\n        return $localize`Memberships`;\r\n      case 'memberships_and_group':\r\n        return $localize`Memberships and group`;\r\n    }\r\n  }\r\n\r\n  fetchData(): void {\r\n    this.datapager.reset();\r\n    this.fetchMoreData();\r\n  }\r\n  fetchMoreData(): void {\r\n    if (!this.groupData) throw new Error('unexpected');\r\n    this.datapager.load();\r\n  }\r\n\r\n  onSelectAll(managers: Manager[]): void {\r\n    if (this.selection.length === managers.length) {\r\n      this.selection = [];\r\n      return;\r\n    }\r\n    this.selection = managers;\r\n  }\r\n\r\n  onRemove(event: Event): void {\r\n    if (this.selection.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const currentUserId = this.userService.session$.getValue()?.groupId;\r\n\r\n    if (!currentUserId) {\r\n      throw new Error('Unexpected: Missed current user ID');\r\n    }\r\n\r\n    if (this.selection.some(manager => manager.id === currentUserId)) {\r\n      this.confirmationService.confirm({\r\n        target: event.target || undefined,\r\n        key: 'commonPopup',\r\n        icon: 'pi pi-exclamation-triangle',\r\n        message: $localize`Are you sure to remove yourself from the managers of this group? You may lose manager access and\r\n          not be able to restore it.`,\r\n        acceptLabel: $localize`Yes, remove me from the group managers`,\r\n        acceptButtonStyleClass: 'p-button-danger',\r\n        acceptIcon: 'fa fa-check',\r\n        rejectLabel: $localize`No`,\r\n        accept: () => this.remove(),\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n  }\r\n\r\n  remove(): void {\r\n    if (!this.groupData) {\r\n      throw new Error('Unexpected: Missed groupData');\r\n    }\r\n\r\n    const currentUserId = this.userService.session$.getValue()?.groupId;\r\n\r\n    if (!currentUserId) {\r\n      throw new Error('Unexpected: Missed current user ID');\r\n    }\r\n\r\n    const groupId = this.groupData.group.id;\r\n    const ownManagerId = this.selection.find(manager => manager.id === currentUserId)?.id;\r\n\r\n    this.removalInProgress = true;\r\n\r\n    this.removeGroupManagerService.removeBatch(\r\n      groupId,\r\n      this.selection.filter(manager => manager.id !== ownManagerId).map(manager => manager.id),\r\n      ownManagerId,\r\n    )\r\n      .subscribe({\r\n        next: result => {\r\n          displayGroupManagerRemovalResponseToast(this.actionFeedbackService, result);\r\n          this.removalInProgress = false;\r\n\r\n          if (result.countSuccess > 0) {\r\n            this.selection = [];\r\n            this.fetchData();\r\n          }\r\n        },\r\n        error: err => {\r\n          this.removalInProgress = false;\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n  }\r\n\r\n  openPermissionsEditDialog(manager: Manager & { canManageAsText: string }): void {\r\n    this.isPermissionsEditDialogOpened = true;\r\n    this.dialogManager = manager;\r\n  }\r\n\r\n  closePermissionsEditDialog(event: { updated: boolean }): void {\r\n    this.isPermissionsEditDialogOpened = false;\r\n    this.dialogManager = undefined;\r\n\r\n    if (event.updated) {\r\n      this.fetchData();\r\n      this.groupDataSource.refetchGroup();\r\n    }\r\n  }\r\n\r\n  onAdded(): void {\r\n    this.fetchData();\r\n  }\r\n}\r\n","import { ActionFeedbackService } from 'src/app/shared/services/action-feedback.service';\r\nimport { Result } from '../../http-services/remove-group-manager.service';\r\n\r\nexport function displayGroupManagerRemovalResponseToast(feedbackService: ActionFeedbackService, result: Result): void {\r\n  if (result.countSuccess === result.countRequests) {\r\n    feedbackService.success($localize`${result.countSuccess} manager(s) have been removed`);\r\n  } else if (result.countSuccess === 0) {\r\n    feedbackService.error($localize`Unable to remove the selected manager(s). ` + `${result.errorText || ''}`);\r\n  } else {\r\n    feedbackService.partial(\r\n      $localize`${result.countSuccess} manager(s) have been removed, ${result.countRequests - result.countSuccess} could\r\n       not be removed. ` + `${result.errorText || ''}`\r\n    );\r\n  }\r\n}\r\n","<alg-group-manager-list\r\n  [groupData]=\"groupData\"\r\n  *ngIf=\"groupData?.group?.isCurrentUserManager || groupData?.group?.currentUserMembership !== 'none'; else noPermission\"\r\n></alg-group-manager-list>\r\n\r\n<ng-template #noPermission>\r\n  <div class=\"error validation-text\" i18n>You are not allowed to see this page.</div>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\nimport { ManagementAdditions } from '../../helpers/group-management';\r\nimport { GroupData } from '../../services/group-datasource.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-managers',\r\n  templateUrl: './group-managers.component.html',\r\n  styleUrls: [ './group-managers.component.scss' ],\r\n})\r\nexport class GroupManagersComponent {\r\n  @Input() groupData?: GroupData & { group: GroupData['group'] & ManagementAdditions };\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\nimport { appConfig } from '../../../shared/helpers/config';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { pipe } from 'fp-ts/function';\r\nimport { itemCorePermDecoder, itemEntryTimePermDecoder, itemSessionPermDecoder } from 'src/app/shared/models/domain/item-permissions';\r\n\r\nconst groupPermissionsDecoder = pipe(\r\n  itemCorePermDecoder,\r\n  D.intersect(itemSessionPermDecoder),\r\n  D.intersect(itemEntryTimePermDecoder),\r\n);\r\n\r\nconst grantedPermissionsDecoder = D.struct({\r\n  group: D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n  }),\r\n  item: D.struct({\r\n    id: D.string,\r\n    languageTag: D.string,\r\n    requiresExplicitEntry: D.boolean,\r\n    title: D.nullable(D.string),\r\n  }),\r\n  permissions: groupPermissionsDecoder,\r\n  sourceGroup: D.struct({\r\n    id: D.string,\r\n    name: D.string,\r\n  }),\r\n});\r\n\r\nexport type GroupPermissions = D.TypeOf<typeof groupPermissionsDecoder>;\r\nexport type GrantedPermissions = D.TypeOf<typeof grantedPermissionsDecoder>;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GrantedPermissionsService {\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  get(id: string, descendants = 0): Observable<GrantedPermissions[]> {\r\n    const httpParams = new HttpParams().set('descendants', descendants);\r\n    return this.http.get<unknown>(`${appConfig.apiUrl}/groups/${ id }/granted_permissions`, {\r\n      params: httpParams,\r\n    }).pipe(\r\n      decodeSnakeCase(D.array(grantedPermissionsDecoder)),\r\n    );\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nconst PERMISSION_CAPTIONS = {\r\n  none: $localize`None`,\r\n  children: $localize`Children`,\r\n  all: $localize`All`,\r\n  all_with_grant: $localize`All with grant`,\r\n  enter: $localize`Enter`,\r\n  content: $localize`Content`,\r\n  content_with_descendants: $localize`Content with descendants`,\r\n  solution: $localize`Solution`,\r\n  solution_with_grant: $localize`Solution with grant`,\r\n  info: $localize`Info`,\r\n  result: $localize`Result`,\r\n  answer: $localize`Answer`,\r\n  answer_with_grant: $localize`Answer with grant`,\r\n};\r\n\r\n@Pipe({ name: 'groupPermissionCaption', pure: true })\r\nexport class GroupPermissionCaptionPipe implements PipeTransform {\r\n  constructor() {}\r\n\r\n  transform(value: keyof typeof PERMISSION_CAPTIONS): string {\r\n    return PERMISSION_CAPTIONS[value] ?? $localize`No caption`;\r\n  }\r\n}\r\n","<ng-container *ngIf=\"permissions\">\r\n  <ul class=\"captions\">\r\n    <li class=\"caption-item\">\r\n      <div class=\"caption\">Can View: {{ permissions.canView | groupPermissionCaption }}</div>\r\n    </li>\r\n    <li class=\"caption-item\">\r\n      <div class=\"caption\">Can Grant View: {{ permissions.canGrantView | groupPermissionCaption }}</div>\r\n    </li>\r\n    <li class=\"caption-item\">\r\n      <div class=\"caption\">Can Enter From: {{ permissions.canEnterFrom | date:'d/MM/y' }}</div>\r\n    </li>\r\n    <li class=\"caption-item\">\r\n      <div class=\"caption\">Until: {{ permissions.canEnterUntil | date:'d/MM/y' }}</div>\r\n    </li>\r\n  </ul>\r\n</ng-container>\r\n","import { Component, Input } from '@angular/core';\r\nimport { GroupPermissions } from '../../http-services/granted-permissions.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-permissions',\r\n  templateUrl: './group-permissions.component.html',\r\n  styleUrls: [ './group-permissions.component.scss' ],\r\n})\r\nexport class GroupPermissionsComponent {\r\n  @Input() permissions?: GroupPermissions;\r\n}\r\n","<ng-container *ngIf=\"group?.currentUserCanGrantGroupAccess; else noAccess\">\r\n  <alg-section icon=\"fa fa-users\" i18n-label label=\"Activity associated to {{ group?.name }}\">\r\n    <ng-container *ngIf=\"rootActivityState$ | async as rootActivityState\">\r\n      <div class=\"spinner\" *ngIf=\"rootActivityState.isFetching\">\r\n        <alg-loading size=\"medium\"></alg-loading>\r\n      </div>\r\n\r\n      <alg-error\r\n        *ngIf=\"rootActivityState.isError\"\r\n        i18n-message message=\"Error while loading the root activity.\"\r\n        [showRefreshButton]=\"true\"\r\n        refreshButtonType=\"refresh\"\r\n        (refresh)=\"refresh()\"\r\n      ></alg-error>\r\n\r\n      <ng-container *ngIf=\"rootActivityState.isReady\">\r\n        <ng-container *ngIf=\"rootActivityState.data; else noActivity\">\r\n          <div class=\"item\">\r\n            <div>\r\n              <i class=\"icon fa fa-folder\"></i>\r\n              <strong><ng-container i18n>Root activity:</ng-container> {{ rootActivityState.data.string.title }}</strong>\r\n            </div>\r\n          </div>\r\n        </ng-container>\r\n\r\n        <ng-template #noActivity>\r\n          <div i18n>This group has no root activity.</div>\r\n        </ng-template>\r\n      </ng-container>\r\n    </ng-container>\r\n  </alg-section>\r\n\r\n  <alg-section\r\n    icon=\"fa fa-book\"\r\n    i18n-label label=\"Specific permissions given to the group on content\"\r\n  >\r\n    <ng-container *ngIf=\"permissionState$ | async as permissionState\">\r\n      <div class=\"spinner\" *ngIf=\"permissionState.isFetching\">\r\n        <alg-loading size=\"medium\"></alg-loading>\r\n      </div>\r\n\r\n      <alg-error\r\n        *ngIf=\"permissionState.isError\"\r\n        i18n-message message=\"Error while loading permissions.\"\r\n        [showRefreshButton]=\"true\"\r\n        refreshButtonType=\"refresh\"\r\n        (refresh)=\"refreshPermissions()\"\r\n      ></alg-error>\r\n\r\n      <ng-container *ngIf=\"permissionState.isReady\">\r\n        <ng-container *ngIf=\"permissionState.data.length > 1; else noPermissions\">\r\n          <div class=\"item\" *ngFor=\"let grantedPermission of permissionState.data\">\r\n          <div>\r\n            <i class=\"icon fa fa-folder\"></i>\r\n            <strong>\r\n              {{ grantedPermission.item.title }}.\r\n            </strong>\r\n            <ng-container\r\n              *ngIf=\"grantedPermission.sourceGroup.id !== group?.id && grantedPermission.group.id !== group?.id; else currentGroup\">\r\n                <span i18n>Given by</span>\r\n                <a\r\n                  class=\"alg-link\"\r\n                  [routerLink]=\"{ id: grantedPermission.sourceGroup.id, isUser: false } | groupLink\"\r\n                >\r\n                  {{ grantedPermission.sourceGroup.name }}\r\n                </a>\r\n            </ng-container>\r\n            <ng-template #currentGroup>\r\n              <span i18n>Given by this group</span>\r\n            </ng-template>\r\n          </div>\r\n          <alg-group-permissions [permissions]=\"grantedPermission.permissions\"></alg-group-permissions>\r\n        </div>\r\n        </ng-container>\r\n\r\n        <ng-template #noPermissions>\r\n          <div i18n>This group has no specific permissions.</div>\r\n        </ng-template>\r\n      </ng-container>\r\n    </ng-container>\r\n  </alg-section>\r\n</ng-container>\r\n\r\n<ng-template #noAccess>\r\n  <p class=\"error alg-error-text\" i18n>You are not allowed to manage permissions of this group.</p>\r\n</ng-template>\r\n","import { Component, Input, OnChanges, OnDestroy } from '@angular/core';\r\nimport { Group } from '../../http-services/get-group-by-id.service';\r\nimport { GetItemByIdService } from '../../../item/http-services/get-item-by-id.service';\r\nimport { ReplaySubject, of, Subject } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { mapToFetchState } from '../../../../shared/operators/state';\r\nimport { GrantedPermissionsService } from '../../http-services/granted-permissions.service';\r\n\r\n@Component({\r\n  selector: 'alg-group-access',\r\n  templateUrl: './group-access.component.html',\r\n  styleUrls: [ './group-access.component.scss' ],\r\n})\r\nexport class GroupAccessComponent implements OnChanges, OnDestroy {\r\n  @Input() group?: Group;\r\n\r\n  private readonly group$ = new ReplaySubject<Group>(1);\r\n\r\n  private refresh$ = new Subject<void>();\r\n  rootActivityState$ = this.group$.pipe(\r\n    switchMap(({ rootActivityId }) => {\r\n      if (!rootActivityId) {\r\n        return of(null);\r\n      }\r\n      return this.getItemByIdService.get(rootActivityId);\r\n    }),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n  );\r\n\r\n  private permissionsRefresh$ = new Subject<void>();\r\n  permissionState$ = this.group$.pipe(\r\n    switchMap(group => this.grantedPermissionsService.get(group.id)),\r\n    mapToFetchState({ resetter: this.permissionsRefresh$ }),\r\n  );\r\n\r\n  constructor(\r\n    private getItemByIdService: GetItemByIdService,\r\n    private grantedPermissionsService: GrantedPermissionsService,\r\n  ) {\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.group) {\r\n      this.group$.next(this.group);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.group$.complete();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  refreshPermissions(): void {\r\n    this.permissionsRefresh$.next();\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n\r\n  <ng-container *ngIf=\"state.data?.group as group\">\r\n    <div *ngIf=\"state.isFetching\" class=\"block-ui\"></div>\r\n    <alg-group-header [groupData]=\"state.data\" *ngIf=\"!(fullFrame$ | async)?.active\"></alg-group-header>\r\n    <alg-pending-join-requests\r\n        *ngIf=\"group.isCurrentUserManager && group.currentUserCanManage !== 'none'\"\r\n        [groupId]=\"group.id\"\r\n    ></alg-pending-join-requests>\r\n    <alg-group-indicator\r\n        class=\"group-indicator\"\r\n        *ngIf=\"group.currentUserManagership !== 'none' || group.currentUserMembership !== 'none'\"\r\n        [group]=\"group\"\r\n    >\r\n    </alg-group-indicator>\r\n    <!-- tabs -- if only the first tab is visible, do not show the tab bar -->\r\n    <div [hidden]=\"!group.isCurrentUserManager && group.currentUserMembership === 'none' && !adminTab.isActive && !accessTab?.isActive && !compositionTab.isActive && !settingsTab.isActive\">\r\n      <div class=\"nav-tab\">\r\n        <a\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./'\"\r\n          routerLinkActive #overviewTab=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n          [class.active]=\"overviewTab.isActive\"\r\n          i18n\r\n        >\r\n          Overview\r\n        </a>\r\n        <a\r\n          [hidden]=\"!group.isCurrentUserManager && !compositionTab?.isActive\"\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./members'\"\r\n          routerLinkActive #compositionTab=\"routerLinkActive\"\r\n          [class.active]=\"compositionTab.isActive\"\r\n          i18n\r\n        >\r\n          Composition\r\n        </a>\r\n        <a\r\n          [hidden]=\"!group.isCurrentUserManager && group.currentUserMembership === 'none' && !adminTab?.isActive\"\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./managers'\"\r\n          routerLinkActive #adminTab=\"routerLinkActive\"\r\n          [class.active]=\"adminTab.isActive\"\r\n          i18n\r\n        >\r\n          Managers\r\n        </a>\r\n        <a\r\n            [hidden]=\"!group.currentUserCanGrantGroupAccess && !accessTab?.isActive\"\r\n            class=\"nav-tab-item\"\r\n            [routerLink]=\"'./access'\"\r\n            routerLinkActive #accessTab=\"routerLinkActive\"\r\n            [class.active]=\"accessTab.isActive\"\r\n            i18n\r\n        >\r\n          Access\r\n        </a>\r\n        <a\r\n          [hidden]=\"!group.canCurrentUserManageGroup && !settingsTab?.isActive\"\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./settings'\"\r\n          routerLinkActive #settingsTab=\"routerLinkActive\"\r\n          [class.active]=\"settingsTab.isActive\"\r\n          i18n\r\n        >\r\n          Settings\r\n        </a>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"bg-white\">\r\n      <alg-group-overview\r\n        *ngIf=\"overviewTab?.isActive || !overviewTab && group.currentUserManagership === 'none' && group.currentUserMembership === 'none'\"\r\n        [group]=\"group\"\r\n        (groupRefreshRequired)=\"onGroupRefreshRequired()\"\r\n        (leftGroup)=\"refreshNav()\"\r\n      ></alg-group-overview>\r\n      <alg-group-composition *ngIf=\"!!compositionTab?.isActive\" [groupData]=\"state.data\" (groupRefreshRequired)=\"onGroupRefreshRequired()\" (addedGroup)=\"refreshNav()\" (removedGroup)=\"refreshNav()\"></alg-group-composition>\r\n      <alg-group-managers *ngIf=\"!!adminTab?.isActive\" [groupData]=\"state.data\"></alg-group-managers>\r\n      <alg-group-access *ngIf=\"!!accessTab?.isActive\" [group]=\"group\"></alg-group-access>\r\n      <alg-group-edit *ngIf=\"!!settingsTab?.isActive\" #groupEdit></alg-group-edit>\r\n    </div>\r\n\r\n  </ng-container>\r\n\r\n  <alg-loading *ngIf=\"state.isFetching && !state.data\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    [showRefreshButton]=\"$any(state.error).status !== 403\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"onGroupRefreshRequired()\"\r\n  >\r\n    <ng-container *ngIf=\"$any(state.error).status === 403; else otherError;\" i18n>\r\n      You are not allowed to view this group page.\r\n    </ng-container>\r\n    <ng-template #otherError>\r\n      <ng-container i18n>Error while loading the group info</ng-container>\r\n    </ng-template>\r\n  </alg-error>\r\n\r\n</ng-container>\r\n","import { Component, ViewChild } from '@angular/core';\r\nimport { GroupDataSource } from '../../services/group-datasource.service';\r\nimport { withManagementAdditions } from '../../helpers/group-management';\r\nimport { RouterLinkActive } from '@angular/router';\r\nimport { mapStateData } from 'src/app/shared/operators/state';\r\nimport { LayoutService } from '../../../../shared/services/layout.service';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\nimport { PendingChangesComponent } from '../../../../shared/guards/pending-changes-guard';\r\nimport { GroupEditComponent } from '../group-edit/group-edit.component';\r\n\r\n@Component({\r\n  selector: 'alg-group-details',\r\n  templateUrl: './group-details.component.html',\r\n  styleUrls: [ './group-details.component.scss' ],\r\n})\r\nexport class GroupDetailsComponent implements PendingChangesComponent {\r\n\r\n  state$ = this.groupDataSource.state$.pipe(mapStateData(state => ({\r\n    ...state,\r\n    group: withManagementAdditions(state.group),\r\n  })));\r\n  fullFrame$ = this.layoutService.fullFrame$;\r\n\r\n  // use of ViewChild required as these elements are shown under some conditions, so may be undefined\r\n  @ViewChild('overviewTab') overviewTab?: RouterLinkActive;\r\n  @ViewChild('compositionTab') compositionTab?: RouterLinkActive;\r\n  @ViewChild('adminTab') adminTab?: RouterLinkActive;\r\n  @ViewChild('settingsTab') settingsTab?: RouterLinkActive;\r\n  @ViewChild('accessTab') accessTab?: RouterLinkActive;\r\n  @ViewChild('groupEdit') groupEdit?: GroupEditComponent;\r\n\r\n  isDirty(): boolean {\r\n    return !!this.groupEdit?.isDirty();\r\n  }\r\n\r\n  constructor(\r\n    private groupDataSource: GroupDataSource,\r\n    private layoutService: LayoutService,\r\n    private currentContentService: CurrentContentService,\r\n  ) {}\r\n\r\n  refreshNav(): void {\r\n    this.currentContentService.forceNavMenuReload();\r\n  }\r\n\r\n  onGroupRefreshRequired(): void {\r\n    this.groupDataSource.refetchGroup();\r\n    this.refreshNav();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { map } from 'rxjs/operators';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from '../../../shared/operators/decode';\r\n\r\nconst groupIdDecoder = D.string;\r\n\r\ntype GroupId = D.TypeOf<typeof groupIdDecoder>;\r\n\r\nconst groupPathDecoder = D.array(groupIdDecoder);\r\n\r\ntype GroupPath = D.TypeOf<typeof groupPathDecoder>;\r\n\r\nconst groupPathResponseDecoder = D.struct({\r\n  path: groupPathDecoder,\r\n});\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetGroupPathService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getGroupPath(groupId: GroupId): Observable<GroupPath> {\r\n    return this.http.get<unknown>(`${appConfig.apiUrl}/groups/${groupId}/path-from-root`).pipe(\r\n      decodeSnakeCase(groupPathResponseDecoder),\r\n      // remove the last element from the path as it is the group id itself, that we do not need in our group paths\r\n      map(raw => raw.path.slice(0,-1)),\r\n    );\r\n  }\r\n\r\n}\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, ParamMap, UrlTree } from '@angular/router';\r\nimport { Subscription } from 'rxjs';\r\nimport { combineLatestWith, filter, map } from 'rxjs/operators';\r\nimport { GetGroupPathService } from 'src/app/modules/group/http-services/get-group-path.service';\r\nimport { groupInfo, GroupInfo, isGroupInfo } from 'src/app/shared/models/content/group-info';\r\nimport { readyData } from 'src/app/shared/operators/state';\r\nimport { groupRoute, groupRouteFromParams, isGroupRouteError } from 'src/app/shared/routing/group-route';\r\nimport { GroupRouter } from 'src/app/shared/routing/group-router';\r\nimport { CurrentContentService } from 'src/app/shared/services/current-content.service';\r\nimport { LayoutService } from 'src/app/shared/services/layout.service';\r\nimport { ModeAction, ModeService } from 'src/app/shared/services/mode.service';\r\nimport { GroupDataSource } from '../../services/group-datasource.service';\r\n\r\nconst GROUP_BREADCRUMB_CAT = $localize`Groups`;\r\n\r\n/**\r\n * GroupByIdComponent is just a container for detail or edit page but manages the fetching on id change and (un)setting the current content.\r\n */\r\n@Component({\r\n  selector: 'alg-group-by-id',\r\n  templateUrl: './group-by-id.component.html',\r\n  styleUrls: [ './group-by-id.component.scss' ],\r\n  providers: [ GroupDataSource ],\r\n})\r\nexport class GroupByIdComponent implements OnDestroy {\r\n\r\n  private subscriptions: Subscription[] = []; // subscriptions to be freed up on destroy\r\n  private hasRedirected = false;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private currentContent: CurrentContentService,\r\n    private modeService: ModeService,\r\n    private layoutService: LayoutService,\r\n    private groupDataSource: GroupDataSource,\r\n    private groupRouter: GroupRouter,\r\n    private getGroupPath: GetGroupPathService,\r\n  ) {\r\n    this.layoutService.configure({ fullFrameActive: false });\r\n\r\n    // on route change: refetch group if needed\r\n    this.activatedRoute.paramMap.subscribe(params => this.fetchGroupAtRoute(params));\r\n\r\n    // on state change, update current content page info (for breadcrumb)\r\n    this.subscriptions.push(\r\n      this.groupDataSource.state$.pipe(\r\n        readyData(),\r\n        map(({ group, route, breadcrumbs }): GroupInfo => groupInfo({\r\n          route: route,\r\n          breadcrumbs: {\r\n            category: GROUP_BREADCRUMB_CAT,\r\n            path: breadcrumbs.map(breadcrumb => ({\r\n              title: breadcrumb.name,\r\n              navigateTo: (): UrlTree => this.groupRouter.url(breadcrumb.route),\r\n            })),\r\n            currentPageIdx: breadcrumbs.length - 1,\r\n          },\r\n          title: group.name,\r\n        })),\r\n      ).subscribe(p => this.currentContent.replace(p)),\r\n\r\n      this.modeService.modeActions$.pipe(\r\n        filter(action => [ ModeAction.StartEditing, ModeAction.StopEditing ].includes(action)),\r\n        combineLatestWith(this.currentContent.content$.pipe(filter(isGroupInfo))),\r\n      ).subscribe(([ action, content ]) => {\r\n        this.groupRouter.navigateTo(content.route, { page: [ action === ModeAction.StartEditing ? 'edit' : 'details' ] });\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.currentContent.clear();\r\n    this.subscriptions.forEach(s => s.unsubscribe());\r\n  }\r\n\r\n  private fetchGroupAtRoute(params: ParamMap): void {\r\n    const route = groupRouteFromParams(params);\r\n\r\n    if (isGroupRouteError(route)) {\r\n      if (!route.id) throw new Error('a group id is required to open group details');\r\n      if (this.hasRedirected) throw new Error('too many redirections');\r\n      else this.solveMissingPathAttempt(route.id);\r\n      return;\r\n    }\r\n\r\n    this.hasRedirected = false;\r\n    this.currentContent.replace(groupInfo({\r\n      route,\r\n      breadcrumbs: { category: GROUP_BREADCRUMB_CAT, path: [], currentPageIdx: -1 },\r\n    }));\r\n    this.groupDataSource.fetchGroup(route);\r\n  }\r\n\r\n  private solveMissingPathAttempt(groupId: string): void {\r\n    this.getGroupPath.getGroupPath(groupId).subscribe({\r\n      next: path => {\r\n        this.hasRedirected = true;\r\n        this.groupRouter.navigateTo(groupRoute({ id: groupId, isUser: false }, path), { navExtras: { replaceUrl: true } });\r\n      },\r\n      error: () => {\r\n        this.groupRouter.navigateTo(groupRoute({ id: groupId, isUser: false }, []), { navExtras: { replaceUrl: true } });\r\n      }\r\n    });\r\n  }\r\n}\r\n","<router-outlet></router-outlet>\r\n","<ng-container *ngIf=\"currentUser$ | async as currentUser\">\r\n  <div class=\"bg-white\">\r\n    <div class=\"modify-section\">\r\n      <div class=\"flex-1 modify-description\" i18n>\r\n        The following information is what we receive from France-IOI login platform.\r\n      </div>\r\n      <p-button\r\n        styleClass=\"alg-button p-button-rounded-full\"\r\n        i18n-label label=\"Modify\"\r\n        icon=\"fa fa-pen\"\r\n        (click)=\"onModify(currentUser.groupId)\"\r\n      ></p-button>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"bg-white\">\r\n    <alg-section i18n-label label=\"Personal Information\" icon=\"fa fa-users\">\r\n      <ul class=\"alg-data-list\">\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Login</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.login }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>First Name</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.firstName }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Last Name</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.lastName }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Birth date</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.birthDate }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Student ID</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.studentId }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Gender</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.sex }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Nationality</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.countryCode }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Personal Web page</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.webSite }}</span>\r\n        </li>\r\n      </ul>\r\n    </alg-section>\r\n  </div>\r\n\r\n  <div class=\"bg-white\">\r\n    <alg-section i18n-label label=\"School Information\" icon=\"fa fa-graduation-cap\">\r\n      <ul class=\"alg-data-list\">\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Your grade</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.grade }}</span>\r\n        </li>\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Highschool graduation year</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.graduationYear }}</span>\r\n        </li>\r\n      </ul>\r\n    </alg-section>\r\n  </div>\r\n\r\n  <div class=\"bg-white\">\r\n    <alg-section i18n-label label=\"Contact Information\" icon=\"fa fa-envelope\">\r\n      <ul class=\"alg-data-list\">\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Primary email</span>\r\n          <span class=\"alg-data-list-item-value\">{{ currentUser.email }}</span>\r\n        </li>\r\n      </ul>\r\n    </alg-section>\r\n  </div>\r\n</ng-container>\r\n","import { Component } from '@angular/core';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { appConfig } from 'src/app/shared/helpers/config';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Location } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'alg-current-user',\r\n  templateUrl: './current-user.component.html',\r\n  styleUrls: [ './current-user.component.scss' ],\r\n})\r\nexport class CurrentUserComponent {\r\n  currentUser$ = this.userSessionService.userProfile$;\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private location: Location,\r\n  ) {}\r\n\r\n  onModify(userId: string): void {\r\n    const backUrl = window.location.origin + this.location.prepareExternalUrl('update-profile.html');\r\n    window.open(\r\n      `${ appConfig.oauthServerUrl }?all=1&client_id=${ userId }&redirect_uri=${encodeURI(backUrl)}`,\r\n      undefined,\r\n      'popup,width=800,height=640'\r\n    );\r\n\r\n    const onProfileUpdated = (): void => {\r\n      this.userSessionService.refresh().subscribe({\r\n        error: err => {\r\n          this.actionFeedbackService.unexpectedError();\r\n          if (!(err instanceof HttpErrorResponse)) throw err;\r\n        }\r\n      });\r\n      window.removeEventListener('profileUpdated', onProfileUpdated);\r\n    };\r\n\r\n    window.addEventListener('profileUpdated', onProfileUpdated);\r\n  }\r\n\r\n}\r\n","<div class=\"alg-page-header\" *ngIf=\"user\">\r\n  <div>\r\n    <div class=\"alg-page-header-title\">\r\n      {{ user | userCaption }}\r\n    </div>\r\n\r\n    <div class=\"alg-page-header-subtitle\" *ngIf=\"user.webSite\">\r\n      <i class=\"fa fa-external-link-alt\"></i>\r\n      <a class=\"web-site alg-link base-color\" [attr.href]=\"user.webSite\" target=\"_blank\">{{ user.webSite }}</a>\r\n    </div>\r\n\r\n    <div class=\"free-text alg-page-header-subtitle\" *ngIf=\"user.freeText\">\r\n      {{ user.freeText }}\r\n    </div>\r\n  </div>\r\n\r\n  <alg-page-navigator\r\n    *ngIf=\"true\"\r\n    [allowEditing]=\"false\"\r\n    [allowWatching]=\"!!user.currentUserCanWatchUser && !user.isCurrentUser\"\r\n    [isWatched]=\"!!(isCurrentGroupWatched$ | async)\"\r\n    [allowFullScreen]=\"false\"\r\n    (edit)=\"onEditButtonClicked()\"\r\n    (watch)=\"onStartWatchButtonClicked()\"\r\n    (stopWatch)=\"onStopWatchButtonClicked()\"\r\n  ></alg-page-navigator>\r\n</div>\r\n","import { Input, Component } from '@angular/core';\r\nimport { User } from '../../http-services/get-user.service';\r\nimport { map } from 'rxjs/operators';\r\nimport { ModeAction, ModeService } from '../../../../shared/services/mode.service';\r\nimport { GroupWatchingService } from 'src/app/core/services/group-watching.service';\r\nimport { RawGroupRoute } from 'src/app/shared/routing/group-route';\r\n\r\n@Component({\r\n  selector: 'alg-user-header[user][route]',\r\n  templateUrl: './user-header.component.html',\r\n  styleUrls: [ './user-header.component.scss' ],\r\n})\r\nexport class UserHeaderComponent {\r\n  @Input() user!: User;\r\n  @Input() route!: RawGroupRoute;\r\n\r\n  isCurrentGroupWatched$ = this.groupWatchingService.watchedGroup$.pipe(\r\n    map(watchedGroup => !!(watchedGroup && watchedGroup.route.id === this.user?.groupId)),\r\n  );\r\n\r\n  constructor(\r\n    private groupWatchingService: GroupWatchingService,\r\n    private modeService: ModeService,\r\n  ) {\r\n  }\r\n\r\n  onEditButtonClicked(): void {\r\n    this.modeService.modeActions$.next(ModeAction.StartEditing);\r\n  }\r\n\r\n  onStartWatchButtonClicked(): void {\r\n    this.groupWatchingService.startUserWatching(this.route, this.user);\r\n  }\r\n\r\n  onStopWatchButtonClicked(): void {\r\n    this.groupWatchingService.stopWatching();\r\n  }\r\n}\r\n","<ng-container *ngIf=\"currentUser$ | async as currentUser\">\r\n  <div class=\"bg-white\">\r\n    <alg-section i18n-label label=\"Platform settings\" icon=\"fa fa-cog\">\r\n      <ul class=\"alg-data-list\">\r\n        <li class=\"alg-data-list-item\">\r\n          <span class=\"alg-data-list-item-caption\" i18n>Platform language</span>\r\n          <span class=\"alg-data-list-item-value\">\r\n            <alg-language-picker\r\n                styleClass=\"alg-language-picker-dropdown base\"\r\n                [defaultLang]=\"currentUser.defaultLanguage\"\r\n                [redirectOnChange]=\"false\"\r\n                (changeLang)=\"onChangeLang($event)\"\r\n            ></alg-language-picker>\r\n          </span>\r\n        </li>\r\n      </ul>\r\n    </alg-section>\r\n  </div>\r\n</ng-container>\r\n","import { Component } from '@angular/core';\r\nimport { ActionFeedbackService } from '../../../../shared/services/action-feedback.service';\r\nimport { LocaleService } from '../../../../core/services/localeService';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\n@Component({\r\n  selector: 'alg-platform-settings',\r\n  templateUrl: './platform-settings.component.html',\r\n  styleUrls: [ './platform-settings.component.scss' ],\r\n})\r\nexport class PlatformSettingsComponent {\r\n  currentUser$ = this.userSessionService.userProfile$;\r\n\r\n  constructor(\r\n    private userSessionService: UserSessionService,\r\n    private actionFeedbackService: ActionFeedbackService,\r\n    private localeService: LocaleService,\r\n  ) {}\r\n\r\n  onChangeLang(event: string): void {\r\n    this.update({ default_language: event });\r\n  }\r\n\r\n  update(changes: { default_language: string }): void {\r\n    this.userSessionService.updateCurrentUser(changes).subscribe({\r\n      next: () => {\r\n        this.actionFeedbackService.success($localize`Changes successfully saved.`);\r\n\r\n        if (changes.default_language) {\r\n          this.localeService.navigateTo(changes.default_language);\r\n        }\r\n      },\r\n      error: err => {\r\n        this.actionFeedbackService.unexpectedError();\r\n        if (!(err instanceof HttpErrorResponse)) throw err;\r\n      }\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"state$ | async as state\">\r\n\r\n  <alg-loading *ngIf=\"state.isFetching\"></alg-loading>\r\n\r\n  <alg-error\r\n    *ngIf=\"state.isError\"\r\n    class=\"dark\"\r\n    i18n-message message=\"Error while loading the user info\"\r\n    [showRefreshButton]=\"true\"\r\n    refreshButtonType=\"refresh\"\r\n    (refresh)=\"refresh()\"\r\n  ></alg-error>\r\n\r\n  <ng-container *ngIf=\"state.isReady\">\r\n\r\n    <alg-user-header [user]=\"state.data.user\" [route]=\"state.data.route\" *ngIf=\"!(fullFrame$ | async)?.active\"></alg-user-header>\r\n\r\n    <nav class=\"nav-tab\" *ngIf=\"(currentUserGroupId$ | async) === state.data.user.groupId || (activeRoute$ | async) === 'personal-data' || (activeRoute$ | async) === 'settings'\">\r\n      <a\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./'\"\r\n          routerLinkActive #progress=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n          [class.active]=\"progress.isActive\"\r\n          i18n\r\n      >\r\n        Progress\r\n      </a>\r\n      <a\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./personal-data'\"\r\n          routerLinkActive #personalData=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n          [class.active]=\"personalData.isActive\"\r\n          i18n\r\n          [hidden]=\"(currentUserGroupId$ | async) !== state.data.user.groupId && (activeRoute$ | async) !== 'personal-data'\"\r\n      >\r\n        Personal data\r\n      </a>\r\n      <a\r\n          class=\"nav-tab-item\"\r\n          [routerLink]=\"'./settings'\"\r\n          routerLinkActive #settings=\"routerLinkActive\"\r\n          [routerLinkActiveOptions]=\"{ matrixParams: 'ignored', queryParams: 'ignored', paths: 'exact', fragment: 'ignored'}\"\r\n          [class.active]=\"settings.isActive\"\r\n          i18n\r\n          [hidden]=\"(currentUserGroupId$ | async) !== state.data.user.groupId && (activeRoute$ | async) !== 'settings'\"\r\n      >\r\n        Settings\r\n      </a>\r\n    </nav>\r\n\r\n    <ng-container *ngIf=\"activeRoute$ | async as activeRoute\">\r\n      <ng-container *ngIf=\"activeRoute === 'progress'\">\r\n        <div class=\"bg-white\" *ngIf=\"currentUserGroupId$ | async as currentUserGroupId\">\r\n          <alg-section icon=\"fa fa-chart-line\" i18n-label label=\"Progress\">\r\n            <alg-group-log-view\r\n                [groupId]=\"currentUserGroupId !== state.data.user.groupId ? state.data.user.groupId : undefined\"\r\n                [showUserColumn]=\"false\"\r\n            ></alg-group-log-view>\r\n          </alg-section>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"activeRoute === 'personal-data'\">\r\n        <ng-container *ngIf=\"(currentUserGroupId$ | async) === state.data.user.groupId; else forbidden\">\r\n          <alg-current-user></alg-current-user>\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"activeRoute === 'settings'\">\r\n        <ng-container *ngIf=\"(currentUserGroupId$ | async) === state.data.user.groupId; else forbidden\">\r\n          <alg-platform-settings></alg-platform-settings>\r\n        </ng-container>\r\n      </ng-container>\r\n\r\n      <ng-template #forbidden>\r\n        <div class=\"bg-white\">\r\n          <alg-error i18n-message message=\"You cannot access this page for this user\"></alg-error>\r\n        </div>\r\n      </ng-template>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-container>\r\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { GetUserService } from '../../http-services/get-user.service';\r\nimport { mapToFetchState, readyData } from '../../../../shared/operators/state';\r\nimport { combineLatest, Observable, of, Subject, Subscription } from 'rxjs';\r\nimport { ActivatedRoute, NavigationEnd, Router, RouterLinkActive } from '@angular/router';\r\nimport { catchError, delay, switchMap, map, startWith, filter, share, distinctUntilChanged } from 'rxjs/operators';\r\nimport { contentInfo } from '../../../../shared/models/content/content-info';\r\nimport { CurrentContentService } from '../../../../shared/services/current-content.service';\r\nimport { UserSessionService } from '../../../../shared/services/user-session.service';\r\nimport { formatUser } from '../../../../shared/helpers/user';\r\nimport { LayoutService } from '../../../../shared/services/layout.service';\r\nimport { GetGroupBreadcrumbsService } from '../../http-services/get-group-breadcrumbs.service';\r\nimport { groupRoute, groupRouteFromParams, isGroupRoute, rawGroupRoute } from 'src/app/shared/routing/group-route';\r\nimport { GroupRouter } from 'src/app/shared/routing/group-router';\r\n\r\n@Component({\r\n  selector: 'alg-user',\r\n  templateUrl: './user.component.html',\r\n  styleUrls: [ './user.component.scss' ]\r\n})\r\nexport class UserComponent implements OnInit, OnDestroy {\r\n  @ViewChild('progress') progress?: RouterLinkActive;\r\n  @ViewChild('personalData') personalData?: RouterLinkActive;\r\n\r\n  private refresh$ = new Subject<void>();\r\n  private readonly userRoute$ = this.route.paramMap.pipe(\r\n    map(params => {\r\n      const { id, path } = groupRouteFromParams(params);\r\n      if (!id) throw new Error('expected user id is user page path');\r\n      const group = { id, isUser: true };\r\n      return path ? groupRoute(group, path) : rawGroupRoute(group);\r\n    })\r\n  );\r\n\r\n  readonly state$ = this.userRoute$.pipe(\r\n    switchMap(route => this.getUserService.getForId(route.id).pipe(map(user => ({ route: route, user: user })))),\r\n    mapToFetchState({ resetter: this.refresh$ }),\r\n    share(),\r\n  );\r\n\r\n  readonly currentUserGroupId$ = this.userSessionService.userProfile$.pipe(\r\n    delay(0),\r\n    map(userProfile => userProfile.groupId),\r\n  );\r\n\r\n  readonly fullFrame$ = this.layoutService.fullFrame$;\r\n\r\n  private url$ = this.router.events.pipe(\r\n    filter(event => event instanceof NavigationEnd),\r\n    map(() => this.router.url),\r\n    startWith(this.router.url),\r\n    distinctUntilChanged(),\r\n  );\r\n  readonly activeRoute$: Observable<'progress' | 'personal-data' | 'settings'> = this.url$.pipe(\r\n    map(url => this.getCurrentRoute(url)),\r\n  );\r\n\r\n  private readonly breadcrumbs$ = this.userRoute$.pipe(\r\n    switchMap(route => (isGroupRoute(route) ? this.getGroupBreadcrumbsService.getBreadcrumbs(route) : of(undefined)))\r\n  );\r\n\r\n  private subscription?: Subscription;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private getUserService: GetUserService,\r\n    private userSessionService: UserSessionService,\r\n    private currentContent: CurrentContentService,\r\n    private layoutService: LayoutService,\r\n    private groupRouter: GroupRouter,\r\n    private getGroupBreadcrumbsService: GetGroupBreadcrumbsService,\r\n  ) {\r\n    this.layoutService.configure({ fullFrameActive: false });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = combineLatest([\r\n      this.userRoute$,\r\n      this.activeRoute$.pipe(map(p => this.pageTitle(p))),\r\n      this.state$.pipe(readyData()),\r\n      this.breadcrumbs$.pipe(catchError(() => of(undefined))), // error is handled elsewhere\r\n    ])\r\n      .pipe(\r\n        map(([ currentUserRoute, currentPageTitle, data, breadcrumbs ]) => contentInfo({\r\n          title: formatUser(data.user),\r\n          breadcrumbs: {\r\n            category: $localize`Users`,\r\n            path: [\r\n              ...(breadcrumbs?.slice(0,-1) ?? []).map(b => ({ title: b.name, navigateTo: this.groupRouter.url(b.route) })),\r\n              { title: formatUser(data.user), navigateTo: this.groupRouter.url(currentUserRoute) },\r\n              { title: currentPageTitle }\r\n            ],\r\n            currentPageIdx: breadcrumbs ? breadcrumbs.length : 1,\r\n          }\r\n        }))\r\n      ).subscribe(contentInfo => {\r\n        this.currentContent.replace(contentInfo);\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.currentContent.clear();\r\n    this.subscription?.unsubscribe();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  refresh(): void {\r\n    this.refresh$.next();\r\n  }\r\n\r\n  /**\r\n   * Return the i18n title of a page\r\n   */\r\n  private pageTitle(page: 'progress' | 'personal-data' | 'settings'): string {\r\n    switch (page) {\r\n      case 'progress': return $localize`Progress`;\r\n      case 'personal-data': return $localize`Personal info`;\r\n      case 'settings': return $localize`Settings`;\r\n    }\r\n  }\r\n\r\n  private getCurrentRoute(url: string): 'progress' | 'personal-data' | 'settings' {\r\n    if (url.endsWith('/personal-data')) {\r\n      return 'personal-data';\r\n    } else if (url.endsWith('/settings')) {\r\n      return 'settings';\r\n    }\r\n    return 'progress';\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MyGroupsComponent } from './pages/my-groups/my-groups.component';\r\nimport { GroupDetailsComponent } from './pages/group-details/group-details.component';\r\nimport { GroupByIdComponent } from './pages/group-by-id/group-by-id.component';\r\nimport { UserComponent } from './pages/user/user.component';\r\nimport { PendingChangesGuard } from '../../shared/guards/pending-changes-guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'mine',\r\n    component: MyGroupsComponent,\r\n  },\r\n  {\r\n    path: 'users/:id',\r\n    component: UserComponent,\r\n    children: [\r\n      {\r\n        path: 'personal-data',\r\n        children: [],\r\n      },\r\n      {\r\n        path: 'settings',\r\n        children: [],\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: 'by-id/:id',\r\n    component: GroupByIdComponent,\r\n    children: [\r\n      {\r\n        path: 'details',\r\n        component: GroupDetailsComponent,\r\n        canDeactivate: [ PendingChangesGuard ],\r\n        children: [\r\n          {\r\n            path: '',\r\n            children: [],\r\n          },\r\n          {\r\n            path: 'members',\r\n            children: [],\r\n          },\r\n          {\r\n            path: 'managers',\r\n            children: [],\r\n          },\r\n          {\r\n            path: 'settings',\r\n            canDeactivate: [ PendingChangesGuard ],\r\n            children: [],\r\n          },\r\n          {\r\n            path: 'access',\r\n            children: [],\r\n          },\r\n        ]\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [ RouterModule.forChild(routes) ],\r\n  exports: [ RouterModule ],\r\n})\r\nexport class GroupRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SharedComponentsModule } from '../shared-components/shared-components.module';\r\n\r\nimport { GroupRoutingModule } from './group-routing.module';\r\n\r\nimport { GroupHeaderComponent } from './components/group-header/group-header.component';\r\nimport { GroupNoPermissionComponent } from './components/group-no-permission/group-no-permission.component';\r\nimport { GroupJoinByCodeComponent } from './components/group-join-by-code/group-join-by-code.component';\r\n\r\nimport { GroupOverviewComponent } from './pages/group-overview/group-overview.component';\r\nimport { GroupCompositionComponent } from './pages/group-composition/group-composition.component';\r\nimport { MyGroupsComponent } from './pages/my-groups/my-groups.component';\r\nimport { GroupDetailsComponent } from './pages/group-details/group-details.component';\r\nimport { DurationToMinPipe } from 'src/app/shared/pipes/duration';\r\nimport { GroupInviteUsersComponent } from './components/group-invite-users/group-invite-users.component';\r\nimport { GroupManagerListComponent } from './components/group-manager-list/group-manager-list.component';\r\nimport { CurrentUserComponent } from './pages/current-user/current-user.component';\r\nimport { GroupEditComponent } from './pages/group-edit/group-edit.component';\r\nimport { GroupByIdComponent } from './pages/group-by-id/group-by-id.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MemberListComponent } from './components/member-list/member-list.component';\r\nimport { GroupCompositionFilterComponent } from './components/group-composition-filter/group-composition-filter.component';\r\nimport { PendingChangesGuard } from 'src/app/shared/guards/pending-changes-guard';\r\nimport { JoinedGroupListComponent } from './components/joined-group-list/joined-group-list.component';\r\nimport { UserGroupInvitationsComponent } from './components/user-group-invitations/user-group-invitations.component';\r\nimport { PendingRequestComponent } from './components/pending-request/pending-request.component';\r\nimport { PendingJoinRequestsComponent } from './components/pending-join-requests/pending-join-requests.component';\r\nimport { AddSubGroupComponent } from './components/add-sub-group/add-sub-group.component';\r\nimport { ManagedGroupListComponent } from './components/managed-group-list/managed-group-list.component';\r\nimport { AssociatedActivityComponent } from './components/associated-activity/associated-activity.component';\r\nimport { GroupIndicatorComponent } from './components/group-indicator/group-indicator.component';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { RippleModule } from 'primeng/ripple';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\nimport { GroupDeleteService } from './services/group-delete.service';\r\nimport { GroupRemoveButtonComponent } from './components/group-remove-button/group-remove-button.component';\r\nimport { GroupLinksComponent } from './components/group-links/group-links.component';\r\nimport { UserComponent } from './pages/user/user.component';\r\nimport { UserHeaderComponent } from './components/user-header/user-header.component';\r\nimport { GroupLogViewComponent } from './components/group-log-view/group-log-view.component';\r\nimport { AddGroupComponent } from './components/add-group/add-group.component';\r\nimport { OverlayPanelModule } from 'primeng/overlaypanel';\r\nimport { SuggestionOfActivitiesComponent } from './components/suggestion-of-activities/suggestion-of-activities.component';\r\nimport { GroupAccessComponent } from './pages/group-access/group-access.component';\r\nimport { GroupManagersComponent } from './pages/group-managers/group-managers.component';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { ManagerPermissionDialogComponent } from './components/manager-permission-dialog/manager-permission-dialog.component';\r\nimport { GroupPermissionsComponent } from './components/group-permissions/group-permissions.component';\r\nimport { GroupLeaveComponent } from './components/group-leave/group-leave.component';\r\nimport { GroupManagerAddComponent } from './components/group-manager-add/group-manager-add.component';\r\nimport { PlatformSettingsComponent } from './pages/platform-settings/platform-settings.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GroupHeaderComponent,\r\n    GroupOverviewComponent,\r\n    GroupCompositionComponent,\r\n    MyGroupsComponent,\r\n    GroupDetailsComponent,\r\n    GroupNoPermissionComponent,\r\n    GroupJoinByCodeComponent,\r\n    DurationToMinPipe,\r\n    GroupInviteUsersComponent,\r\n    GroupManagerListComponent,\r\n    CurrentUserComponent,\r\n    GroupEditComponent,\r\n    GroupByIdComponent,\r\n    MemberListComponent,\r\n    GroupCompositionFilterComponent,\r\n    JoinedGroupListComponent,\r\n    PendingJoinRequestsComponent,\r\n    UserGroupInvitationsComponent,\r\n    PendingRequestComponent,\r\n    AddSubGroupComponent,\r\n    ManagedGroupListComponent,\r\n    AssociatedActivityComponent,\r\n    GroupRemoveButtonComponent,\r\n    GroupIndicatorComponent,\r\n    GroupLinksComponent,\r\n    UserComponent,\r\n    UserHeaderComponent,\r\n    GroupLogViewComponent,\r\n    AddGroupComponent,\r\n    GroupManagersComponent,\r\n    SuggestionOfActivitiesComponent,\r\n    GroupAccessComponent,\r\n    ManagerPermissionDialogComponent,\r\n    GroupPermissionsComponent,\r\n    GroupLeaveComponent,\r\n    GroupManagerAddComponent,\r\n    PlatformSettingsComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    GroupRoutingModule,\r\n    SharedComponentsModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    ButtonModule,\r\n    RippleModule,\r\n    TooltipModule,\r\n    OverlayPanelModule,\r\n    DialogModule,\r\n  ],\r\n  exports: [\r\n    GroupIndicatorComponent\r\n  ],\r\n  providers: [\r\n    PendingChangesGuard,\r\n    GroupDeleteService\r\n  ]\r\n})\r\n\r\nexport class GroupModule {}\r\n"],"names":["NO_SORT","sort1","sort2","JSON","stringify","opts","params","HttpParams","length","apiFormatOpts","map","opt","ascending","field","set","join","groupMembershipDecoder","pipe","D","action","group","description","id","name","type","memberSince","dateDecoder","isMembershipLocked","canLeaveTeam","JoinedGroupsService","constructor","http","getJoinedGroups","sort","this","get","appConfig","sortOptionsToHTTP","decodeSnakeCase","memberships","filter","membership","e","factory","GroupLeaveService","leave","groupId","delete","successData","data","changed","i0","JoinedGroupListComponent","joinedGroupsService","groupLeaveService","confirmationService","actionFeedbackService","Subject","ReplaySubject","sort$","startWith","distinctUntilChanged","sortEquals","switchMap","mapToFetchState","resetter","refresh$","asObservable","ngOnDestroy","complete","onCustomSort","event","multiSortMeta","meta","order","multisortEventToOptions","next","onGroupLeaveClick","confirm","target","undefined","key","message","$localize","header","icon","acceptLabel","accept","leaveGroup","rejectLabel","groupName","subscribe","refresh","success","error","_err","selectors","Action","RequestActionsService","processJoinRequests","ids","Accept","forkJoin","Array","from","entries","groupMembersIds","post","group_ids","Map","Object","processLeaveRequests","processGroupInvitations","groupIds","feedbackService","result","msg","countSuccess","countRequests","detailMsg","partial","userDecoder","login","firstName","lastName","grade","groupPendingRequestDecoder","at","user","groupInvitationDecoder","invitingUser","GetRequestsService","getGroupPendingRequests","includeSubgroup","pendingRequests","r","getGroupInvitations","groupInvitations","invitation","wrapper","table","GridComponent","EventEmitter","onSelectionChange","selection","selectionChange","emit","onRowSelect","onRowUnselect","detectSelected","selectedCol","selectedColumns","col","columns","selected","toShow","ngOnChanges","_changes","showGear","showColumns","showColumnSelection","showAll","expand","newSel","push","expandWholeWidth","handleColumnChanges","item","sortFunction","onHeaderCheckbox","reset","clear","DomHandler","TableService","provide","Table","useFactory","tableFactory","deps","ctx","PendingRequestComponent","ngOnInit","panel","collapsed","requests","onAccept","onAcceptOrReject","onReject","state","processRequests","onSelectAll","sortMeta","groupColumn","PendingJoinRequestsComponent","getRequestsService","requestActionService","label","value","dataFetching","merge","of","fetchingState","readyState","tag","isReady","showSwitch","concat","currentSort","onProcessRequests","requestMap","forEach","elm","groupID","Error","memberID","displayResponseToast","res","size","values","includes","reduce","acc","parseResults","err","unexpectedError","HttpErrorResponse","onSubgroupSwitch","selectedIdx","ensureDefined","subgroupSwitchItems","onFetch","UserGroupInvitationsComponent","parseGroupInvitationResults","ManagedGroupListComponent","managedGroupService","fetchData","getManagedGroups","getType","getCanManage","GroupCreationService","create","response","addSubgroup","parentId","childId","assertSuccess","AddGroupComponent","groupCreationService","groupRouter","title","addChild","createdId","navigateTo","rawGroupRoute","MyGroupsComponent","currentContent","layoutService","fullFrame$","configure","fullFrameActive","replace","myGroupsInfo","breadcrumbs","category","path","currentPageIdx","onGroupJoined","joinedGroupList","forceNavMenuReload","breadcrumbDecoder","GetGroupBreadcrumbsService","getBreadcrumbs","route","breadcrumb","index","groupRoute","slice","GroupDataSource","getGroupByIdService","getGroupBreadcrumbsService","fetchOperation","shareReplay","fetchGroup","refetchGroup","SuggestionOfActivitiesComponent","groupWatchingService","itemNavigationService","watchedGroup$","isNotNull","watchedGroup","getRootActivities","rootActivities","act","navigationNeighbors_r3","GroupHeaderComponent","modeService","groupNavTreeService","combineLatest","group$","navigationNeighbors$","groupWithManagement","groupData","withManagementAdditions","onEditButtonClicked","modeActions$","ModeAction","onStartWatchButtonClicked","startGroupWatching","openSuggestionOfActivitiesOverlayPanel","onStopWatchButtonClicked","op","hide","stopWatching","show","setTimeout","align","GroupLogViewComponent","activityLogService","groupId$","getData$","BehaviorSubject","showOverlaySubject$","debounceTime","showOverlay$","toggle","showOverlaySubscription","unsubscribe","getAllActivityLog","getLogColumns","rowData","disabled","showUserColumn","onMouseEnter","itemId","targetRef","contentRef","nativeElement","onMouseLeave","canCloseOverlay","closeOverlay","GroupLeaveComponent","GroupOverviewComponent","router","onLeave","isPublic","groupRefreshRequired","leftGroup","navigate","TypeFilter","GroupCompositionFilterComponent","Users","directChildren","Teams","Groups","Sessions","defaultValue","setFilter","selectedChildrenFilter","childrenFilters","findIndex","childrenFilter","selectedTypeFilter","Math","max","directChildrenTypeFilters","allDescendantsTypeFilters","typeFilter","onTypeFilterChanged","typeFilters","change","onChildrenFilterChanged","GroupNoPermissionComponent","GroupActionsService","updateGroup","changes","put","CodeActionsService","createNewCode","resp","code","removeCode","CodeTokenComponent","refreshCode","remove","ctx_r18","GroupJoinByCodeComponent","groupActionsService","codeActionsService","tooltip","codeLifetimeOptions","codeInfo","codeLifetimeHasChanged","previousValue","codeLifetime","valueInSeconds","currentValue","codeLifetimeControlValue","asDuration","selectedCodeLifetimeOption","getSelectedCodeLifetimeOption","generateNewCode","processing","expiresAt","codeExpiresAt","code_expires_at","refreshRequired","submitCodeLifetime","ms","hasCodeNotSet","newCodeLifetime","CodeLifetime","code_lifetime","changeCodeLifetime","optionValue","isUsableOnce","isInfinite","InvitationResult","CreateGroupInvitationsService","createInvitations","logins","Success","AlreadyInvited","NotFound","MessageComponent","msgs","severity","summary","detail","GroupInviteUsersComponent","createGroupInvitationsService","formBuilder","subscription","inviteForm","valueChanges","loginListChanged","setState","newState","enable","disable","newValue","split","displayResponse","successInvites","alreadyInvited","notFoundUsers","invalidInvites","messages","onInviteClicked","control","trim","self","indexOf","setValue","GroupUsersService","removeUsers","usersId","httpParams","errorText","some","error_text","RemoveGroupService","removeBatch","catchError","RemoveSubgroupService","parentGroupId","childGroupId","usersColumns","sortable","groupsColumns","nameUserCountColumns","descendantUsersColumns","descendantTeamsColumns","MemberListComponent","getGroupMembersService","getGroupChildrenService","getGroupDescendantsService","groupUsersService","removeSubgroupService","removeGroupService","defaultFilter","DataPager","fetch","pageSize","latestRow","getRows","onLoadMoreError","datapager","list$","removalInProgress$","currentFilter","getColumns","fetchRows","load","fetchMoreRows","getGroupChildrenWithSubgroupCount","children","child","getTeamDescendants","descendantTeams","descendantTeam","parentGroups","parents","parent","members","member","isUser","getGroupMembers","getUserDescendants","limit","fromId","descendantUsers","descendantUser","onFilterChange","compositionFilter","rows","unselectAll","selectedMemberIds","onRemoveGroup","getSelectedGroupChildCaptions","acceptIcon","removeGroupsOrSubgroups","onRemoveSubgroups","selectedGroupIds","displayGroupRemovalResponseToast","removedGroup","onRemove","g","isEmpty","reject","groupInfoDecoder","SearchGroupService","search","searchString","fromObject","toString","groups","notBase","searchPossibleSubgroups","AddSubGroupComponent","searchGroupService","addGroup","GroupCompositionComponent","groupWithPermissions","refreshGroupInfo","_","memberList","addedGroup","activity","itemFound","GroupUpdateService","AssociatedActivityComponent","getItemByIdService","searchItemService","allowedNewActivityTypes","activityChanges$","triggerChange","onChange","isExistingActivity","isNewActivity","string","urlArrayForItemRoute","rawItemRoute","errorIsHTTPForbidden","items","isActivityFound","writeValue","rootActivity","registerOnChange","fn","registerOnTouched","_fn","setRootActivity","activityType","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","decls","GroupDeleteService","GroupRemoveButtonComponent","groupDeleteService","id$","hasGroupChildren$","getGroupChildren","groupChild","onDeleteGroup","deleteGroup","deletionInProgress$","groupDeleted","navigateToMyGroups","GroupEditComponent","currentContentService","groupDataSource","groupUpdateService","createItemService","pendingChangesService","Validators","state$","mapStateData","readyData","initialFormData","resetFormWith","stopEditing","isDirty","groupForm","dirty","save","invalid","languageTag","asRootOfGroupId","concatMap","rootActivityId","root_activity_id","refreshNav","resetForm","refreshGroup","GroupLinksComponent","onButtonClick","GroupIndicatorComponent","managerDecoder","canManage","canGrantGroupAccess","canWatchMembers","GetGroupManagersService","getGroupManagers","options","RemoveGroupManagerService","managerId","ownManagerId","accumulator","seed","operate","scanInternals","arguments","removedManagers","removedManager","UpdateGroupManagersService","update","payload","can_manage","can_grant_group_access","can_watch_members","t","ManagerPermissionDialogComponent","sessionService","updateGroupManagersService","fb","comment","manager","form","emitEvent","userCaption","formatUser","onClose","close","updated","currentUserId","session$","canManageValue","acceptButtonStyleClass","managerPermissions","isUpdating","GetUserByLoginService","defaultPermissions","GroupCreateManagerService","GroupManagerAddComponent","getUserByLoginService","groupCreateManagerService","onClick","managers","added","errorIsHTTPNotFound","GroupManagerListComponent","getGroupManagersService","removeGroupManagerService","userService","latestManager","canManageAsText","getManagerLevel","fetchMoreData","getValue","find","removalInProgress","displayGroupManagerRemovalResponseToast","openPermissionsEditDialog","isPermissionsEditDialogOpened","dialogManager","closePermissionsEditDialog","onAdded","GroupManagersComponent","groupPermissionsDecoder","itemCorePermDecoder","itemSessionPermDecoder","itemEntryTimePermDecoder","grantedPermissionsDecoder","requiresExplicitEntry","permissions","sourceGroup","GrantedPermissionsService","descendants","PERMISSION_CAPTIONS","none","all","all_with_grant","enter","content","content_with_descendants","solution","solution_with_grant","info","answer","answer_with_grant","GroupPermissionCaptionPipe","transform","pure","GroupPermissionsComponent","GroupAccessComponent","grantedPermissionsService","permissionsRefresh$","refreshPermissions","GroupDetailsComponent","groupEdit","onGroupRefreshRequired","groupPathDecoder","groupPathResponseDecoder","GetGroupPathService","getGroupPath","raw","GROUP_BREADCRUMB_CAT","GroupByIdComponent","activatedRoute","paramMap","fetchGroupAtRoute","subscriptions","groupInfo","url","p","combineLatestWith","content$","isGroupInfo","page","s","groupRouteFromParams","isGroupRouteError","hasRedirected","solveMissingPathAttempt","navExtras","replaceUrl","CurrentUserComponent","userSessionService","location","userProfile$","onModify","userId","backUrl","window","origin","prepareExternalUrl","open","encodeURI","onProfileUpdated","removeEventListener","addEventListener","UserHeaderComponent","startUserWatching","PlatformSettingsComponent","localeService","onChangeLang","default_language","updateCurrentUser","UserComponent","getUserService","userRoute$","getForId","share","delay","userProfile","events","NavigationEnd","url$","getCurrentRoute","isGroupRoute","activeRoute$","pageTitle","breadcrumbs$","currentUserRoute","currentPageTitle","contentInfo","b","endsWith","routes","component","canDeactivate","PendingChangesGuard","GroupRoutingModule","RouterModule","GroupModule","imports","CommonModule","SharedComponentsModule","ReactiveFormsModule","FormsModule","ButtonModule","RippleModule","TooltipModule","OverlayPanelModule","DialogModule"],"sourceRoot":"webpack:///"}