{"version":3,"file":"426.6b1b481fa5b0e18b.js","mappings":"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","sources":["./src/app/shared/http-services/check-login.service.ts","./src/app/modules/lti/pages/lti/lti.component.html","./src/app/modules/lti/pages/lti/lti.component.ts","./src/app/modules/lti/lti-routing.module.ts","./src/app/modules/lti/lti.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { appConfig } from '../helpers/config';\r\nimport * as D from 'io-ts/Decoder';\r\nimport { decodeSnakeCase } from 'src/app/shared/operators/decode';\r\nimport { map } from 'rxjs/operators';\r\n\r\nconst dataDecoder = D.struct({\r\n  loginIdMatched: D.boolean,\r\n});\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CheckLoginService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  check(loginId: string): Observable<boolean> {\r\n    const params = new HttpParams({ fromObject: { login_id: loginId } });\r\n\r\n    return this.http\r\n      .get<unknown>(`${appConfig.apiUrl}/current-user/check-login-id`, { params })\r\n      .pipe(\r\n        decodeSnakeCase(dataDecoder),\r\n        map(data => data.loginIdMatched),\r\n      );\r\n  }\r\n\r\n}\r\n","<alg-loading *ngIf=\"(navigationData$ | async)?.isFetching\" size=\"large\"></alg-loading>\r\n<ng-container *ngIf=\"error$ | async as error\">\r\n  <alg-error\r\n    *ngIf=\"error === 'fetch_error'\"\r\n    i18n-message message=\"Unable to load this task. Either you have a connection issue or this task is not correctly configured. Please retry, if the problem persists, contact us.\"\r\n  ></alg-error>\r\n  <alg-error\r\n    *ngIf=\"error === 'no_child'\"\r\n    i18n-message message=\"This task is not correctly configured (chapter with tasks expected).\"\r\n  ></alg-error>\r\n  <alg-error\r\n    *ngIf=\"error === 'no_item_or_explicit_entry_with_no_result'\"\r\n    i18n-message message=\"This task is not correctly configured (item not found or explicit entry but no result)\"\r\n  ></alg-error>\r\n  <alg-error *ngIf=\"error === 'login_error'\">\r\n    <ng-container i18n>Something wrong occurred during the login process, please retry after closing this tab or window.</ng-container>\r\n    <br>\r\n    <ng-container i18n=\"@@contactUs\">If the problem persists, please contact us.</ng-container>\r\n  </alg-error>\r\n</ng-container>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { combineLatest, EMPTY, forkJoin, Observable } from 'rxjs';\r\nimport { catchError, filter, map, retry, shareReplay, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { ActivityNavTreeService } from 'src/app/core/services/navigation/item-nav-tree.service';\r\nimport { GetItemChildrenService, ItemChild } from 'src/app/modules/item/http-services/get-item-children.service';\r\nimport { GetItemPathService } from 'src/app/modules/item/http-services/get-item-path.service';\r\nimport { errorIsHTTPForbidden } from 'src/app/shared/helpers/errors';\r\nimport { isNotNull } from 'src/app/shared/helpers/null-undefined-predicates';\r\nimport {\r\n  appendUrlWithQuery,\r\n  fromPathKey,\r\n  getRedirectToSubPathAtInit,\r\n  setRedirectToSubPathAtInit,\r\n} from 'src/app/shared/helpers/redirect-to-sub-path-at-init';\r\nimport { boolToQueryParamValue, queryParamValueToBool } from 'src/app/shared/helpers/url';\r\nimport { CheckLoginService } from 'src/app/shared/http-services/check-login.service';\r\nimport { ResultActionsService } from 'src/app/shared/http-services/result-actions.service';\r\nimport { mapToFetchState, readyData } from 'src/app/shared/operators/state';\r\nimport { fullItemRoute } from 'src/app/shared/routing/item-route';\r\nimport { ItemRouter } from 'src/app/shared/routing/item-router';\r\nimport { LayoutService } from 'src/app/shared/services/layout.service';\r\nimport { UserSessionService } from 'src/app/shared/services/user-session.service';\r\nimport { LTIDataSource } from '../../services/lti-datasource.service';\r\n\r\nenum LTIError {\r\n  FetchError = 'fetch_error',\r\n  NoItemOrExplicitEntryWithNoResult = 'no_item_or_explicit_entry_with_no_result',\r\n  NoChild = 'no_child',\r\n  LoginError = 'login_error',\r\n}\r\nconst noItemOrExplicitEntryWithNoResultError = new Error(LTIError.NoItemOrExplicitEntryWithNoResult);\r\nconst noChildError = new Error(LTIError.NoChild);\r\nconst loginError = new Error(LTIError.LoginError);\r\n\r\nconst isRedirectionParam = 'is_redirection';\r\n// Only handle `?from_path` query when `?lti_use_from_path=1`, ignore it otherwise\r\nconst useFromPathKey = 'lti_use_from_path';\r\nconst loginIdParam = 'user_id';\r\n\r\n@Component({\r\n  selector: 'alg-lti',\r\n  templateUrl: './lti.component.html',\r\n  styleUrls: [ './lti.component.scss' ],\r\n})\r\nexport class LTIComponent implements OnDestroy {\r\n\r\n  private loginId$ = this.activatedRoute.queryParamMap.pipe(map(queryParams => queryParams.get(loginIdParam)));\r\n\r\n  private isRedirection$ = this.activatedRoute.queryParamMap.pipe(\r\n    map(queryParams => queryParamValueToBool(queryParams.get(isRedirectionParam))),\r\n  );\r\n\r\n  private fromPath$ = this.activatedRoute.queryParamMap.pipe(\r\n    map(queryParams => (queryParamValueToBool(queryParams.get(useFromPathKey)) ? queryParams.get(fromPathKey) : null)),\r\n  );\r\n\r\n  private contentId$ = this.activatedRoute.paramMap.pipe(\r\n    map(params => {\r\n      const contentId = params.get('contentId');\r\n      if (!contentId) throw new Error('unexpected: contentId should be defined');\r\n      return contentId;\r\n    }),\r\n  );\r\n\r\n  private isLoggedIn$ = this.loginId$.pipe(\r\n    switchMap(loginId => {\r\n      if (!loginId) throw loginError;\r\n      return this.checkLoginService.check(loginId);\r\n    }),\r\n    retry(3),\r\n    shareReplay(1),\r\n  );\r\n\r\n  readonly navigationData$ = combineLatest([ this.isLoggedIn$, this.isRedirection$ ]).pipe(\r\n    switchMap(([ isLoggedIn, isRedirection ]) => {\r\n      if (!isLoggedIn) {\r\n        if (isRedirection) throw loginError;\r\n        return EMPTY;\r\n      }\r\n      return this.contentId$;\r\n    }),\r\n    switchMap(contentId => this.getNavigationData(contentId)),\r\n    mapToFetchState(),\r\n    shareReplay(1),\r\n  );\r\n\r\n  readonly error$ = this.navigationData$.pipe(\r\n    map((state): LTIError | undefined => {\r\n      if (!state.isError) return undefined;\r\n      switch (state.error) {\r\n        case noChildError: return LTIError.NoChild;\r\n        case noItemOrExplicitEntryWithNoResultError: return LTIError.NoItemOrExplicitEntryWithNoResult;\r\n        case loginError: return LTIError.LoginError;\r\n        default: return LTIError.FetchError;\r\n      }\r\n    })\r\n  );\r\n\r\n  private subscriptions = [\r\n    combineLatest([\r\n      this.contentId$,\r\n      this.loginId$.pipe(filter(isNotNull)),\r\n    ]).subscribe(([ contentId, loginId ]) => {\r\n      setRedirectToSubPathAtInit(`/lti/${contentId}?${loginIdParam}=${loginId}&${isRedirectionParam}=${boolToQueryParamValue(true)}`);\r\n      this.activityNavTreeService.navigationNeighborsRestrictedToDescendantOfElementId = contentId;\r\n    }),\r\n\r\n    combineLatest([\r\n      this.isLoggedIn$.pipe(catchError(() => EMPTY)), // error is handled elsewhere\r\n      this.isRedirection$,\r\n    ]).pipe(\r\n      filter(([ isLoggedIn, isRedirection ]) => !isLoggedIn && !isRedirection),\r\n    ).subscribe(() => this.userSession.login()), // will redirect outside the platform\r\n\r\n    this.navigationData$\r\n      .pipe(readyData(), withLatestFrom(this.contentId$, this.fromPath$))\r\n      .subscribe(([{ firstChild, path, attemptId }, contentId, fromPath ]) => {\r\n        this.ltiDataSource.data = { contentId, attemptId };\r\n\r\n        const redirectUrl = getRedirectToSubPathAtInit();\r\n        if (!redirectUrl) throw new Error('redirect url should be set by now');\r\n        setRedirectToSubPathAtInit(appendUrlWithQuery(redirectUrl, useFromPathKey, boolToQueryParamValue(true)));\r\n\r\n        if (fromPath) {\r\n          void this.router.navigateByUrl(fromPath);\r\n          return;\r\n        }\r\n        const itemRoute = fullItemRoute('activity', firstChild.id, path, { parentAttemptId: attemptId });\r\n        this.itemRouter.navigateTo(itemRoute, { navExtras: { replaceUrl: true } });\r\n      }),\r\n  ];\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private itemRouter: ItemRouter,\r\n    private router: Router,\r\n    private userSession: UserSessionService,\r\n    private checkLoginService: CheckLoginService,\r\n    private layoutService: LayoutService,\r\n    private activityNavTreeService: ActivityNavTreeService,\r\n    private getItemPathService: GetItemPathService,\r\n    private resultActionsService: ResultActionsService,\r\n    private getItemChildrenService: GetItemChildrenService,\r\n    private ltiDataSource: LTIDataSource,\r\n  ) {\r\n    this.layoutService.configure({ fullFrameActive: true, showTopRightControls: false, canToggleFullFrame: false });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n  }\r\n\r\n  private getNavigationData(itemId: string): Observable<{ firstChild: ItemChild, path: string[], attemptId: string }> {\r\n    const path$ = this.getItemPathService.getItemPath(itemId).pipe(map(path => [ ...path, itemId ]), shareReplay(1));\r\n\r\n    const attemptId$ = path$.pipe(\r\n      switchMap(path => this.resultActionsService.startWithoutAttempt(path)),\r\n      catchError(err => {\r\n        // If error is http forbidden, it PROBABLY means the item requires explicit entry.\r\n        throw errorIsHTTPForbidden(err) ? noItemOrExplicitEntryWithNoResultError : err;\r\n      }),\r\n      shareReplay(1),\r\n    );\r\n\r\n    const firstChild$ = attemptId$.pipe(\r\n      switchMap(attemptId => this.getItemChildrenService.get(itemId, attemptId)),\r\n      map(([ firstChild ]) => {\r\n        if (!firstChild) throw noChildError;\r\n        return firstChild;\r\n      }),\r\n    );\r\n\r\n    return forkJoin({\r\n      attemptId: attemptId$,\r\n      path: path$,\r\n      firstChild: firstChild$,\r\n    });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { LTIComponent } from './pages/lti/lti.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n  ],\r\n  imports: [ RouterModule.forChild([\r\n    {\r\n      path: '',\r\n      pathMatch: 'full',\r\n      component: LTIComponent,\r\n    },\r\n  ]) ],\r\n  exports: [\r\n    RouterModule,\r\n  ],\r\n})\r\nexport class LTIRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LTIComponent } from './pages/lti/lti.component';\r\nimport { LTIRoutingModule } from './lti-routing.module';\r\nimport { SharedComponentsModule } from '../shared-components/shared-components.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LTIComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    LTIRoutingModule,\r\n  ],\r\n})\r\nexport class LTIModule { }\r\n"],"names":["dataDecoder","D","loginIdMatched","CheckLoginService","constructor","http","check","loginId","params","HttpParams","fromObject","login_id","this","get","appConfig","pipe","decodeSnakeCase","map","data","t","factory","i0","LTIError","noItemOrExplicitEntryWithNoResultError","Error","NoItemOrExplicitEntryWithNoResult","noChildError","NoChild","loginError","LoginError","isRedirectionParam","useFromPathKey","loginIdParam","LTIComponent","activatedRoute","itemRouter","router","userSession","checkLoginService","layoutService","activityNavTreeService","getItemPathService","resultActionsService","getItemChildrenService","ltiDataSource","queryParamMap","queryParams","queryParamValueToBool","fromPathKey","paramMap","contentId","loginId$","switchMap","retry","shareReplay","combineLatest","isLoggedIn$","isRedirection$","isLoggedIn","isRedirection","EMPTY","contentId$","getNavigationData","mapToFetchState","navigationData$","state","isError","error","FetchError","filter","isNotNull","subscribe","setRedirectToSubPathAtInit","boolToQueryParamValue","navigationNeighborsRestrictedToDescendantOfElementId","catchError","login","readyData","withLatestFrom","fromPath$","firstChild","path","attemptId","fromPath","redirectUrl","getRedirectToSubPathAtInit","appendUrlWithQuery","navigateByUrl","itemRoute","fullItemRoute","id","parentAttemptId","navigateTo","navExtras","replaceUrl","configure","fullFrameActive","showTopRightControls","canToggleFullFrame","ngOnDestroy","subscriptions","forEach","subscription","unsubscribe","itemId","path$","getItemPath","attemptId$","startWithoutAttempt","err","errorIsHTTPForbidden","firstChild$","forkJoin","selectors","$localize","LTIRoutingModule","RouterModule","pathMatch","component","LTIModule","CommonModule","SharedComponentsModule"],"sourceRoot":"webpack:///"}